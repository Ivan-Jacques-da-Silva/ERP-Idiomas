{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nEduManage is a comprehensive school management system designed specifically for language schools. The system provides role-based access control for different user types (admins, teachers, secretaries, financial staff, students, and developers) to manage educational operations including student enrollment, staff management, class scheduling, and course administration.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n\n**Framework**: React with TypeScript using Vite as the build tool\n- **Component Library**: Radix UI primitives with shadcn/ui components\n- **Styling**: Tailwind CSS with CSS custom properties for theming\n- **State Management**: TanStack Query (React Query) for server state management\n- **Routing**: Wouter for client-side routing\n- **Form Handling**: React Hook Form with Zod validation\n\nThe frontend follows a component-based architecture with:\n- Layout components for consistent page structure\n- Reusable UI components in the `components/ui` directory\n- Page components for different application views\n- Custom hooks for authentication and other shared logic\n\n## Backend Architecture\n\n**Framework**: Express.js with TypeScript\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Authentication**: Replit Auth with OpenID Connect (OIDC) integration\n- **Session Management**: Express sessions with PostgreSQL storage\n- **API Design**: RESTful API endpoints with proper error handling\n\nThe backend uses a service layer pattern with:\n- Database layer using Drizzle ORM for schema management and queries\n- Storage service layer for business logic abstraction\n- Route handlers for API endpoints\n- Middleware for authentication and request logging\n\n## Database Schema\n\nThe system uses a role-based access control model with the following core entities:\n- **Users**: Central user management with role-based permissions (developer, admin, secretary, financial, teacher, student)\n- **Units**: Physical locations or branches of the school\n- **Staff**: Employee records linked to user accounts\n- **Students**: Student records with enrollment information\n- **Courses**: Course definitions and curriculum\n- **Classes**: Specific class instances with scheduling\n- **Lessons**: Individual lesson records\n- **Sessions**: Authentication session storage (required for Replit Auth)\n\nThe schema uses PostgreSQL enums for role management and includes proper foreign key relationships between entities.\n\n## Authentication & Authorization\n\n**Authentication Provider**: Replit Auth with OIDC\n- Session-based authentication with secure HTTP-only cookies\n- Automatic user provisioning on first login\n- Role-based access control throughout the application\n- Protected routes requiring authentication\n\nDifferent user roles have different access levels:\n- **Developer**: Full system access for development purposes\n- **Admin**: Complete administrative access\n- **Secretary**: Student and enrollment management\n- **Financial**: Financial operations access\n- **Teacher**: Class and student management within assigned classes\n- **Student**: Limited access to personal academic information\n\n## Development Environment\n\n**Build System**: Vite with hot module replacement for development\n- TypeScript for type safety across the entire codebase\n- ESLint and Prettier for code quality (implied by project structure)\n- Drizzle Kit for database migrations and schema management\n- Development and production build configurations\n\nThe project uses a monorepo structure with shared types and schemas between frontend and backend through the `shared` directory.\n\n# External Dependencies\n\n## Database & Infrastructure\n- **Neon Database**: PostgreSQL database hosting with serverless architecture\n- **Replit Platform**: Development environment and deployment platform\n\n## Authentication & Session Management\n- **Replit Auth**: OIDC-based authentication service\n- **connect-pg-simple**: PostgreSQL session store for Express sessions\n\n## UI & Component Libraries\n- **Radix UI**: Headless UI primitives for accessible components\n- **shadcn/ui**: Pre-built component library built on Radix UI\n- **Tailwind CSS**: Utility-first CSS framework for styling\n- **Lucide React**: Icon library for consistent iconography\n\n## Development Tools\n- **Drizzle ORM**: Type-safe database toolkit with schema management\n- **TanStack Query**: Data fetching and caching library for React\n- **Zod**: Schema validation library for runtime type checking\n- **React Hook Form**: Form state management with validation\n\n## Build & Development\n- **Vite**: Fast build tool with hot module replacement\n- **TypeScript**: Static type checking for JavaScript\n- **Wouter**: Lightweight routing library for React","size_bytes":4773},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\", \"Inter\", \"system-ui\", \"sans-serif\"],\n        serif: [\"var(--font-serif)\", \"Georgia\", \"serif\"],\n        mono: [\"var(--font-mono)\", \"Menlo\", \"monospace\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2833},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Simple session configuration\napp.use(session({\n  secret: process.env.SESSION_SECRET || 'demo-secret-key-change-in-production',\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    httpOnly: true,\n    secure: false, // Set to true in production with HTTPS\n    maxAge: 24 * 60 * 60 * 1000 // 24 hours\n  }\n}));\n\nfunction log(message: string) {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour12: false,\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n  });\n\n  console.log(`${formattedTime} [express] ${message}`);\n}\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  const port = 5000;\n  server.listen(port, \"0.0.0.0\", () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2349},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"\nimport type { Express } from \"express\";\nimport express from \"express\";\nimport { createServer, type Server } from \"http\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport { storage } from \"./storage\";\nimport { \n  insertUnitSchema, \n  insertStaffSchema, \n  insertStudentSchema,\n  insertCourseSchema,\n  insertClassSchema,\n  insertLessonSchema,\n  insertBookSchema,\n  insertPermissionCategorySchema,\n  insertPermissionSchema,\n  insertRoleSchema,\n  insertUserSettingsSchema,\n  insertSupportTicketSchema,\n  insertSupportTicketResponseSchema,\n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\n\n\nconst updateRolePermissionsSchema = z.object({\n  permissionIds: z.array(z.string())\n});\n\n// Simple demo users for login\nconst demoUsers = [\n  { id: '1', email: 'admin@demo.com', password: 'admin123', firstName: 'Ivan', lastName: 'Silva', role: 'admin' },\n  { id: '2', email: 'teacher@demo.com', password: 'teacher123', firstName: 'Ivan', lastName: 'Silva', role: 'teacher' },\n  { id: '3', email: 'secretary@demo.com', password: 'secretary123', firstName: 'Ivan', lastName: 'Silva', role: 'secretary' },\n  { id: '4', email: 'student@demo.com', password: 'student123', firstName: 'Ivan', lastName: 'Silva', role: 'student' },\n];\n\n// Simple middleware to check if user is logged in\nconst isAuthenticated = (req: any, res: any, next: any) => {\n  if (req.session?.user) {\n    return next();\n  }\n  return res.status(401).json({ message: \"Unauthorized\" });\n};\n\n\n\n// Middleware para permitir apenas admin (novo sistema simplificado)\nconst requireAdminOnly = (req: any, res: any, next: any) => {\n  if (req.session?.user?.role === 'admin') {\n    return next();\n  }\n  return res.status(403).json({ message: \"Forbidden - Admin role required\" });\n};\n\n// Middleware to check if user has admin or secretary role\nconst requireAdminOrSecretary = (req: any, res: any, next: any) => {\n  if (req.session?.user?.role === 'admin' || req.session?.user?.role === 'secretary') {\n    return next();\n  }\n  return res.status(403).json({ message: \"Forbidden - Admin or Secretary role required\" });\n};\n\n// Configure multer for file uploads\nconst bookUploads = multer({\n  storage: multer.diskStorage({\n    destination: (req, file, cb) => {\n      cb(null, './uploads/books');\n    },\n    filename: (req, file, cb) => {\n      const bookId = req.params.id;\n      const ext = path.extname(file.originalname);\n      cb(null, `book_${bookId}_${Date.now()}${ext}`);\n    }\n  }),\n  fileFilter: (req, file, cb) => {\n    if (file.mimetype === 'application/pdf') {\n      cb(null, true);\n    } else {\n      cb(new Error('Only PDF files are allowed!') as any, false);\n    }\n  },\n  limits: {\n    fileSize: 50 * 1024 * 1024 // 50MB limit\n  }\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Serve uploaded files\n  app.use('/uploads', express.static('uploads'));\n\n  // Demo login endpoint\n  app.post('/api/auth/login', async (req, res) => {\n    const { email, password } = req.body;\n    \n    const user = demoUsers.find(u => u.email === email && u.password === password);\n    \n    if (!user) {\n      return res.status(401).json({ message: \"Credenciais inválidas\" });\n    }\n\n    // Store user in session\n    (req.session as any).user = {\n      id: user.id,\n      email: user.email,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      role: user.role\n    };\n\n    res.json({ user: (req.session as any).user });\n  });\n\n  // Get current user\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    res.json(req.session.user);\n  });\n\n  // Get effective permissions for current user based on their role\n  app.get('/api/auth/effective-permissions', isAuthenticated, async (req: any, res) => {\n    try {\n      const rolePermissions = await storage.getRolePermissionsByName(req.session.user.role);\n      // Return permissions in the format expected by the frontend\n      const permissions = rolePermissions.map(rp => rp.permission);\n      res.json({ permissions: permissions || [] });\n    } catch (error) {\n      console.error('Error getting effective permissions:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  // Logout endpoint\n  app.post('/api/auth/logout', (req, res) => {\n    req.session.destroy(() => {\n      res.json({ message: \"Logged out\" });\n    });\n  });\n\n  // Dashboard stats\n  app.get(\"/api/dashboard/stats\", isAuthenticated, async (req, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Units routes\n  app.get(\"/api/units\", isAuthenticated, async (req, res) => {\n    try {\n      const units = await storage.getUnits();\n      res.json(units);\n    } catch (error) {\n      console.error(\"Error fetching units:\", error);\n      res.status(500).json({ message: \"Failed to fetch units\" });\n    }\n  });\n\n  app.get(\"/api/units/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const unit = await storage.getUnit(req.params.id);\n      if (!unit) {\n        return res.status(404).json({ message: \"Unit not found\" });\n      }\n      res.json(unit);\n    } catch (error) {\n      console.error(\"Error fetching unit:\", error);\n      res.status(500).json({ message: \"Failed to fetch unit\" });\n    }\n  });\n\n  app.post(\"/api/units\", isAuthenticated, async (req, res) => {\n    try {\n      const unitData = insertUnitSchema.parse(req.body);\n      const unit = await storage.createUnit(unitData);\n      res.status(201).json(unit);\n    } catch (error) {\n      console.error(\"Error creating unit:\", error);\n      res.status(400).json({ message: \"Invalid unit data\" });\n    }\n  });\n\n  app.put(\"/api/units/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const unitData = insertUnitSchema.partial().parse(req.body);\n      const unit = await storage.updateUnit(req.params.id, unitData);\n      res.json(unit);\n    } catch (error) {\n      console.error(\"Error updating unit:\", error);\n      res.status(400).json({ message: \"Invalid unit data\" });\n    }\n  });\n\n  app.delete(\"/api/units/:id\", isAuthenticated, async (req, res) => {\n    try {\n      await storage.deleteUnit(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting unit:\", error);\n      res.status(500).json({ message: \"Failed to delete unit\" });\n    }\n  });\n\n  // Staff routes\n  app.get(\"/api/staff\", isAuthenticated, async (req, res) => {\n    try {\n      const staff = await storage.getStaff();\n      res.json(staff);\n    } catch (error) {\n      console.error(\"Error fetching staff:\", error);\n      res.status(500).json({ message: \"Failed to fetch staff\" });\n    }\n  });\n\n  app.get(\"/api/staff/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const staff = await storage.getStaffMember(req.params.id);\n      if (!staff) {\n        return res.status(404).json({ message: \"Staff member not found\" });\n      }\n      res.json(staff);\n    } catch (error) {\n      console.error(\"Error fetching staff member:\", error);\n      res.status(500).json({ message: \"Failed to fetch staff member\" });\n    }\n  });\n\n  app.post(\"/api/staff\", isAuthenticated, async (req, res) => {\n    try {\n      const staffData = insertStaffSchema.parse(req.body);\n      const staff = await storage.createStaff(staffData);\n      res.status(201).json(staff);\n    } catch (error) {\n      console.error(\"Error creating staff member:\", error);\n      res.status(400).json({ message: \"Invalid staff data\" });\n    }\n  });\n\n  app.put(\"/api/staff/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const staffData = insertStaffSchema.partial().parse(req.body);\n      const staff = await storage.updateStaff(req.params.id, staffData);\n      res.json(staff);\n    } catch (error) {\n      console.error(\"Error updating staff member:\", error);\n      res.status(400).json({ message: \"Invalid staff data\" });\n    }\n  });\n\n  app.delete(\"/api/staff/:id\", isAuthenticated, async (req, res) => {\n    try {\n      await storage.deleteStaff(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting staff member:\", error);\n      res.status(500).json({ message: \"Failed to delete staff member\" });\n    }\n  });\n\n  // Students routes\n  app.get(\"/api/students\", isAuthenticated, async (req, res) => {\n    try {\n      const students = await storage.getStudents();\n      res.json(students);\n    } catch (error) {\n      console.error(\"Error fetching students:\", error);\n      res.status(500).json({ message: \"Failed to fetch students\" });\n    }\n  });\n\n  app.get(\"/api/students/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const student = await storage.getStudent(req.params.id);\n      if (!student) {\n        return res.status(404).json({ message: \"Student not found\" });\n      }\n      res.json(student);\n    } catch (error) {\n      console.error(\"Error fetching student:\", error);\n      res.status(500).json({ message: \"Failed to fetch student\" });\n    }\n  });\n\n  app.post(\"/api/students\", isAuthenticated, async (req, res) => {\n    try {\n      const studentData = insertStudentSchema.parse(req.body);\n      const student = await storage.createStudent(studentData);\n      res.status(201).json(student);\n    } catch (error) {\n      console.error(\"Error creating student:\", error);\n      res.status(400).json({ message: \"Invalid student data\" });\n    }\n  });\n\n  app.put(\"/api/students/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const studentData = insertStudentSchema.partial().parse(req.body);\n      const student = await storage.updateStudent(req.params.id, studentData);\n      res.json(student);\n    } catch (error) {\n      console.error(\"Error updating student:\", error);\n      res.status(400).json({ message: \"Invalid student data\" });\n    }\n  });\n\n  app.delete(\"/api/students/:id\", isAuthenticated, async (req, res) => {\n    try {\n      await storage.deleteStudent(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting student:\", error);\n      res.status(500).json({ message: \"Failed to delete student\" });\n    }\n  });\n\n  // Courses routes\n  app.get(\"/api/courses\", isAuthenticated, async (req, res) => {\n    try {\n      const courses = await storage.getCourses();\n      res.json(courses);\n    } catch (error) {\n      console.error(\"Error fetching courses:\", error);\n      res.status(500).json({ message: \"Failed to fetch courses\" });\n    }\n  });\n\n  app.get(\"/api/courses/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const course = await storage.getCourse(req.params.id);\n      if (!course) {\n        return res.status(404).json({ message: \"Course not found\" });\n      }\n      res.json(course);\n    } catch (error) {\n      console.error(\"Error fetching course:\", error);\n      res.status(500).json({ message: \"Failed to fetch course\" });\n    }\n  });\n\n  app.post(\"/api/courses\", isAuthenticated, async (req, res) => {\n    try {\n      const courseData = insertCourseSchema.parse(req.body);\n      const course = await storage.createCourse(courseData);\n      res.status(201).json(course);\n    } catch (error) {\n      console.error(\"Error creating course:\", error);\n      res.status(400).json({ message: \"Invalid course data\" });\n    }\n  });\n\n  app.put(\"/api/courses/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const courseData = insertCourseSchema.partial().parse(req.body);\n      const course = await storage.updateCourse(req.params.id, courseData);\n      res.json(course);\n    } catch (error) {\n      console.error(\"Error updating course:\", error);\n      res.status(400).json({ message: \"Invalid course data\" });\n    }\n  });\n\n  app.delete(\"/api/courses/:id\", isAuthenticated, async (req, res) => {\n    try {\n      await storage.deleteCourse(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting course:\", error);\n      res.status(500).json({ message: \"Failed to delete course\" });\n    }\n  });\n\n  // Books routes\n  app.get(\"/api/books\", isAuthenticated, async (req, res) => {\n    try {\n      const books = await storage.getBooks();\n      res.json(books);\n    } catch (error) {\n      console.error(\"Error fetching books:\", error);\n      res.status(500).json({ message: \"Failed to fetch books\" });\n    }\n  });\n\n  app.get(\"/api/books/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const book = await storage.getBook(req.params.id);\n      if (!book) {\n        return res.status(404).json({ message: \"Book not found\" });\n      }\n      res.json(book);\n    } catch (error) {\n      console.error(\"Error fetching book:\", error);\n      res.status(500).json({ message: \"Failed to fetch book\" });\n    }\n  });\n\n  app.post(\"/api/books\", isAuthenticated, async (req, res) => {\n    try {\n      const bookData = insertBookSchema.parse(req.body);\n      const book = await storage.createBook(bookData);\n      res.status(201).json(book);\n    } catch (error) {\n      console.error(\"Error creating book:\", error);\n      res.status(400).json({ message: \"Invalid book data\" });\n    }\n  });\n\n  app.put(\"/api/books/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const bookData = insertBookSchema.partial().parse(req.body);\n      const book = await storage.updateBook(req.params.id, bookData);\n      res.json(book);\n    } catch (error) {\n      console.error(\"Error updating book:\", error);\n      res.status(400).json({ message: \"Invalid book data\" });\n    }\n  });\n\n  app.delete(\"/api/books/:id\", isAuthenticated, async (req, res) => {\n    try {\n      await storage.deleteBook(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting book:\", error);\n      res.status(500).json({ message: \"Failed to delete book\" });\n    }\n  });\n\n  // PDF upload route for books\n  app.post(\"/api/books/:id/upload\", isAuthenticated, bookUploads.single('pdf'), async (req, res) => {\n    try {\n      const bookId = req.params.id;\n      const file = req.file;\n\n      if (!file) {\n        return res.status(400).json({ message: \"No PDF file provided\" });\n      }\n\n      // Check if book exists\n      const book = await storage.getBook(bookId);\n      if (!book) {\n        return res.status(404).json({ message: \"Book not found\" });\n      }\n\n      // Update book with new PDF URL\n      const pdfUrl = `/uploads/books/${file.filename}`;\n      const updatedBook = await storage.updateBook(bookId, { pdfUrl });\n\n      res.json({\n        message: \"PDF uploaded successfully\",\n        book: updatedBook,\n        fileInfo: {\n          filename: file.filename,\n          originalName: file.originalname,\n          size: file.size,\n          url: pdfUrl\n        }\n      });\n    } catch (error: any) {\n      console.error(\"Error uploading PDF:\", error);\n      if (error.message === 'Only PDF files are allowed!') {\n        return res.status(400).json({ message: \"Only PDF files are allowed\" });\n      }\n      res.status(500).json({ message: \"Failed to upload PDF file\" });\n    }\n  });\n\n  // Classes routes\n  app.get(\"/api/classes\", isAuthenticated, async (req, res) => {\n    try {\n      const classes = await storage.getClasses();\n      res.json(classes);\n    } catch (error) {\n      console.error(\"Error fetching classes:\", error);\n      res.status(500).json({ message: \"Failed to fetch classes\" });\n    }\n  });\n\n  app.get(\"/api/classes/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const classItem = await storage.getClass(req.params.id);\n      if (!classItem) {\n        return res.status(404).json({ message: \"Class not found\" });\n      }\n      res.json(classItem);\n    } catch (error) {\n      console.error(\"Error fetching class:\", error);\n      res.status(500).json({ message: \"Failed to fetch class\" });\n    }\n  });\n\n  app.get(\"/api/classes/teacher/:teacherId\", isAuthenticated, async (req, res) => {\n    try {\n      const classes = await storage.getClassesByTeacher(req.params.teacherId);\n      res.json(classes);\n    } catch (error) {\n      console.error(\"Error fetching teacher classes:\", error);\n      res.status(500).json({ message: \"Failed to fetch teacher classes\" });\n    }\n  });\n\n  app.post(\"/api/classes\", isAuthenticated, requireAdminOrSecretary, async (req, res) => {\n    try {\n      const classData = insertClassSchema.parse(req.body);\n      const newClass = await storage.createClass(classData);\n      res.status(201).json(newClass);\n    } catch (error) {\n      console.error(\"Error creating class:\", error);\n      res.status(400).json({ message: \"Invalid class data\" });\n    }\n  });\n\n  app.put(\"/api/classes/:id\", isAuthenticated, requireAdminOrSecretary, async (req, res) => {\n    try {\n      const classData = insertClassSchema.partial().parse(req.body);\n      const updatedClass = await storage.updateClass(req.params.id, classData);\n      res.json(updatedClass);\n    } catch (error) {\n      console.error(\"Error updating class:\", error);\n      res.status(400).json({ message: \"Invalid class data\" });\n    }\n  });\n\n  app.delete(\"/api/classes/:id\", isAuthenticated, requireAdminOrSecretary, async (req, res) => {\n    try {\n      await storage.deleteClass(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting class:\", error);\n      res.status(500).json({ message: \"Failed to delete class\" });\n    }\n  });\n\n  // Lessons/Schedule routes\n  app.get(\"/api/lessons\", isAuthenticated, async (req, res) => {\n    try {\n      const lessons = await storage.getLessons();\n      res.json(lessons);\n    } catch (error) {\n      console.error(\"Error fetching lessons:\", error);\n      res.status(500).json({ message: \"Failed to fetch lessons\" });\n    }\n  });\n\n  app.get(\"/api/lessons/today\", isAuthenticated, async (req, res) => {\n    try {\n      const lessons = await storage.getTodaysLessons();\n      res.json(lessons);\n    } catch (error) {\n      console.error(\"Error fetching today's lessons:\", error);\n      res.status(500).json({ message: \"Failed to fetch today's lessons\" });\n    }\n  });\n\n  app.get(\"/api/lessons/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const lesson = await storage.getLesson(req.params.id);\n      if (!lesson) {\n        return res.status(404).json({ message: \"Lesson not found\" });\n      }\n      res.json(lesson);\n    } catch (error) {\n      console.error(\"Error fetching lesson:\", error);\n      res.status(500).json({ message: \"Failed to fetch lesson\" });\n    }\n  });\n\n  app.get(\"/api/lessons/class/:classId\", isAuthenticated, async (req, res) => {\n    try {\n      const lessons = await storage.getLessonsByClass(req.params.classId);\n      res.json(lessons);\n    } catch (error) {\n      console.error(\"Error fetching class lessons:\", error);\n      res.status(500).json({ message: \"Failed to fetch class lessons\" });\n    }\n  });\n\n  app.get(\"/api/lessons/teacher/:teacherId\", isAuthenticated, async (req, res) => {\n    try {\n      const lessons = await storage.getLessonsByTeacher(req.params.teacherId);\n      res.json(lessons);\n    } catch (error) {\n      console.error(\"Error fetching teacher lessons:\", error);\n      res.status(500).json({ message: \"Failed to fetch teacher lessons\" });\n    }\n  });\n\n  app.post(\"/api/lessons\", isAuthenticated, async (req, res) => {\n    try {\n      const lessonData = insertLessonSchema.parse(req.body);\n      const lesson = await storage.createLesson(lessonData);\n      res.status(201).json(lesson);\n    } catch (error) {\n      console.error(\"Error creating lesson:\", error);\n      res.status(400).json({ message: \"Invalid lesson data\" });\n    }\n  });\n\n  app.put(\"/api/lessons/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const lessonData = insertLessonSchema.partial().parse(req.body);\n      const lesson = await storage.updateLesson(req.params.id, lessonData);\n      res.json(lesson);\n    } catch (error) {\n      console.error(\"Error updating lesson:\", error);\n      res.status(400).json({ message: \"Invalid lesson data\" });\n    }\n  });\n\n  app.delete(\"/api/lessons/:id\", isAuthenticated, async (req, res) => {\n    try {\n      await storage.deleteLesson(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting lesson:\", error);\n      res.status(500).json({ message: \"Failed to delete lesson\" });\n    }\n  });\n\n  // Check lesson conflicts endpoint\n  app.post(\"/api/lessons/check-conflicts\", isAuthenticated, async (req, res) => {\n    try {\n      const { teacherId, date, startTime, endTime, excludeLessonId } = req.body;\n      \n      if (!teacherId || !date || !startTime || !endTime) {\n        return res.status(400).json({ message: \"Missing required fields: teacherId, date, startTime, endTime\" });\n      }\n\n      const conflictCheck = await storage.checkLessonConflicts(\n        teacherId,\n        new Date(date),\n        startTime,\n        endTime,\n        excludeLessonId\n      );\n\n      res.json(conflictCheck);\n    } catch (error) {\n      console.error(\"Error checking lesson conflicts:\", error);\n      res.status(500).json({ message: \"Failed to check lesson conflicts\" });\n    }\n  });\n\n  // Schedule/Agenda routes para administração\n  app.get(\"/api/schedule/admin\", isAuthenticated, requireAdminOrSecretary, async (req, res) => {\n    try {\n      // Busca todas as turmas com horários para agenda administrativa\n      const classes = await storage.getClasses();\n      \n      // Formata os dados para agenda (pode ter múltiplas turmas no mesmo horário)\n      const scheduleData = classes.map(cls => ({\n        id: cls.id,\n        title: cls.name,\n        teacher: `${cls.teacher.firstName} ${cls.teacher.lastName}`,\n        teacherId: cls.teacher.id,\n        book: cls.book.name,\n        bookColor: cls.book.color,\n        dayOfWeek: cls.dayOfWeek,\n        startTime: cls.startTime,\n        endTime: cls.endTime,\n        room: cls.room,\n        unit: cls.unit.name,\n        currentDay: cls.currentDay,\n        totalDays: cls.book.totalDays\n      }));\n      \n      res.json(scheduleData);\n    } catch (error) {\n      console.error(\"Error fetching admin schedule:\", error);\n      res.status(500).json({ message: \"Failed to fetch admin schedule\" });\n    }\n  });\n\n  app.get(\"/api/classes/teacher/:teacherId\", isAuthenticated, async (req, res) => {\n    try {\n      // Busca as turmas do professor específico\n      const classes = await storage.getClassesByTeacher(req.params.teacherId);\n      \n      const classesData = classes.map(cls => ({\n        id: cls.id,\n        name: cls.name,\n        book: {\n          id: cls.book.id,\n          name: cls.book.name,\n          color: cls.book.color,\n          totalDays: cls.book.totalDays\n        },\n        schedule: cls.schedule,\n        dayOfWeek: cls.dayOfWeek,\n        startTime: cls.startTime,\n        endTime: cls.endTime,\n        room: cls.room,\n        maxStudents: cls.maxStudents,\n        currentStudents: cls.currentStudents,\n        currentDay: cls.currentDay,\n        unit: cls.unit\n      }));\n      \n      res.json(classesData);\n    } catch (error) {\n      console.error(\"Error fetching teacher classes:\", error);\n      res.status(500).json({ message: \"Failed to fetch teacher classes\" });\n    }\n  });\n\n  app.get(\"/api/schedule/teacher/:teacherId\", isAuthenticated, async (req, res) => {\n    try {\n      // Busca as turmas do professor específico (sem conflito de horário)\n      const classes = await storage.getClassesByTeacher(req.params.teacherId);\n      \n      const scheduleData = classes.map(cls => ({\n        id: cls.id,\n        title: cls.name,\n        book: cls.book.name,\n        bookColor: cls.book.color,\n        dayOfWeek: cls.dayOfWeek,\n        startTime: cls.startTime,\n        endTime: cls.endTime,\n        room: cls.room,\n        unit: cls.unit.name,\n        currentDay: cls.currentDay,\n        totalDays: cls.book.totalDays,\n        studentsCount: cls.currentStudents,\n        maxStudents: cls.maxStudents\n      }));\n      \n      res.json(scheduleData);\n    } catch (error) {\n      console.error(\"Error fetching teacher schedule:\", error);\n      res.status(500).json({ message: \"Failed to fetch teacher schedule\" });\n    }\n  });\n\n\n  // Permissions routes - read-only catalog for UI\n  // Permission Categories routes\n  app.get(\"/api/permission-categories\", isAuthenticated, requireAdminOnly, async (req, res) => {\n    try {\n      const categories = await storage.getPermissionCategories();\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Error fetching permission categories:\", error);\n      res.status(500).json({ message: \"Failed to fetch permission categories\" });\n    }\n  });\n\n  app.get(\"/api/permission-categories/:id\", isAuthenticated, requireAdminOnly, async (req, res) => {\n    try {\n      const category = await storage.getPermissionCategory(req.params.id);\n      if (!category) {\n        return res.status(404).json({ message: \"Permission category not found\" });\n      }\n      res.json(category);\n    } catch (error) {\n      console.error(\"Error fetching permission category:\", error);\n      res.status(500).json({ message: \"Failed to fetch permission category\" });\n    }\n  });\n\n  app.post(\"/api/permission-categories\", isAuthenticated, requireAdminOnly, async (req, res) => {\n    try {\n      const categoryData = insertPermissionCategorySchema.parse(req.body);\n      const category = await storage.createPermissionCategory(categoryData);\n      res.status(201).json(category);\n    } catch (error) {\n      console.error(\"Error creating permission category:\", error);\n      if (error instanceof Error) {\n        return res.status(400).json({ message: error.message });\n      }\n      res.status(500).json({ message: \"Failed to create permission category\" });\n    }\n  });\n\n  app.put(\"/api/permission-categories/:id\", isAuthenticated, requireAdminOnly, async (req, res) => {\n    try {\n      const categoryData = insertPermissionCategorySchema.partial().parse(req.body);\n      const category = await storage.updatePermissionCategory(req.params.id, categoryData);\n      res.json(category);\n    } catch (error) {\n      console.error(\"Error updating permission category:\", error);\n      if (error instanceof Error) {\n        return res.status(400).json({ message: error.message });\n      }\n      res.status(500).json({ message: \"Failed to update permission category\" });\n    }\n  });\n\n  app.delete(\"/api/permission-categories/:id\", isAuthenticated, requireAdminOnly, async (req, res) => {\n    try {\n      await storage.deletePermissionCategory(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting permission category:\", error);\n      if (error instanceof Error) {\n        return res.status(400).json({ message: error.message });\n      }\n      res.status(500).json({ message: \"Failed to delete permission category\" });\n    }\n  });\n\n  app.get(\"/api/permissions\", isAuthenticated, requireAdminOnly, async (req, res) => {\n    try {\n      const permissions = await storage.getPermissions();\n      res.json(permissions);\n    } catch (error) {\n      console.error(\"Error fetching permissions:\", error);\n      res.status(500).json({ message: \"Failed to fetch permissions\" });\n    }\n  });\n\n  app.get(\"/api/permissions/:id\", isAuthenticated, requireAdminOnly, async (req, res) => {\n    try {\n      const permission = await storage.getPermission(req.params.id);\n      if (!permission) {\n        return res.status(404).json({ message: \"Permission not found\" });\n      }\n      res.json(permission);\n    } catch (error) {\n      console.error(\"Error fetching permission:\", error);\n      res.status(500).json({ message: \"Failed to fetch permission\" });\n    }\n  });\n\n  app.post(\"/api/permissions\", isAuthenticated, requireAdminOnly, async (req, res) => {\n    try {\n      const permissionData = insertPermissionSchema.parse(req.body);\n      const permission = await storage.createPermission(permissionData);\n      res.status(201).json(permission);\n    } catch (error) {\n      console.error(\"Error creating permission:\", error);\n      if (error instanceof Error) {\n        return res.status(400).json({ message: error.message });\n      }\n      res.status(500).json({ message: \"Failed to create permission\" });\n    }\n  });\n\n  app.put(\"/api/permissions/:id\", isAuthenticated, requireAdminOnly, async (req, res) => {\n    try {\n      const permissionData = insertPermissionSchema.partial().parse(req.body);\n      const permission = await storage.updatePermission(req.params.id, permissionData);\n      res.json(permission);\n    } catch (error) {\n      console.error(\"Error updating permission:\", error);\n      if (error instanceof Error) {\n        return res.status(400).json({ message: error.message });\n      }\n      res.status(500).json({ message: \"Failed to update permission\" });\n    }\n  });\n\n  app.delete(\"/api/permissions/:id\", isAuthenticated, requireAdminOnly, async (req, res) => {\n    try {\n      await storage.deletePermission(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting permission:\", error);\n      if (error instanceof Error) {\n        return res.status(400).json({ message: error.message });\n      }\n      res.status(500).json({ message: \"Failed to delete permission\" });\n    }\n  });\n\n\n  // Roles routes - manage system roles\n  app.get(\"/api/roles\", isAuthenticated, requireAdminOnly, async (req, res) => {\n    try {\n      const roles = await storage.getRoles();\n      res.json(roles);\n    } catch (error) {\n      console.error(\"Error fetching roles:\", error);\n      res.status(500).json({ message: \"Failed to fetch roles\" });\n    }\n  });\n\n  app.get(\"/api/roles/:id\", isAuthenticated, requireAdminOnly, async (req, res) => {\n    try {\n      const role = await storage.getRole(req.params.id);\n      if (!role) {\n        return res.status(404).json({ message: \"Role not found\" });\n      }\n      res.json(role);\n    } catch (error) {\n      console.error(\"Error fetching role:\", error);\n      res.status(500).json({ message: \"Failed to fetch role\" });\n    }\n  });\n\n  app.get(\"/api/roles/:id/permissions\", isAuthenticated, requireAdminOnly, async (req, res) => {\n    try {\n      const roleWithPermissions = await storage.getRoleWithPermissions(req.params.id);\n      if (!roleWithPermissions) {\n        return res.status(404).json({ message: \"Role not found\" });\n      }\n      res.json(roleWithPermissions);\n    } catch (error) {\n      console.error(\"Error fetching role permissions:\", error);\n      res.status(500).json({ message: \"Failed to fetch role permissions\" });\n    }\n  });\n\n  app.put(\"/api/roles/:id/permissions\", isAuthenticated, requireAdminOnly, async (req, res) => {\n    try {\n      const { permissionIds } = updateRolePermissionsSchema.parse(req.body);\n      \n      // Validate that all permission IDs exist\n      if (permissionIds.length > 0) {\n        const allPermissions = await storage.getPermissions();\n        const validPermissionIds = allPermissions.map(p => p.id);\n        const invalidIds = permissionIds.filter(id => !validPermissionIds.includes(id));\n        \n        if (invalidIds.length > 0) {\n          return res.status(400).json({ \n            message: \"Invalid permission IDs provided\", \n            invalidIds \n          });\n        }\n      }\n      \n      await storage.updateRolePermissions(req.params.id, permissionIds);\n      \n      // Return updated role permissions\n      const updatedRolePermissions = await storage.getRoleWithPermissions(req.params.id);\n      res.json(updatedRolePermissions);\n    } catch (error: any) {\n      console.error(\"Error updating role permissions:\", error);\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid request data\", errors: error.errors });\n      }\n      if (error.message?.includes(\"not found\")) {\n        return res.status(404).json({ message: \"Role not found\" });\n      }\n      res.status(500).json({ message: \"Failed to update role permissions\" });\n    }\n  });\n\n  app.post(\"/api/roles\", isAuthenticated, requireAdminOnly, async (req, res) => {\n    try {\n      // Create safe schema that excludes isSystemRole to prevent privilege escalation\n      const safeRoleData = insertRoleSchema.omit({ isSystemRole: true }).parse(req.body);\n      \n      // Force isSystemRole to false for all custom roles created via API\n      const roleData = {\n        ...safeRoleData,\n        isSystemRole: false\n      };\n      \n      const role = await storage.createRole(roleData);\n      res.status(201).json(role);\n    } catch (error: any) {\n      console.error(\"Error creating role:\", error);\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid request data\", errors: error.errors });\n      }\n      if (error.message?.includes(\"already exists\")) {\n        return res.status(409).json({ message: error.message });\n      }\n      res.status(500).json({ message: \"Failed to create role\" });\n    }\n  });\n\n  app.put(\"/api/roles/:id\", isAuthenticated, requireAdminOnly, async (req, res) => {\n    try {\n      // Create safe schema that excludes isSystemRole to prevent system role modification\n      const safeRoleData = insertRoleSchema.omit({ isSystemRole: true }).partial().parse(req.body);\n      \n      const role = await storage.updateRole(req.params.id, safeRoleData);\n      res.json(role);\n    } catch (error: any) {\n      console.error(\"Error updating role:\", error);\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid request data\", errors: error.errors });\n      }\n      if (error.message?.includes(\"not found\")) {\n        return res.status(404).json({ message: \"Role not found\" });\n      }\n      if (error.message?.includes(\"Cannot modify\") || error.message?.includes(\"system roles\")) {\n        return res.status(403).json({ message: \"Cannot modify system roles\" });\n      }\n      res.status(500).json({ message: \"Failed to update role\" });\n    }\n  });\n\n  app.delete(\"/api/roles/:id\", isAuthenticated, requireAdminOnly, async (req, res) => {\n    try {\n      await storage.deleteRole(req.params.id);\n      res.status(204).send();\n    } catch (error: any) {\n      console.error(\"Error deleting role:\", error);\n      if (error.message?.includes(\"not found\")) {\n        return res.status(404).json({ message: \"Role not found\" });\n      }\n      if (error.message?.includes(\"Cannot delete system roles\")) {\n        return res.status(403).json({ message: \"Cannot delete system roles\" });\n      }\n      res.status(500).json({ message: \"Failed to delete role\" });\n    }\n  });\n\n  // User Settings routes\n  app.get(\"/api/users/:id/settings\", isAuthenticated, async (req: any, res) => {\n    try {\n      // Users can access their own settings, admin can access anyone's\n      const currentUserId = req.session.user.id;\n      const requestedUserId = req.params.id;\n      const userRole = req.session.user.role;\n      \n      if (currentUserId !== requestedUserId && userRole !== 'admin') {\n        return res.status(403).json({ message: \"Forbidden - Can only access your own settings\" });\n      }\n      \n      const settings = await storage.getUserSettings(requestedUserId);\n      res.json(settings || {});\n    } catch (error) {\n      console.error(\"Error fetching user settings:\", error);\n      res.status(500).json({ message: \"Failed to fetch user settings\" });\n    }\n  });\n\n  app.put(\"/api/users/:id/settings\", isAuthenticated, async (req: any, res) => {\n    try {\n      // Users can update their own settings, admin can update anyone's\n      const currentUserId = req.session.user.id;\n      const requestedUserId = req.params.id;\n      const userRole = req.session.user.role;\n      \n      if (currentUserId !== requestedUserId && userRole !== 'admin') {\n        return res.status(403).json({ message: \"Forbidden - Can only update your own settings\" });\n      }\n      \n      const settingsData = insertUserSettingsSchema.partial().parse(req.body);\n      const updatedSettings = await storage.updateUserSettings(requestedUserId, settingsData);\n      res.json(updatedSettings);\n    } catch (error: any) {\n      console.error(\"Error updating user settings:\", error);\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid request data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update user settings\" });\n    }\n  });\n\n  // Support Tickets routes\n  app.get(\"/api/support/tickets\", isAuthenticated, async (req: any, res) => {\n    try {\n      const currentUserId = req.session.user.id;\n      const userRole = req.session.user.role;\n      \n      // Admin can see all tickets, others can see only their own\n      let tickets;\n      if (userRole === 'admin') {\n        tickets = await storage.getSupportTickets();\n      } else {\n        tickets = await storage.getSupportTicketsByUser(currentUserId);\n      }\n      \n      res.json(tickets);\n    } catch (error) {\n      console.error(\"Error fetching support tickets:\", error);\n      res.status(500).json({ message: \"Failed to fetch support tickets\" });\n    }\n  });\n\n  app.get(\"/api/support/tickets/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const currentUserId = req.session.user.id;\n      const userRole = req.session.user.role;\n      \n      const ticket = await storage.getSupportTicket(req.params.id);\n      if (!ticket) {\n        return res.status(404).json({ message: \"Ticket not found\" });\n      }\n      \n      // Users can only access their own tickets, admin can access all\n      if (ticket.userId !== currentUserId && userRole !== 'admin') {\n        return res.status(403).json({ message: \"Forbidden - Can only access your own tickets\" });\n      }\n      \n      res.json(ticket);\n    } catch (error) {\n      console.error(\"Error fetching support ticket:\", error);\n      res.status(500).json({ message: \"Failed to fetch support ticket\" });\n    }\n  });\n\n  app.post(\"/api/support/tickets\", isAuthenticated, async (req: any, res) => {\n    try {\n      const currentUserId = req.session.user.id;\n      const ticketData = insertSupportTicketSchema.parse(req.body);\n      \n      const newTicket = await storage.createSupportTicket({\n        ...ticketData,\n        userId: currentUserId,\n      });\n      \n      // TODO: Send email notification to support team\n      // This would be implemented server-side using environment variables:\n      // if (process.env.SUPPORT_EMAIL) {\n      //   await sendEmail({\n      //     to: process.env.SUPPORT_EMAIL,\n      //     subject: `Novo ticket: ${newTicket.title}`,\n      //     body: ticketData.description,\n      //     priority: ticketData.priority,\n      //   });\n      // }\n      \n      res.status(201).json(newTicket);\n    } catch (error: any) {\n      console.error(\"Error creating support ticket:\", error);\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid request data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create support ticket\" });\n    }\n  });\n\n  app.put(\"/api/support/tickets/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const currentUserId = req.session.user.id;\n      const userRole = req.session.user.role;\n      \n      // Only admin can update ticket status and assignment\n      if (userRole !== 'admin') {\n        return res.status(403).json({ message: \"Forbidden - Only admin can update tickets\" });\n      }\n      \n      const ticketData = insertSupportTicketSchema.partial().parse(req.body);\n      const updatedTicket = await storage.updateSupportTicket(req.params.id, ticketData);\n      res.json(updatedTicket);\n    } catch (error: any) {\n      console.error(\"Error updating support ticket:\", error);\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid request data\", errors: error.errors });\n      }\n      if (error.message?.includes(\"not found\")) {\n        return res.status(404).json({ message: \"Ticket not found\" });\n      }\n      res.status(500).json({ message: \"Failed to update support ticket\" });\n    }\n  });\n\n  app.post(\"/api/support/tickets/:ticketId/responses\", isAuthenticated, async (req: any, res) => {\n    try {\n      const currentUserId = req.session.user.id;\n      const userRole = req.session.user.role;\n      const ticketId = req.params.ticketId;\n      \n      // Check if ticket exists and user has access\n      const ticket = await storage.getSupportTicket(ticketId);\n      if (!ticket) {\n        return res.status(404).json({ message: \"Ticket not found\" });\n      }\n      \n      if (ticket.userId !== currentUserId && userRole !== 'admin') {\n        return res.status(403).json({ message: \"Forbidden - Can only respond to your own tickets\" });\n      }\n      \n      const responseData = insertSupportTicketResponseSchema.parse(req.body);\n      const newResponse = await storage.createSupportTicketResponse({\n        ...responseData,\n        ticketId,\n        userId: currentUserId,\n        isFromSupport: userRole === 'admin',\n      });\n      \n      res.status(201).json(newResponse);\n    } catch (error: any) {\n      console.error(\"Error creating support ticket response:\", error);\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid request data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create support ticket response\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":41377},"server/storage.ts":{"content":"import type {\n  InsertUnit,\n  InsertStaff,\n  InsertStudent,\n  InsertCourse,\n  InsertClass,\n  InsertLesson,\n  InsertBook,\n  InsertPermission,\n  InsertPermissionCategory,\n  InsertRole,\n  InsertRolePermission,\n  InsertUserPermission,\n  InsertUserSettings,\n  InsertSupportTicket,\n  InsertSupportTicketResponse,\n  Unit,\n  Staff,\n  Student,\n  Course,\n  Class,\n  Lesson,\n  Book,\n  User,\n  UpsertUser,\n  StaffWithUser,\n  StudentWithUser,\n  ClassWithDetails,\n  Permission,\n  PermissionCategory,\n  Role,\n  RolePermission,\n  UserPermission,\n  UserWithPermissions,\n  RoleWithPermissions,\n  PermissionsByCategory,\n  UserSettings,\n  SupportTicket,\n  SupportTicketResponse,\n  SupportTicketWithResponses,\n} from \"@shared/schema\";\nimport { eq, and, desc, sql } from \"drizzle-orm\";\n\n// Demo data in memory - no database needed\nlet demoUnits: Unit[] = [{\n  id: '1',\n  name: 'Unidade Centro',\n  address: 'Rua das Flores, 123 - Centro',\n  phone: '(11) 3456-7890',\n  email: 'centro@edumanage.com',\n  managerId: null,\n  isActive: true,\n  createdAt: new Date('2024-01-15'),\n  updatedAt: new Date('2024-01-15'),\n}, {\n  id: '2',\n  name: 'Unidade Vila Nova',\n  address: 'Av. Principal, 456 - Vila Nova',\n  phone: '(11) 3456-7891',\n  email: 'vilanova@edumanage.com',\n  managerId: null,\n  isActive: true,\n  createdAt: new Date('2024-02-10'),\n  updatedAt: new Date('2024-02-10'),\n}, ];\n\nlet demoUsers: User[] = [{\n  id: '1', // Admin demo user\n  email: 'admin@demo.com',\n  firstName: 'Admin',\n  lastName: 'Sistema',\n  profileImageUrl: null,\n  role: 'admin',\n  roleId: null,\n  isActive: true,\n  createdAt: new Date('2024-01-01'),\n  updatedAt: new Date('2024-01-01'),\n}, {\n  id: 'user-1',\n  email: 'joao@edumanage.com',\n  firstName: 'João',\n  lastName: 'Silva',\n  profileImageUrl: null,\n  role: 'teacher',\n  roleId: null,\n  isActive: true,\n  createdAt: new Date('2024-01-20'),\n  updatedAt: new Date('2024-01-20'),\n}, {\n  id: 'user-2',\n  email: 'maria@edumanage.com',\n  firstName: 'Maria',\n  lastName: 'Santos',\n  profileImageUrl: null,\n  role: 'teacher',\n  roleId: null,\n  isActive: true,\n  createdAt: new Date('2024-01-22'),\n  updatedAt: new Date('2024-01-22'),\n}, {\n  id: 'user-3',\n  email: 'carlos@edumanage.com',\n  firstName: 'Carlos',\n  lastName: 'Oliveira',\n  profileImageUrl: null,\n  role: 'secretary',\n  roleId: null,\n  isActive: true,\n  createdAt: new Date('2024-02-01'),\n  updatedAt: new Date('2024-02-01'),\n}, {\n  id: 'user-7',\n  email: 'ana.teacher@edumanage.com',\n  firstName: 'Ana',\n  lastName: 'Costa',\n  profileImageUrl: null,\n  role: 'teacher',\n  roleId: null,\n  isActive: true,\n  createdAt: new Date('2024-01-15'),\n  updatedAt: new Date('2024-01-15'),\n}, {\n  id: 'user-8',\n  email: 'felipe@edumanage.com',\n  firstName: 'Felipe',\n  lastName: 'Rodrigues',\n  profileImageUrl: null,\n  role: 'teacher',\n  roleId: null,\n  isActive: true,\n  createdAt: new Date('2024-02-05'),\n  updatedAt: new Date('2024-02-05'),\n}, {\n  id: 'user-9',\n  email: 'patricia@edumanage.com',\n  firstName: 'Patricia',\n  lastName: 'Lima',\n  profileImageUrl: null,\n  role: 'teacher',\n  roleId: null,\n  isActive: true,\n  createdAt: new Date('2024-01-18'),\n  updatedAt: new Date('2024-01-18'),\n}, {\n  id: 'user-4',\n  email: 'ana@email.com',\n  firstName: 'Ana',\n  lastName: 'Aluno',\n  profileImageUrl: null,\n  role: 'student',\n  roleId: null,\n  isActive: true,\n  createdAt: new Date('2024-01-15'),\n  updatedAt: new Date('2024-01-15'),\n}, {\n  id: 'user-5',\n  email: 'pedro@email.com',\n  firstName: 'Pedro',\n  lastName: 'Fernandes',\n  profileImageUrl: null,\n  role: 'student',\n  roleId: null,\n  isActive: true,\n  createdAt: new Date('2024-02-01'),\n  updatedAt: new Date('2024-02-01'),\n}, {\n  id: 'user-6',\n  email: 'lucia@email.com',\n  firstName: 'Lucia',\n  lastName: 'Martins',\n  profileImageUrl: null,\n  role: 'student',\n  roleId: null,\n  isActive: true,\n  createdAt: new Date('2024-01-20'),\n  updatedAt: new Date('2024-01-20'),\n}];\n\nlet demoStaff: Staff[] = [{\n  id: '1',\n  userId: 'user-1',\n  unitId: '1',\n  employeeId: 'EMP001',\n  position: 'Professor de Inglês',\n  department: 'Ensino',\n  salary: 5000,\n  hireDate: new Date('2024-01-20'),\n  isActive: true,\n  createdAt: new Date('2024-01-20'),\n  updatedAt: new Date('2024-01-20'),\n}, {\n  id: '2',\n  userId: 'user-2',\n  unitId: '1',\n  employeeId: 'EMP002',\n  position: 'Professor de Espanhol',\n  department: 'Ensino',\n  salary: 4800,\n  hireDate: new Date('2024-01-22'),\n  isActive: true,\n  createdAt: new Date('2024-01-22'),\n  updatedAt: new Date('2024-01-22'),\n}, {\n  id: '3',\n  userId: 'user-3',\n  unitId: '2',\n  employeeId: 'EMP003',\n  position: 'Secretário',\n  department: 'Administrativo',\n  salary: 3000,\n  hireDate: new Date('2024-02-01'),\n  isActive: true,\n  createdAt: new Date('2024-02-01'),\n  updatedAt: new Date('2024-02-01'),\n}, {\n  id: '4',\n  userId: 'user-7',\n  unitId: '1',\n  employeeId: 'EMP004',\n  position: 'Professor de Inglês',\n  department: 'Ensino',\n  salary: 5200,\n  hireDate: new Date('2024-01-15'),\n  isActive: true,\n  createdAt: new Date('2024-01-15'),\n  updatedAt: new Date('2024-01-15'),\n}, {\n  id: '5',\n  userId: 'user-8',\n  unitId: '2',\n  employeeId: 'EMP005',\n  position: 'Professor de Inglês',\n  department: 'Ensino',\n  salary: 4900,\n  hireDate: new Date('2024-02-05'),\n  isActive: true,\n  createdAt: new Date('2024-02-05'),\n  updatedAt: new Date('2024-02-05'),\n}, {\n  id: '6',\n  userId: 'user-9',\n  unitId: '1',\n  employeeId: 'EMP006',\n  position: 'Professor de Espanhol',\n  department: 'Ensino',\n  salary: 4700,\n  hireDate: new Date('2024-01-18'),\n  isActive: true,\n  createdAt: new Date('2024-01-18'),\n  updatedAt: new Date('2024-01-18'),\n}, ];\n\nlet demoStudents: Student[] = [{\n  id: '1',\n  userId: 'user-4',\n  unitId: '1',\n  studentId: 'STU001',\n  enrollmentDate: new Date('2024-01-15'),\n  status: 'active',\n  emergencyContact: '(11) 98888-1111 - Contato de emergência',\n  notes: null,\n  createdAt: new Date('2024-01-15'),\n  updatedAt: new Date('2024-01-15'),\n}, {\n  id: '2',\n  userId: 'user-5',\n  unitId: '1',\n  studentId: 'STU002',\n  enrollmentDate: new Date('2024-02-01'),\n  status: 'active',\n  emergencyContact: '(11) 98888-2222 - Contato de emergência',\n  notes: null,\n  createdAt: new Date('2024-02-01'),\n  updatedAt: new Date('2024-02-01'),\n}, {\n  id: '3',\n  userId: 'user-6',\n  unitId: '2',\n  studentId: 'STU003',\n  enrollmentDate: new Date('2024-01-20'),\n  status: 'active',\n  emergencyContact: '(11) 98888-3333 - Contato de emergência',\n  notes: null,\n  createdAt: new Date('2024-01-20'),\n  updatedAt: new Date('2024-01-20'),\n}, ];\n\nlet demoCourses: Course[] = [{\n  id: '1',\n  name: 'Inglês Básico',\n  description: 'Curso de inglês para iniciantes',\n  language: 'English',\n  level: 'Básico',\n  duration: 120,\n  price: 299,\n  isActive: true,\n  createdAt: new Date('2024-01-10'),\n  updatedAt: new Date('2024-01-10'),\n}, {\n  id: '2',\n  name: 'Inglês Intermediário',\n  description: 'Curso de inglês para nível intermediário',\n  language: 'English',\n  level: 'Intermediário',\n  duration: 150,\n  price: 399,\n  isActive: true,\n  createdAt: new Date('2024-01-10'),\n  updatedAt: new Date('2024-01-10'),\n}, {\n  id: '3',\n  name: 'Espanhol Básico',\n  description: 'Curso de espanhol para iniciantes',\n  language: 'Spanish',\n  level: 'Básico',\n  duration: 100,\n  price: 259,\n  isActive: true,\n  createdAt: new Date('2024-01-12'),\n  updatedAt: new Date('2024-01-12'),\n}, ];\n\nlet demoBooks: Book[] = [{\n  id: '1',\n  courseId: '1',\n  name: 'English Basic - Book 1',\n  description: 'Livro básico de inglês para iniciantes',\n  pdfUrl: '/books/english-basic-1.pdf',\n  color: '#3b82f6', // Azul claro\n  displayOrder: 1,\n  totalDays: 30,\n  isActive: true,\n  createdAt: new Date('2024-01-10'),\n  updatedAt: new Date('2024-01-10'),\n}, {\n  id: '2',\n  courseId: '1',\n  name: 'English Basic - Book 2',\n  description: 'Segundo livro básico de inglês',\n  pdfUrl: '/books/english-basic-2.pdf',\n  color: '#1d4ed8', // Azul mais escuro\n  displayOrder: 2,\n  totalDays: 35,\n  isActive: true,\n  createdAt: new Date('2024-01-10'),\n  updatedAt: new Date('2024-01-10'),\n}, {\n  id: '3',\n  courseId: '2',\n  name: 'English Intermediate - Book 1',\n  description: 'Livro de inglês intermediário',\n  pdfUrl: '/books/english-intermediate-1.pdf',\n  color: '#10b981', // Verde\n  displayOrder: 1,\n  totalDays: 40,\n  isActive: true,\n  createdAt: new Date('2024-01-10'),\n  updatedAt: new Date('2024-01-10'),\n}, {\n  id: '4',\n  courseId: '2',\n  name: 'English Intermediate - Book 2',\n  description: 'Segundo livro de inglês intermediário',\n  pdfUrl: '/books/english-intermediate-2.pdf',\n  color: '#059669', // Verde mais escuro\n  displayOrder: 2,\n  totalDays: 42,\n  isActive: true,\n  createdAt: new Date('2024-01-10'),\n  updatedAt: new Date('2024-01-10'),\n}, {\n  id: '5',\n  courseId: '3',\n  name: 'Español Básico - Libro 1',\n  description: 'Livro básico de espanhol',\n  pdfUrl: '/books/spanish-basic-1.pdf',\n  color: '#f59e0b', // Laranja\n  displayOrder: 1,\n  totalDays: 25,\n  isActive: true,\n  createdAt: new Date('2024-01-12'),\n  updatedAt: new Date('2024-01-12'),\n}, {\n  id: '6',\n  courseId: '3',\n  name: 'Español Básico - Libro 2',\n  description: 'Segundo livro básico de espanhol',\n  pdfUrl: '/books/spanish-basic-2.pdf',\n  color: '#d97706', // Laranja mais escuro\n  displayOrder: 2,\n  totalDays: 28,\n  isActive: true,\n  createdAt: new Date('2024-01-12'),\n  updatedAt: new Date('2024-01-12'),\n}, {\n  id: '7',\n  courseId: '1',\n  name: 'English Basic - Book 3',\n  description: 'Terceiro livro básico de inglês',\n  pdfUrl: '/books/english-basic-3.pdf',\n  color: '#1e40af', // Azul ainda mais escuro\n  displayOrder: 3,\n  totalDays: 40,\n  isActive: true,\n  createdAt: new Date('2024-01-10'),\n  updatedAt: new Date('2024-01-10'),\n}, {\n  id: '8',\n  courseId: '2',\n  name: 'English Advanced - Book 1',\n  description: 'Livro avançado de inglês',\n  pdfUrl: '/books/english-advanced-1.pdf',\n  color: '#8b5cf6', // Roxo\n  displayOrder: 1,\n  totalDays: 45,\n  isActive: true,\n  createdAt: new Date('2024-01-10'),\n  updatedAt: new Date('2024-01-10'),\n}];\n\nlet demoClasses: Class[] = [{\n  id: '1',\n  bookId: '1',\n  teacherId: 'user-1',\n  unitId: '1',\n  name: 'Turma Inglês A1 - Manhã',\n  schedule: 'Segunda e Quarta 09:00-11:00',\n  dayOfWeek: 1, // Monday\n  startTime: '09:00',\n  endTime: '11:00',\n  room: 'Sala 101',\n  maxStudents: 15,\n  currentStudents: 12,\n  startDate: new Date('2024-02-01'),\n  endDate: new Date('2024-05-30'),\n  currentDay: 5,\n  isActive: true,\n  createdAt: new Date('2024-01-25'),\n  updatedAt: new Date('2024-01-25'),\n}, {\n  id: '2',\n  bookId: '2',\n  teacherId: 'user-1',\n  unitId: '1',\n  name: 'Turma Inglês A2 - Tarde',\n  schedule: 'Segunda e Quarta 14:00-16:00',\n  dayOfWeek: 1, // Monday\n  startTime: '14:00',\n  endTime: '16:00',\n  room: 'Sala 102',\n  maxStudents: 15,\n  currentStudents: 10,\n  startDate: new Date('2024-02-01'),\n  endDate: new Date('2024-05-30'),\n  currentDay: 8,\n  isActive: true,\n  createdAt: new Date('2024-01-25'),\n  updatedAt: new Date('2024-01-25'),\n}, {\n  id: '3',\n  bookId: '3',\n  teacherId: 'user-2',\n  unitId: '1',\n  name: 'Turma Inglês B1 - Noite',\n  schedule: 'Segunda e Quarta 19:00-21:00',\n  dayOfWeek: 1, // Monday\n  startTime: '19:00',\n  endTime: '21:00',\n  room: 'Sala 103',\n  maxStudents: 12,\n  currentStudents: 8,\n  startDate: new Date('2024-02-15'),\n  endDate: new Date('2024-06-15'),\n  currentDay: 3,\n  isActive: true,\n  createdAt: new Date('2024-02-05'),\n  updatedAt: new Date('2024-02-05'),\n}, {\n  id: '4',\n  bookId: '5',\n  teacherId: 'user-2',\n  unitId: '1',\n  name: 'Turma Espanhol A1',\n  schedule: 'Terça e Quinta 18:00-20:00',\n  dayOfWeek: 2, // Tuesday\n  startTime: '18:00',\n  endTime: '20:00',\n  room: 'Sala 201',\n  maxStudents: 12,\n  currentStudents: 9,\n  startDate: new Date('2024-02-15'),\n  endDate: new Date('2024-06-15'),\n  currentDay: 4,\n  isActive: true,\n  createdAt: new Date('2024-02-05'),\n  updatedAt: new Date('2024-02-05'),\n}, {\n  id: '5',\n  bookId: '4',\n  teacherId: 'user-7',\n  unitId: '1',\n  name: 'Turma Inglês B2 - Manhã',\n  schedule: 'Terça e Quinta 10:00-12:00',\n  dayOfWeek: 2, // Tuesday\n  startTime: '10:00',\n  endTime: '12:00',\n  room: 'Sala 104',\n  maxStudents: 15,\n  currentStudents: 13,\n  startDate: new Date('2024-02-01'),\n  endDate: new Date('2024-05-30'),\n  currentDay: 12,\n  isActive: true,\n  createdAt: new Date('2024-01-25'),\n  updatedAt: new Date('2024-01-25'),\n}, {\n  id: '6',\n  bookId: '7',\n  teacherId: 'user-7',\n  unitId: '1',\n  name: 'Turma Inglês A3 - Tarde',\n  schedule: 'Quarta e Sexta 15:00-17:00',\n  dayOfWeek: 3, // Wednesday\n  startTime: '15:00',\n  endTime: '17:00',\n  room: 'Sala 105',\n  maxStudents: 15,\n  currentStudents: 11,\n  startDate: new Date('2024-02-01'),\n  endDate: new Date('2024-05-30'),\n  currentDay: 18,\n  isActive: true,\n  createdAt: new Date('2024-01-25'),\n  updatedAt: new Date('2024-01-25'),\n}, {\n  id: '7',\n  bookId: '8',\n  teacherId: 'user-8',\n  unitId: '2',\n  name: 'Turma Inglês Avançado',\n  schedule: 'Quinta e Sexta 19:00-21:00',\n  dayOfWeek: 4, // Thursday\n  startTime: '19:00',\n  endTime: '21:00',\n  room: 'Sala 301',\n  maxStudents: 10,\n  currentStudents: 7,\n  startDate: new Date('2024-02-01'),\n  endDate: new Date('2024-05-30'),\n  currentDay: 22,\n  isActive: true,\n  createdAt: new Date('2024-01-25'),\n  updatedAt: new Date('2024-01-25'),\n}, {\n  id: '8',\n  bookId: '6',\n  teacherId: 'user-9',\n  unitId: '1',\n  name: 'Turma Espanhol A2',\n  schedule: 'Sexta 16:00-18:00',\n  dayOfWeek: 5, // Friday\n  startTime: '16:00',\n  endTime: '18:00',\n  room: 'Sala 202',\n  maxStudents: 12,\n  currentStudents: 10,\n  startDate: new Date('2024-02-01'),\n  endDate: new Date('2024-05-30'),\n  currentDay: 15,\n  isActive: true,\n  createdAt: new Date('2024-01-25'),\n  updatedAt: new Date('2024-01-25'),\n}, ];\n\nlet demoLessons: Lesson[] = [{\n  id: '1',\n  classId: '1',\n  title: 'Present Simple Tense',\n  bookDay: 5,\n  date: new Date('2024-02-26'),\n  startTime: '19:00',\n  endTime: '21:00',\n  room: 'Sala 101',\n  status: 'completed',\n  notes: 'Aula sobre tempo presente simples',\n  createdAt: new Date('2024-02-20'),\n  updatedAt: new Date('2024-02-26'),\n}, {\n  id: '2',\n  classId: '1',\n  title: 'Present Continuous',\n  bookDay: 6,\n  date: new Date('2024-02-28'),\n  startTime: '19:00',\n  endTime: '21:00',\n  room: 'Sala 101',\n  status: 'scheduled',\n  notes: 'Aula sobre presente contínuo',\n  createdAt: new Date('2024-02-20'),\n  updatedAt: new Date('2024-02-20'),\n}, {\n  id: '3',\n  classId: '2',\n  title: 'Verbos Irregulares',\n  bookDay: 3,\n  date: new Date('2024-02-27'),\n  startTime: '18:00',\n  endTime: '20:00',\n  room: 'Sala 102',\n  status: 'completed',\n  notes: 'Conjugação de verbos irregulares',\n  createdAt: new Date('2024-02-20'),\n  updatedAt: new Date('2024-02-27'),\n}, ];\n\n// Permission categories demo data - categorias fixas do sistema + possibilidade de adicionar novas\nlet demoPermissionCategories: PermissionCategory[] = [\n  { id: 'cat-1', name: 'dashboard', displayName: 'Dashboard', description: 'Categoria para permissões do dashboard', isSystemCategory: true, isActive: true, createdAt: new Date(), updatedAt: new Date() },\n  { id: 'cat-2', name: 'units', displayName: 'Unidades', description: 'Categoria para permissões de unidades', isSystemCategory: true, isActive: true, createdAt: new Date(), updatedAt: new Date() },\n  { id: 'cat-3', name: 'staff', displayName: 'Colaboradores', description: 'Categoria para permissões de colaboradores', isSystemCategory: true, isActive: true, createdAt: new Date(), updatedAt: new Date() },\n  { id: 'cat-4', name: 'students', displayName: 'Alunos', description: 'Categoria para permissões de alunos', isSystemCategory: true, isActive: true, createdAt: new Date(), updatedAt: new Date() },\n  { id: 'cat-5', name: 'courses', displayName: 'Cursos', description: 'Categoria para permissões de cursos', isSystemCategory: true, isActive: true, createdAt: new Date(), updatedAt: new Date() },\n  { id: 'cat-6', name: 'schedule', displayName: 'Agenda', description: 'Categoria para permissões de agenda', isSystemCategory: true, isActive: true, createdAt: new Date(), updatedAt: new Date() },\n  { id: 'cat-7', name: 'system', displayName: 'Sistema', description: 'Categoria para permissões do sistema', isSystemCategory: true, isActive: true, createdAt: new Date(), updatedAt: new Date() },\n];\n\n// Permissions demo data - baseado nas páginas do menu\nlet demoPermissions: Permission[] = [\n  // Páginas principais do menu\n  { id: '1', name: 'access_dashboard', displayName: 'Dashboard', description: 'Acesso à página Dashboard', categoryId: 'cat-1', category: 'dashboard', isActive: true, createdAt: new Date(), updatedAt: new Date() },\n  { id: '2', name: 'access_units', displayName: 'Unidades', description: 'Acesso à página de Unidades', categoryId: 'cat-2', category: 'units', isActive: true, createdAt: new Date(), updatedAt: new Date() },\n  { id: '3', name: 'access_staff', displayName: 'Colaboradores', description: 'Acesso à página de Colaboradores', categoryId: 'cat-3', category: 'staff', isActive: true, createdAt: new Date(), updatedAt: new Date() },\n  { id: '4', name: 'access_students', displayName: 'Alunos', description: 'Acesso à página de Alunos', categoryId: 'cat-4', category: 'students', isActive: true, createdAt: new Date(), updatedAt: new Date() },\n  { id: '5', name: 'access_courses', displayName: 'Cursos', description: 'Acesso à página de Cursos', categoryId: 'cat-5', category: 'courses', isActive: true, createdAt: new Date(), updatedAt: new Date() },\n  { id: '6', name: 'access_schedule', displayName: 'Agenda', description: 'Acesso à página de Agenda', categoryId: 'cat-6', category: 'schedule', isActive: true, createdAt: new Date(), updatedAt: new Date() },\n  { id: '8', name: 'access_student_area', displayName: 'Área do Aluno', description: 'Acesso à Área do Aluno', categoryId: 'cat-4', category: 'students', isActive: true, createdAt: new Date(), updatedAt: new Date() },\n  { id: '9', name: 'access_settings', displayName: 'Configurações', description: 'Acesso às Configurações do sistema', categoryId: 'cat-7', category: 'system', isActive: true, createdAt: new Date(), updatedAt: new Date() },\n  { id: '10', name: 'access_permissions', displayName: 'Permissões', description: 'Acesso ao gerenciamento de Permissões', categoryId: 'cat-7', category: 'system', isActive: true, createdAt: new Date(), updatedAt: new Date() },\n];\n\n// Roles demo data - roles fixos conforme solicitado\nlet demoRoles: Role[] = [\n  { id: '1', name: 'admin', displayName: 'Administrativo', description: 'Acesso total ao sistema', isSystemRole: true, isActive: true, createdAt: new Date(), updatedAt: new Date() },\n  { id: '2', name: 'teacher', displayName: 'Professor', description: 'Acesso a turmas e agenda', isSystemRole: true, isActive: true, createdAt: new Date(), updatedAt: new Date() },\n  { id: '3', name: 'secretary', displayName: 'Secretaria', description: 'Gestão de alunos e unidades', isSystemRole: true, isActive: true, createdAt: new Date(), updatedAt: new Date() },\n  { id: '4', name: 'student', displayName: 'Aluno', description: 'Acesso à área do aluno', isSystemRole: true, isActive: true, createdAt: new Date(), updatedAt: new Date() },\n];\n\n// Role permissions demo data\nlet demoRolePermissions: RolePermission[] = [\n  // Admin - acesso total\n  { id: '1', roleId: '1', permissionId: '1', createdAt: new Date() }, // Dashboard\n  { id: '2', roleId: '1', permissionId: '2', createdAt: new Date() }, // Unidades\n  { id: '3', roleId: '1', permissionId: '3', createdAt: new Date() }, // Colaboradores\n  { id: '4', roleId: '1', permissionId: '4', createdAt: new Date() }, // Alunos\n  { id: '5', roleId: '1', permissionId: '5', createdAt: new Date() }, // Cursos\n  { id: '6', roleId: '1', permissionId: '6', createdAt: new Date() }, // Agenda\n  { id: '8', roleId: '1', permissionId: '8', createdAt: new Date() }, // Área do Aluno\n  { id: '9', roleId: '1', permissionId: '9', createdAt: new Date() }, // Configurações\n\n  // Teacher - acesso limitado\n  { id: '10', roleId: '2', permissionId: '1', createdAt: new Date() }, // Dashboard\n  { id: '11', roleId: '2', permissionId: '4', createdAt: new Date() }, // Alunos\n  { id: '12', roleId: '2', permissionId: '5', createdAt: new Date() }, // Cursos\n  { id: '13', roleId: '2', permissionId: '6', createdAt: new Date() }, // Agenda\n\n  // Secretary - gestão de alunos e unidades\n  { id: '14', roleId: '3', permissionId: '1', createdAt: new Date() }, // Dashboard\n  { id: '15', roleId: '3', permissionId: '2', createdAt: new Date() }, // Unidades\n  { id: '16', roleId: '3', permissionId: '4', createdAt: new Date() }, // Alunos\n  { id: '17', roleId: '3', permissionId: '5', createdAt: new Date() }, // Cursos\n  { id: '18', roleId: '3', permissionId: '6', createdAt: new Date() }, // Agenda\n\n  // Student - área do aluno apenas\n  { id: '19', roleId: '4', permissionId: '8', createdAt: new Date() }, // Área do Aluno\n\n  // Financial - financeiro e relatórios\n  { id: '20', roleId: '5', permissionId: '1', createdAt: new Date() }, // Dashboard\n  { id: '21', roleId: '5', permissionId: '7', createdAt: new Date() }, // Financeiro\n\n  // Developer - acesso total (igual admin)\n  { id: '22', roleId: '6', permissionId: '1', createdAt: new Date() }, // Dashboard\n  { id: '23', roleId: '6', permissionId: '2', createdAt: new Date() }, // Unidades\n  { id: '24', roleId: '6', permissionId: '3', createdAt: new Date() }, // Colaboradores\n  { id: '25', roleId: '6', permissionId: '4', createdAt: new Date() }, // Alunos\n  { id: '26', roleId: '6', permissionId: '5', createdAt: new Date() }, // Cursos\n  { id: '27', roleId: '6', permissionId: '6', createdAt: new Date() }, // Agenda\n  { id: '28', roleId: '6', permissionId: '7', createdAt: new Date() }, // Financeiro\n  { id: '29', roleId: '6', permissionId: '8', createdAt: new Date() }, // Área do Aluno\n  { id: '30', roleId: '6', permissionId: '9', createdAt: new Date() }, // Configurações\n];\n\n// User permissions demo data - permissões individuais por usuário (inicialmente vazio)\nlet demoUserPermissions: UserPermission[] = [];\n\n// User permissions demo data - permissões individuais de usuário\n\n// User settings demo data\nlet demoUserSettings: UserSettings[] = [];\n\n// Support tickets demo data\nlet demoSupportTickets: SupportTicket[] = [];\n\n// Support ticket responses demo data\nlet demoSupportTicketResponses: SupportTicketResponse[] = [];\n\nexport interface IStorage {\n  // User operations (mandatory for Replit Auth)\n  getUser(id: string): Promise < User | undefined > ;\n  upsertUser(user: UpsertUser): Promise < User > ;\n\n  // Units\n  getUnits(): Promise < Unit[] > ;\n  getUnit(id: string): Promise < Unit | undefined > ;\n  createUnit(unit: InsertUnit): Promise < Unit > ;\n  updateUnit(id: string, unit: Partial < InsertUnit > ): Promise < Unit > ;\n  deleteUnit(id: string): Promise < void > ;\n\n  // Books\n  getBooks(): Promise < Book[] > ;\n  getBook(id: string): Promise < Book | undefined > ;\n  createBook(book: InsertBook): Promise < Book > ;\n  updateBook(id: string, book: Partial < InsertBook > ): Promise < Book > ;\n  deleteBook(id: string): Promise < void > ;\n\n  // Staff\n  getStaff(): Promise < StaffWithUser[] > ;\n  getStaffMember(id: string): Promise < StaffWithUser | undefined > ;\n  createStaff(staff: InsertStaff): Promise < Staff > ;\n  updateStaff(id: string, staff: Partial < InsertStaff > ): Promise < Staff > ;\n  deleteStaff(id: string): Promise < void > ;\n\n  // Students\n  getStudents(): Promise < StudentWithUser[] > ;\n  getStudent(id: string): Promise < StudentWithUser | undefined > ;\n  createStudent(student: InsertStudent): Promise < Student > ;\n  updateStudent(id: string, student: Partial < InsertStudent > ): Promise < Student > ;\n  deleteStudent(id: string): Promise < void > ;\n\n  // Courses\n  getCourses(): Promise < Course[] > ;\n  getCourse(id: string): Promise < Course | undefined > ;\n  createCourse(course: InsertCourse): Promise < Course > ;\n  updateCourse(id: string, course: Partial < InsertCourse > ): Promise < Course > ;\n  deleteCourse(id: string): Promise < void > ;\n\n  // Classes\n  getClasses(): Promise < ClassWithDetails[] > ;\n  getClass(id: string): Promise < ClassWithDetails | undefined > ;\n  getClassesByTeacher(teacherId: string): Promise < ClassWithDetails[] > ;\n  createClass(classData: InsertClass): Promise < Class > ;\n  updateClass(id: string, classData: Partial < InsertClass > ): Promise < Class > ;\n  deleteClass(id: string): Promise < void > ;\n\n  // Lessons/Schedule\n  getLessons(): Promise < Lesson[] > ;\n  getLesson(id: string): Promise < Lesson | undefined > ;\n  getLessonsByClass(classId: string): Promise < Lesson[] > ;\n  getLessonsByTeacher(teacherId: string): Promise < Lesson[] > ;\n  getTodaysLessons(): Promise < Lesson[] > ;\n  createLesson(lesson: InsertLesson): Promise < Lesson > ;\n  updateLesson(id: string, lesson: Partial < InsertLesson > ): Promise < Lesson > ;\n  deleteLesson(id: string): Promise < void > ;\n  checkLessonConflicts(teacherId: string, date: Date, startTime: string, endTime: string, excludeLessonId?: string): Promise<{ hasConflict: boolean; conflictingLesson?: Lesson }>;\n\n  // Dashboard stats\n  getDashboardStats(): Promise < {\n    totalStudents: number;\n    activeTeachers: number;\n    todaysClasses: number;\n    monthlyRevenue: number;\n  } > ;\n\n  // Permission Categories\n  getPermissionCategories(): Promise<PermissionCategory[]>;\n  getPermissionCategory(id: string): Promise<PermissionCategory | undefined>;\n  createPermissionCategory(category: InsertPermissionCategory): Promise<PermissionCategory>;\n  updatePermissionCategory(id: string, category: Partial<InsertPermissionCategory>): Promise<PermissionCategory>;\n  deletePermissionCategory(id: string): Promise<void>;\n\n  // Permissions\n  getPermissions(): Promise<Permission[]>;\n  getPermission(id: string): Promise<Permission | undefined>;\n  getPermissionsByCategory(): Promise<PermissionsByCategory>;\n  createPermission(permission: InsertPermission): Promise<Permission>;\n  updatePermission(id: string, permission: Partial<InsertPermission>): Promise<Permission>;\n  deletePermission(id: string): Promise<void>;\n\n  // Roles\n  getRoles(): Promise<Role[]>;\n  getRole(id: string): Promise<Role | undefined>;\n  getRoleWithPermissions(id: string): Promise<RoleWithPermissions | undefined>;\n  createRole(role: InsertRole): Promise<Role>;\n  updateRole(id: string, role: Partial<InsertRole>): Promise<Role>;\n  deleteRole(id: string): Promise<void>;\n\n  // Role Permissions\n  getRolePermissions(roleId: string): Promise<RolePermission[]>;\n  addPermissionToRole(roleId: string, permissionId: string): Promise<RolePermission>;\n  removePermissionFromRole(roleId: string, permissionId: string): Promise<void>;\n  updateRolePermissions(roleId: string, permissionIds: string[]): Promise<void>;\n\n\n  // User Settings\n  getUserSettings(userId: string): Promise<UserSettings | undefined>;\n  createUserSettings(settings: InsertUserSettings): Promise<UserSettings>;\n  updateUserSettings(userId: string, settings: Partial<InsertUserSettings>): Promise<UserSettings>;\n\n  // Support Tickets\n  getSupportTickets(): Promise<SupportTicket[]>;\n  getSupportTicketsByUser(userId: string): Promise<SupportTicket[]>;\n  getSupportTicket(id: string): Promise<SupportTicketWithResponses | undefined>;\n  createSupportTicket(ticket: InsertSupportTicket): Promise<SupportTicket>;\n  updateSupportTicket(id: string, ticket: Partial<InsertSupportTicket>): Promise<SupportTicket>;\n  deleteSupportTicket(id: string): Promise<void>;\n  \n  // Support Ticket Responses\n  createSupportTicketResponse(response: InsertSupportTicketResponse): Promise<SupportTicketResponse>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // Helper function to check for teacher time conflicts\n  private checkTeacherTimeConflict(\n    teacherId: string,\n    dayOfWeek: number | null,\n    startTime: string | null,\n    endTime: string | null,\n    excludeClassId ? : string\n  ): { hasConflict: boolean; conflictingClass ? : Class } {\n    if (!dayOfWeek || !startTime || !endTime) {\n      return { hasConflict: false };\n    }\n\n    // Convert time strings to minutes for easy comparison\n    const timeToMinutes = (time: string): number => {\n      const [hours, minutes] = time.split(':').map(Number);\n      return hours * 60 + minutes;\n    };\n\n    const newStartMinutes = timeToMinutes(startTime);\n    const newEndMinutes = timeToMinutes(endTime);\n\n    // Find existing classes for this teacher on the same day\n    const existingClasses = demoClasses.filter(cls =>\n      cls.teacherId === teacherId &&\n      cls.dayOfWeek === dayOfWeek &&\n      cls.isActive &&\n      (excludeClassId ? cls.id !== excludeClassId : true)\n    );\n\n    for (const existingClass of existingClasses) {\n      if (!existingClass.startTime || !existingClass.endTime) continue;\n\n      const existingStartMinutes = timeToMinutes(existingClass.startTime);\n      const existingEndMinutes = timeToMinutes(existingClass.endTime);\n\n      // Check for overlap: new class starts before existing ends AND new class ends after existing starts\n      if (newStartMinutes < existingEndMinutes && newEndMinutes > existingStartMinutes) {\n        return { hasConflict: true, conflictingClass: existingClass };\n      }\n    }\n\n    return { hasConflict: false };\n  }\n\n  // Helper function to check for lesson time conflicts\n  private checkLessonTimeConflict(\n    teacherId: string,\n    date: Date,\n    startTime: string,\n    endTime: string,\n    excludeLessonId ? : string\n  ): { hasConflict: boolean; conflictingLesson ? : Lesson } {\n    // Convert time strings to minutes for easy comparison\n    const timeToMinutes = (time: string): number => {\n      const [hours, minutes] = time.split(':').map(Number);\n      return hours * 60 + minutes;\n    };\n\n    const newStartMinutes = timeToMinutes(startTime);\n    const newEndMinutes = timeToMinutes(endTime);\n\n    // Normalize date for comparison (set to start of day)\n    const targetDate = new Date(date);\n    targetDate.setHours(0, 0, 0, 0);\n\n    // Find teacher's classes to get list of classes they teach\n    const teacherClasses = demoClasses.filter(cls => cls.teacherId === teacherId);\n    const classIds = teacherClasses.map(cls => cls.id);\n\n    // Find existing lessons for this teacher on the same date\n    const existingLessons = demoLessons.filter(lesson => {\n      if (excludeLessonId && lesson.id === excludeLessonId) return false;\n      if (!classIds.includes(lesson.classId)) return false;\n\n      const lessonDate = new Date(lesson.date);\n      lessonDate.setHours(0, 0, 0, 0);\n\n      return lessonDate.getTime() === targetDate.getTime();\n    });\n\n    for (const existingLesson of existingLessons) {\n      const existingStartMinutes = timeToMinutes(existingLesson.startTime);\n      const existingEndMinutes = timeToMinutes(existingLesson.endTime);\n\n      // Check for overlap: new lesson starts before existing ends AND new lesson ends after existing starts\n      if (newStartMinutes < existingEndMinutes && newEndMinutes > existingStartMinutes) {\n        return { hasConflict: true, conflictingLesson: existingLesson };\n      }\n    }\n\n    return { hasConflict: false };\n  }\n\n  // User operations (mandatory for Replit Auth)\n  async getUser(id: string): Promise < User | undefined > {\n    // Try to find the user in the demoUsers array (includes admin user with id '1')\n    const demoUser = demoUsers.find(u => u.id === id);\n    if (demoUser) {\n      return demoUser;\n    }\n\n    // Demo mode fallback - returning a dummy user for login demonstration\n    if (id === 'demo-user-id') {\n      return {\n        id: 'demo-user-id',\n        email: 'demo@example.com',\n        firstName: 'Demo',\n        lastName: 'User',\n        profileImageUrl: null,\n        role: 'student',\n        roleId: null,\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n    }\n\n    return undefined;\n  }\n\n  async upsertUser(user: UpsertUser): Promise < User > {\n    // Demo mode - just log\n    console.log('Demo user upserted:', user);\n    // In a real app, you'd save this to a database\n    const existingUserIndex = demoUsers.findIndex(u => u.id === user.id);\n    const newUser: User = {\n      id: user.id || crypto.randomUUID(),\n      email: user.email || null,\n      firstName: user.firstName || null,\n      lastName: user.lastName || null,\n      profileImageUrl: user.profileImageUrl || null,\n      role: user.role || 'student',\n      roleId: user.roleId || null,\n      isActive: user.isActive ?? true,\n      createdAt: user.createdAt || new Date(),\n      updatedAt: user.updatedAt || new Date(),\n    };\n\n    if (existingUserIndex > -1) {\n      demoUsers[existingUserIndex] = newUser;\n    } else {\n      demoUsers.push(newUser);\n    }\n    return newUser;\n  }\n\n  // Units\n  async getUnits(): Promise < Unit[] > {\n    return [...demoUnits];\n  }\n\n  async getUnit(id: string): Promise < Unit | undefined > {\n    return demoUnits.find(unit => unit.id === id);\n  }\n\n  async createUnit(unit: InsertUnit): Promise < Unit > {\n    const id = crypto.randomUUID();\n    const newUnit: Unit = {\n      id,\n      name: unit.name,\n      address: unit.address || null,\n      phone: unit.phone || null,\n      email: unit.email || null,\n      managerId: unit.managerId || null,\n      isActive: unit.isActive ?? true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    demoUnits.push(newUnit);\n    return newUnit;\n  }\n\n  async updateUnit(id: string, unit: Partial < InsertUnit > ): Promise < Unit > {\n    const index = demoUnits.findIndex(u => u.id === id);\n    if (index === -1) throw new Error('Unit not found');\n\n    const updatedUnit = {\n      ...demoUnits[index],\n      ...unit,\n      updatedAt: new Date(),\n    };\n    demoUnits[index] = updatedUnit;\n    return updatedUnit;\n  }\n\n  async deleteUnit(id: string): Promise < void > {\n    const index = demoUnits.findIndex(unit => unit.id === id);\n    if (index !== -1) {\n      demoUnits.splice(index, 1);\n    }\n  }\n\n  // Books\n  async getBooks(): Promise < Book[] > {\n    return [...demoBooks];\n  }\n\n  async getBook(id: string): Promise < Book | undefined > {\n    return demoBooks.find(book => book.id === id);\n  }\n\n  async createBook(bookData: InsertBook): Promise < Book > {\n    // Validate that the course exists and is active\n    const course = demoCourses.find(c => c.id === bookData.courseId);\n    if (!course) {\n      throw new Error(`Course with ID ${bookData.courseId} not found`);\n    }\n    if (!course.isActive) {\n      throw new Error(`Cannot create book for inactive course: ${course.name}`);\n    }\n\n    const id = crypto.randomUUID();\n    const newBook: Book = {\n      id,\n      courseId: bookData.courseId,\n      name: bookData.name,\n      description: bookData.description || null,\n      pdfUrl: bookData.pdfUrl || null,\n      color: bookData.color || '#3b82f6',\n      displayOrder: bookData.displayOrder ?? 1,\n      totalDays: bookData.totalDays ?? 30,\n      isActive: bookData.isActive ?? true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    demoBooks.push(newBook);\n    return newBook;\n  }\n\n  async updateBook(id: string, bookData: Partial < InsertBook > ): Promise < Book > {\n    const index = demoBooks.findIndex(b => b.id === id);\n    if (index === -1) throw new Error('Book not found');\n\n    // If courseId is being updated, validate that the new course exists and is active\n    if (bookData.courseId) {\n      const course = demoCourses.find(c => c.id === bookData.courseId);\n      if (!course) {\n        throw new Error(`Course with ID ${bookData.courseId} not found`);\n      }\n      if (!course.isActive) {\n        throw new Error(`Cannot update book to inactive course: ${course.name}`);\n      }\n    }\n\n    const updatedBook = {\n      ...demoBooks[index],\n      ...bookData,\n      updatedAt: new Date(),\n    };\n    demoBooks[index] = updatedBook;\n    return updatedBook;\n  }\n\n  async deleteBook(id: string): Promise < void > {\n    // Check if any classes reference this book\n    const referencingClasses = demoClasses.filter(cls => cls.bookId === id);\n    if (referencingClasses.length > 0) {\n      const classNames = referencingClasses.map(cls => cls.name).join(', ');\n      throw new Error(`Cannot delete book: it is being used by the following classes: ${classNames}`);\n    }\n\n    const index = demoBooks.findIndex(book => book.id === id);\n    if (index !== -1) {\n      demoBooks.splice(index, 1);\n    }\n  }\n\n  // Staff\n  async getStaff(): Promise < StaffWithUser[] > {\n    return demoStaff.map(staff => {\n      const user = demoUsers.find(u => u.id === staff.userId);\n      if (!user) throw new Error(`User not found for staff ${staff.id}`);\n      return {\n        ...staff,\n        user\n      };\n    });\n  }\n\n  async getStaffMember(id: string): Promise < StaffWithUser | undefined > {\n    const staff = demoStaff.find(staff => staff.id === id);\n    if (!staff) return undefined;\n\n    const user = demoUsers.find(u => u.id === staff.userId);\n    if (!user) return undefined;\n\n    return {\n      ...staff,\n      user\n    };\n  }\n\n  async createStaff(staffData: InsertStaff): Promise < Staff > {\n    const id = crypto.randomUUID();\n    const newStaff: Staff = {\n      id,\n      userId: staffData.userId,\n      unitId: staffData.unitId || null,\n      employeeId: staffData.employeeId || null,\n      position: staffData.position || null,\n      department: staffData.department || null,\n      salary: staffData.salary || null,\n      hireDate: staffData.hireDate || null,\n      isActive: staffData.isActive ?? true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    demoStaff.push(newStaff);\n    return newStaff;\n  }\n\n  async updateStaff(id: string, staffData: Partial < InsertStaff > ): Promise < Staff > {\n    const index = demoStaff.findIndex(s => s.id === id);\n    if (index === -1) throw new Error('Staff not found');\n\n    const updatedStaff = {\n      ...demoStaff[index],\n      ...staffData,\n      updatedAt: new Date(),\n    };\n    demoStaff[index] = updatedStaff;\n    return updatedStaff;\n  }\n\n  async deleteStaff(id: string): Promise < void > {\n    const index = demoStaff.findIndex(staff => staff.id === id);\n    if (index !== -1) {\n      demoStaff.splice(index, 1);\n    }\n  }\n\n  // Students\n  async getStudents(): Promise < StudentWithUser[] > {\n    return demoStudents.map(student => {\n      const user = demoUsers.find(u => u.id === student.userId);\n      if (!user) throw new Error(`User not found for student ${student.id}`);\n      return {\n        ...student,\n        user\n      };\n    });\n  }\n\n  async getStudent(id: string): Promise < StudentWithUser | undefined > {\n    const student = demoStudents.find(student => student.id === id);\n    if (!student) return undefined;\n\n    const user = demoUsers.find(u => u.id === student.userId);\n    if (!user) return undefined;\n\n    return {\n      ...student,\n      user\n    };\n  }\n\n  async createStudent(studentData: InsertStudent): Promise < Student > {\n    const id = crypto.randomUUID();\n    const newStudent: Student = {\n      id,\n      userId: studentData.userId,\n      studentId: studentData.studentId || null,\n      unitId: studentData.unitId || null,\n      enrollmentDate: studentData.enrollmentDate || null,\n      status: studentData.status || 'active',\n      emergencyContact: studentData.emergencyContact || null,\n      notes: studentData.notes || null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    demoStudents.push(newStudent);\n    return newStudent;\n  }\n\n  async updateStudent(id: string, studentData: Partial < InsertStudent > ): Promise < Student > {\n    const index = demoStudents.findIndex(s => s.id === id);\n    if (index === -1) throw new Error('Student not found');\n\n    const updatedStudent = {\n      ...demoStudents[index],\n      ...studentData,\n      updatedAt: new Date(),\n    };\n    demoStudents[index] = updatedStudent;\n    return updatedStudent;\n  }\n\n  async deleteStudent(id: string): Promise < void > {\n    const index = demoStudents.findIndex(student => student.id === id);\n    if (index !== -1) {\n      demoStudents.splice(index, 1);\n    }\n  }\n\n  // Courses\n  async getCourses(): Promise < Course[] > {\n    return [...demoCourses];\n  }\n\n  async getCourse(id: string): Promise < Course | undefined > {\n    return demoCourses.find(course => course.id === id);\n  }\n\n  async createCourse(courseData: InsertCourse): Promise < Course > {\n    const id = crypto.randomUUID();\n    const newCourse: Course = {\n      id,\n      name: courseData.name,\n      description: courseData.description || null,\n      language: courseData.language,\n      level: courseData.level,\n      duration: courseData.duration || null,\n      price: courseData.price || null,\n      isActive: courseData.isActive ?? true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    demoCourses.push(newCourse);\n    return newCourse;\n  }\n\n  async updateCourse(id: string, courseData: Partial < InsertCourse > ): Promise < Course > {\n    const index = demoCourses.findIndex(c => c.id === id);\n    if (index === -1) throw new Error('Course not found');\n\n    const updatedCourse = {\n      ...demoCourses[index],\n      ...courseData,\n      updatedAt: new Date(),\n    };\n    demoCourses[index] = updatedCourse;\n    return updatedCourse;\n  }\n\n  async deleteCourse(id: string): Promise < void > {\n    // Check if any books reference this course\n    const referencingBooks = demoBooks.filter(book => book.courseId === id);\n    if (referencingBooks.length > 0) {\n      const bookNames = referencingBooks.map(book => book.name).join(', ');\n      throw new Error(`Cannot delete course: it has the following books associated with it: ${bookNames}`);\n    }\n\n    const index = demoCourses.findIndex(course => course.id === id);\n    if (index !== -1) {\n      demoCourses.splice(index, 1);\n    }\n  }\n\n  // Classes\n  async getClasses(): Promise < ClassWithDetails[] > {\n    return demoClasses.map(cls => {\n      const book = demoBooks.find(b => b.id === cls.bookId);\n      const course = book ? demoCourses.find(c => c.id === book.courseId) : undefined;\n      const teacher = demoUsers.find(u => u.id === cls.teacherId);\n      const unit = demoUnits.find(u => u.id === cls.unitId);\n\n      if (!book || !course || !teacher || !unit) {\n        throw new Error(`Missing required data for class ${cls.id}`);\n      }\n\n      return {\n        ...cls,\n        book: { ...book, course },\n        teacher,\n        unit,\n        enrollments: [],\n      };\n    });\n  }\n\n  async getClass(id: string): Promise < ClassWithDetails | undefined > {\n    const cls = demoClasses.find(cls => cls.id === id);\n    if (!cls) return undefined;\n\n    const book = demoBooks.find(b => b.id === cls.bookId);\n    const course = book ? demoCourses.find(c => c.id === book.courseId) : undefined;\n    const teacher = demoUsers.find(u => u.id === cls.teacherId);\n    const unit = demoUnits.find(u => u.id === cls.unitId);\n\n    if (!book || !course || !teacher || !unit) return undefined;\n\n    return {\n      ...cls,\n      book: { ...book, course },\n      teacher,\n      unit,\n      enrollments: [],\n    };\n  }\n\n  async getClassesByTeacher(teacherId: string): Promise < ClassWithDetails[] > {\n    const classes = demoClasses.filter(cls => cls.teacherId === teacherId && cls.isActive);\n\n    return classes.map(cls => {\n      const book = demoBooks.find(b => b.id === cls.bookId);\n      const unit = demoUnits.find(u => u.id === cls.unitId);\n      const course = book ? demoCourses.find(c => c.id === book.courseId) : undefined;\n      const teacher = demoUsers.find(u => u.id === cls.teacherId);\n\n      return {\n        ...cls,\n        book: book ? { ...book, course: course || demoCourses[0] } : { ...demoBooks[0], course: demoCourses[0] },\n        unit: unit || demoUnits[0],\n        teacher: teacher,\n        enrollments: []\n      };\n    });\n  }\n\n  async createClass(classData: InsertClass): Promise < Class > {\n    // Validate that the book exists and is active\n    const book = demoBooks.find(b => b.id === classData.bookId);\n    if (!book) {\n      throw new Error(`Book with ID ${classData.bookId} not found`);\n    }\n    if (!book.isActive) {\n      throw new Error(`Cannot create class for inactive course: ${book.name}`);\n    }\n\n    // Validate that the teacher exists and has teacher role\n    const teacher = demoUsers.find(u => u.id === classData.teacherId);\n    if (!teacher) {\n      throw new Error(`Teacher with ID ${classData.teacherId} not found`);\n    }\n    if (teacher.role !== 'teacher') {\n      throw new Error(`User ${teacher.firstName} ${teacher.lastName} is not a teacher (current role: ${teacher.role})`);\n    }\n    if (!teacher.isActive) {\n      throw new Error(`Cannot assign inactive teacher ${teacher.firstName} ${teacher.lastName} to class`);\n    }\n\n    // Check for time conflicts with teacher's existing classes\n    const timeConflict = this.checkTeacherTimeConflict(\n      classData.teacherId,\n      classData.dayOfWeek || null,\n      classData.startTime || null,\n      classData.endTime || null\n    );\n\n    if (timeConflict.hasConflict && timeConflict.conflictingClass) {\n      throw new Error(`Teacher ${teacher.firstName} ${teacher.lastName} already has a class \"${timeConflict.conflictingClass.name}\" at this time (${timeConflict.conflictingClass.startTime}-${timeConflict.conflictingClass.endTime})`);\n    }\n\n    const id = crypto.randomUUID();\n    const newClass: Class = {\n      id,\n      bookId: classData.bookId,\n      teacherId: classData.teacherId,\n      unitId: classData.unitId,\n      name: classData.name,\n      schedule: classData.schedule || null,\n      dayOfWeek: classData.dayOfWeek || null,\n      startTime: classData.startTime || null,\n      endTime: classData.endTime || null,\n      room: classData.room || null,\n      maxStudents: classData.maxStudents ?? 15,\n      currentStudents: classData.currentStudents ?? 0,\n      startDate: classData.startDate || null,\n      endDate: classData.endDate || null,\n      currentDay: classData.currentDay ?? 1,\n      isActive: classData.isActive ?? true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    demoClasses.push(newClass);\n    return newClass;\n  }\n\n  async updateClass(id: string, classData: Partial < InsertClass > ): Promise < Class > {\n    const index = demoClasses.findIndex(c => c.id === id);\n    if (index === -1) throw new Error('Class not found');\n\n    const currentClass = demoClasses[index];\n\n    // If teacher, day, or time is being updated, check for conflicts\n    const teacherId = classData.teacherId || currentClass.teacherId;\n    const dayOfWeek = classData.dayOfWeek !== undefined ? classData.dayOfWeek : currentClass.dayOfWeek;\n    const startTime = classData.startTime !== undefined ? classData.startTime : currentClass.startTime;\n    const endTime = classData.endTime !== undefined ? classData.endTime : currentClass.endTime;\n\n    if (classData.teacherId || classData.dayOfWeek !== undefined ||\n      classData.startTime !== undefined || classData.endTime !== undefined) {\n\n      const timeConflict = this.checkTeacherTimeConflict(\n        teacherId,\n        dayOfWeek,\n        startTime,\n        endTime,\n        id // Exclude current class from conflict check\n      );\n\n      if (timeConflict.hasConflict && timeConflict.conflictingClass) {\n        const teacher = demoUsers.find(u => u.id === teacherId);\n        const teacherName = teacher ? `${teacher.firstName} ${teacher.lastName}` : teacherId;\n        throw new Error(`Teacher ${teacherName} already has a class \"${timeConflict.conflictingClass.name}\" at this time (${timeConflict.conflictingClass.startTime}-${timeConflict.conflictingClass.endTime})`);\n      }\n    }\n\n    const updatedClass = {\n      ...currentClass,\n      ...classData,\n      updatedAt: new Date(),\n    };\n    demoClasses[index] = updatedClass;\n    return updatedClass;\n  }\n\n  async deleteClass(id: string): Promise < void > {\n    const index = demoClasses.findIndex(cls => cls.id === id);\n    if (index !== -1) {\n      demoClasses.splice(index, 1);\n    }\n  }\n\n  // Lessons/Schedule\n  async getLessons(): Promise < Lesson[] > {\n    return [...demoLessons].sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n  }\n\n  async getLesson(id: string): Promise < Lesson | undefined > {\n    return demoLessons.find(lesson => lesson.id === id);\n  }\n\n  async getLessonsByClass(classId: string): Promise < Lesson[] > {\n    return demoLessons.filter(lesson => lesson.classId === classId);\n  }\n\n  async getLessonsByTeacher(teacherId: string): Promise < Lesson[] > {\n    // Find classes taught by this teacher, then find lessons for those classes\n    const teacherClasses = demoClasses.filter(cls => cls.teacherId === teacherId);\n    const classIds = teacherClasses.map(cls => cls.id);\n    return demoLessons.filter(lesson => classIds.includes(lesson.classId));\n  }\n\n  async getTodaysLessons(): Promise < Lesson[] > {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n\n    return demoLessons.filter(lesson => {\n      const lessonDate = new Date(lesson.date);\n      return lessonDate >= today && lessonDate < tomorrow;\n    });\n  }\n\n  async createLesson(lessonData: InsertLesson): Promise < Lesson > {\n    // Validate that the class exists\n    const classData = demoClasses.find(cls => cls.id === lessonData.classId);\n    if (!classData) {\n      throw new Error(`Class with ID ${lessonData.classId} not found`);\n    }\n\n    // Get the teacher ID from the class\n    const teacherId = classData.teacherId;\n\n    // Check for lesson conflicts\n    const conflictCheck = this.checkLessonTimeConflict(\n      teacherId,\n      lessonData.date,\n      lessonData.startTime,\n      lessonData.endTime\n    );\n\n    if (conflictCheck.hasConflict && conflictCheck.conflictingLesson) {\n      const teacher = demoUsers.find(u => u.id === teacherId);\n      const teacherName = teacher ? `${teacher.firstName} ${teacher.lastName}` : teacherId;\n      throw new Error(`Professor ${teacherName} já tem uma aula \"${conflictCheck.conflictingLesson.title}\" neste horário (${conflictCheck.conflictingLesson.startTime}-${conflictCheck.conflictingLesson.endTime})`);\n    }\n\n    const id = crypto.randomUUID();\n    const newLesson: Lesson = {\n      id,\n      classId: lessonData.classId,\n      title: lessonData.title,\n      bookDay: lessonData.bookDay,\n      date: lessonData.date,\n      startTime: lessonData.startTime,\n      endTime: lessonData.endTime,\n      room: lessonData.room || null,\n      status: lessonData.status || 'scheduled',\n      notes: lessonData.notes || null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    demoLessons.push(newLesson);\n    return newLesson;\n  }\n\n  async updateLesson(id: string, lessonData: Partial < InsertLesson > ): Promise < Lesson > {\n    const index = demoLessons.findIndex(l => l.id === id);\n    if (index === -1) throw new Error('Lesson not found');\n\n    const currentLesson = demoLessons[index];\n\n    // If date, start time, or end time is being updated, check for conflicts\n    const date = lessonData.date || currentLesson.date;\n    const startTime = lessonData.startTime || currentLesson.startTime;\n    const endTime = lessonData.endTime || currentLesson.endTime;\n    const classId = lessonData.classId || currentLesson.classId;\n\n    // Get the teacher ID from the class\n    const classData = demoClasses.find(cls => cls.id === classId);\n    if (!classData) {\n      throw new Error(`Class with ID ${classId} not found`);\n    }\n    const teacherId = classData.teacherId;\n\n    if (lessonData.date || lessonData.startTime || lessonData.endTime) {\n      const conflictCheck = this.checkLessonTimeConflict(\n        teacherId,\n        date,\n        startTime,\n        endTime,\n        id // Exclude current lesson from conflict check\n      );\n\n      if (conflictCheck.hasConflict && conflictCheck.conflictingLesson) {\n        const teacher = demoUsers.find(u => u.id === teacherId);\n        const teacherName = teacher ? `${teacher.firstName} ${teacher.lastName}` : teacherId;\n        throw new Error(`Professor ${teacherName} já tem uma aula \"${conflictCheck.conflictingLesson.title}\" neste horário (${conflictCheck.conflictingLesson.startTime}-${conflictCheck.conflictingLesson.endTime})`);\n      }\n    }\n\n    const updatedLesson = {\n      ...currentLesson,\n      ...lessonData,\n      updatedAt: new Date(),\n    };\n    demoLessons[index] = updatedLesson;\n    return updatedLesson;\n  }\n\n  async deleteLesson(id: string): Promise < void > {\n    const index = demoLessons.findIndex(lesson => lesson.id === id);\n    if (index !== -1) {\n      demoLessons.splice(index, 1);\n    }\n  }\n\n  async checkLessonConflicts(teacherId: string, date: Date, startTime: string, endTime: string, excludeLessonId ? : string): Promise<{ hasConflict: boolean; conflictingLesson ? : Lesson }> {\n    return this.checkLessonTimeConflict(teacherId, date, startTime, endTime, excludeLessonId);\n  }\n\n  // Dashboard stats\n  async getDashboardStats(): Promise < {\n    totalStudents: number;\n    activeTeachers: number;\n    todaysClasses: number;\n    monthlyRevenue: number;\n  } > {\n    // Count teachers by checking users with teacher role\n    const activeTeachers = demoUsers.filter(user => user.role === 'teacher' && user.isActive).length;\n\n    // Get today's lessons by comparing dates properly\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n\n    const todaysLessons = demoLessons.filter(lesson => {\n      const lessonDate = new Date(lesson.date);\n      return lessonDate >= today && lessonDate < tomorrow;\n    }).length;\n\n    return {\n      totalStudents: demoStudents.length,\n      activeTeachers: activeTeachers,\n      todaysClasses: todaysLessons,\n      monthlyRevenue: 47200, // Placeholder - would calculate from payments table\n    };\n  }\n\n  // Permission Categories\n  async getPermissionCategories(): Promise<PermissionCategory[]> {\n    return [...demoPermissionCategories]\n      .filter(c => c.isActive)\n      .sort((a, b) => a.displayName.localeCompare(b.displayName));\n  }\n\n  async getPermissionCategory(id: string): Promise<PermissionCategory | undefined> {\n    return demoPermissionCategories.find(c => c.id === id);\n  }\n\n  async createPermissionCategory(categoryData: InsertPermissionCategory): Promise<PermissionCategory> {\n    // Check if category name already exists (case-insensitive)\n    const existingCategory = demoPermissionCategories.find(c => c.name.toLowerCase() === categoryData.name.toLowerCase());\n    if (existingCategory) {\n      throw new Error(`Permission category with name \"${categoryData.name}\" already exists`);\n    }\n\n    const id = crypto.randomUUID();\n    const newCategory: PermissionCategory = {\n      id,\n      name: categoryData.name,\n      displayName: categoryData.displayName,\n      description: categoryData.description || null,\n      isSystemCategory: categoryData.isSystemCategory ?? false,\n      isActive: categoryData.isActive ?? true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    demoPermissionCategories.push(newCategory);\n    return newCategory;\n  }\n\n  async updatePermissionCategory(id: string, categoryData: Partial<InsertPermissionCategory>): Promise<PermissionCategory> {\n    const index = demoPermissionCategories.findIndex(c => c.id === id);\n    if (index === -1) throw new Error('Permission category not found');\n\n    const existingCategory = demoPermissionCategories[index];\n    \n    // Prevent editing system categories name\n    if (existingCategory.isSystemCategory && categoryData.name) {\n      throw new Error('Cannot modify name of system categories');\n    }\n\n    // Check if name is being updated and already exists in another category (case-insensitive)\n    if (categoryData.name) {\n      const duplicateCategory = demoPermissionCategories.find(c => c.name.toLowerCase() === categoryData.name!.toLowerCase() && c.id !== id);\n      if (duplicateCategory) {\n        throw new Error(`Permission category with name \"${categoryData.name}\" already exists`);\n      }\n    }\n\n    const updatedCategory = {\n      ...existingCategory,\n      ...categoryData,\n      updatedAt: new Date(),\n    };\n    demoPermissionCategories[index] = updatedCategory;\n    return updatedCategory;\n  }\n\n  async deletePermissionCategory(id: string): Promise<void> {\n    const category = demoPermissionCategories.find(c => c.id === id);\n    if (!category) throw new Error('Permission category not found');\n\n    // Prevent deleting system categories\n    if (category.isSystemCategory) {\n      throw new Error('Cannot delete system categories');\n    }\n\n    // Check if category has permissions assigned\n    const categoryPermissions = demoPermissions.filter(p => p.categoryId === id);\n    if (categoryPermissions.length > 0) {\n      throw new Error('Cannot delete category that has permissions assigned to it');\n    }\n\n    const index = demoPermissionCategories.findIndex(c => c.id === id);\n    if (index !== -1) {\n      demoPermissionCategories.splice(index, 1);\n    }\n  }\n\n  // Permissions\n  async getPermissions(): Promise<Permission[]> {\n    return [...demoPermissions]\n      .filter(p => p.isActive)\n      .sort((a, b) => a.displayName.localeCompare(b.displayName));\n  }\n\n  async getPermission(id: string): Promise<Permission | undefined> {\n    return demoPermissions.find(p => p.id === id);\n  }\n\n  async getPermissionsByCategory(): Promise<PermissionsByCategory> {\n    const permissions = await this.getPermissions();\n    const categorized: PermissionsByCategory = {};\n\n    permissions.forEach(permission => {\n      if (!categorized[permission.category]) {\n        categorized[permission.category] = [];\n      }\n      categorized[permission.category].push(permission);\n    });\n\n    return categorized;\n  }\n\n  async createPermission(permissionData: InsertPermission): Promise<Permission> {\n    // Check if permission name already exists (case-insensitive)\n    const existingPermission = demoPermissions.find(p => p.name.toLowerCase() === permissionData.name.toLowerCase());\n    if (existingPermission) {\n      throw new Error(`Permission with name \"${permissionData.name}\" already exists`);\n    }\n\n    // Validate that the category exists\n    const category = demoPermissionCategories.find(c => c.id === permissionData.categoryId);\n    if (!category) {\n      throw new Error(`Permission category with id \"${permissionData.categoryId}\" not found`);\n    }\n\n    const id = crypto.randomUUID();\n    const newPermission: Permission = {\n      id,\n      name: permissionData.name,\n      displayName: permissionData.displayName,\n      description: permissionData.description || null,\n      categoryId: permissionData.categoryId,\n      category: category.name, // Sync category name for backward compatibility\n      isActive: permissionData.isActive ?? true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    demoPermissions.push(newPermission);\n    return newPermission;\n  }\n\n  async updatePermission(id: string, permissionData: Partial<InsertPermission>): Promise<Permission> {\n    const index = demoPermissions.findIndex(p => p.id === id);\n    if (index === -1) throw new Error('Permission not found');\n\n    // Check if name is being updated and already exists in another permission (case-insensitive)\n    if (permissionData.name) {\n      const existingPermission = demoPermissions.find(p => p.name.toLowerCase() === permissionData.name!.toLowerCase() && p.id !== id);\n      if (existingPermission) {\n        throw new Error(`Permission with name \"${permissionData.name}\" already exists`);\n      }\n    }\n\n    const updatedPermission = {\n      ...demoPermissions[index],\n      ...permissionData,\n      updatedAt: new Date(),\n    };\n    demoPermissions[index] = updatedPermission;\n    return updatedPermission;\n  }\n\n  async deletePermission(id: string): Promise<void> {\n    const permission = demoPermissions.find(p => p.id === id);\n    if (!permission) throw new Error('Permission not found');\n\n    // Check if permission is referenced by any role\n    const referencingRolePermissions = demoRolePermissions.filter(rp => rp.permissionId === id);\n    if (referencingRolePermissions.length > 0) {\n      const roles = referencingRolePermissions.map(rp => {\n        const role = demoRoles.find(r => r.id === rp.roleId);\n        return role ? role.displayName : 'Unknown Role';\n      }).join(', ');\n      throw new Error(`Cannot delete permission: it is assigned to the following roles: ${roles}`);\n    }\n\n    // Remove permission from all roles (cascade cleanup)\n    demoRolePermissions = demoRolePermissions.filter(rp => rp.permissionId !== id);\n\n    const index = demoPermissions.findIndex(p => p.id === id);\n    if (index !== -1) {\n      demoPermissions.splice(index, 1);\n    }\n  }\n\n  // Roles\n  async getRoles(): Promise<Role[]> {\n    return [...demoRoles]\n      .filter(r => r.isActive)\n      .sort((a, b) => {\n        // System roles first, then custom roles, both alphabetically\n        if (a.isSystemRole && !b.isSystemRole) return -1;\n        if (!a.isSystemRole && b.isSystemRole) return 1;\n        return a.displayName.localeCompare(b.displayName);\n      });\n  }\n\n  async getRole(id: string): Promise<Role | undefined> {\n    return demoRoles.find(r => r.id === id);\n  }\n\n  async getRoleWithPermissions(id: string): Promise<RoleWithPermissions | undefined> {\n    const role = demoRoles.find(r => r.id === id);\n    if (!role) return undefined;\n\n    const rolePermissions = demoRolePermissions\n      .filter(rp => rp.roleId === id)\n      .map(rp => {\n        const permission = demoPermissions.find(p => p.id === rp.permissionId);\n        return {\n          ...rp,\n          permission: permission!\n        };\n      })\n      .filter(rp => rp.permission); // Only include valid permissions\n\n    return {\n      ...role,\n      rolePermissions\n    };\n  }\n\n  async createRole(roleData: InsertRole): Promise<Role> {\n    // Check if role name already exists (case-insensitive)\n    const existingRole = demoRoles.find(r => r.name.toLowerCase() === roleData.name.toLowerCase());\n    if (existingRole) {\n      throw new Error(`Role with name \"${roleData.name}\" already exists`);\n    }\n\n    const id = crypto.randomUUID();\n    const newRole: Role = {\n      id,\n      name: roleData.name,\n      displayName: roleData.displayName,\n      description: roleData.description || null,\n      isSystemRole: roleData.isSystemRole ?? false,\n      isActive: roleData.isActive ?? true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    demoRoles.push(newRole);\n    return newRole;\n  }\n\n  async updateRole(id: string, roleData: Partial<InsertRole>): Promise<Role> {\n    const index = demoRoles.findIndex(r => r.id === id);\n    if (index === -1) throw new Error('Role not found');\n\n    const currentRole = demoRoles[index];\n\n    // Prevent updating system roles\n    if (currentRole.isSystemRole && (roleData.name || roleData.isSystemRole === false)) {\n      throw new Error('Cannot modify name or system status of system roles');\n    }\n\n    // Check if name is being updated and already exists in another role (case-insensitive)\n    if (roleData.name) {\n      const existingRole = demoRoles.find(r => r.name.toLowerCase() === roleData.name!.toLowerCase() && r.id !== id);\n      if (existingRole) {\n        throw new Error(`Role with name \"${roleData.name}\" already exists`);\n      }\n    }\n\n    const updatedRole = {\n      ...currentRole,\n      ...roleData,\n      updatedAt: new Date(),\n    };\n    demoRoles[index] = updatedRole;\n    return updatedRole;\n  }\n\n  async deleteRole(id: string): Promise<void> {\n    const role = demoRoles.find(r => r.id === id);\n    if (!role) throw new Error('Role not found');\n\n    // Prevent deleting system roles\n    if (role.isSystemRole) {\n      throw new Error('Cannot delete system roles');\n    }\n\n    // Set roleId to null for users assigned to this role (cascade cleanup)\n    demoUsers.forEach(user => {\n      if (user.roleId === id) {\n        user.roleId = null;\n        user.updatedAt = new Date();\n      }\n    });\n\n    // Remove all role permissions (cascade cleanup)\n    demoRolePermissions = demoRolePermissions.filter(rp => rp.roleId !== id);\n\n    // Remove the role\n    const index = demoRoles.findIndex(r => r.id === id);\n    if (index !== -1) {\n      demoRoles.splice(index, 1);\n    }\n  }\n\n  // Role Permissions\n  async getRolePermissions(roleId: string): Promise<RolePermission[]> {\n    return demoRolePermissions.filter(rp => rp.roleId === roleId);\n  }\n\n  // Get role permissions by role name (for demo users who use role names)\n  async getRolePermissionsByName(roleName: string): Promise<(RolePermission & { permission: Permission })[]> {\n    // Admin has access to ALL permissions - total access as requested\n    if (roleName === 'admin') {\n      const allPermissions = await this.getPermissions();\n      return allPermissions.map(permission => ({\n        id: crypto.randomUUID(),\n        roleId: '1', // admin role ID\n        permissionId: permission.id,\n        createdAt: new Date(),\n        permission\n      }));\n    }\n\n    // Find the role by name\n    const role = demoRoles.find(r => r.name === roleName);\n    if (!role) {\n      console.warn(`Role '${roleName}' not found`);\n      return [];\n    }\n\n    // Get role permissions for this role ID\n    const rolePermissions = demoRolePermissions.filter(rp => rp.roleId === role.id);\n    \n    // Join with permissions data to return complete permission information\n    const permissionsWithData: (RolePermission & { permission: Permission })[] = [];\n    \n    for (const rp of rolePermissions) {\n      const permission = demoPermissions.find(p => p.id === rp.permissionId && p.isActive);\n      if (permission) {\n        permissionsWithData.push({\n          ...rp,\n          permission\n        });\n      } else {\n        console.warn(`Permission ${rp.permissionId} not found or inactive for role ${roleName}`);\n      }\n    }\n\n    return permissionsWithData;\n  }\n\n  async addPermissionToRole(roleId: string, permissionId: string): Promise<RolePermission> {\n    // Check if role exists\n    const role = demoRoles.find(r => r.id === roleId);\n    if (!role) throw new Error('Role not found');\n\n    // Check if permission exists\n    const permission = demoPermissions.find(p => p.id === permissionId);\n    if (!permission) throw new Error('Permission not found');\n\n    // Check if permission is already assigned to role\n    const existingRolePermission = demoRolePermissions.find(rp => rp.roleId === roleId && rp.permissionId === permissionId);\n    if (existingRolePermission) {\n      throw new Error('Permission is already assigned to this role');\n    }\n\n    const id = crypto.randomUUID();\n    const newRolePermission: RolePermission = {\n      id,\n      roleId,\n      permissionId,\n      createdAt: new Date(),\n    };\n    demoRolePermissions.push(newRolePermission);\n    return newRolePermission;\n  }\n\n  async removePermissionFromRole(roleId: string, permissionId: string): Promise<void> {\n    const index = demoRolePermissions.findIndex(rp => rp.roleId === roleId && rp.permissionId === permissionId);\n    if (index !== -1) {\n      demoRolePermissions.splice(index, 1);\n    }\n  }\n\n  async updateRolePermissions(roleId: string, permissionIds: string[]): Promise<void> {\n    // Check if role exists\n    const role = demoRoles.find(r => r.id === roleId);\n    if (!role) throw new Error('Role not found');\n\n    // Check if all permissions exist\n    for (const permissionId of permissionIds) {\n      const permission = demoPermissions.find(p => p.id === permissionId);\n      if (!permission) throw new Error(`Permission with id ${permissionId} not found`);\n    }\n\n    // Remove all current permissions for this role\n    demoRolePermissions = demoRolePermissions.filter(rp => rp.roleId !== roleId);\n\n    // Add new permissions\n    for (const permissionId of permissionIds) {\n      const id = crypto.randomUUID();\n      const newRolePermission: RolePermission = {\n        id,\n        roleId,\n        permissionId,\n        createdAt: new Date(),\n      };\n      demoRolePermissions.push(newRolePermission);\n    }\n  }\n\n  // User Permissions - permissões individuais por usuário\n  async getUserPermissions(userId: string): Promise<UserPermission[]> {\n    return demoUserPermissions.filter(up => up.userId === userId);\n  }\n\n  async getUserWithPermissions(userId: string): Promise<UserWithPermissions | undefined> {\n    try {\n      // Find user in the correct demo users array that matches the login IDs\n      const loginDemoUsers = [\n        { id: '1', email: 'admin@demo.com', firstName: 'Ivan', lastName: 'Silva', role: 'admin' },\n        { id: '2', email: 'teacher@demo.com', firstName: 'Ivan', lastName: 'Silva', role: 'teacher' },\n        { id: '3', email: 'secretary@demo.com', firstName: 'Ivan', lastName: 'Silva', role: 'secretary' },\n        { id: '4', email: 'student@demo.com', firstName: 'Ivan', lastName: 'Silva', role: 'student' },\n      ];\n      \n      const user = loginDemoUsers.find(u => u.id === userId);\n      if (!user) {\n        return undefined;\n      }\n\n      // Find the role object by name\n      const role = demoRoles.find(r => r.name === user.role && r.isActive);\n      \n      if (!role) {\n        console.warn(`Role '${user.role}' not found or inactive for user ${userId}`);\n        return {\n          ...user,\n          role: null,\n          userPermissions: [],\n        };\n      }\n      \n      // Get effective permissions from role\n      const rolePermissions = demoRolePermissions.filter(rp => rp.roleId === role.id);\n      \n      const userPermissions: (UserPermission & { permission: Permission })[] = [];\n      \n      for (const rp of rolePermissions) {\n        const permission = demoPermissions.find(p => p.id === rp.permissionId && p.isActive);\n        if (permission) {\n          userPermissions.push({\n            permission,\n            isGranted: true,\n            id: crypto.randomUUID(),\n            userId: user.id,\n            permissionId: permission.id,\n            createdAt: new Date(),\n            updatedAt: new Date()\n          });\n        } else {\n          console.warn(`Permission ${rp.permissionId} not found or inactive for role ${role.name}`);\n        }\n      }\n\n      return {\n        ...user,\n        role,\n        userPermissions,\n      };\n    } catch (error) {\n      console.error(\"Error fetching user with permissions:\", error);\n      throw error;\n    }\n  }\n\n  async grantUserPermission(userId: string, permissionId: string): Promise<UserPermission> {\n    // Check if user exists\n    const user = demoUsers.find(u => u.id === userId);\n    if (!user) throw new Error('User not found');\n\n    // Check if permission exists\n    const permission = demoPermissions.find(p => p.id === permissionId);\n    if (!permission) throw new Error('Permission not found');\n\n    // Check if permission is already granted to user\n    const existingUserPermission = demoUserPermissions.find(up => up.userId === userId && up.permissionId === permissionId);\n    if (existingUserPermission) {\n      // Update existing permission to granted\n      existingUserPermission.isGranted = true;\n      existingUserPermission.updatedAt = new Date();\n      return existingUserPermission;\n    }\n\n    const id = crypto.randomUUID();\n    const newUserPermission: UserPermission = {\n      id,\n      userId,\n      permissionId,\n      isGranted: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    demoUserPermissions.push(newUserPermission);\n    return newUserPermission;\n  }\n\n  async revokeUserPermission(userId: string, permissionId: string): Promise<void> {\n    const existingUserPermission = demoUserPermissions.find(up => up.userId === userId && up.permissionId === permissionId);\n    if (existingUserPermission) {\n      // Set to revoked instead of deleting to maintain audit trail\n      existingUserPermission.isGranted = false;\n      existingUserPermission.updatedAt = new Date();\n    }\n  }\n\n  async updateUserPermissions(userId: string, permissionIds: string[]): Promise<void> {\n    // Check if user exists\n    const user = demoUsers.find(u => u.id === userId);\n    if (!user) throw new Error('User not found');\n\n    // Check if all permissions exist\n    for (const permissionId of permissionIds) {\n      const permission = demoPermissions.find(p => p.id === permissionId);\n      if (!permission) throw new Error(`Permission with id ${permissionId} not found`);\n    }\n\n    // Remove all current permissions for this user\n    demoUserPermissions = demoUserPermissions.filter(up => up.userId !== userId);\n\n    // Add new permissions\n    for (const permissionId of permissionIds) {\n      const id = crypto.randomUUID();\n      const newUserPermission: UserPermission = {\n        id,\n        userId,\n        permissionId,\n        isGranted: true,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n      demoUserPermissions.push(newUserPermission);\n    }\n  }\n\n  async getUsersWithPermissions(): Promise<UserWithPermissions[]> {\n    return Promise.all(\n      demoUsers.map(async (user) => {\n        const userWithPermissions = await this.getUserWithPermissions(user.id);\n        return userWithPermissions!;\n      })\n    );\n  }\n\n  // Migration function - sincronizar usuários com permissões baseadas no role atual\n  async migrateUsersToIndividualPermissions(): Promise<void> {\n    console.log('Iniciando migração de usuários para permissões individuais...');\n\n    // Limpar permissões existentes de usuários\n    demoUserPermissions.length = 0;\n\n    // Para cada usuário, criar permissões baseadas no seu role atual\n    for (const user of demoUsers) {\n      const userRole = user.role; // Role enum do usuário (mantido para compatibilidade)\n\n      if (!userRole) continue;\n\n      // Obter permissões do role correspondente\n      let rolePermissionIds: string[] = [];\n\n      switch (userRole) {\n        case 'admin':\n          // Admin tem acesso a todas as páginas incluindo configurações\n          rolePermissionIds = ['1', '2', '3', '4', '5', '6', '7', '8', '9']; // Dashboard, Unidades, Colaboradores, Alunos, Cursos, Agenda, Financeiro, Área do Aluno, Configurações\n          break;\n\n        case 'teacher':\n          // Professor tem acesso a dashboard, alunos, cursos e agenda\n          rolePermissionIds = ['1', '4', '5', '6']; // Dashboard, Alunos, Cursos, Agenda\n          break;\n\n        case 'secretary':\n          // Secretária tem acesso a dashboard, unidades, alunos, cursos e agenda\n          rolePermissionIds = ['1', '2', '4', '5', '6']; // Dashboard, Unidades, Alunos, Cursos, Agenda\n          break;\n\n\n        case 'student':\n          // Aluno tem acesso a dashboard e área do aluno\n          rolePermissionIds = ['1', '8']; // Dashboard, Área do Aluno\n          break;\n\n        default:\n          // Role desconhecido, dar apenas dashboard\n          rolePermissionIds = ['1']; // Dashboard\n      }\n\n      // Criar permissões individuais para o usuário\n      for (const permissionId of rolePermissionIds) {\n        const id = crypto.randomUUID();\n        const userPermission: UserPermission = {\n          id,\n          userId: user.id,\n          permissionId,\n          isGranted: true,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        };\n        demoUserPermissions.push(userPermission);\n      }\n\n      console.log(`Usuário ${user.firstName} ${user.lastName} (${userRole}) migrado com ${rolePermissionIds.length} permissões`);\n    }\n\n    console.log(`Migração concluída! ${demoUsers.length} usuários migrados com ${demoUserPermissions.length} permissões individuais`);\n  }\n\n  // User Settings\n  async getUserSettings(userId: string): Promise<UserSettings | undefined> {\n    return demoUserSettings.find(s => s.userId === userId);\n  }\n\n  async createUserSettings(settings: InsertUserSettings): Promise<UserSettings> {\n    const id = crypto.randomUUID();\n    const newSettings: UserSettings = {\n      id,\n      ...settings,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    demoUserSettings.push(newSettings);\n    return newSettings;\n  }\n\n  async updateUserSettings(userId: string, settings: Partial<InsertUserSettings>): Promise<UserSettings> {\n    const index = demoUserSettings.findIndex(s => s.userId === userId);\n    if (index === -1) {\n      // Create new settings if they don't exist\n      return this.createUserSettings({ userId, ...settings } as InsertUserSettings);\n    }\n\n    const updatedSettings = {\n      ...demoUserSettings[index],\n      ...settings,\n      updatedAt: new Date(),\n    };\n    demoUserSettings[index] = updatedSettings;\n    return updatedSettings;\n  }\n\n  // Support Tickets\n  async getSupportTickets(): Promise<SupportTicket[]> {\n    return [...demoSupportTickets].sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async getSupportTicketsByUser(userId: string): Promise<SupportTicket[]> {\n    return demoSupportTickets\n      .filter(t => t.userId === userId)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async getSupportTicket(id: string): Promise<SupportTicketWithResponses | undefined> {\n    const ticket = demoSupportTickets.find(t => t.id === id);\n    if (!ticket) return undefined;\n\n    const user = demoUsers.find(u => u.id === ticket.userId);\n    const assignedUser = ticket.assignedTo ? demoUsers.find(u => u.id === ticket.assignedTo) : undefined;\n    const responses = demoSupportTicketResponses.filter(r => r.ticketId === id);\n\n    if (!user) return undefined;\n\n    return {\n      ...ticket,\n      user,\n      assignedUser,\n      responses,\n    };\n  }\n\n  async createSupportTicket(ticket: InsertSupportTicket): Promise<SupportTicket> {\n    const id = crypto.randomUUID();\n    const newTicket: SupportTicket = {\n      id,\n      ...ticket,\n      status: 'open',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    demoSupportTickets.push(newTicket);\n    return newTicket;\n  }\n\n  async updateSupportTicket(id: string, ticket: Partial<InsertSupportTicket>): Promise<SupportTicket> {\n    const index = demoSupportTickets.findIndex(t => t.id === id);\n    if (index === -1) throw new Error('Ticket not found');\n\n    const updatedTicket = {\n      ...demoSupportTickets[index],\n      ...ticket,\n      updatedAt: new Date(),\n    };\n    demoSupportTickets[index] = updatedTicket;\n    return updatedTicket;\n  }\n\n  async deleteSupportTicket(id: string): Promise<void> {\n    const index = demoSupportTickets.findIndex(t => t.id === id);\n    if (index !== -1) {\n      demoSupportTickets.splice(index, 1);\n      // Also remove associated responses\n      for (let i = demoSupportTicketResponses.length - 1; i >= 0; i--) {\n        if (demoSupportTicketResponses[i].ticketId === id) {\n          demoSupportTicketResponses.splice(i, 1);\n        }\n      }\n    }\n  }\n\n  // Support Ticket Responses\n  async createSupportTicketResponse(response: InsertSupportTicketResponse): Promise<SupportTicketResponse> {\n    const id = crypto.randomUUID();\n    const newResponse: SupportTicketResponse = {\n      id,\n      ...response,\n      createdAt: new Date(),\n    };\n    demoSupportTicketResponses.push(newResponse);\n    return newResponse;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n\n","size_bytes":79105},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport { relations } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  boolean,\n  pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (mandatory for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User roles enum - simplificado para 4 roles fixos\nexport const userRoleEnum = pgEnum('user_role', [\n  'admin',     // Administrativo - acesso total\n  'secretary', // Secretario - acesso quase total\n  'teacher',   // Professor - acesso limitado focado em ensino  \n  'student'    // Aluno - apenas área do aluno\n]);\n\n// Permission categories table - for dynamic categories\nexport const permissionCategories = pgTable(\"permission_categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull().unique(), // ex: \"dashboard\", \"units\", \"custom_reports\"\n  displayName: varchar(\"display_name\").notNull(), // ex: \"Dashboard\", \"Unidades\", \"Relatórios Customizados\"\n  description: text(\"description\"),\n  isSystemCategory: boolean(\"is_system_category\").default(false), // true for fixed categories\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Permissions table - todas as permissões disponíveis no sistema\nexport const permissions = pgTable(\"permissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull().unique(), // ex: \"access_units\", \"access_schedule\"\n  displayName: varchar(\"display_name\").notNull(), // ex: \"Acesso a Unidades\", \"Acesso a Agenda\"\n  description: text(\"description\"),\n  categoryId: varchar(\"category_id\").references(() => permissionCategories.id, { onDelete: 'cascade' }).notNull(),\n  category: varchar(\"category\").notNull(), // Keep for backward compatibility, will be synced with categoryId\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Roles table - mantido para compatibilidade, mas com foco nos 4 roles fixos\nexport const roles = pgTable(\"roles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull().unique(), // \"admin\", \"secretary\", \"teacher\", \"student\"\n  displayName: varchar(\"display_name\").notNull(), // \"Administrativo\", \"Secretario\", \"Professor\", \"Aluno\"\n  description: text(\"description\"),\n  isSystemRole: boolean(\"is_system_role\").default(true), // todos os 4 roles são fixos do sistema\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Role permissions relationship - quais permissões cada role tem (para os 4 roles fixos)\nexport const rolePermissions = pgTable(\"role_permissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  roleId: varchar(\"role_id\").references(() => roles.id, { onDelete: 'cascade' }).notNull(),\n  permissionId: varchar(\"permission_id\").references(() => permissions.id, { onDelete: 'cascade' }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => [\n  index(\"UQ_role_permission\").on(table.roleId, table.permissionId),\n]);\n\n// User storage table (mandatory for Replit Auth)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: userRoleEnum(\"role\").default('student'), // Sistema simplificado: apenas 4 roles fixos\n  roleId: varchar(\"role_id\").references(() => roles.id, { onDelete: 'set null' }), // referência para tabela roles\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Units table\nexport const units = pgTable(\"units\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  address: text(\"address\"),\n  phone: varchar(\"phone\"),\n  email: varchar(\"email\"),\n  managerId: varchar(\"manager_id\").references(() => users.id),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Staff table (extends users with additional info)\nexport const staff = pgTable(\"staff\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  unitId: varchar(\"unit_id\").references(() => units.id),\n  employeeId: varchar(\"employee_id\").unique(),\n  position: varchar(\"position\"),\n  department: varchar(\"department\"),\n  salary: integer(\"salary\"),\n  hireDate: timestamp(\"hire_date\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Students table\nexport const students = pgTable(\"students\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  studentId: varchar(\"student_id\").unique(),\n  unitId: varchar(\"unit_id\").references(() => units.id),\n  enrollmentDate: timestamp(\"enrollment_date\"),\n  status: varchar(\"status\").default('active'), // active, inactive, graduated\n  emergencyContact: text(\"emergency_contact\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Courses table\nexport const courses = pgTable(\"courses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  language: varchar(\"language\").notNull(),\n  level: varchar(\"level\").notNull(), // beginner, intermediate, advanced\n  duration: integer(\"duration\"), // duration in hours\n  price: integer(\"price\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Books table - livros virtuais dentro de cada curso\nexport const books = pgTable(\"books\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  courseId: varchar(\"course_id\").references(() => courses.id).notNull(),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  pdfUrl: varchar(\"pdf_url\"), // URL do arquivo PDF do livro\n  color: varchar(\"color\").notNull().default('#3b82f6'), // Cor do livro em hex\n  displayOrder: integer(\"display_order\").default(1), // Ordem do livro dentro do curso\n  totalDays: integer(\"total_days\").default(30), // Quantos dias de aula tem o livro\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Classes table (turmas)\nexport const classes = pgTable(\"classes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  bookId: varchar(\"book_id\").references(() => books.id).notNull(),\n  teacherId: varchar(\"teacher_id\").references(() => users.id).notNull(),\n  unitId: varchar(\"unit_id\").references(() => units.id).notNull(),\n  name: varchar(\"name\").notNull(),\n  schedule: text(\"schedule\"), // JSON string with schedule info\n  dayOfWeek: integer(\"day_of_week\"), // 0=Sunday, 1=Monday, ..., 6=Saturday  \n  startTime: varchar(\"start_time\"), // formato HH:mm\n  endTime: varchar(\"end_time\"), // formato HH:mm\n  room: varchar(\"room\"),\n  maxStudents: integer(\"max_students\").default(15),\n  currentStudents: integer(\"current_students\").default(0),\n  startDate: timestamp(\"start_date\"),\n  endDate: timestamp(\"end_date\"),\n  currentDay: integer(\"current_day\").default(1), // Qual DIA a turma está atualmente\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Class enrollments\nexport const classEnrollments = pgTable(\"class_enrollments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  classId: varchar(\"class_id\").references(() => classes.id).notNull(),\n  studentId: varchar(\"student_id\").references(() => students.id).notNull(),\n  enrollmentDate: timestamp(\"enrollment_date\").defaultNow(),\n  status: varchar(\"status\").default('active'), // active, dropped, completed\n  finalGrade: varchar(\"final_grade\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Schedule/Lessons table\nexport const lessons = pgTable(\"lessons\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  classId: varchar(\"class_id\").references(() => classes.id).notNull(),\n  title: varchar(\"title\").notNull(),\n  bookDay: integer(\"book_day\").notNull(), // DIA 1, DIA 2, etc. do livro\n  date: timestamp(\"date\").notNull(),\n  startTime: varchar(\"start_time\").notNull(),\n  endTime: varchar(\"end_time\").notNull(),\n  room: varchar(\"room\"),\n  status: varchar(\"status\").default('scheduled'), // scheduled, in_progress, completed, cancelled\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// User permissions table - permissões individuais por usuário baseadas nas páginas do menu\nexport const userPermissions = pgTable(\"user_permissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  permissionId: varchar(\"permission_id\").references(() => permissions.id, { onDelete: 'cascade' }).notNull(),\n  isGranted: boolean(\"is_granted\").default(true).notNull(), // permite negação explícita de permissão\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => [\n  index(\"UQ_user_permission\").on(table.userId, table.permissionId),\n]);\n\n// Relations - restauradas para manter compatibilidade\nexport const permissionCategoriesRelations = relations(permissionCategories, ({ many }) => ({\n  permissions: many(permissions),\n}));\n\nexport const permissionsRelations = relations(permissions, ({ one, many }) => ({\n  category: one(permissionCategories, {\n    fields: [permissions.categoryId],\n    references: [permissionCategories.id],\n  }),\n  rolePermissions: many(rolePermissions),\n  userPermissions: many(userPermissions),\n}));\n\nexport const rolesRelations = relations(roles, ({ many }) => ({\n  rolePermissions: many(rolePermissions),\n  users: many(users),\n}));\n\nexport const rolePermissionsRelations = relations(rolePermissions, ({ one }) => ({\n  role: one(roles, {\n    fields: [rolePermissions.roleId],\n    references: [roles.id],\n  }),\n  permission: one(permissions, {\n    fields: [rolePermissions.permissionId],\n    references: [permissions.id],\n  }),\n}));\n\nexport const userPermissionsRelations = relations(userPermissions, ({ one }) => ({\n  user: one(users, {\n    fields: [userPermissions.userId],\n    references: [users.id],\n  }),\n  permission: one(permissions, {\n    fields: [userPermissions.permissionId],\n    references: [permissions.id],\n  }),\n}));\n\nexport const usersRelations = relations(users, ({ one, many }) => ({\n  staff: one(staff, {\n    fields: [users.id],\n    references: [staff.userId],\n  }),\n  student: one(students, {\n    fields: [users.id],\n    references: [students.userId],\n  }),\n  role: one(roles, {\n    fields: [users.roleId],\n    references: [roles.id],\n  }),\n  teachingClasses: many(classes),\n  managedUnits: many(units),\n  userPermissions: many(userPermissions),\n}));\n\nexport const unitsRelations = relations(units, ({ one, many }) => ({\n  manager: one(users, {\n    fields: [units.managerId],\n    references: [users.id],\n  }),\n  staff: many(staff),\n  students: many(students),\n  classes: many(classes),\n}));\n\nexport const staffRelations = relations(staff, ({ one }) => ({\n  user: one(users, {\n    fields: [staff.userId],\n    references: [users.id],\n  }),\n  unit: one(units, {\n    fields: [staff.unitId],\n    references: [units.id],\n  }),\n}));\n\nexport const studentsRelations = relations(students, ({ one, many }) => ({\n  user: one(users, {\n    fields: [students.userId],\n    references: [users.id],\n  }),\n  unit: one(units, {\n    fields: [students.unitId],\n    references: [units.id],\n  }),\n  enrollments: many(classEnrollments),\n}));\n\nexport const coursesRelations = relations(courses, ({ many }) => ({\n  classes: many(classes),\n  books: many(books),\n}));\n\nexport const booksRelations = relations(books, ({ one, many }) => ({\n  course: one(courses, {\n    fields: [books.courseId],\n    references: [courses.id],\n  }),\n  classes: many(classes),\n}));\n\nexport const classesRelations = relations(classes, ({ one, many }) => ({\n  book: one(books, {\n    fields: [classes.bookId],\n    references: [books.id],\n  }),\n  teacher: one(users, {\n    fields: [classes.teacherId],\n    references: [users.id],\n  }),\n  unit: one(units, {\n    fields: [classes.unitId],\n    references: [units.id],\n  }),\n  enrollments: many(classEnrollments),\n  lessons: many(lessons),\n}));\n\nexport const classEnrollmentsRelations = relations(classEnrollments, ({ one }) => ({\n  class: one(classes, {\n    fields: [classEnrollments.classId],\n    references: [classes.id],\n  }),\n  student: one(students, {\n    fields: [classEnrollments.studentId],\n    references: [students.id],\n  }),\n}));\n\nexport const lessonsRelations = relations(lessons, ({ one }) => ({\n  class: one(classes, {\n    fields: [lessons.classId],\n    references: [classes.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUnitSchema = createInsertSchema(units).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertStaffSchema = createInsertSchema(staff).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertStudentSchema = createInsertSchema(students).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCourseSchema = createInsertSchema(courses).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertClassSchema = createInsertSchema(classes).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertLessonSchema = createInsertSchema(lessons).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertBookSchema = createInsertSchema(books).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPermissionCategorySchema = createInsertSchema(permissionCategories).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPermissionSchema = createInsertSchema(permissions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertRoleSchema = createInsertSchema(roles).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertRolePermissionSchema = createInsertSchema(rolePermissions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserPermissionSchema = createInsertSchema(userPermissions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type InsertUnit = z.infer<typeof insertUnitSchema>;\nexport type InsertStaff = z.infer<typeof insertStaffSchema>;\nexport type InsertStudent = z.infer<typeof insertStudentSchema>;\nexport type InsertCourse = z.infer<typeof insertCourseSchema>;\nexport type InsertClass = z.infer<typeof insertClassSchema>;\nexport type InsertLesson = z.infer<typeof insertLessonSchema>;\nexport type InsertBook = z.infer<typeof insertBookSchema>;\nexport type InsertPermissionCategory = z.infer<typeof insertPermissionCategorySchema>;\nexport type InsertPermission = z.infer<typeof insertPermissionSchema>;\nexport type InsertRole = z.infer<typeof insertRoleSchema>;\nexport type InsertRolePermission = z.infer<typeof insertRolePermissionSchema>;\nexport type InsertUserPermission = z.infer<typeof insertUserPermissionSchema>;\n\nexport type Unit = typeof units.$inferSelect;\nexport type Staff = typeof staff.$inferSelect;\nexport type Student = typeof students.$inferSelect;\nexport type Course = typeof courses.$inferSelect;\nexport type Book = typeof books.$inferSelect;\nexport type Class = typeof classes.$inferSelect;\nexport type Lesson = typeof lessons.$inferSelect;\nexport type ClassEnrollment = typeof classEnrollments.$inferSelect;\nexport type PermissionCategory = typeof permissionCategories.$inferSelect;\nexport type Permission = typeof permissions.$inferSelect;\nexport type Role = typeof roles.$inferSelect;\nexport type RolePermission = typeof rolePermissions.$inferSelect;\nexport type UserPermission = typeof userPermissions.$inferSelect;\n\n// Extended types with relations\nexport type UserWithRole = User & { role: Role | null };\nexport type UserWithPermissions = User & { \n  role: Role | null;\n  userPermissions: (UserPermission & { permission: Permission })[];\n};\nexport type StaffWithUser = Staff & { user: User };\nexport type StudentWithUser = Student & { user: User };\nexport type ClassWithDetails = Class & { \n  book: Book & { course: Course };\n  teacher: User; \n  unit: Unit;\n  enrollments: (ClassEnrollment & { student: StudentWithUser })[];\n};\n\n// Novo tipo para livros com detalhes do curso\nexport type BookWithDetails = Book & {\n  course: Course;\n  classes: Class[];\n};\n\n// Novo tipo para cursos com todos os detalhes\nexport type CourseWithDetails = Course & {\n  books: (Book & { classes: Class[] })[];\n};\n\n// Tipos para sistema de permissões\nexport type RoleWithPermissions = Role & {\n  rolePermissions: (RolePermission & { permission: Permission })[];\n};\n\nexport type PermissionsByCategory = Record<string, Permission[]>;\n\n// User Settings table\nexport const userSettings = pgTable(\"user_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  theme: varchar(\"theme\").default('light'), // 'light' | 'dark'\n  language: varchar(\"language\").default('pt-BR'),\n  timezone: varchar(\"timezone\").default('America/Sao_Paulo'),\n  dateFormat: varchar(\"date_format\").default('DD/MM/YYYY'),\n  currency: varchar(\"currency\").default('BRL'),\n  emailNotifications: boolean(\"email_notifications\").default(true),\n  pushNotifications: boolean(\"push_notifications\").default(false),\n  systemAlerts: boolean(\"system_alerts\").default(true),\n  lessonReminders: boolean(\"lesson_reminders\").default(true),\n  weeklyReports: boolean(\"weekly_reports\").default(false),\n  autoSave: boolean(\"auto_save\").default(true),\n  twoFactorEnabled: boolean(\"two_factor_enabled\").default(false),\n  sessionTimeout: integer(\"session_timeout\").default(30), // minutes\n  loginAlerts: boolean(\"login_alerts\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Support ticket priority and status enums\nexport const ticketPriorityEnum = pgEnum('ticket_priority', ['low', 'medium', 'high', 'urgent']);\nexport const ticketStatusEnum = pgEnum('ticket_status', ['open', 'in_progress', 'resolved', 'closed']);\n\n// Support Tickets table\nexport const supportTickets = pgTable(\"support_tickets\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  category: varchar(\"category\").notNull(),\n  priority: ticketPriorityEnum(\"priority\").default('medium'),\n  status: ticketStatusEnum(\"status\").default('open'),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  assignedTo: varchar(\"assigned_to\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Support ticket responses table\nexport const supportTicketResponses = pgTable(\"support_ticket_responses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  ticketId: varchar(\"ticket_id\").references(() => supportTickets.id, { onDelete: 'cascade' }).notNull(),\n  message: text(\"message\").notNull(),\n  isFromSupport: boolean(\"is_from_support\").default(false),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas for new tables\nexport const insertUserSettingsSchema = createInsertSchema(userSettings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSupportTicketSchema = createInsertSchema(supportTickets).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  userId: true,\n  assignedTo: true,\n  status: true,\n});\n\nexport const insertSupportTicketResponseSchema = createInsertSchema(supportTicketResponses).omit({\n  id: true,\n  createdAt: true,\n  ticketId: true,\n  userId: true,\n});\n\n// Types for new tables\nexport type InsertUserSettings = z.infer<typeof insertUserSettingsSchema>;\nexport type UserSettings = typeof userSettings.$inferSelect;\nexport type InsertSupportTicket = z.infer<typeof insertSupportTicketSchema>;\nexport type SupportTicket = typeof supportTickets.$inferSelect;\nexport type InsertSupportTicketResponse = z.infer<typeof insertSupportTicketResponseSchema>;\nexport type SupportTicketResponse = typeof supportTicketResponses.$inferSelect;\n\n// Extended types with relations\nexport type SupportTicketWithResponses = SupportTicket & {\n  responses: SupportTicketResponse[];\n  user: User;\n  assignedUser?: User;\n};\n","size_bytes":22058},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/contexts/ThemeContext\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/Landing\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport Units from \"@/pages/Units\";\nimport Staff from \"@/pages/Staff\";\nimport Students from \"@/pages/Students\";\nimport Courses from \"@/pages/Courses\";\nimport Schedule from \"@/pages/Schedule\";\nimport StudentArea from \"@/pages/StudentArea\";\nimport TeacherArea from \"@/pages/TeacherArea\";\nimport Financial from \"@/pages/Financial\";\nimport Permissions from \"@/pages/Permissions\";\nimport Settings from \"@/pages/Settings\";\nimport Support from \"@/pages/Support\";\nimport StudentProgress from \"@/pages/StudentProgress\";\nimport StudentSchedule from \"@/pages/StudentSchedule\";\nimport StudentWorkbook from \"@/pages/StudentWorkbook\";\nimport StudentExams from \"@/pages/StudentExams\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading, user } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {!isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : user?.role === 'student' ? (\n        <>\n          <Route path=\"/\" component={StudentArea} />\n          <Route path=\"/student-area\" component={StudentArea} />\n          <Route path=\"/support\" component={Support} />\n          <Route path=\"/aluno/workbook\" component={StudentWorkbook} />\n          <Route path=\"/aluno/provas\" component={StudentExams} />\n          <Route path=\"/aluno/cronograma\" component={StudentSchedule} />\n          <Route path=\"/aluno/progresso\" component={StudentProgress} />\n        </>\n      ) : (\n        <>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/units\" component={Units} />\n          <Route path=\"/staff\" component={Staff} />\n          <Route path=\"/students\" component={Students} />\n          <Route path=\"/courses\" component={Courses} />\n          <Route path=\"/schedule\" component={Schedule} />\n          <Route path=\"/professor\" component={TeacherArea} />\n          <Route path=\"/financial\" component={Financial} />\n          <Route path=\"/permissions\" component={Permissions} />\n          <Route path=\"/settings\" component={Settings} />\n          <Route path=\"/support\" component={Support} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <div className=\"theme-transition\">\n            <Toaster />\n            <Router />\n          </div>\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":3151},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 96.1%);\n  --foreground: hsl(0, 0%, 17.6%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(0, 0%, 17.6%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(0, 0%, 17.6%);\n  --primary: hsl(271, 100%, 59%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(21, 100%, 51%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(0, 0%, 88.2%);\n  --muted-foreground: hsl(0, 0%, 45%);\n  --accent: hsl(271, 100%, 95%);\n  --accent-foreground: hsl(0, 0%, 17.6%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(0, 0%, 88.2%);\n  --input: hsl(0, 0%, 88.2%);\n  --ring: hsl(271, 100%, 59%);\n  --chart-1: hsl(271, 100%, 59%);\n  --chart-2: hsl(21, 100%, 51%);\n  --chart-3: hsl(213, 94%, 68%);\n  --chart-4: hsl(151, 55%, 41%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(0, 0%, 96.1%);\n  --sidebar-foreground: hsl(0, 0%, 17.6%);\n  --sidebar-primary: hsl(271, 100%, 59%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(271, 100%, 95%);\n  --sidebar-accent-foreground: hsl(271, 100%, 59%);\n  --sidebar-border: hsl(0, 0%, 88.2%);\n  --sidebar-ring: hsl(271, 100%, 59%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 16px;\n  --shadow-2xs: 0 1px 2px rgba(0, 0, 0, 0.05);\n  --shadow-xs: 0 1px 3px rgba(0, 0, 0, 0.08);\n  --shadow-sm: 0 2px 4px rgba(0, 0, 0, 0.06);\n  --shadow: 0 4px 8px rgba(0, 0, 0, 0.08);\n  --shadow-md: 0 6px 12px rgba(0, 0, 0, 0.1);\n  --shadow-lg: 0 8px 16px rgba(0, 0, 0, 0.12);\n  --shadow-xl: 0 12px 24px rgba(0, 0, 0, 0.15);\n  --shadow-2xl: 0 16px 32px rgba(0, 0, 0, 0.18);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 9%);\n  --foreground: hsl(0, 0%, 98%);\n  --card: hsl(0, 0%, 12%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --popover: hsl(0, 0%, 12%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --primary: hsl(271, 100%, 70%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(21, 100%, 60%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(0, 0%, 20%);\n  --muted-foreground: hsl(0, 0%, 65%);\n  --accent: hsl(0, 0%, 15%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62%, 30%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(0, 0%, 20%);\n  --input: hsl(0, 0%, 20%);\n  --ring: hsl(271, 100%, 70%);\n  --chart-1: hsl(271, 100%, 70%);\n  --chart-2: hsl(21, 100%, 60%);\n  --chart-3: hsl(213, 94%, 68%);\n  --chart-4: hsl(151, 55%, 41%);\n  --chart-5: hsl(341, 75%, 55%);\n  --sidebar: hsl(0, 0%, 12%);\n  --sidebar-foreground: hsl(0, 0%, 98%);\n  --sidebar-primary: hsl(271, 100%, 70%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(0, 0%, 15%);\n  --sidebar-accent-foreground: hsl(0, 0%, 98%);\n  --sidebar-border: hsl(0, 0%, 20%);\n  --sidebar-ring: hsl(271, 100%, 70%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 16px;\n  --shadow-2xs: 0px 1px 2px 0px rgba(0, 0, 0, 0.3);\n  --shadow-xs: 0px 1px 3px 0px rgba(0, 0, 0, 0.4);\n  --shadow-sm: 0px 1px 3px 0px rgba(0, 0, 0, 0.4), 0px 1px 2px -1px rgba(0, 0, 0, 0.4);\n  --shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.4), 0px 1px 2px -1px rgba(0, 0, 0, 0.4);\n  --shadow-md: 0px 4px 6px -1px rgba(0, 0, 0, 0.4), 0px 2px 4px -2px rgba(0, 0, 0, 0.4);\n  --shadow-lg: 0px 10px 15px -3px rgba(0, 0, 0, 0.4), 0px 4px 6px -4px rgba(0, 0, 0, 0.4);\n  --shadow-xl: 0px 20px 25px -5px rgba(0, 0, 0, 0.4), 0px 8px 10px -6px rgba(0, 0, 0, 0.4);\n  --shadow-2xl: 0px 25px 50px -12px rgba(0, 0, 0, 0.5);\n}\n\n.glassmorphism {\n  background: rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(15px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);\n}\n\n.glassmorphism-card {\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(20px);\n  border: 1px solid rgba(255, 255, 255, 0.3);\n  box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.1);\n}\n\n.dark .glassmorphism {\n  background: rgba(15, 23, 42, 0.8);\n  backdrop-filter: blur(20px);\n  border: 1px solid rgba(148, 163, 184, 0.1);\n  box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.6);\n}\n\n.dark .glassmorphism-card {\n  background: rgba(15, 23, 42, 0.9);\n  backdrop-filter: blur(20px);\n  border: 1px solid rgba(148, 163, 184, 0.2);\n  box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.6);\n}\n\n.theme-transition {\n  transition: background-color 0.3s ease, border-color 0.3s ease, color 0.3s ease;\n}\n\n.sidebar-hover:hover {\n  background: linear-gradient(135deg, rgba(177, 48, 255, 0.15), rgba(255, 101, 6, 0.1));\n  border-radius: var(--radius);\n}\n\n.card-hover:hover {\n  transform: translateY(-4px);\n  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);\n}\n\n.transition-smooth {\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.gradient-primary {\n  background: linear-gradient(135deg, #b130ff, #d850ff);\n}\n\n.gradient-secondary {\n  background: linear-gradient(135deg, #ff6506, #ff8533);\n}\n\n.gradient-accent {\n  background: linear-gradient(135deg, #b130ff, #ff6506);\n}\n\n.text-gradient {\n  background: linear-gradient(135deg, #b130ff, #ff6506);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n}\n\n.icon-glow {\n  filter: drop-shadow(0 0 8px rgba(177, 48, 255, 0.3));\n}\n\n.neon-border {\n  border: 1px solid transparent;\n  background: linear-gradient(var(--background), var(--background)) padding-box,\n              linear-gradient(135deg, #b130ff, #ff6506) border-box;\n}\n\n.button-hover-effect {\n  position: relative;\n  overflow: hidden;\n  transition: all 0.3s ease;\n}\n\n.button-hover-effect::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: -100%;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\n  transition: left 0.5s ease;\n}\n\n.button-hover-effect:hover::before {\n  left: 100%;\n}\n\n.button-hover-effect:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);\n}\n\n.navbar-shadow {\n  box-shadow: 0 2px 8px -2px rgba(0, 0, 0, 0.08), 0 1px 2px -1px rgba(0, 0, 0, 0.04);\n}\n\n.dark .navbar-shadow {\n  box-shadow: 0 2px 8px -2px rgba(0, 0, 0, 0.3), 0 1px 2px -1px rgba(0, 0, 0, 0.2);\n}\n\n/* Força z-index máximo para dropdowns */\n[data-radix-popper-content-wrapper] {\n  z-index: 999999 !important;\n}\n\n[data-radix-hover-card-content] {\n  z-index: 999999 !important;\n}\n\n/* Garante que hover cards apareçam sobre outros elementos */\n.hover-card-content {\n  z-index: 999999 !important;\n  position: fixed !important;\n}\n\n@keyframes twinkle {\n  0%, 100% { opacity: 0.3; transform: scale(1); }\n  50% { opacity: 1; transform: scale(1.2); }\n}\n\n@keyframes float {\n  0%, 100% { transform: translateY(0px); }\n  50% { transform: translateY(-10px); }\n}\n\n@keyframes slideInUp {\n  from {\n    opacity: 0;\n    transform: translateY(30px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes fadeInScale {\n  from {\n    opacity: 0;\n    transform: scale(0.95);\n  }\n  to {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\n\n.animate-twinkle {\n  animation: twinkle 2s ease-in-out infinite;\n}\n\n.animate-float {\n  animation: float 3s ease-in-out infinite;\n}\n\n.animate-slide-in-up {\n  animation: slideInUp 0.6s ease-out;\n}\n\n.animate-fade-in-scale {\n  animation: fadeInScale 0.5s ease-out;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n","size_bytes":7665},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/Layout.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport Sidebar from \"@/components/Sidebar\";\nimport StudentLayout from \"@/components/StudentLayout\";\nimport { Button } from \"@/components/ui/button\";\nimport { useState, useEffect } from \"react\";\nimport { Menu, Settings, Bell, LogOut } from \"lucide-react\";\nimport { ThemeToggle } from \"@/components/ThemeToggle\";\nimport { \n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation, useRoute } from 'wouter';\n\n\ninterface LayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function Layout({ children }: LayoutProps) {\n  const { user, isLoading, isAuthenticated } = useAuth();\n  const [sidebarExpanded, setSidebarExpanded] = useState(true);\n  const [isMobile, setIsMobile] = useState(false);\n  const [location] = useLocation();\n\n  // Use StudentLayout for students\n  if (user?.role === 'student') {\n    return <StudentLayout>{children}</StudentLayout>;\n  }\n  const { toast } = useToast();\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch('/api/auth/logout', {\n        method: 'POST',\n        credentials: 'include',\n      });\n      if (!response.ok) {\n        throw new Error('Erro ao fazer logout');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Logout realizado\",\n        description: \"Você foi desconectado com sucesso.\",\n      });\n      // Redirecionar para a página de login\n      window.location.href = '/';\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erro no logout\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  // Detectar se é mobile\n  useEffect(() => {\n    const checkMobile = () => {\n      setIsMobile(window.innerWidth < 768);\n      // No mobile, sidebar começa contraído\n      if (window.innerWidth < 768) {\n        setSidebarExpanded(false);\n      }\n    };\n\n    checkMobile();\n    window.addEventListener('resize', checkMobile);\n    return () => window.removeEventListener('resize', checkMobile);\n  }, []);\n\n  const toggleSidebar = () => {\n    setSidebarExpanded(!sidebarExpanded);\n  };\n\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <div className=\"w-12 h-12 bg-primary rounded-2xl flex items-center justify-center mx-auto mb-4\">\n            <i className=\"fas fa-graduation-cap text-primary-foreground text-xl animate-pulse\"></i>\n          </div>\n          <p className=\"text-muted-foreground\">Carregando...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null; // Will be handled by the routing\n  }\n\n  \n\n\n  return (\n    <div className=\"flex h-screen bg-background theme-transition\">\n      <Sidebar expanded={sidebarExpanded} isMobile={isMobile} />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <div className=\"flex justify-between items-center p-4 bg-gray-50/50 border-b border-gray-100/80 navbar-shadow backdrop-blur-sm dark:bg-gray-900/50 dark:border-gray-800/50 theme-transition\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={toggleSidebar}\n            className=\"hover:bg-primary/10 transition-colors\"\n            data-testid=\"button-toggle-sidebar\"\n          >\n            <Menu className=\"h-5 w-5\" />\n          </Button>\n\n          {user && (\n            <div className=\"flex items-center space-x-3\">\n              <ThemeToggle />\n              <DropdownMenu>\n                <DropdownMenuTrigger className=\"flex items-center space-x-3 hover:bg-accent/50 rounded-lg p-2 transition-colors cursor-pointer focus:outline-none\" data-testid=\"dropdown-user\">\n                <div className=\"text-right\">\n                  <p className=\"text-sm font-medium text-foreground\">\n                    {user.firstName} {user.lastName}\n                  </p>\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                      {user.role === 'admin' && 'Administrador'}\n                      {user.role === 'teacher' && 'Professor'}\n                      {user.role === 'secretary' && 'Secretário'}\n                      {user.role === 'student' && 'Estudante'}\n                    </p>\n                </div>\n                <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n                  <span className=\"text-primary-foreground text-sm font-medium\">\n                    {user.firstName?.[0]}{user.lastName?.[0]}\n                  </span>\n                </div>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\" className=\"w-48\" style={{ zIndex: 999999 }}>\n                <DropdownMenuItem className=\"cursor-default\" data-testid=\"menu-item-settings\">\n                  <Settings className=\"mr-2 h-4 w-4\" />\n                  <span>Configurações</span>\n                </DropdownMenuItem>\n                <DropdownMenuItem className=\"cursor-default\" data-testid=\"menu-item-notifications\">\n                  <Bell className=\"mr-2 h-4 w-4\" />\n                  <span>Notificações</span>\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem\n                  className=\"cursor-pointer\"\n                  data-testid=\"menu-item-logout\"\n                  onClick={handleLogout}\n                >\n                  <LogOut className=\"mr-2 h-4 w-4\" />\n                  <span>Sair</span>\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n              </DropdownMenu>\n            </div>\n          )}\n        </div>\n        <main className=\"flex-1 overflow-auto p-6 bg-background theme-transition\">\n          {children}\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":6081},"client/src/components/PageLoader.tsx":{"content":"\nimport { useState, useEffect } from 'react';\n\ninterface PageLoaderProps {\n  children: React.ReactNode;\n  delay?: number;\n}\n\nexport function PageLoader({ children, delay = 30 }: PageLoaderProps) {\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setIsVisible(true);\n    }, delay);\n\n    return () => clearTimeout(timer);\n  }, [delay]);\n\n  return (\n    <div \n      className={`transition-all duration-300 ease-out ${\n        isVisible \n          ? 'opacity-100 translate-y-0' \n          : 'opacity-0 translate-y-8'\n      }`}\n    >\n      {children}\n    </div>\n  );\n}\n\ninterface FadeInProps {\n  children: React.ReactNode;\n  delay?: number;\n  direction?: 'up' | 'down' | 'left' | 'right';\n  className?: string;\n}\n\nexport function FadeIn({ \n  children, \n  delay = 0, \n  direction = 'up',\n  className = '' \n}: FadeInProps) {\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setIsVisible(true);\n    }, delay);\n\n    return () => clearTimeout(timer);\n  }, [delay]);\n\n  const getTransform = () => {\n    if (isVisible) return 'translate-x-0 translate-y-0';\n    \n    switch (direction) {\n      case 'up': return 'translate-y-8';\n      case 'down': return '-translate-y-8';\n      case 'left': return 'translate-x-8';\n      case 'right': return '-translate-x-8';\n      default: return 'translate-y-8';\n    }\n  };\n\n  return (\n    <div \n      className={`transition-all duration-300 ease-out ${\n        isVisible \n          ? 'opacity-100' \n          : 'opacity-0'\n      } ${getTransform()} ${className}`}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport function StaggeredFadeIn({ \n  children, \n  stagger = 100,\n  className = ''\n}: {\n  children: React.ReactNode[];\n  stagger?: number;\n  className?: string;\n}) {\n  return (\n    <div className={className}>\n      {children.map((child, index) => (\n        <FadeIn key={index} delay={index * stagger}>\n          {child}\n        </FadeIn>\n      ))}\n    </div>\n  );\n}\n","size_bytes":2032},"client/src/components/Sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n\ninterface SidebarProps {\n  expanded: boolean;\n  isMobile: boolean;\n}\n\nexport default function Sidebar({ expanded, isMobile }: SidebarProps) {\n  const { user } = useAuth();\n  const [location] = useLocation();\n\n  // Get role-based permissions for access control\n  const { data: rolePermissions, isLoading: permissionsLoading } = useQuery({\n    queryKey: ['/api/auth/effective-permissions'],\n    enabled: !!user?.id,\n    retry: false,\n  });\n\n  const isActive = (path: string) => {\n    if (path === \"/\" && location === \"/\") return true;\n    if (path !== \"/\" && location.startsWith(path)) return true;\n    return false;\n  };\n\n  const canAccess = (permissionName: string) => {\n    // Admin role always has access (failsafe)\n    if (user?.role === 'admin') {\n      return true;\n    }\n\n    // If role permissions are still loading, don't show any menu items (eliminates flicker)\n    if (permissionsLoading) {\n      return false;\n    }\n    \n    // If role permissions haven't loaded yet or are malformed, deny access\n    if (!rolePermissions || !Array.isArray((rolePermissions as any)?.permissions)) {\n      return false;\n    }\n    \n    // Check if user's role has the specific permission\n    return (rolePermissions as any).permissions.some((permission: any) => \n      permission.name === permissionName\n    );\n  };\n\n  const menuItems = [\n    {\n      path: \"/\",\n      icon: \"fas fa-chart-line\",\n      label: \"Dashboard\",\n      permission: \"access_dashboard\"\n    },\n    {\n      path: \"/units\",\n      icon: \"fas fa-building\",\n      label: \"Unidades\",\n      permission: \"access_units\"\n    },\n    {\n      path: \"/staff\",\n      icon: \"fas fa-users\",\n      label: \"Colaboradores\", \n      permission: \"access_staff\"\n    },\n    {\n      path: \"/students\",\n      icon: \"fas fa-user-graduate\",\n      label: \"Alunos\",\n      permission: \"access_students\"\n    },\n    {\n      path: \"/courses\",\n      icon: \"fas fa-book\",\n      label: \"Cursos\",\n      permission: \"access_courses\"\n    },\n    {\n      path: \"/schedule\",\n      icon: \"fas fa-calendar-alt\",\n      label: \"Agenda\",\n      permission: \"access_schedule\"\n    },\n    {\n      path: \"/student-area\",\n      icon: \"fas fa-book-open\",\n      label: \"Área do Aluno\",\n      permission: \"access_student_area\"\n    }\n  ];\n\n  const systemMenuItems = [\n    {\n      path: \"/financial\",\n      icon: \"fas fa-dollar-sign\",\n      label: \"Financeiro\",\n      permission: \"access_financial\"\n    },\n    {\n      path: \"/settings\",\n      icon: \"fas fa-cog\",\n      label: \"Configurações\",\n      permission: \"access_settings\"\n    },\n    {\n      path: \"/permissions\",\n      icon: \"fas fa-shield-alt\",\n      label: \"Permissões\",\n      permission: \"access_permissions\"\n    },\n    {\n      path: \"/support\",\n      icon: \"fas fa-question-circle\",\n      label: \"Suporte\",\n      permission: \"access_support\"\n    }\n  ];\n\n  return (\n    <aside \n      className={`${\n        expanded ? (isMobile ? 'w-64' : 'w-64') : 'w-16'\n      } ${\n        isMobile && !expanded ? 'hidden' : ''\n      } glassmorphism-card border-r border-white/20 flex flex-col shadow-xl backdrop-blur-xl transition-all duration-300 ease-in-out overflow-hidden ${\n        isMobile && expanded ? 'fixed inset-y-0 left-0 z-50' : ''\n      }`} \n      data-testid=\"sidebar\"\n    >\n      {/* Logo & Brand */}\n      <div className={`${expanded ? 'p-6' : 'p-3'} border-b border-white/20 transition-all duration-300`}>\n        <div className={`flex items-center ${expanded ? 'space-x-3' : 'justify-center'}`}>\n          <div className=\"w-12 h-12 gradient-primary rounded-xl flex items-center justify-center icon-glow shadow-lg flex-shrink-0\">\n            <i className=\"fas fa-graduation-cap text-white text-xl\"></i>\n          </div>\n          {expanded && (\n            <div className=\"overflow-hidden\">\n              <h1 className=\"text-xl font-bold text-gradient whitespace-nowrap\">OpenLife</h1>\n              <p className=\"text-xs text-muted-foreground font-medium whitespace-nowrap\">Escola de Idiomas</p>\n            </div>\n          )}\n        </div>\n      </div>\n\n\n      {/* Navigation */}\n      <nav className={`flex-1 overflow-y-auto overflow-x-hidden ${expanded ? 'p-4' : 'p-2'} transition-all duration-300`}>\n        <div className=\"space-y-2\">\n          {/* Main Menu Items */}\n          {menuItems\n            .filter(item => canAccess(item.permission))\n            .map((item) => (\n              <Link key={item.path} href={item.path}>\n                <a\n                  className={`flex items-center ${expanded ? 'space-x-3 px-4 py-3' : 'justify-center px-2 py-3'} rounded-xl transition-smooth group relative ${\n                    isActive(item.path)\n                      ? \"gradient-primary text-white shadow-lg icon-glow\"\n                      : \"text-muted-foreground sidebar-hover\"\n                  }`}\n                  data-testid={`link-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n                  title={!expanded ? item.label : undefined}\n                >\n                  <i className={`${item.icon} w-5 flex-shrink-0`}></i>\n                  {expanded && <span className=\"text-sm font-medium whitespace-nowrap\">{item.label}</span>}\n                  {!expanded && (\n                    <div className=\"absolute left-16 bg-gray-900 text-white text-sm px-2 py-1 rounded-md opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none z-50 whitespace-nowrap\">\n                      {item.label}\n                    </div>\n                  )}\n                </a>\n              </Link>\n            ))}\n\n          {/* Sistema Section */}\n          {(systemMenuItems.some(item => canAccess(item.permission)) || user) && (\n            <div className=\"pt-4\">\n              {expanded && (\n                <p className=\"text-xs font-semibold text-muted-foreground uppercase tracking-wider mb-2\">\n                  Sistema\n                </p>\n              )}\n              <div className=\"space-y-1\">\n                {systemMenuItems\n                  .filter(item => item.path === '/support' ? !!user : canAccess(item.permission))\n                  .map((item) => (\n                    <Link key={item.path} href={item.path}>\n                      <a\n                        className={`flex items-center ${expanded ? 'space-x-3 px-4 py-3' : 'justify-center px-2 py-3'} rounded-xl transition-smooth group relative ${\n                          isActive(item.path)\n                            ? \"gradient-secondary text-white shadow-lg\"\n                            : \"text-muted-foreground sidebar-hover\"\n                        }`}\n                        data-testid={`link-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n                        title={!expanded ? item.label : undefined}\n                      >\n                        <i className={`${item.icon} w-5 flex-shrink-0`}></i>\n                        {expanded && <span className=\"text-sm whitespace-nowrap\">{item.label}</span>}\n                        {!expanded && (\n                          <div className=\"absolute left-16 bg-gray-900 text-white text-sm px-2 py-1 rounded-md opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none z-50 whitespace-nowrap\">\n                            {item.label}\n                          </div>\n                        )}\n                      </a>\n                    </Link>\n                  ))}\n              </div>\n            </div>\n          )}\n        </div>\n      </nav>\n\n    </aside>\n  );\n}","size_bytes":7642},"client/src/components/StatsCard.tsx":{"content":"interface StatsCardProps {\n  title: string;\n  value: string | number;\n  change?: string;\n  changeType?: 'positive' | 'negative' | 'neutral';\n  icon: string;\n  iconColor: 'blue' | 'green' | 'purple' | 'yellow' | 'red';\n  'data-testid'?: string;\n}\n\nexport default function StatsCard({ \n  title, \n  value, \n  change, \n  changeType = 'neutral', \n  icon, \n  iconColor,\n  'data-testid': testId \n}: StatsCardProps) {\n  \n  const getIconBgColor = (color: string) => {\n    switch (color) {\n      case 'blue': return 'bg-blue-100';\n      case 'green': return 'bg-green-100';\n      case 'purple': return 'bg-purple-100';\n      case 'yellow': return 'bg-yellow-100';\n      case 'red': return 'bg-red-100';\n      default: return 'bg-gray-100';\n    }\n  };\n\n  const getIconTextColor = (color: string) => {\n    switch (color) {\n      case 'blue': return 'text-blue-600';\n      case 'green': return 'text-green-600';\n      case 'purple': return 'text-purple-600';\n      case 'yellow': return 'text-yellow-600';\n      case 'red': return 'text-red-600';\n      default: return 'text-gray-600';\n    }\n  };\n\n  const getChangeColor = (type: string) => {\n    switch (type) {\n      case 'positive': return 'text-green-600';\n      case 'negative': return 'text-red-600';\n      default: return 'text-muted-foreground';\n    }\n  };\n\n  return (\n    <div \n      className=\"bg-card rounded-lg border border-border p-6 shadow-sm card-hover transition-smooth\"\n      data-testid={testId}\n    >\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <p className=\"text-sm font-medium text-muted-foreground\">{title}</p>\n          <p className=\"text-3xl font-bold text-foreground\" data-testid={`${testId}-value`}>\n            {value}\n          </p>\n          {change && (\n            <p className={`text-sm mt-1 ${getChangeColor(changeType)}`}>\n              {changeType === 'positive' && <i className=\"fas fa-arrow-up mr-1\"></i>}\n              {changeType === 'negative' && <i className=\"fas fa-arrow-down mr-1\"></i>}\n              <span data-testid={`${testId}-change`}>{change}</span>\n              {changeType !== 'neutral' && ' este mês'}\n            </p>\n          )}\n        </div>\n        <div className={`w-12 h-12 ${getIconBgColor(iconColor)} rounded-lg flex items-center justify-center`}>\n          <i className={`${icon} ${getIconTextColor(iconColor)} text-xl`}></i>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2414},"client/src/components/ThemeToggle.tsx":{"content":"\nimport { Moon, Sun } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { useTheme } from '@/contexts/ThemeContext';\n\nexport function ThemeToggle() {\n  const { theme, toggleTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      className=\"relative w-9 h-9 rounded-lg transition-all duration-300 hover:bg-accent/50\"\n      aria-label={`Alternar para tema ${theme === 'light' ? 'escuro' : 'claro'}`}\n    >\n      <Sun className={`h-4 w-4 absolute transition-all duration-500 ${\n        theme === 'dark' \n          ? 'rotate-90 scale-0 opacity-0' \n          : 'rotate-0 scale-100 opacity-100'\n      }`} />\n      <Moon className={`h-4 w-4 absolute transition-all duration-500 ${\n        theme === 'light' \n          ? '-rotate-90 scale-0 opacity-0' \n          : 'rotate-0 scale-100 opacity-100'\n      }`} />\n    </Button>\n  );\n}\n","size_bytes":915},"client/src/contexts/ThemeContext.tsx":{"content":"\nimport React, { createContext, useContext, useEffect, useState } from 'react';\n\ntype Theme = 'light' | 'dark';\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n  isDark: boolean;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    // Verifica localStorage primeiro, se não existir usa 'light' como padrão\n    const saved = localStorage.getItem('theme') as Theme;\n    if (saved) return saved;\n    \n    // Define 'light' como tema padrão ao invés de verificar a preferência do sistema\n    return 'light';\n  });\n\n  useEffect(() => {\n    const root = document.documentElement;\n    \n    // Remove classes anteriores\n    root.classList.remove('light', 'dark');\n    \n    // Adiciona a classe do tema atual\n    root.classList.add(theme);\n    \n    // Salva no localStorage\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prev => prev === 'light' ? 'dark' : 'light');\n  };\n\n  return (\n    <ThemeContext.Provider value={{\n      theme,\n      toggleTheme,\n      isDark: theme === 'dark'\n    }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}\n","size_bytes":1478},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"\nimport { useQuery } from \"@tanstack/react-query\";\n\ninterface User {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  role: string;\n}\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":372},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Layout from \"@/components/Layout\";\nimport StatsCard from \"@/components/StatsCard\";\nimport { PageLoader, FadeIn, StaggeredFadeIn } from \"@/components/PageLoader\";\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading: authLoading, user } = useAuth();\n\n  const { data: stats, isLoading } = useQuery<{\n    totalStudents: number;\n    activeTeachers: number;\n    todaysClasses: number;\n    monthlyRevenue: number;\n  }>({\n    queryKey: [\"/api/dashboard/stats\"],\n    retry: false,\n  });\n\n  const { data: todaysLessons } = useQuery<any[]>({\n    queryKey: [\"/api/lessons/today\"],\n    retry: false,\n  });\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  if (authLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <Layout>\n      <PageLoader>\n        <div className=\"p-4 lg:p-6 space-y-4 lg:space-y-6\">\n          <FadeIn delay={50}>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-12 h-12 gradient-primary rounded-xl flex items-center justify-center icon-glow\">\n                <i className=\"fas fa-chart-line text-white text-lg\"></i>\n              </div>\n              <div>\n                <h2 className=\"text-3xl font-bold text-gradient\">Dashboard</h2>\n                <p className=\"text-sm text-muted-foreground\">Visão geral do sistema de gestão escolar</p>\n              </div>\n            </div>\n          </FadeIn>\n\n        {/* Stats Cards */}\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-4 gap-4 lg:gap-6\">\n              {Array.from({ length: 4 }).map((_, index) => (\n                <FadeIn key={index} delay={100 + index * 50}>\n                  <div className=\"bg-card rounded-lg border border-border p-6 animate-pulse\">\n                    <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n                    <div className=\"h-8 bg-muted rounded w-1/2 mb-2\"></div>\n                    <div className=\"h-3 bg-muted rounded w-2/3\"></div>\n                  </div>\n                </FadeIn>\n              ))}\n            </div>\n          ) : (\n            <StaggeredFadeIn \n              stagger={80}\n              className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-4 gap-4 lg:gap-6\"\n            >\n              {(() => {\n                  const availableCards = [];\n                  \n                  // Admin vê tudo\n                  if (user?.role === 'admin') {\n                    availableCards.push(\n                      <StatsCard\n                        key=\"students\"\n                        title=\"Total de Alunos\"\n                        value={stats?.totalStudents || 0}\n                        change=\"+12%\"\n                        changeType=\"positive\"\n                        icon=\"fas fa-user-graduate\"\n                        iconColor=\"blue\"\n                        data-testid=\"card-total-students\"\n                      />,\n                      <StatsCard\n                        key=\"teachers\"\n                        title=\"Professores Ativos\"\n                        value={stats?.activeTeachers || 0}\n                        change=\"+3%\"\n                        changeType=\"positive\"\n                        icon=\"fas fa-chalkboard-teacher\"\n                        iconColor=\"green\"\n                        data-testid=\"card-active-teachers\"\n                      />,\n                      <StatsCard\n                        key=\"classes\"\n                        title=\"Aulas Hoje\"\n                        value={stats?.todaysClasses || 0}\n                        change=\"92 concluídas\"\n                        changeType=\"neutral\"\n                        icon=\"fas fa-calendar-check\"\n                        iconColor=\"purple\"\n                        data-testid=\"card-todays-classes\"\n                      />,\n                      <StatsCard\n                        key=\"revenue\"\n                        title=\"Receita Mensal\"\n                        value={`R$ ${(stats?.monthlyRevenue || 0).toLocaleString()}`}\n                        change=\"+8%\"\n                        changeType=\"positive\"\n                        icon=\"fas fa-dollar-sign\"\n                        iconColor=\"yellow\"\n                        data-testid=\"card-monthly-revenue\"\n                      />\n                    );\n                  }\n                  // Professor - só vê dados relevantes para ele\n                  else if (user?.role === 'teacher') {\n                    availableCards.push(\n                      <StatsCard\n                        key=\"my-students\"\n                        title=\"Meus Alunos\"\n                        value={85}\n                        change=\"+5 novos\"\n                        changeType=\"positive\"\n                        icon=\"fas fa-user-graduate\"\n                        iconColor=\"blue\"\n                        data-testid=\"card-my-students\"\n                      />,\n                      <StatsCard\n                        key=\"my-classes\"\n                        title=\"Minhas Turmas\"\n                        value={4}\n                        change=\"2 ativas hoje\"\n                        changeType=\"neutral\"\n                        icon=\"fas fa-users\"\n                        iconColor=\"green\"\n                        data-testid=\"card-my-classes\"\n                      />,\n                      <StatsCard\n                        key=\"classes-today\"\n                        title=\"Aulas Hoje\"\n                        value={stats?.todaysClasses || 0}\n                        change=\"próximas\"\n                        changeType=\"neutral\"\n                        icon=\"fas fa-calendar-check\"\n                        iconColor=\"purple\"\n                        data-testid=\"card-todays-classes\"\n                      />\n                    );\n                  }\n                  // Secretary - vê tudo exceto receita\n                  else if (user?.role === 'secretary') {\n                    availableCards.push(\n                      <StatsCard\n                        key=\"students\"\n                        title=\"Total de Alunos\"\n                        value={stats?.totalStudents || 0}\n                        change=\"+12%\"\n                        changeType=\"positive\"\n                        icon=\"fas fa-user-graduate\"\n                        iconColor=\"blue\"\n                        data-testid=\"card-total-students\"\n                      />,\n                      <StatsCard\n                        key=\"teachers\"\n                        title=\"Professores Ativos\"\n                        value={stats?.activeTeachers || 0}\n                        change=\"+3%\"\n                        changeType=\"positive\"\n                        icon=\"fas fa-chalkboard-teacher\"\n                        iconColor=\"green\"\n                        data-testid=\"card-active-teachers\"\n                      />,\n                      <StatsCard\n                        key=\"classes\"\n                        title=\"Aulas Hoje\"\n                        value={stats?.todaysClasses || 0}\n                        change=\"92 concluídas\"\n                        changeType=\"neutral\"\n                        icon=\"fas fa-calendar-check\"\n                        iconColor=\"purple\"\n                        data-testid=\"card-todays-classes\"\n                      />\n                    );\n                  }\n                  // Student - só vê suas aulas\n                  else if (user?.role === 'student') {\n                    availableCards.push(\n                      <StatsCard\n                        key=\"classes\"\n                        title=\"Minhas Aulas Hoje\"\n                        value={stats?.todaysClasses || 0}\n                        change=\"próximas aulas\"\n                        changeType=\"neutral\"\n                        icon=\"fas fa-calendar-check\"\n                        iconColor=\"purple\"\n                        data-testid=\"card-my-classes\"\n                      />\n                    );\n                  }\n                  \n                  return availableCards;\n                })()}\n              </StaggeredFadeIn>\n            )}\n\n        {/* Main Content Grid */}\n          <FadeIn delay={300}>\n            <div className=\"grid grid-cols-1 xl:grid-cols-3 gap-4 lg:gap-6\">\n              {/* Schedule Overview */}\n              <div className=\"xl:col-span-2 glassmorphism-card rounded-2xl border border-white/20 shadow-xl\">\n            <div className=\"p-6 border-b border-white/20\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-8 h-8 gradient-secondary rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-calendar-day text-white text-sm\"></i>\n                  </div>\n                  <h3 className=\"text-lg font-semibold text-foreground\">Agenda de Hoje</h3>\n                </div>\n                <button className=\"gradient-primary text-white px-4 py-2 rounded-lg text-sm font-medium hover:shadow-lg transition-smooth\">\n                  Ver todas\n                </button>\n              </div>\n            </div>\n            <div className=\"p-6\" data-testid=\"todays-schedule\">\n              <div className=\"space-y-4\">\n                {!todaysLessons || todaysLessons.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <i className=\"fas fa-calendar-times text-muted-foreground text-4xl mb-4\"></i>\n                    <p className=\"text-muted-foreground\">Nenhuma aula agendada para hoje</p>\n                  </div>\n                ) : (\n                  todaysLessons.map((lesson: any) => (\n                    <div key={lesson.id} className=\"flex items-center space-x-4 p-4 rounded-lg bg-muted/50 border border-border/50\">\n                      <div className=\"w-12 h-12 bg-primary rounded-lg flex items-center justify-center flex-shrink-0\">\n                        <i className=\"fas fa-clock text-primary-foreground\"></i>\n                      </div>\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-medium text-foreground\">{lesson.title}</h4>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {lesson.startTime} - {lesson.endTime}\n                          {lesson.room && ` • Sala ${lesson.room}`}\n                        </p>\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        <button className=\"px-3 py-1 text-xs bg-green-100 text-green-700 rounded-full\">\n                          {lesson.status === 'scheduled' ? 'Agendado' : \n                           lesson.status === 'in_progress' ? 'Em andamento' : \n                           'Concluído'}\n                        </button>\n                      </div>\n                    </div>\n                  ))\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Recent Activities */}\n          <div className=\"glassmorphism-card rounded-2xl border border-white/20 shadow-xl\">\n            <div className=\"p-6 border-b border-white/20\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-8 h-8 gradient-accent rounded-lg flex items-center justify-center\">\n                  <i className=\"fas fa-clock text-white text-sm\"></i>\n                </div>\n                <h3 className=\"text-lg font-semibold text-foreground\">Atividades Recentes</h3>\n              </div>\n            </div>\n            <div className=\"p-6\">\n              <div className=\"space-y-4\" data-testid=\"recent-activities\">\n                <div className=\"text-center py-8\">\n                  <i className=\"fas fa-clock text-muted-foreground text-4xl mb-4\"></i>\n                  <p className=\"text-muted-foreground\">Nenhuma atividade recente</p>\n                </div>\n              </div>\n            </div>\n          </div>\n          </div>\n          </FadeIn>\n\n        </div>\n      </PageLoader>\n    </Layout>\n  );\n}\n","size_bytes":12896},"client/src/pages/Landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { ThemeToggle } from \"@/components/ThemeToggle\";\nimport { useState, useEffect } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\n\n// Demo users for display\nconst demoUsers = [\n  { email: 'admin@demo.com', password: 'admin123', role: 'Administrador' },\n  { email: 'teacher@demo.com', password: 'teacher123', role: 'Professor' },\n  { email: 'secretary@demo.com', password: 'secretary123', role: 'Secretário' },\n  { email: 'student@demo.com', password: 'student123', role: 'Aluno' },\n];\n\nexport default function Landing() {\n  const [email, setEmail] = useState(\"admin@demo.com\");\n  const [password, setPassword] = useState(\"admin123\");\n  const [stars, setStars] = useState<Array<{ id: number; x: number; y: number; size: number; animationDelay: number }>>([]);\n\n  useEffect(() => {\n    // Generate random stars for the background\n    const generateStars = () => {\n      const newStars = [];\n      for (let i = 0; i < 100; i++) {\n        newStars.push({\n          id: i,\n          x: Math.random() * 100,\n          y: Math.random() * 100,\n          size: Math.random() * 3 + 1,\n          animationDelay: Math.random() * 3\n        });\n      }\n      setStars(newStars);\n    };\n\n    generateStars();\n  }, []);\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: { email: string; password: string }) => {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(credentials),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Login failed');\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      // Redirect to main app\n      window.location.href = '/';\n    },\n    onError: (error: Error) => {\n      alert('Erro no login: ' + error.message);\n    },\n  });\n\n  const handleLogin = () => {\n    loginMutation.mutate({ email, password });\n  };\n\n  const setDemoUser = (user: { email: string; password: string }) => {\n    setEmail(user.email);\n    setPassword(user.password);\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col lg:flex-row relative\">\n      {/* Theme Toggle - Fixed top right */}\n      <div className=\"fixed top-4 right-4 z-50\">\n        <ThemeToggle />\n      </div>\n      \n      {/* Left Column - Welcome Section with Stars */}\n      <div className=\"hidden lg:flex lg:w-1/2 relative bg-gradient-to-br from-purple-900 via-purple-700 to-purple-800 overflow-hidden\">\n        {/* Stars Animation */}\n        <div className=\"absolute inset-0\">\n          {stars.map((star) => (\n            <div\n              key={star.id}\n              className=\"absolute bg-white rounded-full animate-twinkle\"\n              style={{\n                left: `${star.x}%`,\n                top: `${star.y}%`,\n                width: `${star.size}px`,\n                height: `${star.size}px`,\n                animationDelay: `${star.animationDelay}s`,\n                animationDuration: '3s'\n              }}\n            />\n          ))}\n        </div>\n\n        {/* Overlay gradient */}\n        <div className=\"absolute inset-0 bg-gradient-to-t from-black/30 to-transparent\" />\n\n        {/* Content */}\n        <div className=\"relative z-10 flex flex-col justify-center items-center text-center px-8 lg:px-12 text-white w-full\">\n          <div className=\"w-20 h-20 bg-white/20 backdrop-blur-sm rounded-3xl flex items-center justify-center mb-8 border border-white/30\">\n            <i className=\"fas fa-graduation-cap text-white text-3xl\"></i>\n          </div>\n\n          <h1 className=\"text-5xl font-bold mb-4 bg-gradient-to-r from-white to-orange-200 bg-clip-text text-transparent\">\n            Bem-vindo ao Portal\n          </h1>\n\n          <h2 className=\"text-3xl font-semibold mb-6 text-orange-100\">\n            OpenLife\n          </h2>\n\n          <p className=\"text-xl text-orange-200 mb-8 max-w-md leading-relaxed\">\n            Sistema completo de gestão escolar para escolas de idiomas. \n            Gerencie alunos, professores, horários e muito mais.\n          </p>\n\n          <div className=\"grid grid-cols-2 gap-4 lg:gap-6 mt-8 w-full max-w-sm mx-auto\">\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 lg:w-16 lg:h-16 bg-white/20 backdrop-blur-sm rounded-2xl flex items-center justify-center mx-auto mb-3 border border-white/30\">\n                <i className=\"fas fa-users text-white text-lg lg:text-2xl\"></i>\n              </div>\n              <p className=\"text-xs lg:text-sm text-orange-200\">Gestão de Alunos</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 lg:w-16 lg:h-16 bg-white/20 backdrop-blur-sm rounded-2xl flex items-center justify-center mx-auto mb-3 border border-white/30\">\n                <i className=\"fas fa-calendar-alt text-white text-lg lg:text-2xl\"></i>\n              </div>\n              <p className=\"text-xs lg:text-sm text-orange-200\">Agenda Inteligente</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Right Column - Login Form */}\n      <div className=\"w-full lg:w-1/2 flex items-center justify-center p-4 sm:p-6 lg:p-8 bg-gradient-to-br from-purple-100 via-purple-50 to-indigo-100 dark:from-gray-900 dark:via-gray-800 dark:to-black theme-transition min-h-screen lg:min-h-auto\">\n        <div className=\"w-full max-w-md mx-auto\">\n          {/* Mobile Logo */}\n          <div className=\"lg:hidden text-center mb-8\">\n            <div className=\"w-16 h-16 bg-primary rounded-2xl flex items-center justify-center mx-auto mb-4\">\n              <i className=\"fas fa-graduation-cap text-primary-foreground text-2xl\"></i>\n            </div>\n            <h1 className=\"text-2xl font-bold text-foreground\">OpenLife</h1>\n            <p className=\"text-muted-foreground\">Sistema de Gestão Escolar</p>\n          </div>\n\n\n          <Card className=\"shadow-2xl glassmorphism-card mb-6 theme-transition\">\n            <CardHeader className=\"space-y-4 pb-6\">\n              <div className=\"text-center\">\n                <CardTitle className=\"text-2xl font-bold text-foreground\">\n                  Login Demonstrativo\n                </CardTitle>\n                <CardDescription className=\"text-muted-foreground mt-2\">\n                  Escolha um usuário demo ou digite suas credenciais\n                </CardDescription>\n              </div>\n            </CardHeader>\n\n            <CardContent className=\"space-y-6\">\n              {/* Demo Users */}\n              <div className=\"space-y-3\">\n                <Label className=\"text-sm font-medium\">Usuários Demo:</Label>\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-2\">\n                  {demoUsers.map((user, index) => (\n                    <Button\n                      key={index}\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setDemoUser(user)}\n                      className=\"h-auto p-3 flex flex-col items-start bg-white/30 dark:bg-white/10 hover:bg-blue-50 dark:hover:bg-white/20 border-gray-200 dark:border-gray-600 text-left transition-all duration-200\"\n                    >\n                      <span className=\"font-medium text-xs\">{user.role}</span>\n                      <span className=\"text-xs text-muted-foreground truncate w-full\">\n                        {user.email}\n                      </span>\n                    </Button>\n                  ))}\n                </div>\n              </div>\n\n              <div className=\"relative\">\n                <div className=\"absolute inset-0 flex items-center\">\n                  <span className=\"w-full border-t border-gray-200\" />\n                </div>\n                <div className=\"relative flex justify-center text-xs uppercase\">\n                  <span className=\"bg-white dark:bg-gray-800 px-2 text-muted-foreground\">\n                    Ou digite manualmente\n                  </span>\n                </div>\n              </div>\n\n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\" className=\"text-sm font-medium\">\n                    Email\n                  </Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"seu@email.com\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                    className=\"h-10 sm:h-12 bg-white/30 dark:bg-white/10 border-gray-200 dark:border-gray-600 focus:border-primary dark:focus:border-primary\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password\" className=\"text-sm font-medium\">\n                    Senha\n                  </Label>\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    placeholder=\"••••••••\"\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    className=\"h-10 sm:h-12 bg-white/30 dark:bg-white/10 border-gray-200 dark:border-gray-600 focus:border-primary dark:focus:border-primary\"\n                  />\n                </div>\n              </div>\n\n              <Button \n                onClick={handleLogin}\n                disabled={loginMutation.isPending}\n                className=\"w-full h-10 sm:h-12 bg-gradient-to-r from-primary to-blue-600 hover:from-primary/90 hover:to-blue-600/90 text-white font-medium text-sm sm:text-base shadow-lg hover:shadow-xl transition-all duration-200 button-hover-effect\"\n                data-testid=\"button-login\"\n              >\n                <i className=\"fas fa-sign-in-alt mr-2\"></i>\n                {loginMutation.isPending ? 'Entrando...' : 'Entrar no Sistema'}\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Demo Info */}\n          <Card className=\"border-border bg-muted/50 theme-transition\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"w-6 h-6 bg-primary rounded-full flex items-center justify-center flex-shrink-0 mt-0.5\">\n                  <i className=\"fas fa-info text-primary-foreground text-xs\"></i>\n                </div>\n                <div>\n                  <h3 className=\"font-medium text-foreground mb-1\">Sistema Demonstrativo</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Este é um ambiente de demonstração. Todos os dados são fictícios e \n                    serão redefinidos periodicamente.\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"mt-8 text-center\">\n            <p className=\"text-xs text-muted-foreground\">\n              © 2024 OpenLife. Todos os direitos reservados.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":11332},"client/src/pages/Schedule.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Layout from \"@/components/Layout\";\nimport LessonModal from \"@/components/LessonModal\";\nimport ClassModal from \"@/components/ClassModal\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { format, startOfWeek, addDays, isSameDay, parseISO, startOfDay, endOfDay, isWithinInterval } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\n\ninterface ClassDetailModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  classData: any;\n}\n\nfunction ClassDetailModal({ isOpen, onClose, classData }: ClassDetailModalProps) {\n  if (!classData) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <div\n              className=\"w-4 h-4 rounded-full\"\n              style={{ backgroundColor: classData.bookColor }}\n            />\n            <span>{classData.title}</span>\n          </DialogTitle>\n        </DialogHeader>\n        <div className=\"space-y-6\">\n          {/* Informações da Turma */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label className=\"text-sm font-medium text-muted-foreground\">Professor</Label>\n              <p className=\"text-sm font-semibold\">{classData.teacher}</p>\n            </div>\n            <div>\n              <Label className=\"text-sm font-medium text-muted-foreground\">Horário</Label>\n              <p className=\"text-sm\">{classData.startTime} - {classData.endTime}</p>\n            </div>\n            <div>\n              <Label className=\"text-sm font-medium text-muted-foreground\">Sala</Label>\n              <p className=\"text-sm\">{classData.room}</p>\n            </div>\n            <div>\n              <Label className=\"text-sm font-medium text-muted-foreground\">Livro</Label>\n              <p className=\"text-sm\">{classData.book}</p>\n            </div>\n            <div>\n              <Label className=\"text-sm font-medium text-muted-foreground\">Progresso</Label>\n              <p className=\"text-sm\">Dia {classData.currentDay}/{classData.totalDays}</p>\n            </div>\n            <div>\n              <Label className=\"text-sm font-medium text-muted-foreground\">Alunos</Label>\n              <p className=\"text-sm\">{classData.studentsCount}/{classData.maxStudents}</p>\n            </div>\n          </div>\n\n          {/* Lista de Alunos */}\n          <div>\n            <Label className=\"text-sm font-medium text-muted-foreground mb-3 block\">Alunos Matriculados</Label>\n            <div className=\"grid grid-cols-2 gap-2 max-h-40 overflow-y-auto\">\n              {classData.students?.map((student: any, index: number) => (\n                <div key={index} className=\"flex items-center space-x-2 p-2 bg-muted rounded-lg\">\n                  <div className=\"w-6 h-6 bg-primary rounded-full flex items-center justify-center\">\n                    <span className=\"text-xs text-white font-medium\">\n                      {student.name.split(' ').map((n: string) => n[0]).join('').substring(0, 2)}\n                    </span>\n                  </div>\n                  <span className=\"text-sm\">{student.name}</span>\n                </div>\n              )) || [\n                  { name: 'Ana Silva' },\n                  { name: 'João Santos' },\n                  { name: 'Maria Costa' },\n                  { name: 'Pedro Lima' },\n                  { name: 'Carla Oliveira' },\n                ].map((student, index) => (\n                  <div key={index} className=\"flex items-center space-x-2 p-2 bg-muted rounded-lg\">\n                    <div className=\"w-6 h-6 bg-primary rounded-full flex items-center justify-center\">\n                      <span className=\"text-xs text-white font-medium\">\n                        {student.name.split(' ').map((n: string) => n[0]).join('').substring(0, 2)}\n                      </span>\n                    </div>\n                    <span className=\"text-sm\">{student.name}</span>\n                  </div>\n                ))}\n            </div>\n          </div>\n\n          {/* Ações */}\n          <div className=\"flex justify-end space-x-2 pt-4 border-t\">\n            <Button variant=\"outline\" onClick={onClose}>\n              Fechar\n            </Button>\n            <Button>\n              Editar Turma\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nexport default function Schedule() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading: authLoading, user } = useAuth();\n  const [selectedDate, setSelectedDate] = useState<Date>(new Date());\n  const [isLessonModalOpen, setIsLessonModalOpen] = useState(false);\n  const [editingLesson, setEditingLesson] = useState<any>(null);\n  const [isClassModalOpen, setIsClassModalOpen] = useState(false);\n  const [editingClass, setEditingClass] = useState<any>(null);\n  const [selectedTeacherFilter, setSelectedTeacherFilter] = useState<string>(\"all\");\n  const [selectedUnitFilter, setSelectedUnitFilter] = useState<string>(\"all\");\n  const [currentWeekStart, setCurrentWeekStart] = useState<Date>(startOfWeek(new Date(), { locale: ptBR }));\n  const [selectedClassDetail, setSelectedClassDetail] = useState<any>(null);\n  const [showClassDetail, setShowClassDetail] = useState(false);\n\n  // Fetch lessons based on user role\n  const { data: lessons, isLoading } = useQuery<any[]>({\n    queryKey: user?.role === 'teacher'\n      ? [\"/api/lessons/teacher\", user.id]\n      : [\"/api/lessons\"],\n    retry: false,\n    enabled: isAuthenticated,\n  });\n\n  // Fetch teachers for filter (only for admin/secretary)\n  const { data: teachers = [] } = useQuery<any[]>({\n    queryKey: [\"/api/staff\"],\n    enabled: isAuthenticated && (user?.role === 'admin' || user?.role === 'secretary'),\n    retry: false,\n  });\n\n  // Fetch units for filter\n  const { data: units = [] } = useQuery<any[]>({\n    queryKey: [\"/api/units\"],\n    enabled: isAuthenticated && (user?.role === 'admin' || user?.role === 'secretary'),\n    retry: false,\n  });\n\n  // Fetch admin schedule data (for administrative view)\n  const { data: adminSchedule = [] } = useQuery<any[]>({\n    queryKey: [\"/api/schedule/admin\"],\n    enabled: isAuthenticated && (user?.role === 'admin' || user?.role === 'secretary'),\n    retry: false,\n  });\n\n  // Fetch teacher schedule data\n  const { data: teacherSchedule = [] } = useQuery<any[]>({\n    queryKey: [\"/api/schedule/teacher\", user?.id],\n    enabled: isAuthenticated && user?.role === 'teacher',\n    retry: false,\n  });\n\n  const { data: todaysLessons } = useQuery<any[]>({\n    queryKey: [\"/api/lessons/today\"],\n    retry: false,\n    enabled: isAuthenticated,\n  });\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  if (authLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  const canManageSchedule = user?.role === 'admin' || user?.role === 'teacher' || user?.role === 'secretary';\n  const isAdminView = user?.role === 'admin' || user?.role === 'secretary';\n\n  const handleNewLesson = () => {\n    setEditingLesson(null);\n    setIsLessonModalOpen(true);\n  };\n\n  const handleEditLesson = (lesson: any) => {\n    setEditingLesson(lesson);\n    setIsLessonModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setIsLessonModalOpen(false);\n    setEditingLesson(null);\n  };\n\n  const handleNewClass = () => {\n    setEditingClass(null);\n    setIsClassModalOpen(true);\n  };\n\n  const handleEditClass = (classItem: any) => {\n    setEditingClass(classItem);\n    setIsClassModalOpen(true);\n  };\n\n  const handleCloseClassModal = () => {\n    setIsClassModalOpen(false);\n    setEditingClass(null);\n  };\n\n  const handleClassClick = (classItem: any) => {\n    setSelectedClassDetail(classItem);\n    setShowClassDetail(true);\n  };\n\n  const navigateWeek = (direction: 'prev' | 'next') => {\n    setCurrentWeekStart(prev => addDays(prev, direction === 'next' ? 7 : -7));\n  };\n\n  // Generate dynamic colors for courses\n  const generateCourseColors = (classes: any[]) => {\n    const uniqueCourses = [...new Set(classes.map(cls => cls.title))];\n    const colors = [\n      '#3b82f6', // Blue\n      '#10b981', // Green  \n      '#f59e0b', // Orange\n      '#8b5cf6', // Purple\n      '#ef4444', // Red\n      '#06b6d4', // Cyan\n      '#84cc16', // Lime\n      '#f97316', // Orange\n      '#ec4899', // Pink\n      '#6366f1', // Indigo\n      '#14b8a6', // Teal\n      '#eab308', // Yellow\n    ];\n\n    const courseColors: { [key: string]: string } = {};\n    uniqueCourses.forEach((course, index) => {\n      courseColors[course] = colors[index % colors.length];\n    });\n\n    return courseColors;\n  };\n\n  // Mock data will be defined within each render function to avoid scope issues\n\n  const renderAdminCalendarView = () => {\n    const weekDays = Array.from({ length: 7 }, (_, i) => addDays(currentWeekStart, i));\n    const timeSlots = Array.from({ length: 14 }, (_, i) => `${8 + i}:00`); // 8:00 to 21:00\n\n    // Dados de agenda administrativa (turmas regulares)\n    const mockAdminSchedule = [\n      {\n        id: '1',\n        title: 'Inglês A1 - Manhã',\n        teacher: 'Prof. João Silva',\n        teacherId: 'user-1',\n        book: 'English Basic - Book 1',\n        dayOfWeek: 1, // Segunda\n        startTime: '09:00',\n        endTime: '11:00',\n        room: 'Sala 101',\n        currentDay: 5,\n        totalDays: 30,\n        studentsCount: 12,\n        maxStudents: 15,\n        unitId: '1'\n      },\n      {\n        id: '2',\n        title: 'Inglês A2 - Tarde',\n        teacher: 'Prof. João Silva',\n        teacherId: 'user-1',\n        book: 'English Basic - Book 2',\n        dayOfWeek: 1, // Segunda\n        startTime: '14:00',\n        endTime: '16:00',\n        room: 'Sala 102',\n        currentDay: 8,\n        totalDays: 35,\n        studentsCount: 10,\n        maxStudents: 15,\n        unitId: '1'\n      },\n      {\n        id: '3',\n        title: 'Inglês B1 - Noite',\n        teacher: 'Prof. Maria Santos',\n        teacherId: 'user-2',\n        book: 'English Intermediate - Book 1',\n        dayOfWeek: 1, // Segunda\n        startTime: '19:00',\n        endTime: '21:00',\n        room: 'Sala 103',\n        currentDay: 3,\n        totalDays: 40,\n        studentsCount: 8,\n        maxStudents: 12,\n        unitId: '1'\n      },\n      {\n        id: '4',\n        title: 'Espanhol A1',\n        teacher: 'Prof. Maria Santos',\n        teacherId: 'user-2',\n        book: 'Español Básico - Libro 1',\n        dayOfWeek: 2, // Terça\n        startTime: '18:00',\n        endTime: '20:00',\n        room: 'Sala 201',\n        currentDay: 4,\n        totalDays: 25,\n        studentsCount: 9,\n        maxStudents: 12,\n        unitId: '1'\n      },\n      {\n        id: '5',\n        title: 'Inglês B2 - Manhã',\n        teacher: 'Prof. Ana Costa',\n        teacherId: 'user-7',\n        book: 'English Intermediate - Book 2',\n        dayOfWeek: 2, // Terça\n        startTime: '10:00',\n        endTime: '12:00',\n        room: 'Sala 104',\n        currentDay: 12,\n        totalDays: 42,\n        studentsCount: 13,\n        maxStudents: 15,\n        unitId: '1'\n      },\n      {\n        id: '6',\n        title: 'Inglês A3 - Tarde',\n        teacher: 'Prof. Ana Costa',\n        teacherId: 'user-7',\n        book: 'English Basic - Book 3',\n        dayOfWeek: 3, // Quarta\n        startTime: '15:00',\n        endTime: '17:00',\n        room: 'Sala 105',\n        currentDay: 18,\n        totalDays: 40,\n        studentsCount: 11,\n        maxStudents: 15,\n        unitId: '1'\n      },\n      {\n        id: '7',\n        title: 'Inglês Avançado',\n        teacher: 'Prof. Felipe Rodrigues',\n        teacherId: 'user-8',\n        book: 'English Advanced - Book 1',\n        dayOfWeek: 4, // Quinta\n        startTime: '19:00',\n        endTime: '21:00',\n        room: 'Sala 301',\n        currentDay: 22,\n        totalDays: 45,\n        studentsCount: 7,\n        maxStudents: 10,\n        unitId: '2'\n      },\n      {\n        id: '8',\n        title: 'Espanhol A2',\n        teacher: 'Prof. Patricia Lima',\n        teacherId: 'user-9',\n        book: 'Español Básico - Libro 2',\n        dayOfWeek: 5, // Sexta\n        startTime: '16:00',\n        endTime: '18:00',\n        room: 'Sala 202',\n        currentDay: 15,\n        totalDays: 28,\n        studentsCount: 10,\n        maxStudents: 12,\n        unitId: '1'\n      },\n      // Aulas sobrepostas no mesmo horário para demonstrar\n      {\n        id: '9',\n        title: 'Inglês A1 - Tarde',\n        teacher: 'Prof. Patricia Lima',\n        teacherId: 'user-9',\n        book: 'English Basic - Book 1',\n        dayOfWeek: 2, // Terça\n        startTime: '14:00',\n        endTime: '16:00',\n        room: 'Sala 203',\n        currentDay: 7,\n        totalDays: 30,\n        studentsCount: 14,\n        maxStudents: 15,\n        unitId: '1'\n      }\n    ];\n\n    // Filter classes by selected teacher and unit\n    const filteredClasses = mockAdminSchedule.filter(classItem => {\n      if (selectedTeacherFilter !== 'all' && classItem.teacherId !== selectedTeacherFilter) return false;\n      if (selectedUnitFilter !== 'all' && classItem.unitId !== selectedUnitFilter) return false;\n      return true;\n    });\n\n    // Generate colors for admin schedule\n    const adminCourseColors = generateCourseColors(mockAdminSchedule);\n\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Button variant=\"outline\" onClick={() => navigateWeek('prev')}>\n              ← Semana Anterior\n            </Button>\n            <h3 className=\"text-lg font-semibold\">\n              {format(currentWeekStart, \"dd MMM\", { locale: ptBR })} - {format(addDays(currentWeekStart, 6), \"dd MMM yyyy\", { locale: ptBR })}\n            </h3>\n            <Button variant=\"outline\" onClick={() => navigateWeek('next')}>\n              Próxima Semana →\n            </Button>\n          </div>\n\n          <div className=\"flex items-center space-x-4\">\n            <Select value={selectedUnitFilter} onValueChange={setSelectedUnitFilter}>\n              <SelectTrigger className=\"w-48\">\n                <SelectValue placeholder=\"Filtrar por unidade\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Todas as unidades</SelectItem>\n                <SelectItem value=\"1\">Unidade Centro</SelectItem>\n                <SelectItem value=\"2\">Unidade Vila Nova</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={selectedTeacherFilter} onValueChange={setSelectedTeacherFilter}>\n              <SelectTrigger className=\"w-48\">\n                <SelectValue placeholder=\"Filtrar por professor\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Todos os professores</SelectItem>\n                <SelectItem value=\"user-1\">João Silva</SelectItem>\n                <SelectItem value=\"user-2\">Maria Santos</SelectItem>\n                <SelectItem value=\"user-7\">Ana Costa</SelectItem>\n                <SelectItem value=\"user-8\">Felipe Rodrigues</SelectItem>\n                <SelectItem value=\"user-9\">Patricia Lima</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        <div className=\"overflow-x-auto bg-card rounded-lg border shadow-sm\">\n          <div className=\"grid grid-cols-8 gap-0 min-w-[900px]\">\n            {/* Header row */}\n            <div className=\"p-3 font-medium text-center bg-muted border-b border-r border-border text-sm\">Horário</div>\n            {weekDays.map((day) => (\n              <div key={day.toISOString()} className=\"p-3 font-medium text-center bg-muted border-b border-r border-border text-sm\">\n                <div className=\"font-semibold\">{format(day, \"EEE\", { locale: ptBR })}</div>\n                <div className=\"text-xs text-muted-foreground mt-1\">\n                  {format(day, \"dd/MM\", { locale: ptBR })}\n                </div>\n              </div>\n            ))}\n\n            {/* Time slots */}\n            {timeSlots.map((timeSlot) => {\n              const [hour] = timeSlot.split(':');\n              return (\n                <>\n                  {/* Time label */}\n                  <div key={`time-${timeSlot}`} className=\"p-3 text-xs font-medium text-center bg-muted border-b border-r border-border text-muted-foreground\">\n                    {timeSlot}\n                  </div>\n\n                  {/* Day cells */}\n                  {weekDays.map((day) => {\n                    const dayClasses = filteredClasses.filter(classItem => {\n                      if (classItem.dayOfWeek !== day.getDay()) return false;\n                      const classHour = parseInt(classItem.startTime.split(':')[0]);\n                      return classHour === parseInt(hour);\n                    });\n\n                    return (\n                      <div key={`${day.toISOString()}-${timeSlot}`} className=\"min-h-[80px] p-1 border-b border-r border-border relative\">\n                        <div className=\"space-y-1\">\n                          {dayClasses.map((classItem, index) => (\n                            <div\n                              key={classItem.id}\n                              className=\"p-3 rounded-lg text-sm cursor-pointer transition-all hover:shadow-md border border-opacity-30 h-full flex items-center justify-center\"\n                              style={{\n                                backgroundColor: adminCourseColors[classItem.title] + '20',\n                                borderColor: adminCourseColors[classItem.title],\n                                color: 'var(--foreground)'\n                              }}\n                              onClick={() => handleClassClick({\n                                ...classItem,\n                                bookColor: adminCourseColors[classItem.title]\n                              })}\n                              data-testid={`admin-class-${classItem.id}`}\n                            >\n                              <div className=\"font-semibold text-center leading-tight\">{classItem.title}</div>\n                            </div>\n                          ))}\n                        </div>\n\n                        {/* Add class button for empty slots or when admin */}\n                        {dayClasses.length === 0 && isAdminView && (\n                          <div\n                            className=\"absolute inset-0 flex items-center justify-center opacity-0 hover:opacity-100 transition-opacity cursor-pointer bg-muted bg-opacity-50\"\n                            onClick={() => handleNewClass()}\n                          >\n                            <Button size=\"sm\" variant=\"outline\" className=\"text-xs\">\n                              + Adicionar\n                            </Button>\n                          </div>\n                        )}\n                      </div>\n                    );\n                  })}\n                </>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Legend */}\n        <div className=\"bg-muted p-4 rounded-lg\">\n          <h4 className=\"font-medium mb-3\">Legenda dos Cursos</h4>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n            {Object.entries(adminCourseColors).map(([courseName, color]) => (\n              <div key={courseName} className=\"flex items-center space-x-2\">\n                <div className=\"w-4 h-4 rounded-full\" style={{ backgroundColor: color }}></div>\n                <span className=\"text-sm\">{courseName}</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderTeacherCalendarView = () => {\n    const weekDays = Array.from({ length: 7 }, (_, i) => addDays(currentWeekStart, i));\n    const timeSlots = Array.from({ length: 14 }, (_, i) => `${8 + i}:00`);\n\n    // Dados específicos do professor\n    const mockTeacherSchedule = [\n      {\n        id: '1',\n        title: 'Inglês A1 - Manhã',\n        book: 'English Basic - Book 1',\n        dayOfWeek: 1, // Segunda\n        startTime: '09:00',\n        endTime: '11:00',\n        room: 'Sala 101',\n        currentDay: 5,\n        totalDays: 30,\n        studentsCount: 12,\n        maxStudents: 15\n      },\n      {\n        id: '2',\n        title: 'Inglês A2 - Tarde',\n        book: 'English Basic - Book 2',\n        dayOfWeek: 1, // Segunda\n        startTime: '14:00',\n        endTime: '16:00',\n        room: 'Sala 102',\n        currentDay: 8,\n        totalDays: 35,\n        studentsCount: 10,\n        maxStudents: 15\n      },\n      {\n        id: '3',\n        title: 'Inglês A1 - Manhã',\n        book: 'English Basic - Book 1',\n        dayOfWeek: 3, // Quarta\n        startTime: '09:00',\n        endTime: '11:00',\n        room: 'Sala 101',\n        currentDay: 6,\n        totalDays: 30,\n        studentsCount: 12,\n        maxStudents: 15\n      },\n      {\n        id: '4',\n        title: 'Inglês A2 - Tarde',\n        book: 'English Basic - Book 2',\n        dayOfWeek: 3, // Quarta\n        startTime: '14:00',\n        endTime: '16:00',\n        room: 'Sala 102',\n        currentDay: 9,\n        totalDays: 35,\n        studentsCount: 10,\n        maxStudents: 15\n      }\n    ];\n\n    // Generate colors for teacher schedule\n    const teacherCourseColors = generateCourseColors(mockTeacherSchedule);\n\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Button variant=\"outline\" onClick={() => navigateWeek('prev')}>\n              ← Semana Anterior\n            </Button>\n            <h3 className=\"text-lg font-semibold\">\n              {format(currentWeekStart, \"dd MMM\", { locale: ptBR })} - {format(addDays(currentWeekStart, 6), \"dd MMM yyyy\", { locale: ptBR })}\n            </h3>\n            <Button variant=\"outline\" onClick={() => navigateWeek('next')}>\n              Próxima Semana →\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"overflow-x-auto bg-card rounded-lg border shadow-sm\">\n          <div className=\"grid grid-cols-8 gap-0 min-w-[900px]\">\n            {/* Header */}\n            <div className=\"p-3 font-medium text-center bg-muted border-b border-r border-border text-sm\">Horário</div>\n            {weekDays.map((day) => (\n              <div key={day.toISOString()} className=\"p-3 font-medium text-center bg-muted border-b border-r border-border text-sm\">\n                <div className=\"font-semibold\">{format(day, \"EEE\", { locale: ptBR })}</div>\n                <div className=\"text-xs text-muted-foreground mt-1\">\n                  {format(day, \"dd/MM\", { locale: ptBR })}\n                </div>\n              </div>\n            ))}\n\n            {/* Time slots */}\n            {timeSlots.map((timeSlot) => {\n              const [hour] = timeSlot.split(':');\n              return (\n                <>\n                  <div key={`time-${timeSlot}`} className=\"p-3 text-xs font-medium text-center bg-muted border-b border-r border-border text-muted-foreground\">\n                    {timeSlot}\n                  </div>\n\n                  {weekDays.map((day) => {\n                    const dayClasses = mockTeacherSchedule.filter(classItem => {\n                      if (classItem.dayOfWeek !== day.getDay()) return false;\n                      const classHour = parseInt(classItem.startTime.split(':')[0]);\n                      return classHour === parseInt(hour);\n                    });\n\n                    return (\n                      <div key={`${day.toISOString()}-${timeSlot}`} className=\"min-h-[80px] p-1 border-b border-r border-gray-100\">\n                        {dayClasses.map((classItem) => (\n                          <div\n                            key={classItem.id}\n                            className=\"p-3 rounded-lg text-sm cursor-pointer transition-all hover:shadow-md border border-opacity-30 h-full flex items-center justify-center\"\n                            style={{\n                              backgroundColor: teacherCourseColors[classItem.title] + '20',\n                              borderColor: teacherCourseColors[classItem.title],\n                              color: '#000'\n                            }}\n                            onClick={() => handleClassClick({\n                              ...classItem,\n                              bookColor: teacherCourseColors[classItem.title],\n                              teacher: 'Prof. Ivan Silva'\n                            })}\n                            data-testid={`teacher-class-${classItem.id}`}\n                          >\n                            <div className=\"font-semibold text-center leading-tight\">{classItem.title}</div>\n                          </div>\n                        ))}\n                      </div>\n                    );\n                  })}\n                </>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Legenda de cores dos cursos */}\n        <div className=\"bg-muted p-4 rounded-lg\">\n          <h4 className=\"font-medium mb-3\">Legenda dos Cursos</h4>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n            {Object.entries(teacherCourseColors).map(([courseName, color]) => (\n              <div key={courseName} className=\"flex items-center space-x-2\">\n                <div className=\"w-4 h-4 rounded-full\" style={{ backgroundColor: color }}></div>\n                <span className=\"text-sm\">{courseName}</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <Layout>\n      <div className=\"p-6 space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-semibold text-foreground\">Agenda</h2>\n            <p className=\"text-sm text-muted-foreground\">\n              {user?.role === 'teacher'\n                ? \"Gerencie sua agenda de aulas\"\n                : \"Visualize e gerencie a agenda da escola\"}\n            </p>\n          </div>\n\n          {canManageSchedule && (\n            <div className=\"flex items-center space-x-2\">\n              <Button onClick={handleNewLesson} data-testid=\"button-new-lesson\">\n                <i className=\"fas fa-plus mr-2\"></i>\n                Nova Aula\n              </Button>\n              {isAdminView && (\n                <Button onClick={handleNewClass} data-testid=\"button-new-class\">\n                  <i className=\"fas fa-users mr-2\"></i>\n                  Nova Turma\n                </Button>\n              )}\n            </div>\n          )}\n        </div>\n\n        <Tabs defaultValue={isAdminView ? \"admin\" : \"teacher\"} className=\"space-y-6\">\n          <TabsList>\n            <TabsTrigger value=\"today\">Hoje</TabsTrigger>\n            {isAdminView && <TabsTrigger value=\"admin\">Agenda Administrativa</TabsTrigger>}\n            {user?.role === 'teacher' && <TabsTrigger value=\"teacher\">Minhas Aulas</TabsTrigger>}\n          </TabsList>\n\n          <TabsContent value=\"today\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-calendar-day text-primary\"></i>\n                  <span>Aulas de Hoje</span>\n                  <Badge variant=\"secondary\">\n                    {new Date().toLocaleDateString('pt-BR', {\n                      weekday: 'long',\n                      year: 'numeric',\n                      month: 'long',\n                      day: 'numeric'\n                    })}\n                  </Badge>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {!todaysLessons || todaysLessons.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <i className=\"fas fa-calendar-times text-muted-foreground text-4xl mb-4\"></i>\n                    <h3 className=\"text-lg font-semibold text-foreground mb-2\">Nenhuma aula agendada</h3>\n                    <p className=\"text-muted-foreground mb-4\">\n                      Não há aulas programadas para hoje.\n                    </p>\n                    {canManageSchedule && (\n                      <Button onClick={handleNewLesson} data-testid=\"button-schedule-first-lesson\">\n                        <i className=\"fas fa-plus mr-2\"></i>\n                        Agendar primeira aula\n                      </Button>\n                    )}\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\" data-testid=\"todays-lessons\">\n                    {todaysLessons.map((lesson: any) => (\n                      <div key={lesson.id} className=\"flex items-center space-x-4 p-4 rounded-lg bg-muted/50 border border-border/50 card-hover transition-smooth\">\n                        <div className=\"w-12 h-12 bg-primary rounded-lg flex items-center justify-center flex-shrink-0\">\n                          <i className=\"fas fa-clock text-primary-foreground\"></i>\n                        </div>\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium text-foreground\">{lesson.title}</h4>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {lesson.startTime} - {lesson.endTime}\n                            {lesson.room && ` • Sala ${lesson.room}`}\n                          </p>\n                          {lesson.notes && (\n                            <p className=\"text-xs text-muted-foreground mt-1\">{lesson.notes}</p>\n                          )}\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          {canManageSchedule && (\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleEditLesson(lesson)}\n                              data-testid={`button-edit-lesson-${lesson.id}`}\n                            >\n                              <i className=\"fas fa-edit mr-2\"></i>\n                              Editar\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {isAdminView && (\n            <TabsContent value=\"admin\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <i className=\"fas fa-users-cog text-primary\"></i>\n                    <span>Agenda Administrativa</span>\n                    <Badge variant=\"secondary\">\n                      Todas as turmas e professores\n                    </Badge>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {renderAdminCalendarView()}\n                </CardContent>\n              </Card>\n            </TabsContent>\n          )}\n\n          {user?.role === 'teacher' && (\n            <TabsContent value=\"teacher\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <i className=\"fas fa-chalkboard-teacher text-primary\"></i>\n                    <span>Minhas Aulas</span>\n                    <Badge variant=\"secondary\">\n                      Prof. Ivan Silva\n                    </Badge>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {renderTeacherCalendarView()}\n                </CardContent>\n              </Card>\n            </TabsContent>\n          )}\n        </Tabs>\n      </div>\n\n      {/* Lesson Modal */}\n      <LessonModal\n        isOpen={isLessonModalOpen}\n        onClose={handleCloseModal}\n        lessonToEdit={editingLesson}\n      />\n\n      {/* Class Modal */}\n      <ClassModal\n        isOpen={isClassModalOpen}\n        onClose={handleCloseClassModal}\n        classToEdit={editingClass}\n      />\n\n      {/* Class Detail Modal */}\n      <ClassDetailModal\n        isOpen={showClassDetail}\n        onClose={() => setShowClassDetail(false)}\n        classData={selectedClassDetail}\n      />\n    </Layout>\n  );\n}","size_bytes":33635},"client/src/pages/Staff.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Layout from \"@/components/Layout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Link } from \"wouter\";\n\nexport default function Staff() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading: authLoading, user } = useAuth();\n\n  const { data: staff, isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/staff\"],\n    retry: false,\n  });\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  if (authLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  // Check permissions - agora apenas admin pode gerenciar\n  const canManageStaff = user?.role === 'admin';\n  const canManagePermissions = user?.role === 'admin';\n\n  const getRoleIcon = (role: string) => {\n    switch (role) {\n      case 'admin': return 'fas fa-crown';\n      case 'teacher': return 'fas fa-chalkboard-teacher';\n      case 'secretary': return 'fas fa-user-tie';\n      case 'student': return 'fas fa-user-graduate';\n      default: return 'fas fa-user';\n    }\n  };\n\n  const getRoleBadgeColor = (role: string) => {\n    switch (role) {\n      case 'admin': return 'bg-red-100 text-red-700 dark:bg-red-900 dark:text-red-300';\n      case 'teacher': return 'bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300';\n      case 'secretary': return 'bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-300';\n      case 'student': return 'bg-purple-100 text-purple-700 dark:bg-purple-900 dark:text-purple-300';\n      default: return 'bg-gray-100 text-gray-700 dark:bg-gray-900 dark:text-gray-300';\n    }\n  };\n\n\n  return (\n    <Layout>\n      <div className=\"p-6 space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-semibold text-foreground\">Colaboradores</h2>\n            <p className=\"text-sm text-muted-foreground\">Gerencie a equipe da escola</p>\n          </div>\n          \n          {canManageStaff && (\n            <Button data-testid=\"button-new-staff\">\n              <i className=\"fas fa-plus mr-2\"></i>\n              Novo Colaborador\n            </Button>\n          )}\n        </div>\n\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {Array.from({ length: 6 }).map((_, index) => (\n              <Card key={index} className=\"animate-pulse\">\n                <CardHeader>\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-12 h-12 bg-muted rounded-full\"></div>\n                    <div className=\"flex-1 space-y-2\">\n                      <div className=\"h-5 bg-muted rounded w-3/4\"></div>\n                      <div className=\"h-4 bg-muted rounded w-1/2\"></div>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    <div className=\"h-4 bg-muted rounded\"></div>\n                    <div className=\"h-4 bg-muted rounded w-2/3\"></div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : !staff || staff.length === 0 ? (\n          <Card>\n            <CardContent className=\"py-12 text-center\">\n              <i className=\"fas fa-users text-muted-foreground text-6xl mb-4\"></i>\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">Nenhum colaborador encontrado</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                {canManageStaff \n                  ? \"Comece adicionando sua equipe.\" \n                  : \"Não há colaboradores cadastrados no sistema.\"}\n              </p>\n              {canManageStaff && (\n                <Button data-testid=\"button-create-first-staff\">\n                  <i className=\"fas fa-plus mr-2\"></i>\n                  Adicionar primeiro colaborador\n                </Button>\n              )}\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\" data-testid=\"staff-grid\">\n            {staff.map((member: any) => (\n              <Card key={member.id} className=\"card-hover transition-smooth\" data-testid={`card-staff-${member.id}`}>\n                <CardHeader>\n                  <div className=\"flex items-center space-x-4\">\n                    <Avatar className=\"w-12 h-12\">\n                      <AvatarImage src={member.user?.profileImageUrl} />\n                      <AvatarFallback>\n                        <i className={`${getRoleIcon(member.user?.role)} text-lg`}></i>\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-1\">\n                      <CardTitle className=\"text-lg\">\n                        {member.user?.firstName} {member.user?.lastName}\n                      </CardTitle>\n                      <CardDescription className=\"flex items-center space-x-2\">\n                        <Badge className={getRoleBadgeColor(member.user?.role)}>\n                          <i className={`${getRoleIcon(member.user?.role)} mr-1`}></i>\n                          {member.user?.role === 'admin' && 'Administrativo'}\n                          {member.user?.role === 'teacher' && 'Professor'}\n                          {member.user?.role === 'secretary' && 'Secretario'}\n                          {member.user?.role === 'student' && 'Aluno'}\n                        </Badge>\n                      </CardDescription>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    {member.user?.email && (\n                      <div className=\"flex items-center text-sm text-muted-foreground\">\n                        <i className=\"fas fa-envelope mr-2 w-4\"></i>\n                        <span className=\"truncate\">{member.user.email}</span>\n                      </div>\n                    )}\n                    {member.position && (\n                      <div className=\"flex items-center text-sm text-muted-foreground\">\n                        <i className=\"fas fa-briefcase mr-2 w-4\"></i>\n                        <span>{member.position}</span>\n                      </div>\n                    )}\n                    {member.department && (\n                      <div className=\"flex items-center text-sm text-muted-foreground\">\n                        <i className=\"fas fa-building mr-2 w-4\"></i>\n                        <span>{member.department}</span>\n                      </div>\n                    )}\n                    {member.employeeId && (\n                      <div className=\"flex items-center text-sm text-muted-foreground\">\n                        <i className=\"fas fa-id-badge mr-2 w-4\"></i>\n                        <span>ID: {member.employeeId}</span>\n                      </div>\n                    )}\n                    <div className=\"flex items-center text-sm text-muted-foreground\">\n                      <i className=\"fas fa-circle mr-2 w-4 text-green-500\"></i>\n                      <span>{member.isActive ? 'Ativo' : 'Inativo'}</span>\n                    </div>\n                  </div>\n                  {canManageStaff && (\n                    <div className=\"mt-4 flex space-x-2 flex-wrap\">\n                      <Button variant=\"outline\" size=\"sm\">\n                        <i className=\"fas fa-edit mr-2\"></i>\n                        Editar\n                      </Button>\n                      <Button variant=\"outline\" size=\"sm\">\n                        <i className=\"fas fa-eye mr-2\"></i>\n                        Ver detalhes\n                      </Button>\n                      {canManagePermissions && (\n                        <Link to=\"/permissions\">\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            data-testid={`button-permissions-${member.id}`}\n                          >\n                            <i className=\"fas fa-shield-alt mr-2\"></i>\n                            Gerenciar Permissões\n                          </Button>\n                        </Link>\n                      )}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n\n    </Layout>\n  );\n}\n","size_bytes":9287},"client/src/pages/StudentArea.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport StudentLayout from \"@/components/StudentLayout\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Link } from \"wouter\";\n\nexport default function StudentArea() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading: authLoading, user } = useAuth();\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  // Redirect if not a student\n  useEffect(() => {\n    if (!authLoading && isAuthenticated && user?.role !== 'student') {\n      window.location.href = \"/\";\n    }\n  }, [authLoading, isAuthenticated, user]);\n\n  if (authLoading || !isAuthenticated || user?.role !== 'student') {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <StudentLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent mb-2\">\n            Sala do Aluno\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-300 text-lg\">\n            Bem-vindo, {user.firstName}! Continue sua jornada de aprendizado\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Left Column - Resumo Geral */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            \n            {/* Resumo do Progresso */}\n            <Card className=\"glassmorphism-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-chart-line text-blue-600\"></i>\n                  <span>Resumo do Progresso</span>\n                </CardTitle>\n                <CardDescription>Journey • Intermediário • Book 3</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-center\">\n                  <div>\n                    <p className=\"text-2xl font-bold text-blue-600\">65%</p>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">Progresso Geral</p>\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold text-purple-600\">23</p>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">Lições Concluídas</p>\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold text-green-600\">8.9</p>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">Média Geral</p>\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold text-orange-600\">1</p>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">Prova Pendente</p>\n                  </div>\n                </div>\n                <div className=\"pt-4 border-t border-gray-200 dark:border-gray-700\">\n                  <Link href=\"/aluno/progresso\" data-testid=\"link-view-full-progress\">\n                    <Button variant=\"outline\" className=\"w-full\">\n                      <i className=\"fas fa-chart-line mr-2\"></i>\n                      Ver Progresso Completo\n                    </Button>\n                  </Link>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Lição Atual Resumida */}\n            <Card className=\"glassmorphism-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-book-open text-purple-600\"></i>\n                  <span>Lição Atual: Travel Adventures</span>\n                </CardTitle>\n                <CardDescription>Passo 4 de 6 • Em progresso</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-center justify-between mb-4\">\n                  <span className=\"text-sm text-gray-600 dark:text-gray-400\">Progresso da lição</span>\n                  <span className=\"text-sm font-bold text-gray-900 dark:text-gray-100\">67%</span>\n                </div>\n                <Progress value={67} className=\"h-3 mb-4\" />\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"font-medium text-gray-900 dark:text-gray-100\">Speaking Exercise</p>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">Próximo passo disponível</p>\n                  </div>\n                  <Button size=\"sm\" className=\"bg-blue-600 hover:bg-blue-700 button-hover-effect\" data-testid=\"button-continue-lesson\">\n                    Continuar\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Próxima Aula */}\n            <Card className=\"glassmorphism-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-calendar text-green-600\"></i>\n                  <span>Próxima Aula</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-center justify-between p-4 bg-purple-50 dark:bg-purple-900/20 rounded-lg border border-purple-200 dark:border-purple-800\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-3 h-3 bg-purple-600 rounded-full\"></div>\n                    <div>\n                      <h4 className=\"font-semibold text-purple-900 dark:text-purple-100\">Lesson 9: Cultural Differences</h4>\n                      <p className=\"text-sm text-purple-600 dark:text-purple-400\">Hoje • 14:00 - 15:30 • Prof. Maria Santos</p>\n                    </div>\n                  </div>\n                  <Button size=\"sm\" className=\"bg-purple-600 hover:bg-purple-700 button-hover-effect\" data-testid=\"button-enter-aula\">\n                    Entrar na Aula\n                  </Button>\n                </div>\n                <div className=\"mt-4\">\n                  <Link href=\"/aluno/cronograma\" data-testid=\"link-view-full-schedule\">\n                    <Button variant=\"outline\" className=\"w-full\">\n                      <i className=\"fas fa-calendar mr-2\"></i>\n                      Ver Cronograma Completo\n                    </Button>\n                  </Link>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Right Column - Acessos Rápidos */}\n          <div className=\"space-y-6\">\n            \n            {/* Atividades Recentes Resumidas */}\n            <Card className=\"glassmorphism-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-clock text-blue-600\"></i>\n                  <span>Atividades Recentes</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex items-center space-x-3 p-2 hover:bg-gray-50 dark:hover:bg-gray-700/50 rounded-lg transition-colors\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">Lesson 8 concluída</p>\n                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">Há 2 horas</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-3 p-2 hover:bg-gray-50 dark:hover:bg-gray-700/50 rounded-lg transition-colors\">\n                  <div className=\"w-2 h-2 bg-red-500 rounded-full\"></div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">Prova urgente pendente</p>\n                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">Prazo: Hoje</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-3 p-2 hover:bg-gray-50 dark:hover:bg-gray-700/50 rounded-lg transition-colors\">\n                  <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">Workbook atualizado</p>\n                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">Ontem</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Áreas de Acesso Rápido */}\n            <div className=\"space-y-4\">\n              {/* Workbook */}\n              <Link href=\"/aluno/workbook\" data-testid=\"link-workbook\">\n                <Card className=\"glassmorphism-card cursor-pointer hover:shadow-lg transition-all duration-300\" data-testid=\"card-workbook\">\n                  <CardContent className=\"p-6 text-center\">\n                    <div className=\"w-12 h-12 bg-gradient-to-r from-purple-500 to-pink-500 rounded-xl flex items-center justify-center mx-auto mb-3\">\n                      <i className=\"fas fa-book text-white text-xl\"></i>\n                    </div>\n                    <h3 className=\"font-semibold text-gray-900 dark:text-gray-100 mb-1\">Workbook Digital</h3>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-3\">12 de 15 exercícios</p>\n                    <Progress value={80} className=\"h-2 mb-3\" />\n                    <Button size=\"sm\" className=\"bg-purple-600 hover:bg-purple-700 button-hover-effect\" data-testid=\"button-workbook\">\n                      Continuar\n                    </Button>\n                  </CardContent>\n                </Card>\n              </Link>\n\n              {/* Provas */}\n              <Link href=\"/aluno/provas\" data-testid=\"link-provas\">\n                <Card className=\"glassmorphism-card border-2 border-red-200 dark:border-red-800 cursor-pointer hover:shadow-lg transition-all duration-300\" data-testid=\"card-provas\">\n                  <CardContent className=\"p-6 text-center\">\n                    <div className=\"w-12 h-12 bg-gradient-to-r from-orange-500 to-red-500 rounded-xl flex items-center justify-center mx-auto mb-3\">\n                      <i className=\"fas fa-clipboard-check text-white text-xl\"></i>\n                    </div>\n                    <h3 className=\"font-semibold text-gray-900 dark:text-gray-100 mb-1\">Área de Provas</h3>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-3\">1 prova pendente</p>\n                    <Badge className=\"bg-red-100 text-red-700 border-red-300 mb-3\">Urgente</Badge>\n                    <br />\n                    <Button size=\"sm\" className=\"bg-red-600 hover:bg-red-700 button-hover-effect\" data-testid=\"button-provas\">\n                      Ver Provas\n                    </Button>\n                  </CardContent>\n                </Card>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    </StudentLayout>\n  );\n}","size_bytes":11843},"client/src/pages/Students.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport Layout from \"@/components/Layout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Input } from \"@/components/ui/input\";\n\nexport default function Students() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading: authLoading, user } = useAuth();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const { data: students, isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/students\"],\n    retry: false,\n  });\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  if (authLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  // Check permissions\n  const canManageStudents = user?.role === 'admin' || user?.role === 'secretary' || user?.role === 'teacher';\n\n  // Filter students based on search term\n  const filteredStudents = students?.filter((student: any) => {\n    if (!searchTerm) return true;\n    const fullName = `${student.user?.firstName} ${student.user?.lastName}`.toLowerCase();\n    const email = student.user?.email?.toLowerCase() || \"\";\n    const studentId = student.studentId?.toLowerCase() || \"\";\n    return fullName.includes(searchTerm.toLowerCase()) || \n           email.includes(searchTerm.toLowerCase()) ||\n           studentId.includes(searchTerm.toLowerCase());\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'bg-green-100 text-green-700';\n      case 'inactive': return 'bg-gray-100 text-gray-700';\n      case 'graduated': return 'bg-blue-100 text-blue-700';\n      default: return 'bg-gray-100 text-gray-700';\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'active': return 'Ativo';\n      case 'inactive': return 'Inativo';\n      case 'graduated': return 'Formado';\n      default: return status;\n    }\n  };\n\n  return (\n    <Layout>\n      <div className=\"p-6 space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-semibold text-foreground\">Alunos</h2>\n            <p className=\"text-sm text-muted-foreground\">Gerencie os estudantes da escola</p>\n          </div>\n          \n          {canManageStudents && (\n            <Button data-testid=\"button-new-student\">\n              <i className=\"fas fa-plus mr-2\"></i>\n              Novo Aluno\n            </Button>\n          )}\n        </div>\n\n        {/* Search */}\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"relative flex-1 max-w-sm\">\n            <i className=\"fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground text-sm\"></i>\n            <Input\n              placeholder=\"Buscar alunos...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-search-students\"\n            />\n          </div>\n          <Button variant=\"outline\">\n            <i className=\"fas fa-filter mr-2\"></i>\n            Filtros\n          </Button>\n        </div>\n\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {Array.from({ length: 6 }).map((_, index) => (\n              <Card key={index} className=\"animate-pulse\">\n                <CardHeader>\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-12 h-12 bg-muted rounded-full\"></div>\n                    <div className=\"flex-1 space-y-2\">\n                      <div className=\"h-5 bg-muted rounded w-3/4\"></div>\n                      <div className=\"h-4 bg-muted rounded w-1/2\"></div>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    <div className=\"h-4 bg-muted rounded\"></div>\n                    <div className=\"h-4 bg-muted rounded w-2/3\"></div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : !filteredStudents || filteredStudents.length === 0 ? (\n          <Card>\n            <CardContent className=\"py-12 text-center\">\n              <i className=\"fas fa-user-graduate text-muted-foreground text-6xl mb-4\"></i>\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n                {searchTerm ? \"Nenhum aluno encontrado\" : \"Nenhum aluno cadastrado\"}\n              </h3>\n              <p className=\"text-muted-foreground mb-4\">\n                {searchTerm \n                  ? \"Tente ajustar os termos de busca.\" \n                  : canManageStudents \n                  ? \"Comece cadastrando seus primeiros alunos.\" \n                  : \"Não há alunos cadastrados no sistema.\"}\n              </p>\n              {canManageStudents && !searchTerm && (\n                <Button data-testid=\"button-create-first-student\">\n                  <i className=\"fas fa-plus mr-2\"></i>\n                  Cadastrar primeiro aluno\n                </Button>\n              )}\n            </CardContent>\n          </Card>\n        ) : (\n          <>\n            <div className=\"flex items-center justify-between\">\n              <p className=\"text-sm text-muted-foreground\">\n                {filteredStudents.length} {filteredStudents.length === 1 ? 'aluno encontrado' : 'alunos encontrados'}\n              </p>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\" data-testid=\"students-grid\">\n              {filteredStudents.map((student: any) => (\n                <Card key={student.id} className=\"card-hover transition-smooth\" data-testid={`card-student-${student.id}`}>\n                  <CardHeader>\n                    <div className=\"flex items-center space-x-4\">\n                      <Avatar className=\"w-12 h-12\">\n                        <AvatarImage src={student.user?.profileImageUrl} />\n                        <AvatarFallback>\n                          <i className=\"fas fa-user-graduate text-lg\"></i>\n                        </AvatarFallback>\n                      </Avatar>\n                      <div className=\"flex-1\">\n                        <CardTitle className=\"text-lg\">\n                          {student.user?.firstName} {student.user?.lastName}\n                        </CardTitle>\n                        <CardDescription className=\"flex items-center space-x-2\">\n                          <Badge className={getStatusColor(student.status)}>\n                            {getStatusText(student.status)}\n                          </Badge>\n                          {student.studentId && (\n                            <span className=\"text-xs text-muted-foreground\">\n                              ID: {student.studentId}\n                            </span>\n                          )}\n                        </CardDescription>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-2\">\n                      {student.user?.email && (\n                        <div className=\"flex items-center text-sm text-muted-foreground\">\n                          <i className=\"fas fa-envelope mr-2 w-4\"></i>\n                          <span className=\"truncate\">{student.user.email}</span>\n                        </div>\n                      )}\n                      {student.enrollmentDate && (\n                        <div className=\"flex items-center text-sm text-muted-foreground\">\n                          <i className=\"fas fa-calendar mr-2 w-4\"></i>\n                          <span>Matrícula: {new Date(student.enrollmentDate).toLocaleDateString('pt-BR')}</span>\n                        </div>\n                      )}\n                      <div className=\"flex items-center text-sm text-muted-foreground\">\n                        <i className=\"fas fa-book mr-2 w-4\"></i>\n                        <span>0 cursos ativos</span>\n                      </div>\n                    </div>\n                    {canManageStudents && (\n                      <div className=\"mt-4 flex space-x-2\">\n                        <Button variant=\"outline\" size=\"sm\">\n                          <i className=\"fas fa-edit mr-2\"></i>\n                          Editar\n                        </Button>\n                        <Button variant=\"outline\" size=\"sm\">\n                          <i className=\"fas fa-eye mr-2\"></i>\n                          Ver perfil\n                        </Button>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":9765},"client/src/pages/Units.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport Layout from \"@/components/Layout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertUnitSchema } from \"@shared/schema\";\nimport type { z } from \"zod\";\nimport { PageLoader, FadeIn, StaggeredFadeIn } from \"@/components/PageLoader\";\n\ntype UnitFormData = z.infer<typeof insertUnitSchema>;\n\nexport default function Units() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading: authLoading, user } = useAuth();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n\n  const { data: units, isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/units\"],\n    retry: false,\n  });\n\n  const form = useForm<UnitFormData>({\n    resolver: zodResolver(insertUnitSchema),\n    defaultValues: {\n      name: \"\",\n      address: \"\",\n      phone: \"\",\n      email: \"\",\n    },\n  });\n\n  const createUnitMutation = useMutation({\n    mutationFn: async (data: UnitFormData) => {\n      await apiRequest(\"POST\", \"/api/units\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/units\"] });\n      toast({\n        title: \"Sucesso!\",\n        description: \"Unidade criada com sucesso.\",\n      });\n      setIsDialogOpen(false);\n      form.reset();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Erro\",\n        description: \"Falha ao criar unidade. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  const onSubmit = (data: UnitFormData) => {\n    createUnitMutation.mutate(data);\n  };\n\n  if (authLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  // Check permissions\n  const canManageUnits = user?.role === 'admin';\n\n  return (\n    <Layout>\n      <PageLoader>\n        <div className=\"p-6 space-y-6\">\n          <FadeIn delay={200}>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h2 className=\"text-2xl font-semibold text-foreground\">Unidades</h2>\n                <p className=\"text-sm text-muted-foreground\">Gerencie as unidades da escola</p>\n              </div>\n\n              {canManageUnits && (\n                <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n                  <DialogTrigger asChild>\n                    <Button data-testid=\"button-new-unit\">\n                      <i className=\"fas fa-plus mr-2\"></i>\n                      Nova Unidade\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle>Nova Unidade</DialogTitle>\n                    </DialogHeader>\n                    <Form {...form}>\n                      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"name\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Nome da Unidade</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"Ex: Unidade Centro\" {...field} data-testid=\"input-unit-name\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={form.control}\n                          name=\"address\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Endereço</FormLabel>\n                              <FormControl>\n                                <Textarea placeholder=\"Endereço completo da unidade\" {...field} value={field.value ?? \"\"} data-testid=\"input-unit-address\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={form.control}\n                          name=\"phone\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Telefone</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"(11) 99999-9999\" {...field} value={field.value ?? \"\"} data-testid=\"input-unit-phone\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={form.control}\n                          name=\"email\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>E-mail</FormLabel>\n                              <FormControl>\n                                <Input type=\"email\" placeholder=\"contato@unidade.com\" {...field} value={field.value ?? \"\"} data-testid=\"input-unit-email\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <div className=\"flex justify-end space-x-2\">\n                          <Button type=\"button\" variant=\"outline\" onClick={() => setIsDialogOpen(false)}>\n                            Cancelar\n                          </Button>\n                          <Button\n                            type=\"submit\"\n                            disabled={createUnitMutation.isPending}\n                            data-testid=\"button-save-unit\"\n                          >\n                            {createUnitMutation.isPending ? \"Salvando...\" : \"Salvar\"}\n                          </Button>\n                        </div>\n                      </form>\n                    </Form>\n                  </DialogContent>\n                </Dialog>\n              )}\n            </div>\n          </FadeIn>\n\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {Array.from({ length: 3 }).map((_, index) => (\n                <Card key={index} className=\"animate-pulse\">\n                  <CardHeader>\n                    <div className=\"h-6 bg-muted rounded w-3/4\"></div>\n                    <div className=\"h-4 bg-muted rounded w-1/2\"></div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-2\">\n                      <div className=\"h-4 bg-muted rounded\"></div>\n                      <div className=\"h-4 bg-muted rounded w-2/3\"></div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : !units || units.length === 0 ? (\n            <Card>\n              <CardContent className=\"py-12 text-center\">\n                <i className=\"fas fa-building text-muted-foreground text-6xl mb-4\"></i>\n                <h3 className=\"text-lg font-semibold text-foreground mb-2\">Nenhuma unidade encontrada</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  {canManageUnits\n                    ? \"Comece criando sua primeira unidade.\"\n                    : \"Não há unidades cadastradas no sistema.\"}\n                </p>\n                {canManageUnits && (\n                  <Button onClick={() => setIsDialogOpen(true)} data-testid=\"button-create-first-unit\">\n                    <i className=\"fas fa-plus mr-2\"></i>\n                    Criar primeira unidade\n                  </Button>\n                )}\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\" data-testid=\"units-grid\">\n              <StaggeredFadeIn stagger={150} className=\"contents\">\n                {units.map((unit: any) => (\n                  <Card key={unit.id} className=\"card-hover transition-smooth\" data-testid={`card-unit-${unit.id}`}>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center space-x-2\">\n                        <i className=\"fas fa-building text-primary\"></i>\n                        <span>{unit.name}</span>\n                      </CardTitle>\n                      <CardDescription>\n                        {unit.address && (\n                          <span className=\"flex items-center text-sm text-muted-foreground\">\n                            <i className=\"fas fa-map-marker-alt mr-2\"></i>\n                            {unit.address}\n                          </span>\n                        )}\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2\">\n                        {unit.phone && (\n                          <div className=\"flex items-center text-sm text-muted-foreground\">\n                            <i className=\"fas fa-phone mr-2\"></i>\n                            <span>{unit.phone}</span>\n                          </div>\n                        )}\n                        {unit.email && (\n                          <div className=\"flex items-center text-sm text-muted-foreground\">\n                            <i className=\"fas fa-envelope mr-2\"></i>\n                            <span>{unit.email}</span>\n                          </div>\n                        )}\n                      </div>\n                      {canManageUnits && (\n                        <div className=\"mt-4 flex space-x-2\">\n                          <Button variant=\"outline\" size=\"sm\">\n                            <i className=\"fas fa-edit mr-2\"></i>\n                            Editar\n                          </Button>\n                          <Button variant=\"outline\" size=\"sm\">\n                            <i className=\"fas fa-trash mr-2\"></i>\n                            Excluir\n                          </Button>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                )) || []}\n              </StaggeredFadeIn>\n            </div>\n          )}\n        </div>\n      </PageLoader>\n    </Layout>\n  );\n}","size_bytes":12064},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/Courses.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Plus, BookOpen, Upload, Edit, Trash2, Eye, Palette } from \"lucide-react\";\nimport Layout from \"@/components/Layout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { Course, Book, CourseWithDetails, BookWithDetails, InsertCourse, InsertBook } from \"@shared/schema\";\nimport { insertCourseSchema, insertBookSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport default function Courses() {\n  const { toast } = useToast();\n  const [selectedCourse, setSelectedCourse] = useState<Course | null>(null);\n  const [isCreateCourseOpen, setIsCreateCourseOpen] = useState(false);\n  const [isCreateBookOpen, setIsCreateBookOpen] = useState(false);\n  const [editingCourse, setEditingCourse] = useState<Course | null>(null);\n  const [editingBook, setEditingBook] = useState<Book | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [uploadingPdf, setUploadingPdf] = useState<string | null>(null);\n\n  // Extended schemas for form validation\n  const courseFormSchema = insertCourseSchema.extend({\n    duration: z.coerce.number().positive(\"Duração deve ser maior que 0\").optional(),\n    price: z.coerce.number().positive(\"Preço deve ser maior que 0\").optional()\n  });\n\n  const bookFormSchema = insertBookSchema.extend({\n    totalDays: z.coerce.number().min(1, \"Total de dias deve ser pelo menos 1\"),\n    color: z.string().regex(/^#[0-9A-F]{6}$/i, \"Cor deve estar em formato hexadecimal válido\")\n  });\n\n  // Course form\n  const courseForm = useForm<z.infer<typeof courseFormSchema>>({\n    resolver: zodResolver(courseFormSchema),\n    mode: \"onChange\",\n    reValidateMode: \"onChange\",\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      language: \"\",\n      level: \"\",\n      duration: undefined,\n      price: undefined,\n      isActive: true\n    }\n  });\n\n  // Book form\n  const bookForm = useForm<z.infer<typeof bookFormSchema>>({\n    resolver: zodResolver(bookFormSchema),\n    mode: \"onChange\",\n    reValidateMode: \"onChange\",\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      color: \"#3b82f6\",\n      totalDays: 30,\n      courseId: \"\",\n      displayOrder: 1,\n      isActive: true\n    }\n  });\n\n  // Fetch courses\n  const { data: courses = [], isLoading: coursesLoading } = useQuery({\n    queryKey: [\"/api/courses\"],\n    queryFn: () => fetch(\"/api/courses\").then(res => res.json()) as Promise<Course[]>\n  });\n\n  // Fetch books\n  const { data: books = [], isLoading: booksLoading } = useQuery({\n    queryKey: [\"/api/books\"],\n    queryFn: () => fetch(\"/api/books\").then(res => res.json()) as Promise<Book[]>\n  });\n\n  // Create course mutation\n  const createCourseMutation = useMutation({\n    mutationFn: (data: z.infer<typeof courseFormSchema>) => apiRequest(\"/api/courses\", \"POST\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/courses\"] });\n      toast({ title: \"Curso criado com sucesso!\" });\n      setIsCreateCourseOpen(false);\n      courseForm.reset();\n    },\n    onError: (error: any) => {\n      toast({ title: \"Erro ao criar curso\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  // Update course mutation\n  const updateCourseMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string, data: z.infer<typeof courseFormSchema> }) => apiRequest(`/api/courses/${id}`, \"PUT\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/courses\"] });\n      toast({ title: \"Curso atualizado com sucesso!\" });\n      setEditingCourse(null);\n      courseForm.reset();\n    },\n    onError: (error: any) => {\n      toast({ title: \"Erro ao atualizar curso\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  // Delete course mutation\n  const deleteCourseMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(`/api/courses/${id}`, \"DELETE\"),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/courses\"] });\n      toast({ title: \"Curso excluído com sucesso!\" });\n    },\n    onError: () => {\n      toast({ title: \"Erro ao excluir curso\", variant: \"destructive\" });\n    }\n  });\n\n  // Create book mutation\n  const createBookMutation = useMutation({\n    mutationFn: (data: z.infer<typeof bookFormSchema>) => apiRequest(\"/api/books\", \"POST\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/books\"] });\n      toast({ title: \"Livro criado com sucesso!\" });\n      setIsCreateBookOpen(false);\n      bookForm.reset();\n    },\n    onError: (error: any) => {\n      toast({ title: \"Erro ao criar livro\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  // Update book mutation\n  const updateBookMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string, data: Partial<z.infer<typeof bookFormSchema>> }) => apiRequest(`/api/books/${id}`, \"PUT\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/books\"] });\n      toast({ title: \"Livro atualizado com sucesso!\" });\n      setEditingBook(null);\n      bookForm.reset();\n    },\n    onError: (error: any) => {\n      toast({ title: \"Erro ao atualizar livro\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  // PDF upload mutation\n  const uploadPdfMutation = useMutation({\n    mutationFn: async ({ bookId, file }: { bookId: string, file: File }) => {\n      const formData = new FormData();\n      formData.append('pdf', file);\n      return fetch(`/api/books/${bookId}/upload`, {\n        method: 'POST',\n        body: formData\n      }).then(res => res.json());\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/books\"] });\n      toast({ title: \"PDF enviado com sucesso!\" });\n      setUploadingPdf(null);\n    },\n    onError: (error: any) => {\n      toast({ title: \"Erro ao enviar PDF\", description: error.message, variant: \"destructive\" });\n      setUploadingPdf(null);\n    }\n  });\n\n  // Delete book mutation\n  const deleteBookMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(`/api/books/${id}`, \"DELETE\"),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/books\"] });\n      toast({ title: \"Livro excluído com sucesso!\" });\n    },\n    onError: () => {\n      toast({ title: \"Erro ao excluir livro\", variant: \"destructive\" });\n    }\n  });\n\n  const handleCreateCourse = (data: z.infer<typeof courseFormSchema>) => {\n    createCourseMutation.mutate(data);\n  };\n\n  const handleUpdateCourse = (data: z.infer<typeof courseFormSchema>) => {\n    if (!editingCourse) return;\n    updateCourseMutation.mutate({ id: editingCourse.id, data });\n  };\n\n  const handleEditCourse = (course: Course) => {\n    setEditingCourse(course);\n    courseForm.reset({\n      name: course.name,\n      description: course.description || \"\",\n      language: course.language,\n      level: course.level,\n      duration: course.duration || undefined,\n      price: course.price || undefined,\n      isActive: course.isActive\n    });\n  };\n\n  const handleCreateBook = (data: z.infer<typeof bookFormSchema>) => {\n    if (!selectedCourse) {\n      toast({ title: \"Erro\", description: \"Selecione um curso primeiro\", variant: \"destructive\" });\n      return;\n    }\n    const bookData = { ...data, courseId: selectedCourse.id };\n    createBookMutation.mutate(bookData);\n  };\n\n  const handleUpdateBook = (data: z.infer<typeof bookFormSchema>) => {\n    if (!editingBook) return;\n    updateBookMutation.mutate({ id: editingBook.id, data });\n  };\n\n  const handleEditBook = (book: Book) => {\n    setEditingBook(book);\n    bookForm.reset({\n      name: book.name,\n      description: book.description || \"\",\n      color: book.color,\n      totalDays: book.totalDays ?? 30,\n      courseId: book.courseId,\n      displayOrder: book.displayOrder ?? 1,\n      isActive: book.isActive\n    });\n  };\n\n  const handlePdfUpload = (bookId: string, file: File) => {\n    setUploadingPdf(bookId);\n    uploadPdfMutation.mutate({ bookId, file });\n  };\n\n  const openPdfFileDialog = (bookId: string) => {\n    if (fileInputRef.current) {\n      fileInputRef.current.onchange = (e) => {\n        const file = (e.target as HTMLInputElement).files?.[0];\n        if (file && file.type === 'application/pdf') {\n          handlePdfUpload(bookId, file);\n        } else {\n          toast({ title: \"Erro\", description: \"Por favor, selecione um arquivo PDF\", variant: \"destructive\" });\n        }\n      };\n      fileInputRef.current.click();\n    }\n  };\n\n  const predefinedColors = [\n    '#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6',\n    '#06b6d4', '#84cc16', '#f97316', '#ec4899', '#6366f1'\n  ];\n\n  const getBooksByCourseid = (courseId: string) => {\n    return books.filter(book => book.courseId === courseId);\n  };\n\n  return (\n    <Layout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gradient\">Gerenciar Cursos</h1>\n            <p className=\"text-muted-foreground\">Administre cursos, livros e conteúdo educacional</p>\n          </div>\n          <Button \n            onClick={() => setIsCreateCourseOpen(true)}\n            className=\"gap-2\"\n            data-testid=\"button-create-course\"\n          >\n            <Plus className=\"w-4 h-4\" />\n            Novo Curso\n          </Button>\n        </div>\n\n        <Tabs defaultValue=\"courses\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"courses\">Cursos</TabsTrigger>\n            <TabsTrigger value=\"books\">Livros</TabsTrigger>\n          </TabsList>\n\n          {/* Courses Tab */}\n          <TabsContent value=\"courses\" className=\"space-y-4\">\n            {coursesLoading ? (\n              <div className=\"text-center py-8\">\n                <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto\"></div>\n                <p className=\"mt-4 text-muted-foreground\">Carregando cursos...</p>\n              </div>\n            ) : (\n              <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n                {courses && courses.map((course) => (\n                  <Card key={course.id} className=\"glassmorphism-card hover:shadow-lg transition-shadow\" data-testid={`card-course-${course.id}`}>\n                    <CardHeader>\n                      <div className=\"flex items-center justify-between\">\n                        <CardTitle className=\"text-lg\">{course.name}</CardTitle>\n                        <div className=\"flex gap-2\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleEditCourse(course)}\n                            data-testid={`button-edit-course-${course.id}`}\n                          >\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => deleteCourseMutation.mutate(course.id)}\n                            data-testid={`button-delete-course-${course.id}`}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <Badge variant=\"secondary\">{course.language}</Badge>\n                        <Badge variant=\"outline\">{course.level}</Badge>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-sm text-muted-foreground mb-4\">{course.description}</p>\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span>Duração: {course.duration}h</span>\n                        <span className=\"font-semibold\">R$ {course.price}</span>\n                      </div>\n                      <div className=\"mt-4\">\n                        <p className=\"text-sm mb-2\">Livros: {getBooksByCourseid(course.id).length}</p>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => setSelectedCourse(course)}\n                          className=\"w-full\"\n                          data-testid={`button-view-books-${course.id}`}\n                        >\n                          <BookOpen className=\"w-4 h-4 mr-2\" />\n                          Ver Livros\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </TabsContent>\n\n          {/* Books Tab */}\n          <TabsContent value=\"books\" className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <p className=\"text-sm text-muted-foreground\">\n                {selectedCourse ? `Livros do curso: ${selectedCourse.name}` : \"Selecione um curso para gerenciar livros\"}\n              </p>\n              {selectedCourse && (\n                <Button \n                  onClick={() => setIsCreateBookOpen(true)}\n                  size=\"sm\"\n                  className=\"gap-2\"\n                  data-testid=\"button-create-book\"\n                >\n                  <Plus className=\"w-4 h-4\" />\n                  Novo Livro\n                </Button>\n              )}\n            </div>\n\n            {selectedCourse ? (\n              booksLoading ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto\"></div>\n                </div>\n              ) : (\n                <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n                  {getBooksByCourseid(selectedCourse.id).map((book) => (\n                    <Card key={book.id} className=\"glassmorphism-card\" data-testid={`card-book-${book.id}`}>\n                      <CardHeader>\n                        <div className=\"flex items-center gap-3\">\n                          <div \n                            className=\"w-6 h-6 rounded-md border-2 border-white shadow-sm ring-1 ring-black/10\"\n                            style={{ backgroundColor: book.color }}\n                            title={`Cor: ${book.color}`}\n                          ></div>\n                          <CardTitle className=\"text-base\">{book.name}</CardTitle>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleEditBook(book)}\n                            data-testid={`button-edit-book-${book.id}`}\n                          >\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => deleteBookMutation.mutate(book.id)}\n                            data-testid={`button-delete-book-${book.id}`}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </CardHeader>\n                      <CardContent>\n                        <p className=\"text-sm text-muted-foreground mb-3\">{book.description}</p>\n                        <div className=\"space-y-3 text-sm\">\n                          <div className=\"flex justify-between\">\n                            <span>Total de dias:</span>\n                            <span className=\"font-medium\">{book.totalDays ?? 30}</span>\n                          </div>\n                          \n                          {/* PDF Section */}\n                          <div className=\"space-y-2\">\n                            {book.pdfUrl ? (\n                              <div className=\"flex items-center justify-between\">\n                                <div className=\"flex items-center gap-2\">\n                                  <Eye className=\"w-4 h-4 text-primary\" />\n                                  <span className=\"text-sm\">PDF disponível</span>\n                                </div>\n                                <div className=\"flex gap-1\">\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"ghost\"\n                                    onClick={() => window.open(book.pdfUrl!, '_blank')}\n                                    className=\"h-7 px-2\"\n                                  >\n                                    <Eye className=\"w-3 h-3\" />\n                                  </Button>\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"ghost\"\n                                    onClick={() => openPdfFileDialog(book.id)}\n                                    disabled={uploadingPdf === book.id}\n                                    className=\"h-7 px-2\"\n                                  >\n                                    <Upload className=\"w-3 h-3\" />\n                                  </Button>\n                                </div>\n                              </div>\n                            ) : (\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => openPdfFileDialog(book.id)}\n                                disabled={uploadingPdf === book.id}\n                                className=\"w-full h-8\"\n                              >\n                                <Upload className=\"w-3 h-3 mr-1\" />\n                                {uploadingPdf === book.id ? 'Enviando...' : 'Upload PDF'}\n                              </Button>\n                            )}\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              )\n            ) : (\n              <div className=\"text-center py-12\">\n                <BookOpen className=\"w-16 h-16 mx-auto text-muted-foreground mb-4\" />\n                <p className=\"text-muted-foreground\">Selecione um curso na aba \"Cursos\" para gerenciar seus livros</p>\n              </div>\n            )}\n          </TabsContent>\n        </Tabs>\n\n        {/* Create Course Dialog */}\n        <Dialog open={isCreateCourseOpen} onOpenChange={setIsCreateCourseOpen}>\n          <DialogContent data-testid=\"dialog-create-course\">\n            <DialogHeader>\n              <DialogTitle>Criar Novo Curso</DialogTitle>\n            </DialogHeader>\n            <Form {...courseForm}>\n              <form onSubmit={courseForm.handleSubmit(handleCreateCourse)} className=\"space-y-4\">\n                <FormField\n                  control={courseForm.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nome do Curso</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"Ex: Inglês Básico\"\n                          data-testid=\"input-course-name\"\n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={courseForm.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Descrição</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Descrição do curso\"\n                          data-testid=\"input-course-description\"\n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={courseForm.control}\n                    name=\"language\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Idioma</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-course-language\">\n                              <SelectValue placeholder=\"Selecione\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"English\">Inglês</SelectItem>\n                            <SelectItem value=\"Spanish\">Espanhol</SelectItem>\n                            <SelectItem value=\"French\">Francês</SelectItem>\n                            <SelectItem value=\"German\">Alemão</SelectItem>\n                            <SelectItem value=\"Italian\">Italiano</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={courseForm.control}\n                    name=\"level\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Nível</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-course-level\">\n                              <SelectValue placeholder=\"Selecione\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"Básico\">Básico</SelectItem>\n                            <SelectItem value=\"Intermediário\">Intermediário</SelectItem>\n                            <SelectItem value=\"Avançado\">Avançado</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={courseForm.control}\n                    name=\"duration\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Duração (horas)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            placeholder=\"120\"\n                            data-testid=\"input-course-duration\"\n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={courseForm.control}\n                    name=\"price\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Preço (R$)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            placeholder=\"299\"\n                            data-testid=\"input-course-price\"\n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"flex gap-2 justify-end pt-4\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsCreateCourseOpen(false)}\n                  >\n                    Cancelar\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createCourseMutation.isPending || !courseForm.formState.isValid}\n                    data-testid=\"button-save-course\"\n                  >\n                    {createCourseMutation.isPending ? 'Criando...' : 'Criar Curso'}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Create Book Dialog */}\n        <Dialog open={isCreateBookOpen} onOpenChange={setIsCreateBookOpen}>\n          <DialogContent data-testid=\"dialog-create-book\" className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingBook ? 'Editar Livro' : `Novo Livro - ${selectedCourse?.name}`}\n              </DialogTitle>\n            </DialogHeader>\n            <Form {...bookForm}>\n              <form onSubmit={bookForm.handleSubmit(editingBook ? handleUpdateBook : handleCreateBook)} className=\"space-y-4\">\n                <FormField\n                  control={bookForm.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nome do Livro</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"Ex: English Basic - Book 1\"\n                          data-testid=\"input-book-name\"\n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={bookForm.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Descrição</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Descrição do livro\"\n                          data-testid=\"input-book-description\"\n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={bookForm.control}\n                    name=\"color\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Cor do Livro</FormLabel>\n                        <FormControl>\n                          <div className=\"space-y-3\">\n                            {/* Color Preview */}\n                            <div className=\"flex items-center gap-3\">\n                              <div \n                                className=\"w-8 h-8 rounded-md border-2 border-muted shadow-sm\"\n                                style={{ backgroundColor: field.value }}\n                              ></div>\n                              <span className=\"text-sm text-muted-foreground\">Preview</span>\n                            </div>\n                            \n                            {/* Predefined Color Swatches */}\n                            <div className=\"grid grid-cols-5 gap-2\">\n                              {predefinedColors.map((color) => (\n                                <button\n                                  key={color}\n                                  type=\"button\"\n                                  className={`w-8 h-8 rounded-md border-2 transition-all hover:scale-110 ${\n                                    field.value === color ? 'border-primary' : 'border-muted'\n                                  }`}\n                                  style={{ backgroundColor: color }}\n                                  onClick={() => field.onChange(color)}\n                                  aria-label={`Select color ${color}`}\n                                />\n                              ))}\n                            </div>\n                            \n                            {/* Color Input and Hex Input */}\n                            <div className=\"flex gap-2\">\n                              <input\n                                type=\"color\"\n                                value={field.value}\n                                onChange={(e) => field.onChange(e.target.value)}\n                                className=\"w-12 h-10 rounded border cursor-pointer\"\n                                data-testid=\"input-book-color\"\n                              />\n                              <Input\n                                value={field.value}\n                                onChange={(e) => field.onChange(e.target.value)}\n                                placeholder=\"#3b82f6\"\n                                data-testid=\"input-book-color-hex\"\n                                className=\"flex-1\"\n                              />\n                            </div>\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={bookForm.control}\n                    name=\"totalDays\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Total de Dias</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            min=\"1\"\n                            placeholder=\"30\"\n                            data-testid=\"input-book-total-days\"\n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                {/* PDF Upload Section */}\n                {editingBook && (\n                  <div className=\"space-y-3 p-4 bg-muted/50 rounded-lg\">\n                    <div className=\"flex items-center gap-2\">\n                      <Upload className=\"w-4 h-4\" />\n                      <span className=\"font-medium\">PDF do Livro</span>\n                    </div>\n                    \n                    {editingBook.pdfUrl ? (\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <Eye className=\"w-4 h-4 text-primary\" />\n                          <span className=\"text-sm\">PDF disponível</span>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Button\n                            type=\"button\"\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => window.open(editingBook.pdfUrl!, '_blank')}\n                          >\n                            <Eye className=\"w-4 h-4 mr-1\" />\n                            Ver PDF\n                          </Button>\n                          <Button\n                            type=\"button\"\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => openPdfFileDialog(editingBook.id)}\n                            disabled={uploadingPdf === editingBook.id}\n                          >\n                            <Upload className=\"w-4 h-4 mr-1\" />\n                            {uploadingPdf === editingBook.id ? 'Enviando...' : 'Substituir'}\n                          </Button>\n                        </div>\n                      </div>\n                    ) : (\n                      <Button\n                        type=\"button\"\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => openPdfFileDialog(editingBook.id)}\n                        disabled={uploadingPdf === editingBook.id}\n                        className=\"w-full\"\n                      >\n                        <Upload className=\"w-4 h-4 mr-2\" />\n                        {uploadingPdf === editingBook.id ? 'Enviando...' : 'Fazer Upload do PDF'}\n                      </Button>\n                    )}\n                  </div>\n                )}\n\n                <div className=\"flex gap-2 justify-end pt-4\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => {\n                      setIsCreateBookOpen(false);\n                      setEditingBook(null);\n                      bookForm.reset();\n                    }}\n                  >\n                    Cancelar\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createBookMutation.isPending || updateBookMutation.isPending || !bookForm.formState.isValid}\n                    data-testid=\"button-save-book\"\n                  >\n                    {editingBook \n                      ? (updateBookMutation.isPending ? 'Atualizando...' : 'Atualizar Livro')\n                      : (createBookMutation.isPending ? 'Criando...' : 'Criar Livro')\n                    }\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Edit Course Dialog */}\n        <Dialog open={!!editingCourse} onOpenChange={(open) => {\n          if (!open) {\n            setEditingCourse(null);\n            courseForm.reset();\n          }\n        }}>\n          <DialogContent data-testid=\"dialog-edit-course\">\n            <DialogHeader>\n              <DialogTitle>Editar Curso</DialogTitle>\n            </DialogHeader>\n            <div className=\"grid gap-4 py-4\">\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"edit-course-name\">Nome do Curso</Label>\n                <Input\n                  id=\"edit-course-name\"\n                  value={courseForm.name}\n                  onChange={(e) => setCourseForm(prev => ({ ...prev, name: e.target.value }))}\n                  data-testid=\"input-edit-course-name\"\n                />\n              </div>\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"edit-course-description\">Descrição</Label>\n                <Textarea\n                  id=\"edit-course-description\"\n                  value={courseForm.description}\n                  onChange={(e) => setCourseForm(prev => ({ ...prev, description: e.target.value }))}\n                  data-testid=\"input-edit-course-description\"\n                />\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"edit-course-language\">Idioma</Label>\n                  <Select value={courseForm.language} onValueChange={(value) => setCourseForm(prev => ({ ...prev, language: value }))}>\n                    <SelectTrigger data-testid=\"select-edit-course-language\">\n                      <SelectValue placeholder=\"Selecione\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"English\">Inglês</SelectItem>\n                      <SelectItem value=\"Spanish\">Espanhol</SelectItem>\n                      <SelectItem value=\"French\">Francês</SelectItem>\n                      <SelectItem value=\"German\">Alemão</SelectItem>\n                      <SelectItem value=\"Italian\">Italiano</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"edit-course-level\">Nível</Label>\n                  <Select value={courseForm.level} onValueChange={(value) => setCourseForm(prev => ({ ...prev, level: value }))}>\n                    <SelectTrigger data-testid=\"select-edit-course-level\">\n                      <SelectValue placeholder=\"Selecione\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"Básico\">Básico</SelectItem>\n                      <SelectItem value=\"Intermediário\">Intermediário</SelectItem>\n                      <SelectItem value=\"Avançado\">Avançado</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"edit-course-duration\">Duração (horas)</Label>\n                  <Input\n                    id=\"edit-course-duration\"\n                    type=\"number\"\n                    value={courseForm.duration}\n                    onChange={(e) => setCourseForm(prev => ({ ...prev, duration: e.target.value }))}\n                    data-testid=\"input-edit-course-duration\"\n                  />\n                </div>\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"edit-course-price\">Preço (R$)</Label>\n                  <Input\n                    id=\"edit-course-price\"\n                    type=\"number\"\n                    value={courseForm.price}\n                    onChange={(e) => setCourseForm(prev => ({ ...prev, price: e.target.value }))}\n                    data-testid=\"input-edit-course-price\"\n                  />\n                </div>\n              </div>\n            </div>\n            <div className=\"flex gap-2 justify-end\">\n              <Button variant=\"outline\" onClick={() => {\n                setEditingCourse(null);\n                resetCourseForm();\n              }}>\n                Cancelar\n              </Button>\n              <Button \n                onClick={handleUpdateCourse} \n                disabled={updateCourseMutation.isPending}\n                data-testid=\"button-update-course\"\n              >\n                Atualizar\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Edit Book Dialog */}\n        <Dialog open={!!editingBook} onOpenChange={(open) => {\n          if (!open) {\n            setEditingBook(null);\n            bookForm.reset();\n          }\n        }}>\n          <DialogContent data-testid=\"dialog-edit-book\">\n            <DialogHeader>\n              <DialogTitle>Editar Livro</DialogTitle>\n            </DialogHeader>\n            <div className=\"grid gap-4 py-4\">\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"edit-book-name\">Nome do Livro</Label>\n                <Input\n                  id=\"edit-book-name\"\n                  value={bookForm.name}\n                  onChange={(e) => setBookForm(prev => ({ ...prev, name: e.target.value }))}\n                  data-testid=\"input-edit-book-name\"\n                />\n              </div>\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"edit-book-description\">Descrição</Label>\n                <Textarea\n                  id=\"edit-book-description\"\n                  value={bookForm.description}\n                  onChange={(e) => setBookForm(prev => ({ ...prev, description: e.target.value }))}\n                  data-testid=\"input-edit-book-description\"\n                />\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"edit-book-color\">Cor do Livro</Label>\n                  <div className=\"flex gap-2 items-center\">\n                    <Input\n                      id=\"edit-book-color\"\n                      type=\"color\"\n                      value={bookForm.color}\n                      onChange={(e) => setBookForm(prev => ({ ...prev, color: e.target.value }))}\n                      className=\"w-12 h-10 p-1\"\n                      data-testid=\"input-edit-book-color\"\n                    />\n                    <Input\n                      value={bookForm.color}\n                      onChange={(e) => setBookForm(prev => ({ ...prev, color: e.target.value }))}\n                      placeholder=\"#3b82f6\"\n                      data-testid=\"input-edit-book-color-hex\"\n                    />\n                  </div>\n                </div>\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"edit-book-totalDays\">Total de Dias</Label>\n                  <Input\n                    id=\"edit-book-totalDays\"\n                    type=\"number\"\n                    min=\"1\"\n                    value={bookForm.totalDays}\n                    onChange={(e) => setBookForm(prev => ({ ...prev, totalDays: e.target.value }))}\n                    data-testid=\"input-edit-book-total-days\"\n                  />\n                </div>\n              </div>\n            </div>\n            <div className=\"flex gap-2 justify-end\">\n              <Button variant=\"outline\" onClick={() => {\n                setEditingBook(null);\n                resetBookForm();\n              }}>\n                Cancelar\n              </Button>\n              <Button \n                onClick={handleUpdateBook} \n                disabled={updateBookMutation.isPending}\n                data-testid=\"button-update-book\"\n              >\n                Atualizar\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Hidden file input for PDF uploads */}\n        <input\n          ref={fileInputRef}\n          type=\"file\"\n          accept=\"application/pdf\"\n          style={{ display: 'none' }}\n        />\n      </div>\n    </Layout>\n  );\n}","size_bytes":43240},"client/src/components/LessonModal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { insertLessonSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { CalendarIcon, Loader2 } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { format } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\n\n// Extended schema for lesson form validation\nconst lessonFormSchema = insertLessonSchema.extend({\n  date: z.date({ required_error: \"Data é obrigatória\" }),\n  startTime: z.string().min(1, \"Horário de início é obrigatório\"),\n  endTime: z.string().min(1, \"Horário de fim é obrigatório\"),\n  bookDay: z.coerce.number().min(1, \"Dia do livro deve ser pelo menos 1\"),\n}).refine((data) => {\n  if (data.startTime && data.endTime) {\n    const start = data.startTime.split(':').map(Number);\n    const end = data.endTime.split(':').map(Number);\n    const startMinutes = start[0] * 60 + start[1];\n    const endMinutes = end[0] * 60 + end[1];\n    return endMinutes > startMinutes;\n  }\n  return true;\n}, {\n  message: \"Horário de fim deve ser posterior ao horário de início\",\n  path: [\"endTime\"],\n});\n\ntype LessonFormData = z.infer<typeof lessonFormSchema>;\n\ninterface LessonModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  lessonToEdit?: any; // Existing lesson data when editing\n  defaultClassId?: string; // Pre-select a class when creating from class context\n}\n\nexport default function LessonModal({ \n  isOpen, \n  onClose, \n  lessonToEdit, \n  defaultClassId \n}: LessonModalProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [conflictCheck, setConflictCheck] = useState<{ hasConflict: boolean; conflictingLesson?: any } | null>(null);\n  const [checkingConflict, setCheckingConflict] = useState(false);\n\n  const isEditing = !!lessonToEdit;\n\n  // Fetch classes (filtered by teacher if user is a teacher)\n  const { data: classes = [], isLoading: classesLoading } = useQuery<any[]>({\n    queryKey: user?.role === 'teacher' \n      ? [\"/api/classes/teacher\", user.id]\n      : [\"/api/classes\"],\n    enabled: isOpen,\n  });\n\n  const form = useForm<LessonFormData>({\n    resolver: zodResolver(lessonFormSchema),\n    defaultValues: {\n      classId: defaultClassId || \"\",\n      title: \"\",\n      bookDay: 1,\n      date: new Date(),\n      startTime: \"\",\n      endTime: \"\",\n      room: \"\",\n      status: \"scheduled\",\n      notes: \"\",\n    },\n  });\n\n  // Reset form when modal opens/closes or when lessonToEdit changes\n  useEffect(() => {\n    if (isOpen) {\n      if (lessonToEdit) {\n        // Editing existing lesson\n        form.reset({\n          classId: lessonToEdit.classId,\n          title: lessonToEdit.title,\n          bookDay: lessonToEdit.bookDay,\n          date: new Date(lessonToEdit.date),\n          startTime: lessonToEdit.startTime,\n          endTime: lessonToEdit.endTime,\n          room: lessonToEdit.room || \"\",\n          status: lessonToEdit.status,\n          notes: lessonToEdit.notes || \"\",\n        });\n      } else {\n        // Creating new lesson\n        form.reset({\n          classId: defaultClassId || \"\",\n          title: \"\",\n          bookDay: 1,\n          date: new Date(),\n          startTime: \"\",\n          endTime: \"\",\n          room: \"\",\n          status: \"scheduled\",\n          notes: \"\",\n        });\n      }\n      setConflictCheck(null);\n    }\n  }, [isOpen, lessonToEdit, defaultClassId, form]);\n\n  // Check for conflicts when time fields change\n  const checkConflicts = async (classId: string, date: Date, startTime: string, endTime: string) => {\n    if (!classId || !startTime || !endTime) {\n      setConflictCheck(null);\n      return;\n    }\n\n    // Get teacher ID from selected class\n    const selectedClass = classes.find((cls: any) => cls.id === classId);\n    if (!selectedClass?.teacher?.id) {\n      setConflictCheck(null);\n      return;\n    }\n\n    setCheckingConflict(true);\n    try {\n      const conflictResult = await apiRequest('POST', '/api/lessons/check-conflicts', {\n        teacherId: selectedClass.teacher.id,\n        date: date.toISOString(),\n        startTime,\n        endTime,\n        excludeLessonId: lessonToEdit?.id\n      }) as { hasConflict: boolean; conflictingLesson?: any };\n      setConflictCheck(conflictResult);\n    } catch (error) {\n      console.error('Error checking conflicts:', error);\n      setConflictCheck(null);\n    } finally {\n      setCheckingConflict(false);\n    }\n  };\n\n  // Watch form fields for conflict checking\n  const watchedClassId = form.watch(\"classId\");\n  const watchedDate = form.watch(\"date\");\n  const watchedStartTime = form.watch(\"startTime\");\n  const watchedEndTime = form.watch(\"endTime\");\n\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      checkConflicts(watchedClassId, watchedDate, watchedStartTime, watchedEndTime);\n    }, 500); // Debounce conflict checking\n\n    return () => clearTimeout(timeoutId);\n  }, [watchedClassId, watchedDate, watchedStartTime, watchedEndTime, classes]);\n\n  // Create lesson mutation\n  const createLessonMutation = useMutation({\n    mutationFn: async (data: LessonFormData) => {\n      const lessonData = {\n        ...data,\n        date: data.date.toISOString(),\n      };\n      return await apiRequest(\"POST\", \"/api/lessons\", lessonData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/lessons\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/lessons/today\"] });\n      // Invalidate teacher queries with correct key format\n      if (user?.role === 'teacher') {\n        queryClient.invalidateQueries({ queryKey: [\"/api/lessons/teacher\", user.id] });\n      } else {\n        queryClient.invalidateQueries({ queryKey: [\"/api/lessons/teacher\"] });\n      }\n      toast({\n        title: \"Sucesso!\",\n        description: \"Aula criada com sucesso.\",\n      });\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Falha ao criar aula. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update lesson mutation\n  const updateLessonMutation = useMutation({\n    mutationFn: async (data: LessonFormData) => {\n      const lessonData = {\n        ...data,\n        date: data.date.toISOString(),\n      };\n      return await apiRequest(\"PUT\", `/api/lessons/${lessonToEdit.id}`, lessonData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/lessons\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/lessons/today\"] });\n      // Invalidate teacher queries with correct key format\n      if (user?.role === 'teacher') {\n        queryClient.invalidateQueries({ queryKey: [\"/api/lessons/teacher\", user.id] });\n      } else {\n        queryClient.invalidateQueries({ queryKey: [\"/api/lessons/teacher\"] });\n      }\n      toast({\n        title: \"Sucesso!\",\n        description: \"Aula atualizada com sucesso.\",\n      });\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Falha ao atualizar aula. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = async (data: LessonFormData) => {\n    // Final conflict check before submission\n    if (conflictCheck?.hasConflict) {\n      toast({\n        title: \"Conflito de horário\",\n        description: \"Resolve o conflito de horário antes de salvar.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (isEditing) {\n      updateLessonMutation.mutate(data);\n    } else {\n      createLessonMutation.mutate(data);\n    }\n  };\n\n  const handleClose = () => {\n    form.reset();\n    setConflictCheck(null);\n    onClose();\n  };\n\n  const isSubmitting = createLessonMutation.isPending || updateLessonMutation.isPending;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>\n            {isEditing ? \"Editar Aula\" : \"Nova Aula\"}\n          </DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {/* Class Selection */}\n              <FormField\n                control={form.control}\n                name=\"classId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Turma</FormLabel>\n                    <FormControl>\n                      <Select \n                        value={field.value} \n                        onValueChange={field.onChange}\n                        disabled={classesLoading}\n                        data-testid=\"select-class\"\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Selecione uma turma\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {(classes as any[]).map((cls: any) => (\n                            <SelectItem key={cls.id} value={cls.id}>\n                              {cls.name} - {cls.book?.name}\n                              {user?.role !== 'teacher' && cls.teacher && (\n                                <span className=\"text-sm text-muted-foreground ml-2\">\n                                  ({cls.teacher.firstName} {cls.teacher.lastName})\n                                </span>\n                              )}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Title */}\n              <FormField\n                control={form.control}\n                name=\"title\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Título da Aula</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-lesson-title\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Book Day */}\n              <FormField\n                control={form.control}\n                name=\"bookDay\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Dia do Livro</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        min=\"1\"\n                        {...field}\n                        data-testid=\"input-book-day\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Date */}\n              <FormField\n                control={form.control}\n                name=\"date\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Data</FormLabel>\n                    <FormControl>\n                      <Popover>\n                        <PopoverTrigger asChild>\n                          <Button\n                            variant=\"outline\"\n                            className={cn(\n                              \"w-full justify-start text-left font-normal\",\n                              !field.value && \"text-muted-foreground\"\n                            )}\n                            data-testid=\"input-lesson-date\"\n                          >\n                            <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                            {field.value ? (\n                              format(field.value, \"PPP\", { locale: ptBR })\n                            ) : (\n                              \"Selecione uma data\"\n                            )}\n                          </Button>\n                        </PopoverTrigger>\n                        <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                          <Calendar\n                            mode=\"single\"\n                            selected={field.value}\n                            onSelect={field.onChange}\n                            initialFocus\n                          />\n                        </PopoverContent>\n                      </Popover>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Start Time */}\n              <FormField\n                control={form.control}\n                name=\"startTime\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Horário de Início</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"time\" \n                        {...field}\n                        data-testid=\"input-start-time\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* End Time */}\n              <FormField\n                control={form.control}\n                name=\"endTime\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Horário de Fim</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"time\" \n                        {...field}\n                        data-testid=\"input-end-time\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Room */}\n              <FormField\n                control={form.control}\n                name=\"room\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Sala</FormLabel>\n                    <FormControl>\n                      <Input {...field} value={field.value || \"\"} data-testid=\"input-room\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Status */}\n              <FormField\n                control={form.control}\n                name=\"status\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Status</FormLabel>\n                    <FormControl>\n                      <Select \n                        value={field.value || \"scheduled\"} \n                        onValueChange={field.onChange}\n                        data-testid=\"select-status\"\n                      >\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"scheduled\">Agendado</SelectItem>\n                          <SelectItem value=\"in_progress\">Em andamento</SelectItem>\n                          <SelectItem value=\"completed\">Concluído</SelectItem>\n                          <SelectItem value=\"cancelled\">Cancelado</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Notes */}\n            <FormField\n              control={form.control}\n              name=\"notes\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Observações</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      {...field} \n                      value={field.value || \"\"}\n                      rows={3}\n                      data-testid=\"textarea-notes\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Conflict Warning */}\n            {checkingConflict && (\n              <div className=\"flex items-center space-x-2 text-muted-foreground\">\n                <Loader2 className=\"h-4 w-4 animate-spin\" />\n                <span>Verificando conflitos...</span>\n              </div>\n            )}\n\n            {conflictCheck?.hasConflict && (\n              <div className=\"p-3 rounded-md bg-destructive/10 border border-destructive/20\">\n                <div className=\"flex items-start space-x-2\">\n                  <div className=\"text-destructive\">⚠️</div>\n                  <div>\n                    <h4 className=\"font-medium text-destructive\">Conflito de horário detectado</h4>\n                    <p className=\"text-sm text-destructive/80 mt-1\">\n                      Já existe uma aula \"{conflictCheck.conflictingLesson?.title}\" \n                      no horário {conflictCheck.conflictingLesson?.startTime}-{conflictCheck.conflictingLesson?.endTime}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Form Actions */}\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={handleClose}\n                disabled={isSubmitting}\n                data-testid=\"button-cancel\"\n              >\n                Cancelar\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={isSubmitting || conflictCheck?.hasConflict}\n                data-testid=\"button-save-lesson\"\n              >\n                {isSubmitting ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    {isEditing ? \"Atualizando...\" : \"Criando...\"}\n                  </>\n                ) : (\n                  isEditing ? \"Atualizar\" : \"Criar Aula\"\n                )}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":19134},"client/src/components/ClassModal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { insertClassSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Loader2, Trash2 } from \"lucide-react\";\n\n// Extended schema for class form validation\nconst classFormSchema = insertClassSchema.extend({\n  name: z.string().min(1, \"Nome da turma é obrigatório\"),\n  bookId: z.string().min(1, \"Livro é obrigatório\"),\n  teacherId: z.string().min(1, \"Professor é obrigatório\"),\n  unitId: z.string().min(1, \"Unidade é obrigatória\"),\n  dayOfWeek: z.coerce.number().min(0).max(6, \"Dia da semana deve ser entre 0-6\"),\n  startTime: z.string().min(1, \"Horário de início é obrigatório\"),\n  endTime: z.string().min(1, \"Horário de fim é obrigatório\"),\n  maxStudents: z.coerce.number().min(1, \"Máximo de alunos deve ser pelo menos 1\"),\n}).refine((data) => {\n  if (data.startTime && data.endTime) {\n    const start = data.startTime.split(':').map(Number);\n    const end = data.endTime.split(':').map(Number);\n    const startMinutes = start[0] * 60 + start[1];\n    const endMinutes = end[0] * 60 + end[1];\n    return endMinutes > startMinutes;\n  }\n  return true;\n}, {\n  message: \"Horário de fim deve ser posterior ao horário de início\",\n  path: [\"endTime\"],\n});\n\ntype ClassFormData = z.infer<typeof classFormSchema>;\n\ninterface ClassModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  classToEdit?: any; // Existing class data when editing\n}\n\nconst daysOfWeek = [\n  { value: 0, label: \"Domingo\" },\n  { value: 1, label: \"Segunda-feira\" },\n  { value: 2, label: \"Terça-feira\" },\n  { value: 3, label: \"Quarta-feira\" },\n  { value: 4, label: \"Quinta-feira\" },\n  { value: 5, label: \"Sexta-feira\" },\n  { value: 6, label: \"Sábado\" },\n];\n\nexport default function ClassModal({ \n  isOpen, \n  onClose, \n  classToEdit\n}: ClassModalProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);\n\n  const isEditing = !!classToEdit;\n\n  // Fetch books for dropdown\n  const { data: books = [], isLoading: booksLoading } = useQuery<any[]>({\n    queryKey: [\"/api/books\"],\n    enabled: isOpen,\n  });\n\n  // Fetch teachers for dropdown\n  const { data: staff = [], isLoading: staffLoading } = useQuery<any[]>({\n    queryKey: [\"/api/staff\"],\n    enabled: isOpen,\n  });\n\n  // Fetch units for dropdown\n  const { data: units = [], isLoading: unitsLoading } = useQuery<any[]>({\n    queryKey: [\"/api/units\"],\n    enabled: isOpen,\n  });\n\n  // Filter teachers from staff\n  const teachers = staff.filter(s => s.user?.role === 'teacher');\n\n  const form = useForm<ClassFormData>({\n    resolver: zodResolver(classFormSchema),\n    defaultValues: {\n      name: \"\",\n      bookId: \"\",\n      teacherId: \"\",\n      unitId: \"\",\n      dayOfWeek: 1, // Monday by default\n      startTime: \"\",\n      endTime: \"\",\n      room: \"\",\n      maxStudents: 15,\n      currentStudents: 0,\n    },\n  });\n\n  // Reset form when modal opens/closes or when classToEdit changes\n  useEffect(() => {\n    if (isOpen) {\n      if (classToEdit) {\n        // Editing existing class\n        form.reset({\n          name: classToEdit.name,\n          bookId: classToEdit.bookId,\n          teacherId: classToEdit.teacherId,\n          unitId: classToEdit.unitId,\n          dayOfWeek: classToEdit.dayOfWeek,\n          startTime: classToEdit.startTime,\n          endTime: classToEdit.endTime,\n          room: classToEdit.room || \"\",\n          maxStudents: classToEdit.maxStudents || 15,\n          currentStudents: classToEdit.currentStudents || 0,\n        });\n      } else {\n        // Creating new class\n        form.reset({\n          name: \"\",\n          bookId: \"\",\n          teacherId: \"\",\n          unitId: \"\",\n          dayOfWeek: 1,\n          startTime: \"\",\n          endTime: \"\",\n          room: \"\",\n          maxStudents: 15,\n          currentStudents: 0,\n        });\n      }\n    }\n  }, [isOpen, classToEdit, form]);\n\n  // Create class mutation\n  const createClassMutation = useMutation({\n    mutationFn: async (data: ClassFormData) => {\n      return await apiRequest(\"POST\", \"/api/classes\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/classes\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/schedule/admin\"] });\n      toast({\n        title: \"Sucesso!\",\n        description: \"Turma criada com sucesso.\",\n      });\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Falha ao criar turma. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update class mutation\n  const updateClassMutation = useMutation({\n    mutationFn: async (data: ClassFormData) => {\n      return await apiRequest(\"PUT\", `/api/classes/${classToEdit.id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/classes\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/schedule/admin\"] });\n      toast({\n        title: \"Sucesso!\",\n        description: \"Turma atualizada com sucesso.\",\n      });\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Falha ao atualizar turma. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete class mutation\n  const deleteClassMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"DELETE\", `/api/classes/${classToEdit.id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/classes\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/schedule/admin\"] });\n      toast({\n        title: \"Sucesso!\",\n        description: \"Turma excluída com sucesso.\",\n      });\n      setShowDeleteConfirm(false);\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Falha ao excluir turma. Tente novamente.\",\n        variant: \"destructive\",\n      });\n      setShowDeleteConfirm(false);\n    },\n  });\n\n  const onSubmit = async (data: ClassFormData) => {\n    if (isEditing) {\n      updateClassMutation.mutate(data);\n    } else {\n      createClassMutation.mutate(data);\n    }\n  };\n\n  const handleClose = () => {\n    form.reset();\n    setShowDeleteConfirm(false);\n    onClose();\n  };\n\n  const handleDeleteConfirm = () => {\n    deleteClassMutation.mutate();\n  };\n\n  const isSubmitting = createClassMutation.isPending || updateClassMutation.isPending || deleteClassMutation.isPending;\n\n  return (\n    <>\n      <Dialog open={isOpen} onOpenChange={handleClose}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>\n              {isEditing ? \"Editar Turma\" : \"Nova Turma\"}\n            </DialogTitle>\n          </DialogHeader>\n\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {/* Class Name */}\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nome da Turma</FormLabel>\n                      <FormControl>\n                        <Input {...field} data-testid=\"input-class-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Book Selection */}\n                <FormField\n                  control={form.control}\n                  name=\"bookId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Livro</FormLabel>\n                      <FormControl>\n                        <Select \n                          value={field.value} \n                          onValueChange={field.onChange}\n                          disabled={booksLoading}\n                          data-testid=\"select-book\"\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Selecione um livro\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {books.map((book: any) => (\n                              <SelectItem key={book.id} value={book.id}>\n                                {book.name} - {book.course?.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Teacher Selection */}\n                <FormField\n                  control={form.control}\n                  name=\"teacherId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Professor</FormLabel>\n                      <FormControl>\n                        <Select \n                          value={field.value} \n                          onValueChange={field.onChange}\n                          disabled={staffLoading}\n                          data-testid=\"select-teacher\"\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Selecione um professor\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {teachers.map((teacher: any) => (\n                              <SelectItem key={teacher.user.id} value={teacher.user.id}>\n                                {teacher.user.firstName} {teacher.user.lastName}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Unit Selection */}\n                <FormField\n                  control={form.control}\n                  name=\"unitId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Unidade</FormLabel>\n                      <FormControl>\n                        <Select \n                          value={field.value} \n                          onValueChange={field.onChange}\n                          disabled={unitsLoading}\n                          data-testid=\"select-unit\"\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Selecione uma unidade\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {units.map((unit: any) => (\n                              <SelectItem key={unit.id} value={unit.id}>\n                                {unit.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Day of Week */}\n                <FormField\n                  control={form.control}\n                  name=\"dayOfWeek\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Dia da Semana</FormLabel>\n                      <FormControl>\n                        <Select \n                          value={field.value?.toString()} \n                          onValueChange={(value) => field.onChange(parseInt(value))}\n                          data-testid=\"select-day-of-week\"\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Selecione o dia\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {daysOfWeek.map((day) => (\n                              <SelectItem key={day.value} value={day.value.toString()}>\n                                {day.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Start Time */}\n                <FormField\n                  control={form.control}\n                  name=\"startTime\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Horário de Início</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"time\" \n                          {...field}\n                          data-testid=\"input-start-time\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* End Time */}\n                <FormField\n                  control={form.control}\n                  name=\"endTime\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Horário de Fim</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"time\" \n                          {...field}\n                          data-testid=\"input-end-time\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Room */}\n                <FormField\n                  control={form.control}\n                  name=\"room\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Sala</FormLabel>\n                      <FormControl>\n                        <Input {...field} value={field.value || \"\"} data-testid=\"input-room\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Max Students */}\n                <FormField\n                  control={form.control}\n                  name=\"maxStudents\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Máximo de Alunos</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          min=\"1\"\n                          {...field}\n                          data-testid=\"input-max-students\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              {/* Form Actions */}\n              <div className=\"flex justify-between pt-4\">\n                <div>\n                  {isEditing && (\n                    <Button\n                      type=\"button\"\n                      variant=\"destructive\"\n                      onClick={() => setShowDeleteConfirm(true)}\n                      disabled={isSubmitting}\n                      data-testid=\"button-delete-class\"\n                    >\n                      <Trash2 className=\"mr-2 h-4 w-4\" />\n                      Excluir Turma\n                    </Button>\n                  )}\n                </div>\n                <div className=\"flex space-x-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={handleClose}\n                    disabled={isSubmitting}\n                    data-testid=\"button-cancel\"\n                  >\n                    Cancelar\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={isSubmitting}\n                    data-testid=\"button-save-class\"\n                  >\n                    {isSubmitting ? (\n                      <>\n                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                        {deleteClassMutation.isPending ? \"Excluindo...\" : (isEditing ? \"Atualizando...\" : \"Criando...\")}\n                      </>\n                    ) : (\n                      isEditing ? \"Atualizar\" : \"Criar Turma\"\n                    )}\n                  </Button>\n                </div>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={showDeleteConfirm} onOpenChange={setShowDeleteConfirm}>\n        <AlertDialogContent data-testid=\"dialog-delete-confirm\">\n          <AlertDialogHeader>\n            <AlertDialogTitle>Confirmar Exclusão</AlertDialogTitle>\n            <AlertDialogDescription>\n              Tem certeza de que deseja excluir a turma \"{classToEdit?.name}\"? \n              Esta ação não pode ser desfeita e todas as aulas relacionadas também serão excluídas.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\" disabled={deleteClassMutation.isPending}>\n              Cancelar\n            </AlertDialogCancel>\n            <AlertDialogAction\n              onClick={handleDeleteConfirm}\n              disabled={deleteClassMutation.isPending}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n              data-testid=\"button-confirm-delete\"\n            >\n              {deleteClassMutation.isPending ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Excluindo...\n                </>\n              ) : (\n                \"Excluir\"\n              )}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n}","size_bytes":19334},"client/src/components/StudentLayout.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useState } from \"react\";\nimport { Menu, Settings, Bell, LogOut } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { ThemeToggle } from \"@/components/ThemeToggle\";\nimport { \n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\n\ninterface StudentLayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function StudentLayout({ children }: StudentLayoutProps) {\n  const { user, isLoading, isAuthenticated } = useAuth();\n  const queryClient = useQueryClient();\n  const [location] = useLocation();\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch('/api/auth/logout', {\n        method: 'POST',\n      });\n      if (!response.ok) {\n        throw new Error('Logout failed');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      // Clear all queries and redirect to login\n      queryClient.clear();\n      window.location.href = '/';\n    },\n  });\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <div className=\"w-12 h-12 bg-primary rounded-2xl flex items-center justify-center mx-auto mb-4\">\n            <i className=\"fas fa-graduation-cap text-primary-foreground text-xl animate-pulse\"></i>\n          </div>\n          <p className=\"text-muted-foreground\">Carregando...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null; // Will be handled by the routing\n  }\n\n  const studentMenuItems = [\n    {\n      path: \"/\",\n      label: \"Dashboard\",\n      icon: \"fas fa-home\",\n    },\n    {\n      path: \"/aluno/workbook\",\n      label: \"Workbook\",\n      icon: \"fas fa-book\",\n    },\n    {\n      path: \"/aluno/provas\",\n      label: \"Provas\",\n      icon: \"fas fa-clipboard-check\",\n    },\n    {\n      path: \"/aluno/cronograma\",\n      label: \"Cronograma\",\n      icon: \"fas fa-calendar-alt\",\n    },\n    {\n      path: \"/aluno/progresso\",\n      label: \"Meu Progresso\",\n      icon: \"fas fa-chart-line\",\n    },\n  ];\n\n  const isActive = (path: string) => {\n    if (path === \"/\" && (location === \"/\" || location === \"/student-area\")) return true;\n    if (path !== \"/\" && location.startsWith(path)) return true;\n    return false;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900\">\n      {/* Top Header - Minimal */}\n      <header className=\"bg-white/80 dark:bg-gray-800/80 backdrop-blur-md border-b border-gray-200/50 dark:border-gray-700/50 sticky top-0 z-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            {/* Logo */}\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-8 h-8 bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-graduation-cap text-white text-sm\"></i>\n              </div>\n              <span className=\"text-lg font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n                OpenLife\n              </span>\n            </div>\n\n            {/* User Menu */}\n            {user && (\n              <div className=\"flex items-center space-x-3\">\n                <ThemeToggle />\n                <DropdownMenu>\n                  <DropdownMenuTrigger className=\"flex items-center space-x-3 hover:bg-gray-100/50 dark:hover:bg-gray-700/50 rounded-lg p-2 transition-colors cursor-pointer focus:outline-none\" data-testid=\"dropdown-user\">\n                    <div className=\"text-right\">\n                      <p className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">\n                        {user.firstName} {user.lastName}\n                      </p>\n                      <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                        {user.role === 'admin' && 'Administrador'}\n                        {user.role === 'teacher' && 'Professor'}\n                        {user.role === 'secretary' && 'Secretário'}\n                        {user.role === 'student' && 'Estudante'}\n                      </p>\n                    </div>\n                    <div className=\"w-8 h-8 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full flex items-center justify-center\">\n                      <span className=\"text-white text-sm font-medium\">\n                        {user.firstName?.[0]}{user.lastName?.[0]}\n                      </span>\n                    </div>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\" className=\"w-48\">\n                    <DropdownMenuItem className=\"cursor-default\" data-testid=\"menu-item-settings\">\n                      <Settings className=\"mr-2 h-4 w-4\" />\n                      <span>Configurações</span>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem className=\"cursor-default\" data-testid=\"menu-item-notifications\">\n                      <Bell className=\"mr-2 h-4 w-4\" />\n                      <span>Notificações</span>\n                    </DropdownMenuItem>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem\n                      className=\"cursor-pointer\"\n                      data-testid=\"menu-item-logout\"\n                      onClick={handleLogout}\n                    >\n                      <LogOut className=\"mr-2 h-4 w-4\" />\n                      <span>Sair</span>\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </div>\n            )}\n          </div>\n        </div>\n      </header>\n\n      {/* Student Navigation Menu */}\n      <nav className=\"bg-white/60 dark:bg-gray-800/60 backdrop-blur-sm border-b border-gray-200/30 dark:border-gray-700/30\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-center py-4\">\n            <div className=\"flex space-x-1 sm:space-x-2\">\n              {studentMenuItems.map((item) => (\n                <Link key={item.path} href={item.path}>\n                  <a\n                    className={`flex items-center space-x-2 px-3 py-2 sm:px-4 sm:py-3 rounded-xl text-sm font-medium transition-all duration-200 whitespace-nowrap ${\n                      isActive(item.path)\n                        ? \"bg-gradient-to-r from-blue-500 to-purple-500 text-white shadow-lg transform scale-105\"\n                        : \"text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 hover:bg-gray-100/50 dark:hover:bg-gray-700/50\"\n                    }`}\n                    data-testid={`link-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n                  >\n                    <i className={`${item.icon} text-sm`}></i>\n                    <span className=\"hidden sm:inline\">{item.label}</span>\n                  </a>\n                </Link>\n              ))}\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {children}\n      </main>\n    </div>\n  );\n}","size_bytes":7516},"client/src/pages/TeacherArea.tsx":{"content":"\nimport React, { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Layout from \"@/components/Layout\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { format, startOfWeek, addDays, isSameDay } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\n\nexport default function TeacherArea() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading: authLoading, user } = useAuth();\n  const [selectedClassId, setSelectedClassId] = useState<string>(\"\");\n  const [currentWeekStart, setCurrentWeekStart] = useState<Date>(startOfWeek(new Date(), { locale: ptBR }));\n  const [selectedClassDetail, setSelectedClassDetail] = useState<any>(null);\n  const [showClassDetail, setShowClassDetail] = useState(false);\n\n  // Fetch teacher's classes\n  const { data: teacherClasses = [], isLoading: classesLoading } = useQuery<any[]>({\n    queryKey: [\"/api/classes/teacher\", user?.id],\n    enabled: isAuthenticated && user?.role === 'teacher',\n    retry: false,\n  });\n\n  // Fetch teacher's schedule\n  const { data: teacherSchedule = [], isLoading: scheduleLoading } = useQuery<any[]>({\n    queryKey: [\"/api/schedule/teacher\", user?.id],\n    enabled: isAuthenticated && user?.role === 'teacher',\n    retry: false,\n  });\n\n  // Mock data for students and grades (would come from API)\n  const mockStudents = [\n    {\n      id: '1',\n      name: 'Ana Silva',\n      email: 'ana.silva@email.com',\n      workbookProgress: 75,\n      currentUnit: 8,\n      totalUnits: 12,\n      averageGrade: 8.5,\n      attendance: 95,\n      avatar: null\n    },\n    {\n      id: '2', \n      name: 'Carlos Santos',\n      email: 'carlos.santos@email.com',\n      workbookProgress: 60,\n      currentUnit: 6,\n      totalUnits: 12,\n      averageGrade: 7.2,\n      attendance: 88,\n      avatar: null\n    },\n    {\n      id: '3',\n      name: 'Beatriz Costa',\n      email: 'beatriz.costa@email.com', \n      workbookProgress: 90,\n      currentUnit: 10,\n      totalUnits: 12,\n      averageGrade: 9.1,\n      attendance: 98,\n      avatar: null\n    }\n  ];\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Não autorizado\",\n        description: \"Você foi desconectado. Fazendo login novamente...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  if (authLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  // Check if user is teacher\n  if (user?.role !== 'teacher') {\n    return (\n      <Layout>\n        <div className=\"p-6\">\n          <Card>\n            <CardContent className=\"py-12 text-center\">\n              <i className=\"fas fa-user-slash text-muted-foreground text-6xl mb-4\"></i>\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">Acesso Negado</h3>\n              <p className=\"text-muted-foreground\">Esta área é exclusiva para professores.</p>\n            </CardContent>\n          </Card>\n        </div>\n      </Layout>\n    );\n  }\n\n  const navigateWeek = (direction: 'prev' | 'next') => {\n    setCurrentWeekStart(prev => addDays(prev, direction === 'next' ? 7 : -7));\n  };\n\n  // Sistema de cores por livro - utilizando cores OpenLife\n  const bookColors: { [key: string]: string } = {\n    'English Basic - Book 1': '#b130ff',\n    'English Basic - Book 2': '#ff6506',\n    'English Basic - Book 3': '#3b82f6',\n    'English Intermediate - Book 1': '#10b981',\n    'English Intermediate - Book 2': '#059669',\n    'English Advanced - Book 1': '#8b5cf6',\n    'Español Básico - Libro 1': '#f59e0b',\n    'Español Básico - Libro 2': '#d97706'\n  };\n\n  const handleClassClick = (classItem: any) => {\n    setSelectedClassDetail(classItem);\n    setShowClassDetail(true);\n  };\n\n  const renderWeeklySchedule = () => {\n    const weekDays = Array.from({ length: 7 }, (_, i) => addDays(currentWeekStart, i));\n    const timeSlots = Array.from({ length: 14 }, (_, i) => `${8 + i}:00`);\n\n    // Dados exemplares das turmas do professor\n    const mockTeacherSchedule = [\n      {\n        id: '1',\n        title: 'Inglês A1 - Manhã',\n        book: 'English Basic - Book 1',\n        dayOfWeek: 1, // Segunda\n        startTime: '09:00',\n        endTime: '11:00',\n        room: 'Sala 101',\n        currentDay: 5,\n        totalDays: 30,\n        studentsCount: 12,\n        maxStudents: 15\n      },\n      {\n        id: '2',\n        title: 'Inglês A2 - Tarde',\n        book: 'English Basic - Book 2',\n        dayOfWeek: 1, // Segunda\n        startTime: '14:00',\n        endTime: '16:00',\n        room: 'Sala 102',\n        currentDay: 8,\n        totalDays: 35,\n        studentsCount: 10,\n        maxStudents: 15\n      },\n      {\n        id: '3',\n        title: 'Inglês A1 - Manhã',\n        book: 'English Basic - Book 1',\n        dayOfWeek: 3, // Quarta\n        startTime: '09:00',\n        endTime: '11:00',\n        room: 'Sala 101',\n        currentDay: 6,\n        totalDays: 30,\n        studentsCount: 12,\n        maxStudents: 15\n      },\n      {\n        id: '4',\n        title: 'Inglês A2 - Tarde',\n        book: 'English Basic - Book 2',\n        dayOfWeek: 3, // Quarta\n        startTime: '14:00',\n        endTime: '16:00',\n        room: 'Sala 102',\n        currentDay: 9,\n        totalDays: 35,\n        studentsCount: 10,\n        maxStudents: 15\n      }\n    ];\n\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Button variant=\"outline\" onClick={() => navigateWeek('prev')}>\n              ← Semana Anterior\n            </Button>\n            <h3 className=\"text-lg font-semibold\">\n              {format(currentWeekStart, \"dd MMM\", { locale: ptBR })} - {format(addDays(currentWeekStart, 6), \"dd MMM yyyy\", { locale: ptBR })}\n            </h3>\n            <Button variant=\"outline\" onClick={() => navigateWeek('next')}>\n              Próxima Semana →\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"overflow-x-auto bg-white rounded-lg border shadow-sm\">\n          <div className=\"grid grid-cols-8 gap-0 min-w-[900px]\">\n            {/* Header */}\n            <div className=\"p-3 font-medium text-center bg-gray-50 border-b border-r text-sm\">Horário</div>\n            {weekDays.map((day) => (\n              <div key={day.toISOString()} className=\"p-3 font-medium text-center bg-gray-50 border-b border-r text-sm\">\n                <div className=\"font-semibold\">{format(day, \"EEE\", { locale: ptBR })}</div>\n                <div className=\"text-xs text-gray-500 mt-1\">\n                  {format(day, \"dd/MM\", { locale: ptBR })}\n                </div>\n              </div>\n            ))}\n\n            {/* Time slots */}\n            {timeSlots.map((timeSlot) => {\n              const [hour] = timeSlot.split(':');\n              return (\n                <React.Fragment key={timeSlot}>\n                  <div className=\"p-3 text-xs font-medium text-center bg-gray-50 border-b border-r text-gray-600\">\n                    {timeSlot}\n                  </div>\n                  \n                  {weekDays.map((day) => {\n                    const dayClasses = mockTeacherSchedule.filter(classItem => {\n                      if (classItem.dayOfWeek !== day.getDay()) return false;\n                      const classHour = parseInt(classItem.startTime.split(':')[0]);\n                      return classHour === parseInt(hour);\n                    });\n\n                    return (\n                      <div key={`${day.toISOString()}-${timeSlot}`} className=\"min-h-[80px] p-1 border-b border-r border-gray-100\">\n                        {dayClasses.map((classItem) => (\n                          <div\n                            key={classItem.id}\n                            className=\"p-2 rounded-lg text-xs cursor-pointer transition-all hover:shadow-md border border-opacity-30 h-full flex items-center justify-center\"\n                            style={{\n                              backgroundColor: bookColors[classItem.book] + '20',\n                              borderColor: bookColors[classItem.book],\n                              color: '#000'\n                            }}\n                            onClick={() => handleClassClick(classItem)}\n                            data-testid={`schedule-class-${classItem.id}`}\n                          >\n                            <div className=\"font-semibold text-sm text-center\">{classItem.title}</div>\n                          </div>\n                        ))}\n                      </div>\n                    );\n                  })}\n                </React.Fragment>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Legenda dos meus livros */}\n        <div className=\"bg-gray-50 p-4 rounded-lg\">\n          <h4 className=\"font-medium mb-3\">Meus Livros</h4>\n          <div className=\"flex flex-wrap gap-3\">\n            {Object.entries(bookColors).map(([bookName, color]) => (\n              <div key={bookName} className=\"flex items-center space-x-2\">\n                <div className=\"w-4 h-4 rounded-full\" style={{ backgroundColor: color }}></div>\n                <span className=\"text-sm\">{bookName}</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <Layout>\n      <div className=\"p-6 space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-semibold text-foreground\">Área do Professor</h2>\n            <p className=\"text-sm text-muted-foreground\">\n              Bem-vindo, Prof. Ivan Silva - Gerencie suas turmas e acompanhe o progresso dos alunos\n            </p>\n          </div>\n        </div>\n\n        <Tabs defaultValue=\"turmas\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"turmas\">Minhas Turmas</TabsTrigger>\n            <TabsTrigger value=\"alunos\">Alunos & Notas</TabsTrigger>\n            <TabsTrigger value=\"avaliacoes\">Avaliações</TabsTrigger>\n            <TabsTrigger value=\"agenda\">Minha Agenda</TabsTrigger>\n          </TabsList>\n\n          {/* Minhas Turmas */}\n          <TabsContent value=\"turmas\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-users text-primary\"></i>\n                  <span>Minhas Turmas</span>\n                  <Badge variant=\"secondary\">{teacherClasses.length} turmas ativas</Badge>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {classesLoading ? (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                    {Array.from({ length: 3 }).map((_, index) => (\n                      <Card key={index} className=\"animate-pulse\">\n                        <CardHeader>\n                          <div className=\"h-5 bg-muted rounded w-3/4 mb-2\"></div>\n                          <div className=\"h-4 bg-muted rounded w-1/2\"></div>\n                        </CardHeader>\n                        <CardContent>\n                          <div className=\"space-y-2\">\n                            <div className=\"h-4 bg-muted rounded\"></div>\n                            <div className=\"h-4 bg-muted rounded w-2/3\"></div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                ) : teacherClasses.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <i className=\"fas fa-chalkboard-teacher text-muted-foreground text-6xl mb-4\"></i>\n                    <h3 className=\"text-lg font-semibold text-foreground mb-2\">Nenhuma turma atribuída</h3>\n                    <p className=\"text-muted-foreground\">Você ainda não tem turmas atribuídas.</p>\n                  </div>\n                ) : (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                    {teacherClasses.map((classItem: any) => (\n                      <Card key={classItem.id} className=\"border-l-4 transition-all hover:shadow-lg\" \n                            style={{ borderLeftColor: classItem.book?.color || '#3b82f6' }}>\n                        <CardHeader>\n                          <CardTitle className=\"text-lg\">{classItem.name}</CardTitle>\n                          <CardDescription className=\"flex items-center space-x-2\">\n                            <span style={{ color: classItem.book?.color || '#3b82f6' }}>\n                              📚 {classItem.book?.name}\n                            </span>\n                          </CardDescription>\n                        </CardHeader>\n                        <CardContent>\n                          <div className=\"space-y-3\">\n                            <div className=\"flex items-center justify-between text-sm\">\n                              <span className=\"text-muted-foreground\">📅 Horário:</span>\n                              <span>{classItem.schedule}</span>\n                            </div>\n                            <div className=\"flex items-center justify-between text-sm\">\n                              <span className=\"text-muted-foreground\">🏢 Sala:</span>\n                              <span>{classItem.room}</span>\n                            </div>\n                            <div className=\"flex items-center justify-between text-sm\">\n                              <span className=\"text-muted-foreground\">👥 Alunos:</span>\n                              <span>{classItem.currentStudents}/{classItem.maxStudents}</span>\n                            </div>\n                            <div className=\"space-y-1\">\n                              <div className=\"flex items-center justify-between text-sm\">\n                                <span className=\"text-muted-foreground\">📖 Progresso:</span>\n                                <span>Dia {classItem.currentDay}/{classItem.book?.totalDays || 30}</span>\n                              </div>\n                              <Progress \n                                value={(classItem.currentDay / (classItem.book?.totalDays || 30)) * 100} \n                                className=\"h-2\" \n                              />\n                            </div>\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\" \n                              className=\"w-full\"\n                              onClick={() => setSelectedClassId(classItem.id)}\n                            >\n                              <i className=\"fas fa-eye mr-2\"></i>\n                              Ver Detalhes\n                            </Button>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Alunos & Notas */}\n          <TabsContent value=\"alunos\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-user-graduate text-primary\"></i>\n                  <span>Progresso dos Alunos</span>\n                </CardTitle>\n                <div className=\"flex items-center space-x-4\">\n                  <Select value={selectedClassId} onValueChange={setSelectedClassId}>\n                    <SelectTrigger className=\"w-64\">\n                      <SelectValue placeholder=\"Selecione uma turma\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {teacherClasses.map((classItem: any) => (\n                        <SelectItem key={classItem.id} value={classItem.id}>\n                          {classItem.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {selectedClassId ? (\n                  <div className=\"space-y-4\">\n                    {mockStudents.map((student) => (\n                      <Card key={student.id} className=\"p-4\">\n                        <div className=\"flex items-center space-x-4\">\n                          <Avatar className=\"w-12 h-12\">\n                            <AvatarImage src={student.avatar || undefined} />\n                            <AvatarFallback>\n                              <i className=\"fas fa-user\"></i>\n                            </AvatarFallback>\n                          </Avatar>\n                          <div className=\"flex-1 space-y-2\">\n                            <div className=\"flex items-center justify-between\">\n                              <div>\n                                <h4 className=\"font-semibold\">{student.name}</h4>\n                                <p className=\"text-sm text-muted-foreground\">{student.email}</p>\n                              </div>\n                              <div className=\"text-right\">\n                                <div className=\"text-lg font-bold text-green-600\">{student.averageGrade}</div>\n                                <div className=\"text-sm text-muted-foreground\">Média Geral</div>\n                              </div>\n                            </div>\n                            \n                            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                              <div className=\"space-y-1\">\n                                <div className=\"flex items-center justify-between text-sm\">\n                                  <span>📚 Workbook</span>\n                                  <span>{student.workbookProgress}%</span>\n                                </div>\n                                <Progress value={student.workbookProgress} className=\"h-2\" />\n                              </div>\n                              \n                              <div className=\"space-y-1\">\n                                <div className=\"flex items-center justify-between text-sm\">\n                                  <span>📖 Unidade</span>\n                                  <span>{student.currentUnit}/{student.totalUnits}</span>\n                                </div>\n                                <Progress value={(student.currentUnit / student.totalUnits) * 100} className=\"h-2\" />\n                              </div>\n                              \n                              <div className=\"space-y-1\">\n                                <div className=\"flex items-center justify-between text-sm\">\n                                  <span>📅 Presença</span>\n                                  <span>{student.attendance}%</span>\n                                </div>\n                                <Progress value={student.attendance} className=\"h-2\" />\n                              </div>\n                            </div>\n\n                            <div className=\"flex space-x-2 mt-3\">\n                              <Button variant=\"outline\" size=\"sm\">\n                                <i className=\"fas fa-edit mr-2\"></i>\n                                Editar Notas\n                              </Button>\n                              <Button variant=\"outline\" size=\"sm\">\n                                <i className=\"fas fa-eye mr-2\"></i>\n                                Ver Histórico\n                              </Button>\n                              <Button variant=\"outline\" size=\"sm\">\n                                <i className=\"fas fa-chart-line mr-2\"></i>\n                                Relatório\n                              </Button>\n                            </div>\n                          </div>\n                        </div>\n                      </Card>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <i className=\"fas fa-users text-muted-foreground text-6xl mb-4\"></i>\n                    <h3 className=\"text-lg font-semibold text-foreground mb-2\">Selecione uma turma</h3>\n                    <p className=\"text-muted-foreground\">Escolha uma turma acima para ver o progresso dos alunos.</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Avaliações */}\n          <TabsContent value=\"avaliacoes\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-clipboard-check text-primary\"></i>\n                  <span>Área de Avaliações</span>\n                </CardTitle>\n                <div className=\"flex justify-between items-center\">\n                  <p className=\"text-sm text-muted-foreground\">Gerencie provas e avaliações das suas turmas</p>\n                  <Button>\n                    <i className=\"fas fa-plus mr-2\"></i>\n                    Nova Avaliação\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {/* Mock assessment data */}\n                  <Card className=\"border-l-4 border-l-blue-500\">\n                    <CardHeader>\n                      <CardTitle className=\"text-sm\">Prova Unit 8 - Inglês A1</CardTitle>\n                      <CardDescription>Agendada para 15/03/2024</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span>Status:</span>\n                          <Badge className=\"bg-blue-100 text-blue-700\">Agendada</Badge>\n                        </div>\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span>Turma:</span>\n                          <span>Inglês A1</span>\n                        </div>\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span>Alunos:</span>\n                          <span>12 alunos</span>\n                        </div>\n                        <Button variant=\"outline\" size=\"sm\" className=\"w-full mt-2\">\n                          <i className=\"fas fa-edit mr-2\"></i>\n                          Gerenciar\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"border-l-4 border-l-green-500\">\n                    <CardHeader>\n                      <CardTitle className=\"text-sm\">Avaliação Workbook - Inglês A1</CardTitle>\n                      <CardDescription>Concluída em 10/03/2024</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span>Status:</span>\n                          <Badge className=\"bg-green-100 text-green-700\">Concluída</Badge>\n                        </div>\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span>Média:</span>\n                          <span className=\"font-semibold text-green-600\">8.4</span>\n                        </div>\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span>Participaram:</span>\n                          <span>11/12 alunos</span>\n                        </div>\n                        <Button variant=\"outline\" size=\"sm\" className=\"w-full mt-2\">\n                          <i className=\"fas fa-chart-bar mr-2\"></i>\n                          Ver Resultados\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"border-l-4 border-l-yellow-500\">\n                    <CardHeader>\n                      <CardTitle className=\"text-sm\">Prova Oral - Inglês A1</CardTitle>\n                      <CardDescription>Em andamento</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span>Status:</span>\n                          <Badge className=\"bg-yellow-100 text-yellow-700\">Em Andamento</Badge>\n                        </div>\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span>Progresso:</span>\n                          <span>7/12 alunos</span>\n                        </div>\n                        <div className=\"space-y-1\">\n                          <Progress value={58} className=\"h-2\" />\n                        </div>\n                        <Button variant=\"outline\" size=\"sm\" className=\"w-full mt-2\">\n                          <i className=\"fas fa-microphone mr-2\"></i>\n                          Continuar\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Minha Agenda */}\n          <TabsContent value=\"agenda\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-calendar-week text-primary\"></i>\n                  <span>Minha Agenda Semanal</span>\n                </CardTitle>\n                <CardDescription>\n                  Visualize suas turmas organizadas por horário com informações detalhadas\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {scheduleLoading ? (\n                  <div className=\"flex items-center justify-center py-12\">\n                    <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n                  </div>\n                ) : (\n                  renderWeeklySchedule()\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      {/* Modal de Detalhes da Aula */}\n      <Dialog open={showClassDetail} onOpenChange={setShowClassDetail}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center space-x-2\">\n              <div\n                className=\"w-4 h-4 rounded-full\"\n                style={{ backgroundColor: selectedClassDetail?.book && bookColors[selectedClassDetail.book] }}\n              />\n              <span>{selectedClassDetail?.title}</span>\n            </DialogTitle>\n          </DialogHeader>\n          {selectedClassDetail && (\n            <div className=\"space-y-6\">\n              {/* Informações da Turma */}\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-500\">Horário</Label>\n                  <p className=\"text-sm\">{selectedClassDetail.startTime} - {selectedClassDetail.endTime}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-500\">Sala</Label>\n                  <p className=\"text-sm\">{selectedClassDetail.room}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-500\">Livro</Label>\n                  <p className=\"text-sm\">{selectedClassDetail.book}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-500\">Progresso</Label>\n                  <p className=\"text-sm\">Dia {selectedClassDetail.currentDay}/{selectedClassDetail.totalDays}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-500\">Alunos</Label>\n                  <p className=\"text-sm\">{selectedClassDetail.studentsCount}/{selectedClassDetail.maxStudents}</p>\n                </div>\n              </div>\n\n              {/* Ações */}\n              <div className=\"flex justify-end space-x-2 pt-4 border-t\">\n                <Button variant=\"outline\" onClick={() => setShowClassDetail(false)}>\n                  Fechar\n                </Button>\n                <Button>\n                  Gerenciar Turma\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </Layout>\n  );\n}\n","size_bytes":29985},"client/src/pages/Financial.tsx":{"content":"\nimport { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Layout from \"@/components/Layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { PageLoader, FadeIn, StaggeredFadeIn } from \"@/components/PageLoader\";\nimport { Mail, MessageSquare, Phone, Edit } from \"lucide-react\";\n\ninterface Customer {\n  id: string;\n  name: string;\n  plan: string;\n  responsible: string;\n  valueInArrears: number;\n  daysInArrears: number;\n  lastContact: string;\n  contact: string;\n  status: 'first-notice' | 'negotiation' | 'second-notice';\n}\n\nexport default function Financial() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading: authLoading, user } = useAuth();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  // Mock data baseado na imagem\n  const [financialData] = useState({\n    totalInArrears: 3030.00,\n    accountsInArrears: 3,\n    averageDelay: 16,\n    defaultRate: 12.5\n  });\n\n  const [customers] = useState<Customer[]>([\n    {\n      id: \"1\",\n      name: \"Larissa Oliveira\",\n      plan: \"Mensalidade Semestral - 1ª parcela\",\n      responsible: \"Roberto Oliveira\",\n      valueInArrears: 2400.00,\n      daysInArrears: 15,\n      lastContact: \"2024-01-10\",\n      contact: \"63\",\n      status: 'first-notice'\n    },\n    {\n      id: \"2\", \n      name: \"Carlos Eduardo Lima\",\n      plan: \"Mensalidade Janeiro\",\n      responsible: \"Sandra Lima\",\n      valueInArrears: 630.00,\n      daysInArrears: 8,\n      lastContact: \"2024-01-15\",\n      contact: \"11\",\n      status: 'negotiation'\n    }\n  ]);\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"Você foi desconectado. Redirecionando...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  if (authLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  // Check permissions\n  const canViewFinancial = user?.role === 'admin';\n\n  if (!canViewFinancial) {\n    return (\n      <Layout>\n        <div className=\"flex items-center justify-center h-full\">\n          <div className=\"text-center\">\n            <i className=\"fas fa-lock text-muted-foreground text-6xl mb-4\"></i>\n            <h3 className=\"text-xl font-semibold mb-2\">Acesso Negado</h3>\n            <p className=\"text-muted-foreground\">Você não tem permissão para acessar esta área.</p>\n          </div>\n        </div>\n      </Layout>\n    );\n  }\n\n  const filteredCustomers = customers.filter(customer =>\n    customer.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    customer.responsible.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'first-notice':\n        return <Badge variant=\"outline\">Primeiro Aviso</Badge>;\n      case 'negotiation':\n        return <Badge variant=\"outline\">Negociação</Badge>;\n      case 'second-notice':\n        return <Badge variant=\"outline\">Segundo Aviso</Badge>;\n      default:\n        return <Badge variant=\"secondary\">Status</Badge>;\n    }\n  };\n\n  const getStatusCount = (status: string) => {\n    return customers.filter(c => c.status === status).length;\n  };\n\n  return (\n    <Layout>\n      <PageLoader>\n        <div className=\"p-4 lg:p-6 space-y-4 lg:space-y-6\">\n          <FadeIn delay={50}>\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-12 h-12 gradient-primary rounded-xl flex items-center justify-center icon-glow\">\n                  <i className=\"fas fa-dollar-sign text-white text-lg\"></i>\n                </div>\n                <div>\n                  <h2 className=\"text-3xl font-bold text-gradient\">Controle de Inadimplência</h2>\n                  <p className=\"text-sm text-muted-foreground\">Dashboard de inadimplência e recuperação de crédito</p>\n                </div>\n              </div>\n              <div className=\"flex space-x-2\">\n                <Button variant=\"outline\" className=\"gap-2\">\n                  <Mail className=\"w-4 h-4\" />\n                  Enviar E-mails\n                </Button>\n                <Button className=\"gap-2 bg-purple-600 hover:bg-purple-700\">\n                  <MessageSquare className=\"w-4 h-4\" />\n                  Notificar WhatsApp\n                </Button>\n              </div>\n            </div>\n          </FadeIn>\n\n          {/* Stats Cards */}\n          <StaggeredFadeIn \n            stagger={80}\n            className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4 lg:gap-6\"\n          >\n            <Card className=\"glassmorphism-card rounded-2xl border border-white/20 shadow-xl\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Total Inadimplência</p>\n                    <p className=\"text-2xl font-bold text-foreground\">\n                      R$ {financialData.totalInArrears.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}\n                    </p>\n                  </div>\n                  <div className=\"w-8 h-8 bg-red-600 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-exclamation-triangle text-white\"></i>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glassmorphism-card rounded-2xl border border-white/20 shadow-xl\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Contas em Atraso</p>\n                    <p className=\"text-2xl font-bold text-foreground\">{financialData.accountsInArrears}</p>\n                  </div>\n                  <div className=\"w-8 h-8 bg-purple-600 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-calendar-times text-white\"></i>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glassmorphism-card rounded-2xl border border-white/20 shadow-xl\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Média de Atraso</p>\n                    <p className=\"text-2xl font-bold text-foreground\">{financialData.averageDelay} dias</p>\n                  </div>\n                  <div className=\"w-8 h-8 bg-yellow-600 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-clock text-white\"></i>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glassmorphism-card rounded-2xl border border-white/20 shadow-xl\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Taxa de Inadimplência</p>\n                    <p className=\"text-2xl font-bold text-foreground\">{financialData.defaultRate}%</p>\n                  </div>\n                  <div className=\"w-8 h-8 bg-orange-600 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-chart-line text-white\"></i>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </StaggeredFadeIn>\n\n          {/* Status Cards Row */}\n          <StaggeredFadeIn \n            stagger={100}\n            className=\"grid grid-cols-1 md:grid-cols-3 gap-4 lg:gap-6\"\n          >\n            <Card className=\"glassmorphism-card rounded-2xl border border-white/20 shadow-xl\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-lg font-bold text-foreground\">{getStatusCount('first-notice')}</p>\n                    <p className=\"text-sm text-muted-foreground\">Primeiro Aviso</p>\n                    <p className=\"text-xs text-muted-foreground/70\">Contatos iniciais</p>\n                  </div>\n                  <div className=\"w-8 h-8 bg-yellow-600 rounded-lg flex items-center justify-center\">\n                    <span className=\"text-white font-bold\">●</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glassmorphism-card rounded-2xl border border-white/20 shadow-xl\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-lg font-bold text-foreground\">{getStatusCount('negotiation')}</p>\n                    <p className=\"text-sm text-muted-foreground\">Em Negociação</p>\n                    <p className=\"text-xs text-muted-foreground/70\">Acordos em andamento</p>\n                  </div>\n                  <div className=\"w-8 h-8 bg-purple-600 rounded-lg flex items-center justify-center\">\n                    <span className=\"text-white font-bold\">●</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glassmorphism-card rounded-2xl border border-white/20 shadow-xl\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-lg font-bold text-foreground\">{getStatusCount('second-notice')}</p>\n                    <p className=\"text-sm text-muted-foreground\">Segundo Aviso</p>\n                    <p className=\"text-xs text-muted-foreground/70\">Situação crítica</p>\n                  </div>\n                  <div className=\"w-8 h-8 bg-red-600 rounded-lg flex items-center justify-center\">\n                    <span className=\"text-white font-bold\">●</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </StaggeredFadeIn>\n\n          {/* Contas em Atraso */}\n          <FadeIn delay={300}>\n            <Card className=\"glassmorphism-card rounded-2xl border border-white/20 shadow-xl\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-8 h-8 bg-red-600 rounded-lg flex items-center justify-center\">\n                      <i className=\"fas fa-exclamation-triangle text-white text-sm\"></i>\n                    </div>\n                    <CardTitle className=\"text-lg font-semibold\">Contas em Atraso</CardTitle>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Input\n                      placeholder=\"Buscar cliente...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"w-64\"\n                    />\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {filteredCustomers.map((customer) => (\n                    <div key={customer.id} className=\"p-4 rounded-lg bg-muted/50 border border-border/50\">\n                      <div className=\"flex items-center justify-between mb-3\">\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-semibold text-foreground\">{customer.name}</h4>\n                          <p className=\"text-sm text-muted-foreground\">{customer.plan}</p>\n                          <p className=\"text-xs text-muted-foreground\">Responsável: {customer.responsible}</p>\n                        </div>\n                        <div className=\"text-right mr-4\">\n                          <p className=\"text-sm text-muted-foreground\">Valor em Atraso</p>\n                          <p className=\"text-lg font-bold text-red-600\">\n                            R$ {customer.valueInArrears.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}\n                          </p>\n                        </div>\n                        <div className=\"text-right mr-4\">\n                          <p className=\"text-sm text-muted-foreground\">Dias em Atraso</p>\n                          <p className=\"text-lg font-bold text-foreground\">{customer.daysInArrears} dias</p>\n                        </div>\n                        <div className=\"text-right mr-4\">\n                          <p className=\"text-sm text-muted-foreground\">Último Contato</p>\n                          <p className=\"text-sm text-foreground\">{customer.lastContact}</p>\n                        </div>\n                        <div className=\"text-right mr-4\">\n                          <p className=\"text-sm text-muted-foreground\">Contato</p>\n                          <p className=\"text-sm text-foreground\">{customer.contact}</p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-3\">\n                          {getStatusBadge(customer.status)}\n                          <div className=\"flex space-x-2\">\n                            <Button size=\"sm\" variant=\"outline\" className=\"gap-1\">\n                              <Phone className=\"w-3 h-3\" />\n                              Ligar\n                            </Button>\n                            <Button size=\"sm\" variant=\"outline\" className=\"gap-1\">\n                              <Mail className=\"w-3 h-3\" />\n                              E-mail\n                            </Button>\n                            <Button size=\"sm\" variant=\"outline\" className=\"gap-1\">\n                              <MessageSquare className=\"w-3 h-3\" />\n                              WhatsApp\n                            </Button>\n                          </div>\n                        </div>\n                        <div className=\"flex space-x-2\">\n                          <Button size=\"sm\" className=\"gap-1 bg-purple-600 hover:bg-purple-700\">\n                            Negociar\n                          </Button>\n                          <Button size=\"sm\" variant=\"outline\" className=\"gap-1\">\n                            <Edit className=\"w-3 h-3\" />\n                            Editar\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </FadeIn>\n        </div>\n      </PageLoader>\n    </Layout>\n  );\n}\n","size_bytes":15515},"client/src/pages/Permissions.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport Layout from \"@/components/Layout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { insertRoleSchema } from \"@shared/schema\";\nimport { Crown, UserCog, GraduationCap, BookOpen, Shield, Settings, CheckCircle, Tag, Info, Plus, Edit, Trash2 } from \"lucide-react\";\n\n// Schema baseado no compartilhado com validações específicas da UI\nconst createRoleSchema = insertRoleSchema\n  .omit({ isSystemRole: true }) // Remove campo de sistema para segurança\n  .extend({\n    name: z.string()\n      .min(1, \"Nome é obrigatório\")\n      .max(50, \"Nome deve ter no máximo 50 caracteres\")\n      .regex(/^[a-zA-Z0-9_-]+$/, \"Nome deve conter apenas letras, números, underscore e hífen\")\n      .refine(\n        (value) => !['admin', 'secretary', 'teacher', 'student'].includes(value.toLowerCase()),\n        \"Este nome é reservado pelo sistema\"\n      ),\n    displayName: z.string()\n      .min(1, \"Nome de exibição é obrigatório\")\n      .max(100, \"Nome de exibição deve ter no máximo 100 caracteres\"),\n    description: z.string()\n      .max(500, \"Descrição deve ter no máximo 500 caracteres\")\n      .optional()\n  });\n\ntype CreateRoleFormData = z.infer<typeof createRoleSchema>;\n\nexport default function Permissions() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [selectedRole, setSelectedRole] = useState<any>(null);\n  const [permissionsModalOpen, setPermissionsModalOpen] = useState(false);\n  const [selectedPermissions, setSelectedPermissions] = useState<string[]>([]);\n  const [createRoleModalOpen, setCreateRoleModalOpen] = useState(false);\n  const [editRoleModalOpen, setEditRoleModalOpen] = useState(false);\n  const [roleToEdit, setRoleToEdit] = useState<any>(null);\n\n  // Apenas admin pode acessar (removido developer conforme solicitado)\n  if (!user || user.role !== 'admin') {\n    return (\n      <Layout>\n        <div className=\"p-6\">\n          <div className=\"text-center\">\n            <h2 className=\"text-2xl font-bold text-red-600 mb-4\">Acesso Negado</h2>\n            <p className=\"text-muted-foreground\">\n              Apenas o administrador pode gerenciar permissões do sistema.\n            </p>\n          </div>\n        </div>\n      </Layout>\n    );\n  }\n\n  // Buscar todos os roles do sistema\n  const { data: roles, isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/roles\"],\n    retry: false,\n  });\n\n  // Buscar todas as permissões disponíveis\n  const { data: permissions } = useQuery<any[]>({\n    queryKey: [\"/api/permissions\"],\n    retry: false,\n  });\n\n  // Buscar permissões do role selecionado\n  const { \n    data: roleWithPermissions, \n    isLoading: rolePermissionsLoading \n  } = useQuery({\n    queryKey: [\"/api/roles\", selectedRole?.id, \"permissions\"],\n    enabled: !!selectedRole?.id && permissionsModalOpen,\n    retry: false,\n  });\n\n  // Mutation para atualizar permissões do role\n  const updateRolePermissionsMutation = useMutation({\n    mutationFn: async (data: { roleId: string; permissionIds: string[] }) => {\n      await apiRequest(\"PUT\", `/api/roles/${data.roleId}/permissions`, { permissionIds: data.permissionIds });\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/roles\", variables.roleId, \"permissions\"] });\n      toast({\n        title: \"Sucesso!\",\n        description: \"Permissões do nível atualizadas com sucesso.\",\n      });\n      setPermissionsModalOpen(false);\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao atualizar permissões do nível. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mutation para criar novo role\n  const createRoleMutation = useMutation({\n    mutationFn: async (data: CreateRoleFormData) => {\n      await apiRequest(\"POST\", \"/api/roles\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/roles\"] });\n      toast({\n        title: \"Sucesso!\",\n        description: \"Novo nível de acesso criado com sucesso.\",\n      });\n      setCreateRoleModalOpen(false);\n      createRoleForm.reset();\n    },\n    onError: (error: any) => {\n      let errorMessage = \"Erro ao criar nível de acesso. Tente novamente.\";\n      \n      // Tratar erro 409 (conflito) especificamente\n      if (error.response?.status === 409 || error.message?.includes(\"already exists\")) {\n        errorMessage = \"Nome já em uso ou reservado pelo sistema.\";\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n      \n      toast({\n        title: \"Erro\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mutation para atualizar role\n  const updateRoleMutation = useMutation({\n    mutationFn: async (data: { id: string; roleData: Partial<CreateRoleFormData> }) => {\n      await apiRequest(\"PUT\", `/api/roles/${data.id}`, data.roleData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/roles\"] });\n      toast({\n        title: \"Sucesso!\",\n        description: \"Nível de acesso atualizado com sucesso.\",\n      });\n      setEditRoleModalOpen(false);\n      setRoleToEdit(null);\n      editRoleForm.reset();\n    },\n    onError: (error: any) => {\n      let errorMessage = \"Erro ao atualizar nível de acesso. Tente novamente.\";\n      \n      // Tratar erro 409 (conflito) especificamente\n      if (error.response?.status === 409 || error.message?.includes(\"already exists\")) {\n        errorMessage = \"Nome já em uso ou reservado pelo sistema.\";\n      } else if (error.response?.status === 403 || error.message?.includes(\"Cannot modify\")) {\n        errorMessage = \"Não é possível modificar níveis de sistema.\";\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n      \n      toast({\n        title: \"Erro\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mutation para deletar role\n  const deleteRoleMutation = useMutation({\n    mutationFn: async (roleId: string) => {\n      await apiRequest(\"DELETE\", `/api/roles/${roleId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/roles\"] });\n      toast({\n        title: \"Sucesso!\",\n        description: \"Nível de acesso removido com sucesso.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Erro ao remover nível de acesso. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Form para criação de role\n  const createRoleForm = useForm<CreateRoleFormData>({\n    resolver: zodResolver(createRoleSchema),\n    defaultValues: {\n      name: \"\",\n      displayName: \"\",\n      description: \"\",\n    },\n  });\n\n  // Form para edição de role\n  const editRoleForm = useForm<CreateRoleFormData>({\n    resolver: zodResolver(createRoleSchema),\n    defaultValues: {\n      name: \"\",\n      displayName: \"\",\n      description: \"\",\n    },\n  });\n\n  // Mapear roles para os 4 tipos fixos\n  const getRoleInfo = (role: string) => {\n    switch (role) {\n      case 'admin':\n        return { \n          icon: Crown, \n          color: 'bg-red-100 text-red-700 dark:bg-red-900 dark:text-red-300',\n          displayName: 'Administrativo'\n        };\n      case 'secretary':\n        return { \n          icon: UserCog, \n          color: 'bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-300',\n          displayName: 'Secretario'\n        };\n      case 'teacher':\n        return { \n          icon: BookOpen, \n          color: 'bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300',\n          displayName: 'Professor'\n        };\n      case 'student':\n        return { \n          icon: GraduationCap, \n          color: 'bg-purple-100 text-purple-700 dark:bg-purple-900 dark:text-purple-300',\n          displayName: 'Aluno'\n        };\n      default:\n        return { \n          icon: UserCog, \n          color: 'bg-gray-100 text-gray-700 dark:bg-gray-900 dark:text-gray-300',\n          displayName: role\n        };\n    }\n  };\n\n  // Abrir modal de permissões\n  const handleManagePermissions = (role: any) => {\n    setSelectedRole(role);\n    setPermissionsModalOpen(true);\n  };\n\n  // Salvar permissões\n  const handleSavePermissions = () => {\n    if (!selectedRole?.id) return;\n    \n    updateRolePermissionsMutation.mutate({\n      roleId: selectedRole.id,\n      permissionIds: selectedPermissions\n    });\n  };\n\n  // Criar novo role\n  const handleCreateRole = (data: CreateRoleFormData) => {\n    createRoleMutation.mutate(data);\n  };\n\n  // Abrir modal de edição\n  const handleEditRole = (role: any) => {\n    if (role.isSystemRole) {\n      toast({\n        title: \"Não permitido\",\n        description: \"Níveis de sistema não podem ser editados.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    setRoleToEdit(role);\n    editRoleForm.reset({\n      name: role.name,\n      displayName: role.displayName,\n      description: role.description || \"\",\n    });\n    setEditRoleModalOpen(true);\n  };\n\n  // Atualizar role\n  const handleUpdateRole = (data: CreateRoleFormData) => {\n    if (!roleToEdit?.id) return;\n    \n    updateRoleMutation.mutate({\n      id: roleToEdit.id,\n      roleData: data\n    });\n  };\n\n  // Deletar role\n  const handleDeleteRole = (role: any) => {\n    if (role.isSystemRole) {\n      toast({\n        title: \"Não permitido\",\n        description: \"Níveis de sistema não podem ser removidos.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (confirm(`Tem certeza que deseja remover o nível \"${role.displayName}\"? Esta ação não pode ser desfeita.`)) {\n      deleteRoleMutation.mutate(role.id);\n    }\n  };\n\n  // Inicializar permissões selecionadas quando modal abre\n  useEffect(() => {\n    if (permissionsModalOpen && roleWithPermissions && (roleWithPermissions as any)?.rolePermissions) {\n      const grantedPermissionIds = (roleWithPermissions as any).rolePermissions\n        .map((rp: any) => rp.permission.id);\n      setSelectedPermissions(grantedPermissionIds);\n    }\n  }, [permissionsModalOpen, roleWithPermissions]);\n\n  // Limpar estados quando modal fecha\n  useEffect(() => {\n    if (!permissionsModalOpen) {\n      setSelectedPermissions([]);\n      setSelectedRole(null);\n    }\n  }, [permissionsModalOpen]);\n\n  // Toggle permissão\n  const togglePermission = (permissionId: string) => {\n    setSelectedPermissions(prev => \n      prev.includes(permissionId)\n        ? prev.filter(id => id !== permissionId)\n        : [...prev, permissionId]\n    );\n  };\n\n  return (\n    <Layout>\n      <div className=\"p-6 space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\" data-testid=\"text-permissions-title\">\n              Gerenciamento de Níveis de Acesso\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Configure as permissões para cada nível de usuário do sistema\n            </p>\n          </div>\n          \n          <div className=\"flex items-center gap-4\">\n            <Button \n              onClick={() => setCreateRoleModalOpen(true)}\n              className=\"flex items-center gap-2\"\n              data-testid=\"button-create-role\"\n            >\n              <Plus className=\"w-4 h-4\" />\n              Adicionar Novo Nível\n            </Button>\n            \n            <div className=\"text-sm text-muted-foreground bg-muted px-3 py-2 rounded-lg flex items-center\">\n              <Info className=\"w-4 h-4 mr-2\" />\n              4 níveis fixos + personalizados\n            </div>\n          </div>\n        </div>\n\n        {/* Cards dos níveis/roles */}\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {Array.from({ length: 4 }).map((_, index) => (\n              <Card key={index} className=\"animate-pulse\">\n                <CardHeader>\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-16 h-16 bg-muted rounded-lg\"></div>\n                    <div className=\"flex-1 space-y-2\">\n                      <div className=\"h-6 bg-muted rounded w-3/4\"></div>\n                      <div className=\"h-4 bg-muted rounded w-1/2\"></div>\n                    </div>\n                  </div>\n                </CardHeader>\n              </Card>\n            ))}\n          </div>\n        ) : !roles || roles.length === 0 ? (\n          <Card>\n            <CardContent className=\"py-12 text-center\">\n              <Shield className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">Nenhum nível encontrado</h3>\n              <p className=\"text-muted-foreground\">\n                Não há níveis de acesso configurados no sistema.\n              </p>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {roles.map((role: any) => {\n              const roleInfo = getRoleInfo(role.name);\n              const IconComponent = roleInfo.icon;\n              return (\n                <Card key={role.id} className=\"hover:shadow-md transition-shadow\">\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className={`w-16 h-16 rounded-lg flex items-center justify-center ${roleInfo.color}`}>\n                        <IconComponent className=\"w-8 h-8\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <CardTitle className=\"text-xl\">\n                          {role.displayName ?? roleInfo.displayName}\n                        </CardTitle>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {role.description ?? 'Nível de acesso do sistema'}\n                        </p>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  \n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        <Tag className=\"w-3 h-3 mr-1\" />\n                        {role.isSystemRole ? 'Sistema' : 'Personalizado'}\n                      </Badge>\n                      {role.isActive && (\n                        <Badge variant=\"secondary\" className=\"text-xs text-green-700 bg-green-100 dark:text-green-300 dark:bg-green-900\">\n                          <CheckCircle className=\"w-3 h-3 mr-1\" />\n                          Ativo\n                        </Badge>\n                      )}\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <Button \n                        onClick={() => handleManagePermissions(role)}\n                        className=\"w-full\"\n                        size=\"sm\"\n                        data-testid={`button-manage-permissions-${role.id}`}\n                      >\n                        <Settings className=\"w-4 h-4 mr-2\" />\n                        Configurar Permissões\n                      </Button>\n                      \n                      {!role.isSystemRole && (\n                        <div className=\"flex gap-2\">\n                          <Button\n                            onClick={() => handleEditRole(role)}\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"flex-1\"\n                            data-testid={`button-edit-role-${role.id}`}\n                          >\n                            <Edit className=\"w-4 h-4 mr-2\" />\n                            Editar\n                          </Button>\n                          \n                          <Button\n                            onClick={() => handleDeleteRole(role)}\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"flex-1 border-red-200 text-red-600 hover:bg-red-50 dark:border-red-800 dark:text-red-400 dark:hover:bg-red-950\"\n                            data-testid={`button-delete-role-${role.id}`}\n                          >\n                            <Trash2 className=\"w-4 h-4 mr-2\" />\n                            Remover\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        )}\n\n        {/* Modal de Permissões */}\n        <Dialog open={permissionsModalOpen} onOpenChange={setPermissionsModalOpen}>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>\n                Configurar Permissões do Nível\n              </DialogTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                {selectedRole && \n                  `${selectedRole.displayName} - ${selectedRole.description}`\n                }\n              </p>\n            </DialogHeader>\n            \n            <div className=\"space-y-4\">\n              {rolePermissionsLoading ? (\n                <div className=\"space-y-3\">\n                  <Label className=\"text-sm font-medium\">Carregando permissões...</Label>\n                  <div className=\"space-y-2\">\n                    {Array.from({ length: 4 }).map((_, index) => (\n                      <div key={index} className=\"flex items-center space-x-2 animate-pulse\">\n                        <div className=\"w-4 h-4 bg-muted rounded\"></div>\n                        <div className=\"w-32 h-4 bg-muted rounded\"></div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              ) : !permissions || permissions.length === 0 ? (\n                <div className=\"text-center py-4\">\n                  <p className=\"text-sm text-muted-foreground\">Nenhuma permissão encontrada.</p>\n                </div>\n              ) : (\n                <div className=\"space-y-3\">\n                  <Label className=\"text-sm font-medium\">Selecione as permissões para este nível de acesso:</Label>\n                  <div className=\"max-h-60 overflow-y-auto space-y-2\">\n                    {permissions.map((permission: any) => (\n                      <div key={permission.id} className=\"flex items-center space-x-2\">\n                        <Checkbox\n                          id={permission.id}\n                          checked={selectedPermissions.includes(permission.id)}\n                          onCheckedChange={() => togglePermission(permission.id)}\n                          data-testid={`checkbox-permission-${permission.name}`}\n                        />\n                        <Label \n                          htmlFor={permission.id} \n                          className=\"text-sm cursor-pointer flex-1\"\n                        >\n                          {permission.displayName ?? permission.name ?? 'Permissão'}\n                        </Label>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n            \n            <DialogFooter>\n              <Button \n                variant=\"outline\" \n                onClick={() => setPermissionsModalOpen(false)}\n                data-testid=\"button-cancel-permissions\"\n              >\n                Cancelar\n              </Button>\n              <Button \n                onClick={handleSavePermissions}\n                disabled={updateRolePermissionsMutation.isPending}\n                data-testid=\"button-save-permissions\"\n              >\n                {updateRolePermissionsMutation.isPending ? 'Salvando...' : 'Salvar'}\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n\n        {/* Modal de Criação de Role */}\n        <Dialog \n          open={createRoleModalOpen} \n          onOpenChange={(open) => {\n            if (!open) {\n              createRoleForm.reset();\n            }\n            setCreateRoleModalOpen(open);\n          }}\n        >\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>\n                Adicionar Novo Nível de Acesso\n              </DialogTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                Crie um novo nível de acesso personalizado para o sistema\n              </p>\n            </DialogHeader>\n            \n            <Form {...createRoleForm}>\n              <form onSubmit={createRoleForm.handleSubmit(handleCreateRole)} className=\"space-y-4\">\n                <FormField\n                  control={createRoleForm.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nome Interno</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          placeholder=\"ex: coordinator, supervisor\"\n                          data-testid=\"input-role-name\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                      <p className=\"text-xs text-muted-foreground\">\n                        Apenas letras, números, underscore e hífen\n                      </p>\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={createRoleForm.control}\n                  name=\"displayName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nome de Exibição</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          placeholder=\"ex: Coordenador, Supervisor\"\n                          data-testid=\"input-role-display-name\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={createRoleForm.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Descrição (Opcional)</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          {...field} \n                          placeholder=\"Descreva as responsabilidades deste nível...\"\n                          rows={3}\n                          data-testid=\"input-role-description\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <DialogFooter>\n                  <Button \n                    type=\"button\"\n                    variant=\"outline\" \n                    onClick={() => setCreateRoleModalOpen(false)}\n                    data-testid=\"button-cancel-create-role\"\n                  >\n                    Cancelar\n                  </Button>\n                  <Button \n                    type=\"submit\"\n                    disabled={createRoleMutation.isPending}\n                    data-testid=\"button-submit-create-role\"\n                  >\n                    {createRoleMutation.isPending ? 'Criando...' : 'Criar Nível'}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Modal de Edição de Role */}\n        <Dialog \n          open={editRoleModalOpen} \n          onOpenChange={(open) => {\n            if (!open) {\n              editRoleForm.reset();\n              setRoleToEdit(null);\n            }\n            setEditRoleModalOpen(open);\n          }}\n        >\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>\n                Editar Nível de Acesso\n              </DialogTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                {roleToEdit && `Editando: ${roleToEdit.displayName}`}\n              </p>\n            </DialogHeader>\n            \n            <Form {...editRoleForm}>\n              <form onSubmit={editRoleForm.handleSubmit(handleUpdateRole)} className=\"space-y-4\">\n                <FormField\n                  control={editRoleForm.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nome Interno</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          placeholder=\"ex: coordinator, supervisor\"\n                          data-testid=\"input-edit-role-name\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                      <p className=\"text-xs text-muted-foreground\">\n                        Apenas letras, números, underscore e hífen\n                      </p>\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={editRoleForm.control}\n                  name=\"displayName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nome de Exibição</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          placeholder=\"ex: Coordenador, Supervisor\"\n                          data-testid=\"input-edit-role-display-name\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={editRoleForm.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Descrição (Opcional)</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          {...field} \n                          placeholder=\"Descreva as responsabilidades deste nível...\"\n                          rows={3}\n                          data-testid=\"input-edit-role-description\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <DialogFooter>\n                  <Button \n                    type=\"button\"\n                    variant=\"outline\" \n                    onClick={() => setEditRoleModalOpen(false)}\n                    data-testid=\"button-cancel-edit-role\"\n                  >\n                    Cancelar\n                  </Button>\n                  <Button \n                    type=\"submit\"\n                    disabled={updateRoleMutation.isPending}\n                    data-testid=\"button-submit-edit-role\"\n                  >\n                    {updateRoleMutation.isPending ? 'Salvando...' : 'Salvar Alterações'}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </Layout>\n  );\n}","size_bytes":28487},"client/src/pages/Settings.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useTheme } from \"@/contexts/ThemeContext\";\nimport Layout from \"@/components/Layout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ThemeToggle } from \"@/components/ThemeToggle\";\nimport {\n  Settings as SettingsIcon,\n  User,\n  Bell,\n  Shield,\n  Palette,\n  Globe,\n  Database,\n  Zap,\n  Save,\n  RotateCcw,\n  Download,\n  Upload,\n  Trash2,\n  AlertTriangle\n} from \"lucide-react\";\n\nexport default function Settings() {\n  const { user } = useAuth();\n  const { theme } = useTheme();\n  const { toast } = useToast();\n  \n  // Estado para configurações\n  const [notifications, setNotifications] = useState({\n    emailNotifications: true,\n    pushNotifications: false,\n    systemAlerts: true,\n    lessonReminders: true,\n    weeklyReports: false,\n  });\n\n  const [systemSettings, setSystemSettings] = useState({\n    language: \"pt-BR\",\n    timezone: \"America/Sao_Paulo\",\n    dateFormat: \"DD/MM/YYYY\",\n    currency: \"BRL\",\n    autoSave: true,\n    debugMode: false,\n  });\n\n  const [profileSettings, setProfileSettings] = useState({\n    firstName: user?.firstName || \"\",\n    lastName: user?.lastName || \"\",\n    email: user?.email || \"\",\n    phone: \"\",\n    department: \"\",\n  });\n\n  const [securitySettings, setSecuritySettings] = useState({\n    twoFactorEnabled: false,\n    sessionTimeout: 30,\n    loginAlerts: true,\n    passwordChangeRequired: false,\n  });\n\n  const isAdmin = user?.role === 'admin';\n\n  const handleSaveSettings = (section: string) => {\n    toast({\n      title: \"Configurações salvas\",\n      description: `As configurações de ${section} foram salvas com sucesso.`,\n    });\n  };\n\n  const handleResetSettings = (section: string) => {\n    toast({\n      title: \"Configurações resetadas\",\n      description: `As configurações de ${section} foram resetadas para o padrão.`,\n      variant: \"destructive\",\n    });\n  };\n\n  const handleExportData = () => {\n    toast({\n      title: \"Exportação iniciada\",\n      description: \"Seus dados estão sendo preparados para download.\",\n    });\n  };\n\n  const handleImportData = () => {\n    toast({\n      title: \"Importação de dados\",\n      description: \"Recurso disponível em breve.\",\n    });\n  };\n\n  if (!user) {\n    return (\n      <Layout>\n        <div className=\"p-6\">\n          <div className=\"text-center\">\n            <h2 className=\"text-2xl font-bold text-destructive mb-4\">Acesso Negado</h2>\n            <p className=\"text-muted-foreground\">\n              Você precisa estar logado para acessar as configurações.\n            </p>\n          </div>\n        </div>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout>\n      <div className=\"p-6 space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n              <SettingsIcon className=\"h-6 w-6 text-primary-foreground\" />\n            </div>\n            <div>\n              <h1 className=\"text-2xl font-semibold text-foreground\" data-testid=\"text-settings-title\">\n                Configurações\n              </h1>\n              <p className=\"text-sm text-muted-foreground\">\n                Gerencie suas preferências e configurações do sistema\n              </p>\n            </div>\n          </div>\n          <Badge variant=\"secondary\">\n            {user.role === 'admin' && 'Administrador'}\n            {user.role === 'teacher' && 'Professor'}\n            {user.role === 'secretary' && 'Secretário'}\n            {user.role === 'student' && 'Estudante'}\n          </Badge>\n        </div>\n\n        <Tabs defaultValue=\"appearance\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-2 md:grid-cols-4 lg:grid-cols-6\">\n            <TabsTrigger value=\"appearance\" className=\"flex items-center space-x-1\">\n              <Palette className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Aparência</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"account\" className=\"flex items-center space-x-1\">\n              <User className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Conta</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"notifications\" className=\"flex items-center space-x-1\">\n              <Bell className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Notificações</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"security\" className=\"flex items-center space-x-1\">\n              <Shield className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Segurança</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"system\" className=\"flex items-center space-x-1\">\n              <Globe className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Sistema</span>\n            </TabsTrigger>\n            {isAdmin && (\n              <TabsTrigger value=\"advanced\" className=\"flex items-center space-x-1\">\n                <Database className=\"h-4 w-4\" />\n                <span className=\"hidden sm:inline\">Avançado</span>\n              </TabsTrigger>\n            )}\n          </TabsList>\n\n          {/* Aparência */}\n          <TabsContent value=\"appearance\" className=\"space-y-6\">\n            <Card data-testid=\"card-appearance-settings\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Palette className=\"h-5 w-5\" />\n                  <span>Configurações de Aparência</span>\n                </CardTitle>\n                <CardDescription>\n                  Personalize a aparência da interface do sistema\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label className=\"text-base\">Tema</Label>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Escolha entre tema claro ou escuro\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-sm text-muted-foreground\">\n                      {theme === 'light' ? 'Claro' : 'Escuro'}\n                    </span>\n                    <ThemeToggle />\n                  </div>\n                </div>\n\n                <Separator />\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"fontsize\">Tamanho da Fonte</Label>\n                    <Select defaultValue=\"medium\">\n                      <SelectTrigger id=\"fontsize\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"small\">Pequena</SelectItem>\n                        <SelectItem value=\"medium\">Média</SelectItem>\n                        <SelectItem value=\"large\">Grande</SelectItem>\n                        <SelectItem value=\"xlarge\">Extra Grande</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"density\">Densidade da Interface</Label>\n                    <Select defaultValue=\"comfortable\">\n                      <SelectTrigger id=\"density\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"compact\">Compacta</SelectItem>\n                        <SelectItem value=\"comfortable\">Confortável</SelectItem>\n                        <SelectItem value=\"spacious\">Espaçosa</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label className=\"text-base\">Animações</Label>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Habilitar animações e transições\n                    </div>\n                  </div>\n                  <Switch defaultChecked />\n                </div>\n\n                <div className=\"flex space-x-2 pt-4\">\n                  <Button onClick={() => handleSaveSettings('aparência')} data-testid=\"button-save-appearance\">\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    Salvar\n                  </Button>\n                  <Button variant=\"outline\" onClick={() => handleResetSettings('aparência')}>\n                    <RotateCcw className=\"h-4 w-4 mr-2\" />\n                    Resetar\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Conta */}\n          <TabsContent value=\"account\" className=\"space-y-6\">\n            <Card data-testid=\"card-account-settings\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <User className=\"h-5 w-5\" />\n                  <span>Informações da Conta</span>\n                </CardTitle>\n                <CardDescription>\n                  Gerencie suas informações pessoais e de perfil\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"firstName\">Nome</Label>\n                    <Input\n                      id=\"firstName\"\n                      value={profileSettings.firstName}\n                      onChange={(e) => setProfileSettings(prev => ({ ...prev, firstName: e.target.value }))}\n                      data-testid=\"input-first-name\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"lastName\">Sobrenome</Label>\n                    <Input\n                      id=\"lastName\"\n                      value={profileSettings.lastName}\n                      onChange={(e) => setProfileSettings(prev => ({ ...prev, lastName: e.target.value }))}\n                      data-testid=\"input-last-name\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={profileSettings.email}\n                    onChange={(e) => setProfileSettings(prev => ({ ...prev, email: e.target.value }))}\n                    data-testid=\"input-email\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"phone\">Telefone</Label>\n                    <Input\n                      id=\"phone\"\n                      type=\"tel\"\n                      value={profileSettings.phone}\n                      onChange={(e) => setProfileSettings(prev => ({ ...prev, phone: e.target.value }))}\n                      data-testid=\"input-phone\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"department\">Departamento</Label>\n                    <Input\n                      id=\"department\"\n                      value={profileSettings.department}\n                      onChange={(e) => setProfileSettings(prev => ({ ...prev, department: e.target.value }))}\n                      data-testid=\"input-department\"\n                    />\n                  </div>\n                </div>\n\n                <Separator />\n\n                <div className=\"bg-muted p-4 rounded-lg\">\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"w-6 h-6 bg-primary rounded-full flex items-center justify-center flex-shrink-0 mt-0.5\">\n                      <User className=\"h-3 w-3 text-primary-foreground\" />\n                    </div>\n                    <div className=\"space-y-1\">\n                      <h3 className=\"font-medium text-sm\">Função Atual</h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Você está logado como <strong>{user.role}</strong>. \n                        {user.role !== 'admin' && \n                          ' Para alterar permissões, entre em contato com o administrador.'\n                        }\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex space-x-2 pt-4\">\n                  <Button onClick={() => handleSaveSettings('conta')} data-testid=\"button-save-account\">\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    Salvar Alterações\n                  </Button>\n                  <Button variant=\"outline\" onClick={() => handleResetSettings('conta')}>\n                    <RotateCcw className=\"h-4 w-4 mr-2\" />\n                    Resetar\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Notificações */}\n          <TabsContent value=\"notifications\" className=\"space-y-6\">\n            <Card data-testid=\"card-notification-settings\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Bell className=\"h-5 w-5\" />\n                  <span>Configurações de Notificação</span>\n                </CardTitle>\n                <CardDescription>\n                  Controle como e quando você recebe notificações\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label className=\"text-base\">Notificações por Email</Label>\n                      <div className=\"text-sm text-muted-foreground\">\n                        Receba notificações importantes por email\n                      </div>\n                    </div>\n                    <Switch\n                      checked={notifications.emailNotifications}\n                      onCheckedChange={(checked) => \n                        setNotifications(prev => ({ ...prev, emailNotifications: checked }))\n                      }\n                      data-testid=\"switch-email-notifications\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label className=\"text-base\">Notificações Push</Label>\n                      <div className=\"text-sm text-muted-foreground\">\n                        Receba notificações push no navegador\n                      </div>\n                    </div>\n                    <Switch\n                      checked={notifications.pushNotifications}\n                      onCheckedChange={(checked) => \n                        setNotifications(prev => ({ ...prev, pushNotifications: checked }))\n                      }\n                      data-testid=\"switch-push-notifications\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label className=\"text-base\">Alertas do Sistema</Label>\n                      <div className=\"text-sm text-muted-foreground\">\n                        Alertas sobre atualizações e manutenção\n                      </div>\n                    </div>\n                    <Switch\n                      checked={notifications.systemAlerts}\n                      onCheckedChange={(checked) => \n                        setNotifications(prev => ({ ...prev, systemAlerts: checked }))\n                      }\n                      data-testid=\"switch-system-alerts\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label className=\"text-base\">Lembretes de Aula</Label>\n                      <div className=\"text-sm text-muted-foreground\">\n                        Receba lembretes sobre aulas agendadas\n                      </div>\n                    </div>\n                    <Switch\n                      checked={notifications.lessonReminders}\n                      onCheckedChange={(checked) => \n                        setNotifications(prev => ({ ...prev, lessonReminders: checked }))\n                      }\n                      data-testid=\"switch-lesson-reminders\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label className=\"text-base\">Relatórios Semanais</Label>\n                      <div className=\"text-sm text-muted-foreground\">\n                        Receba resumos semanais de atividades\n                      </div>\n                    </div>\n                    <Switch\n                      checked={notifications.weeklyReports}\n                      onCheckedChange={(checked) => \n                        setNotifications(prev => ({ ...prev, weeklyReports: checked }))\n                      }\n                      data-testid=\"switch-weekly-reports\"\n                    />\n                  </div>\n                </div>\n\n                <Separator />\n\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-base font-medium\">Horários de Notificação</h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"quietHoursStart\">Início do Silêncio</Label>\n                      <Input\n                        id=\"quietHoursStart\"\n                        type=\"time\"\n                        defaultValue=\"22:00\"\n                        data-testid=\"input-quiet-hours-start\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"quietHoursEnd\">Fim do Silêncio</Label>\n                      <Input\n                        id=\"quietHoursEnd\"\n                        type=\"time\"\n                        defaultValue=\"07:00\"\n                        data-testid=\"input-quiet-hours-end\"\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex space-x-2 pt-4\">\n                  <Button onClick={() => handleSaveSettings('notificações')} data-testid=\"button-save-notifications\">\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    Salvar\n                  </Button>\n                  <Button variant=\"outline\" onClick={() => handleResetSettings('notificações')}>\n                    <RotateCcw className=\"h-4 w-4 mr-2\" />\n                    Resetar\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Segurança */}\n          <TabsContent value=\"security\" className=\"space-y-6\">\n            <Card data-testid=\"card-security-settings\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Shield className=\"h-5 w-5\" />\n                  <span>Configurações de Segurança</span>\n                </CardTitle>\n                <CardDescription>\n                  Gerencie a segurança da sua conta e dados\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label className=\"text-base\">Autenticação de Dois Fatores</Label>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Adicione uma camada extra de segurança à sua conta\n                    </div>\n                  </div>\n                  <Switch\n                    checked={securitySettings.twoFactorEnabled}\n                    onCheckedChange={(checked) => \n                      setSecuritySettings(prev => ({ ...prev, twoFactorEnabled: checked }))\n                    }\n                    data-testid=\"switch-two-factor\"\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label className=\"text-base\">Alertas de Login</Label>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Receba alertas sobre novos logins na sua conta\n                    </div>\n                  </div>\n                  <Switch\n                    checked={securitySettings.loginAlerts}\n                    onCheckedChange={(checked) => \n                      setSecuritySettings(prev => ({ ...prev, loginAlerts: checked }))\n                    }\n                    data-testid=\"switch-login-alerts\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"sessionTimeout\">Tempo Limite da Sessão (minutos)</Label>\n                  <Select\n                    value={securitySettings.sessionTimeout.toString()}\n                    onValueChange={(value) => \n                      setSecuritySettings(prev => ({ ...prev, sessionTimeout: parseInt(value) }))\n                    }\n                  >\n                    <SelectTrigger id=\"sessionTimeout\" data-testid=\"select-session-timeout\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"15\">15 minutos</SelectItem>\n                      <SelectItem value=\"30\">30 minutos</SelectItem>\n                      <SelectItem value=\"60\">1 hora</SelectItem>\n                      <SelectItem value=\"120\">2 horas</SelectItem>\n                      <SelectItem value=\"480\">8 horas</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <Separator />\n\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-base font-medium\">Gerenciamento de Senha</h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <Button variant=\"outline\" className=\"h-auto p-4\" data-testid=\"button-change-password\">\n                      <div className=\"text-left\">\n                        <div className=\"font-medium\">Alterar Senha</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Atualize sua senha de acesso\n                        </div>\n                      </div>\n                    </Button>\n                    <Button variant=\"outline\" className=\"h-auto p-4\" data-testid=\"button-download-data\">\n                      <div className=\"text-left\">\n                        <div className=\"font-medium\">Baixar Dados</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Exporte seus dados pessoais\n                        </div>\n                      </div>\n                    </Button>\n                  </div>\n                </div>\n\n                <div className=\"flex space-x-2 pt-4\">\n                  <Button onClick={() => handleSaveSettings('segurança')} data-testid=\"button-save-security\">\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    Salvar\n                  </Button>\n                  <Button variant=\"outline\" onClick={() => handleResetSettings('segurança')}>\n                    <RotateCcw className=\"h-4 w-4 mr-2\" />\n                    Resetar\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Sistema */}\n          <TabsContent value=\"system\" className=\"space-y-6\">\n            <Card data-testid=\"card-system-settings\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Globe className=\"h-5 w-5\" />\n                  <span>Configurações do Sistema</span>\n                </CardTitle>\n                <CardDescription>\n                  Configure preferências gerais do sistema\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"language\">Idioma</Label>\n                    <Select\n                      value={systemSettings.language}\n                      onValueChange={(value) => \n                        setSystemSettings(prev => ({ ...prev, language: value }))\n                      }\n                    >\n                      <SelectTrigger id=\"language\" data-testid=\"select-language\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"pt-BR\">Português (Brasil)</SelectItem>\n                        <SelectItem value=\"en-US\">English (US)</SelectItem>\n                        <SelectItem value=\"es-ES\">Español (España)</SelectItem>\n                        <SelectItem value=\"fr-FR\">Français (France)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"timezone\">Fuso Horário</Label>\n                    <Select\n                      value={systemSettings.timezone}\n                      onValueChange={(value) => \n                        setSystemSettings(prev => ({ ...prev, timezone: value }))\n                      }\n                    >\n                      <SelectTrigger id=\"timezone\" data-testid=\"select-timezone\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"America/Sao_Paulo\">São Paulo (GMT-3)</SelectItem>\n                        <SelectItem value=\"America/New_York\">New York (GMT-5)</SelectItem>\n                        <SelectItem value=\"Europe/London\">London (GMT+0)</SelectItem>\n                        <SelectItem value=\"Asia/Tokyo\">Tokyo (GMT+9)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"dateFormat\">Formato de Data</Label>\n                    <Select\n                      value={systemSettings.dateFormat}\n                      onValueChange={(value) => \n                        setSystemSettings(prev => ({ ...prev, dateFormat: value }))\n                      }\n                    >\n                      <SelectTrigger id=\"dateFormat\" data-testid=\"select-date-format\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"DD/MM/YYYY\">DD/MM/YYYY</SelectItem>\n                        <SelectItem value=\"MM/DD/YYYY\">MM/DD/YYYY</SelectItem>\n                        <SelectItem value=\"YYYY-MM-DD\">YYYY-MM-DD</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"currency\">Moeda</Label>\n                    <Select\n                      value={systemSettings.currency}\n                      onValueChange={(value) => \n                        setSystemSettings(prev => ({ ...prev, currency: value }))\n                      }\n                    >\n                      <SelectTrigger id=\"currency\" data-testid=\"select-currency\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"BRL\">Real (R$)</SelectItem>\n                        <SelectItem value=\"USD\">Dólar ($)</SelectItem>\n                        <SelectItem value=\"EUR\">Euro (€)</SelectItem>\n                        <SelectItem value=\"GBP\">Libra (£)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label className=\"text-base\">Salvamento Automático</Label>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Salve automaticamente as alterações\n                    </div>\n                  </div>\n                  <Switch\n                    checked={systemSettings.autoSave}\n                    onCheckedChange={(checked) => \n                      setSystemSettings(prev => ({ ...prev, autoSave: checked }))\n                    }\n                    data-testid=\"switch-auto-save\"\n                  />\n                </div>\n\n                {isAdmin && (\n                  <>\n                    <Separator />\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-0.5\">\n                        <Label className=\"text-base\">Modo Debug</Label>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Habilitar logs detalhados para depuração\n                        </div>\n                      </div>\n                      <Switch\n                        checked={systemSettings.debugMode}\n                        onCheckedChange={(checked) => \n                          setSystemSettings(prev => ({ ...prev, debugMode: checked }))\n                        }\n                        data-testid=\"switch-debug-mode\"\n                      />\n                    </div>\n                  </>\n                )}\n\n                <div className=\"flex space-x-2 pt-4\">\n                  <Button onClick={() => handleSaveSettings('sistema')} data-testid=\"button-save-system\">\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    Salvar\n                  </Button>\n                  <Button variant=\"outline\" onClick={() => handleResetSettings('sistema')}>\n                    <RotateCcw className=\"h-4 w-4 mr-2\" />\n                    Resetar\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Avançado (apenas admins) */}\n          {isAdmin && (\n            <TabsContent value=\"advanced\" className=\"space-y-6\">\n              <Card data-testid=\"card-advanced-settings\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Database className=\"h-5 w-5\" />\n                    <span>Configurações Avançadas</span>\n                  </CardTitle>\n                  <CardDescription>\n                    Configurações avançadas do sistema (apenas administradores)\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <AlertTriangle className=\"h-5 w-5 text-yellow-600 dark:text-yellow-400\" />\n                      <span className=\"font-medium text-yellow-800 dark:text-yellow-200\">\n                        Atenção\n                      </span>\n                    </div>\n                    <p className=\"text-yellow-700 dark:text-yellow-300 mt-2\">\n                      As configurações avançadas podem afetar o funcionamento do sistema. \n                      Proceda com cuidado e faça backup antes de fazer alterações importantes.\n                    </p>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <Button variant=\"outline\" className=\"h-auto p-4\" onClick={handleExportData} data-testid=\"button-export-data\">\n                      <Download className=\"h-5 w-5 mr-3\" />\n                      <div className=\"text-left\">\n                        <div className=\"font-medium\">Exportar Dados</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Exportar todos os dados do sistema\n                        </div>\n                      </div>\n                    </Button>\n\n                    <Button variant=\"outline\" className=\"h-auto p-4\" onClick={handleImportData} data-testid=\"button-import-data\">\n                      <Upload className=\"h-5 w-5 mr-3\" />\n                      <div className=\"text-left\">\n                        <div className=\"font-medium\">Importar Dados</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Importar dados de backup\n                        </div>\n                      </div>\n                    </Button>\n\n                    <Button variant=\"outline\" className=\"h-auto p-4\" data-testid=\"button-clear-cache\">\n                      <Zap className=\"h-5 w-5 mr-3\" />\n                      <div className=\"text-left\">\n                        <div className=\"font-medium\">Limpar Cache</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Limpar cache do sistema\n                        </div>\n                      </div>\n                    </Button>\n\n                    <Button variant=\"destructive\" className=\"h-auto p-4\" data-testid=\"button-factory-reset\">\n                      <Trash2 className=\"h-5 w-5 mr-3\" />\n                      <div className=\"text-left\">\n                        <div className=\"font-medium\">Reset de Fábrica</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Restaurar configurações padrão\n                        </div>\n                      </div>\n                    </Button>\n                  </div>\n\n                  <Separator />\n\n                  <div className=\"space-y-4\">\n                    <h3 className=\"text-base font-medium\">Informações do Sistema</h3>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div className=\"space-y-1\">\n                        <Label className=\"text-sm text-muted-foreground\">Versão</Label>\n                        <p className=\"text-sm font-mono\">v1.0.0</p>\n                      </div>\n                      <div className=\"space-y-1\">\n                        <Label className=\"text-sm text-muted-foreground\">Banco de Dados</Label>\n                        <p className=\"text-sm font-mono\">PostgreSQL 14</p>\n                      </div>\n                      <div className=\"space-y-1\">\n                        <Label className=\"text-sm text-muted-foreground\">Última Atualização</Label>\n                        <p className=\"text-sm\">{new Date().toLocaleDateString('pt-BR')}</p>\n                      </div>\n                      <div className=\"space-y-1\">\n                        <Label className=\"text-sm text-muted-foreground\">Uptime</Label>\n                        <p className=\"text-sm\">7 dias, 14h 32m</p>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          )}\n        </Tabs>\n      </div>\n    </Layout>\n  );\n}","size_bytes":36879},"client/src/pages/Support.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport Layout from \"@/components/Layout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport {\n  HelpCircle,\n  Send,\n  MessageCircle,\n  Phone,\n  Mail,\n  Book,\n  AlertCircle,\n  Clock,\n  CheckCircle,\n  XCircle,\n  Bug,\n  Lightbulb,\n  Users,\n  Search,\n  ExternalLink\n} from \"lucide-react\";\n\ninterface SupportTicket {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  status: 'open' | 'in_progress' | 'resolved' | 'closed';\n  createdAt: Date;\n  updatedAt: Date;\n  userId: string;\n  assignedTo?: string;\n  responses?: SupportResponse[];\n}\n\ninterface SupportResponse {\n  id: string;\n  message: string;\n  isFromSupport: boolean;\n  createdAt: Date;\n  userId: string;\n}\n\n// Form schema\nconst ticketFormSchema = z.object({\n  title: z.string().min(1, \"Título é obrigatório\").min(10, \"Título deve ter pelo menos 10 caracteres\"),\n  description: z.string().min(1, \"Descrição é obrigatória\").min(20, \"Descrição deve ter pelo menos 20 caracteres\"),\n  category: z.string().min(1, \"Categoria é obrigatória\"),\n  priority: z.enum([\"low\", \"medium\", \"high\", \"urgent\"]),\n});\n\ntype TicketFormValues = z.infer<typeof ticketFormSchema>;\n\nexport default function Support() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  \n  // Form setup\n  const ticketForm = useForm<TicketFormValues>({\n    resolver: zodResolver(ticketFormSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      category: \"\",\n      priority: \"medium\",\n    },\n  });\n\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  // FAQ mock data\n  const faqData = [\n    {\n      id: \"1\",\n      category: \"Geral\",\n      question: \"Como faço para redefinir minha senha?\",\n      answer: \"Para redefinir sua senha, acesse as Configurações > Segurança > Alterar Senha. Você também pode solicitar uma redefinição na tela de login clicando em 'Esqueci minha senha'.\"\n    },\n    {\n      id: \"2\", \n      category: \"Agenda\",\n      question: \"Como adicionar uma nova aula na agenda?\",\n      answer: \"Na página Agenda, clique em 'Nova Aula' e preencha as informações necessárias. Certifique-se de selecionar o professor, horário e sala corretos.\"\n    },\n    {\n      id: \"3\",\n      category: \"Alunos\",\n      question: \"Como matricular um novo aluno?\",\n      answer: \"Vá para a seção Alunos e clique em 'Novo Aluno'. Preencha todos os dados obrigatórios e selecione o curso desejado. O aluno será adicionado automaticamente ao sistema.\"\n    },\n    {\n      id: \"4\",\n      category: \"Sistema\",\n      question: \"Por que não consigo acessar certas páginas?\",\n      answer: \"O acesso às páginas é controlado por permissões baseadas no seu perfil (admin, professor, secretário, etc.). Entre em contato com o administrador se precisar de permissões adicionais.\"\n    },\n    {\n      id: \"5\",\n      category: \"Relatórios\",\n      question: \"Como gerar relatórios de frequência?\",\n      answer: \"Os relatórios de frequência podem ser gerados na seção Relatórios. Selecione o período, turma ou aluno específico e clique em 'Gerar Relatório'.\"\n    },\n    {\n      id: \"6\",\n      category: \"Backup\",\n      question: \"Como fazer backup dos dados?\",\n      answer: \"Apenas administradores podem fazer backup dos dados. Acesse Configurações > Avançado > Exportar Dados. Recomendamos fazer backups semanais.\"\n    }\n  ];\n\n  // Filtrar FAQ baseado na busca\n  const filteredFaq = faqData.filter(item => \n    item.question.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    item.answer.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    item.category.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  // Query para buscar tickets\n  const { data: userTickets, isLoading: ticketsLoading, error: ticketsError } = useQuery({\n    queryKey: ['/api/support/tickets'],\n    enabled: !!user,\n  });\n\n  // Mutation para criar ticket\n  const createTicketMutation = useMutation({\n    mutationFn: async (ticketData: TicketFormValues) => {\n      const response = await apiRequest('/api/support/tickets', {\n        method: 'POST',\n        body: JSON.stringify(ticketData)\n      });\n      return response;\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Ticket criado com sucesso\",\n        description: `Seu ticket #${data.id} foi criado. Entraremos em contato em breve.`,\n      });\n      ticketForm.reset();\n      // Invalidate tickets cache\n      queryClient.invalidateQueries({ queryKey: ['/api/support/tickets'] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erro ao criar ticket\",\n        description: error.message || \"Tente novamente mais tarde.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmitTicket = (data: TicketFormValues) => {\n    createTicketMutation.mutate(data);\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'urgent': return 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400';\n      case 'high': return 'bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-400';\n      case 'medium': return 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400';\n      case 'low': return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'open': return 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400';\n      case 'in_progress': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400';\n      case 'resolved': return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400';\n      case 'closed': return 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'open': return <Clock className=\"h-4 w-4\" />;\n      case 'in_progress': return <AlertCircle className=\"h-4 w-4\" />;\n      case 'resolved': return <CheckCircle className=\"h-4 w-4\" />;\n      case 'closed': return <XCircle className=\"h-4 w-4\" />;\n      default: return <Clock className=\"h-4 w-4\" />;\n    }\n  };\n\n  if (!user) {\n    return (\n      <Layout>\n        <div className=\"p-6\">\n          <div className=\"text-center\">\n            <h2 className=\"text-2xl font-bold text-destructive mb-4\">Acesso Negado</h2>\n            <p className=\"text-muted-foreground\">\n              Você precisa estar logado para acessar o suporte.\n            </p>\n          </div>\n        </div>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout>\n      <div className=\"p-6 space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n              <HelpCircle className=\"h-6 w-6 text-primary-foreground\" />\n            </div>\n            <div>\n              <h1 className=\"text-2xl font-semibold text-foreground\" data-testid=\"text-support-title\">\n                Central de Ajuda\n              </h1>\n              <p className=\"text-sm text-muted-foreground\">\n                Encontre respostas ou entre em contato conosco\n              </p>\n            </div>\n          </div>\n          <Badge variant=\"secondary\">\n            OpenLife Suporte\n          </Badge>\n        </div>\n\n        <Tabs defaultValue=\"faq\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-2 md:grid-cols-4\">\n            <TabsTrigger value=\"faq\" className=\"flex items-center space-x-1\">\n              <Book className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">FAQ</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"new-ticket\" className=\"flex items-center space-x-1\">\n              <MessageCircle className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Novo Ticket</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"my-tickets\" className=\"flex items-center space-x-1\">\n              <Users className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Meus Tickets</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"contact\" className=\"flex items-center space-x-1\">\n              <Phone className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Contato</span>\n            </TabsTrigger>\n          </TabsList>\n\n          {/* FAQ */}\n          <TabsContent value=\"faq\" className=\"space-y-6\">\n            <Card data-testid=\"card-faq\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Book className=\"h-5 w-5\" />\n                  <span>Perguntas Frequentes</span>\n                </CardTitle>\n                <CardDescription>\n                  Encontre respostas para as dúvidas mais comuns\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Barra de pesquisa */}\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    placeholder=\"Pesquisar na FAQ...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-10\"\n                    data-testid=\"input-faq-search\"\n                  />\n                </div>\n\n                {/* FAQ Accordion */}\n                <Accordion type=\"single\" collapsible className=\"w-full\">\n                  {filteredFaq.map((faq) => (\n                    <AccordionItem key={faq.id} value={faq.id} data-testid={`faq-item-${faq.id}`}>\n                      <AccordionTrigger className=\"text-left\" data-testid={`faq-question-${faq.id}`}>\n                        <div className=\"flex items-start space-x-3\">\n                          <Badge variant=\"outline\" className=\"text-xs\" data-testid={`faq-category-${faq.id}`}>\n                            {faq.category}\n                          </Badge>\n                          <span>{faq.question}</span>\n                        </div>\n                      </AccordionTrigger>\n                      <AccordionContent data-testid={`faq-answer-${faq.id}`}>\n                        <div className=\"pt-2 pl-16\">\n                          <p className=\"text-muted-foreground\">{faq.answer}</p>\n                        </div>\n                      </AccordionContent>\n                    </AccordionItem>\n                  ))}\n                </Accordion>\n\n                {filteredFaq.length === 0 && (\n                  <div className=\"text-center py-8\">\n                    <p className=\"text-muted-foreground\">\n                      Nenhum resultado encontrado para \"{searchQuery}\"\n                    </p>\n                  </div>\n                )}\n\n                <Separator />\n\n                <div className=\"bg-muted p-4 rounded-lg\">\n                  <div className=\"flex items-start space-x-3\">\n                    <Lightbulb className=\"h-5 w-5 text-primary mt-0.5\" />\n                    <div>\n                      <h3 className=\"font-medium text-sm\">Não encontrou sua resposta?</h3>\n                      <p className=\"text-sm text-muted-foreground mt-1\">\n                        Crie um ticket de suporte e nossa equipe entrará em contato com você.\n                      </p>\n                      <Button size=\"sm\" className=\"mt-2\" onClick={() => {\n                        // Switch to new ticket tab\n                        const ticketTab = document.querySelector('[value=\"new-ticket\"]') as HTMLElement;\n                        ticketTab?.click();\n                      }} data-testid=\"button-create-ticket-from-faq\">\n                        Criar Ticket\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Novo Ticket */}\n          <TabsContent value=\"new-ticket\" className=\"space-y-6\">\n            <Card data-testid=\"card-new-ticket\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <MessageCircle className=\"h-5 w-5\" />\n                  <span>Criar Novo Ticket</span>\n                </CardTitle>\n                <CardDescription>\n                  Descreva seu problema ou sugestão detalhadamente\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Form {...ticketForm}>\n                  <form onSubmit={ticketForm.handleSubmit(onSubmitTicket)} className=\"space-y-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <FormField\n                      control={ticketForm.control}\n                      name=\"category\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Categoria *</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-ticket-category\">\n                                <SelectValue placeholder=\"Selecione a categoria\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"tecnico\">\n                                <div className=\"flex items-center space-x-2\">\n                                  <Bug className=\"h-4 w-4\" />\n                                  <span>Problema Técnico</span>\n                                </div>\n                              </SelectItem>\n                              <SelectItem value=\"sugestao\">\n                                <div className=\"flex items-center space-x-2\">\n                                  <Lightbulb className=\"h-4 w-4\" />\n                                  <span>Sugestão de Melhoria</span>\n                                </div>\n                              </SelectItem>\n                              <SelectItem value=\"duvida\">\n                                <div className=\"flex items-center space-x-2\">\n                                  <HelpCircle className=\"h-4 w-4\" />\n                                  <span>Dúvida Geral</span>\n                                </div>\n                              </SelectItem>\n                              <SelectItem value=\"permissao\">\n                                <div className=\"flex items-center space-x-2\">\n                                  <Users className=\"h-4 w-4\" />\n                                  <span>Solicitação de Acesso</span>\n                                </div>\n                              </SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={ticketForm.control}\n                      name=\"priority\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Prioridade</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-ticket-priority\">\n                                <SelectValue />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"low\">Baixa</SelectItem>\n                              <SelectItem value=\"medium\">Média</SelectItem>\n                              <SelectItem value=\"high\">Alta</SelectItem>\n                              <SelectItem value=\"urgent\">Urgente</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={ticketForm.control}\n                    name=\"title\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Título *</FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder=\"Descreva brevemente o problema ou solicitação\"\n                            data-testid=\"input-ticket-title\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={ticketForm.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Descrição Detalhada *</FormLabel>\n                        <FormControl>\n                          <Textarea\n                            placeholder=\"Forneça o máximo de detalhes possível sobre o problema, incluindo passos para reproduzi-lo, mensagens de erro, etc.\"\n                            rows={6}\n                            data-testid=\"textarea-ticket-description\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4\">\n                    <div className=\"flex items-start space-x-3\">\n                      <AlertCircle className=\"h-5 w-5 text-blue-600 dark:text-blue-400 mt-0.5\" />\n                      <div className=\"text-sm\">\n                        <h3 className=\"font-medium text-blue-800 dark:text-blue-200 mb-1\">\n                          Dicas para um ticket eficaz:\n                        </h3>\n                        <ul className=\"text-blue-700 dark:text-blue-300 space-y-1 list-disc list-inside\">\n                          <li>Seja específico sobre o problema encontrado</li>\n                          <li>Inclua passos detalhados para reproduzir o erro</li>\n                          <li>Mencione qual navegador e sistema operacional está usando</li>\n                          <li>Anexe prints de tela se relevante</li>\n                        </ul>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex justify-end space-x-2\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => ticketForm.reset()}\n                      data-testid=\"button-clear-ticket\"\n                    >\n                      Limpar\n                    </Button>\n                    <Button\n                      type=\"submit\"\n                      disabled={createTicketMutation.isPending}\n                      data-testid=\"button-submit-ticket\"\n                    >\n                      <Send className=\"h-4 w-4 mr-2\" />\n                      {createTicketMutation.isPending ? 'Enviando...' : 'Enviar Ticket'}\n                    </Button>\n                  </div>\n                </form>\n                </Form>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Meus Tickets */}\n          <TabsContent value=\"my-tickets\" className=\"space-y-6\">\n            <Card data-testid=\"card-my-tickets\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Users className=\"h-5 w-5\" />\n                  <span>Meus Tickets</span>\n                </CardTitle>\n                <CardDescription>\n                  Acompanhe o status dos seus tickets de suporte\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {ticketsLoading ? (\n                  <div className=\"text-center py-8\" data-testid=\"tickets-loading\">\n                    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n                    <p className=\"text-muted-foreground\">Carregando tickets...</p>\n                  </div>\n                ) : ticketsError ? (\n                  <div className=\"text-center py-8\" data-testid=\"tickets-error\">\n                    <p className=\"text-destructive mb-2\">Erro ao carregar tickets</p>\n                    <p className=\"text-sm text-muted-foreground\">Tente recarregar a página</p>\n                  </div>\n                ) : userTickets && userTickets.length > 0 ? (\n                  userTickets.map((ticket) => (\n                    <Card key={ticket.id} className=\"border-l-4 border-l-primary\" data-testid={`ticket-card-${ticket.id}`}>\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-start justify-between mb-3\">\n                          <div className=\"space-y-1\">\n                            <h3 className=\"font-medium\" data-testid={`ticket-title-${ticket.id}`}>{ticket.title}</h3>\n                            <p className=\"text-sm text-muted-foreground line-clamp-2\" data-testid={`ticket-description-${ticket.id}`}>\n                              {ticket.description}\n                            </p>\n                          </div>\n                          <div className=\"flex flex-col items-end space-y-2\">\n                            <Badge className={getStatusColor(ticket.status)} data-testid={`ticket-status-${ticket.id}`}>\n                              {getStatusIcon(ticket.status)}\n                              <span className=\"ml-1 capitalize\">{ticket.status.replace('_', ' ')}</span>\n                            </Badge>\n                            <Badge variant=\"outline\" className={getPriorityColor(ticket.priority)} data-testid={`ticket-priority-${ticket.id}`}>\n                              {ticket.priority === 'urgent' && 'Urgente'}\n                              {ticket.priority === 'high' && 'Alta'}\n                              {ticket.priority === 'medium' && 'Média'}\n                              {ticket.priority === 'low' && 'Baixa'}\n                            </Badge>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n                          <span data-testid={`ticket-id-${ticket.id}`}>Ticket #{ticket.id}</span>\n                          <span data-testid={`ticket-date-${ticket.id}`}>{ticket.createdAt.toLocaleDateString('pt-BR')}</span>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <MessageCircle className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                    <p className=\"text-muted-foreground mb-2\">\n                      Você ainda não possui tickets de suporte\n                    </p>\n                    <Button variant=\"outline\" onClick={() => {\n                      const ticketTab = document.querySelector('[value=\"new-ticket\"]') as HTMLElement;\n                      ticketTab?.click();\n                    }} data-testid=\"button-create-first-ticket\">\n                      Criar Primeiro Ticket\n                    </Button>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Contato */}\n          <TabsContent value=\"contact\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <Card data-testid=\"card-contact-info\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Phone className=\"h-5 w-5\" />\n                    <span>Informações de Contato</span>\n                  </CardTitle>\n                  <CardDescription>\n                    Entre em contato através dos canais abaixo\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-10 h-10 bg-blue-100 dark:bg-blue-900/20 rounded-lg flex items-center justify-center\">\n                      <Mail className=\"h-5 w-5 text-blue-600 dark:text-blue-400\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-medium\">Email</h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        suporte@openlife.com\n                        {/* COMENTADO: Email configurável via .env */}\n                        {/* {process.env.SUPPORT_EMAIL || 'suporte@openlife.com'} */}\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-10 h-10 bg-green-100 dark:bg-green-900/20 rounded-lg flex items-center justify-center\">\n                      <Phone className=\"h-5 w-5 text-green-600 dark:text-green-400\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-medium\">Telefone</h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        (11) 9999-9999\n                        {/* COMENTADO: Telefone configurável via .env */}\n                        {/* {process.env.SUPPORT_PHONE || '(11) 9999-9999'} */}\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-10 h-10 bg-purple-100 dark:bg-purple-900/20 rounded-lg flex items-center justify-center\">\n                      <MessageCircle className=\"h-5 w-5 text-purple-600 dark:text-purple-400\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-medium\">WhatsApp</h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        (11) 99999-9999\n                        {/* COMENTADO: WhatsApp configurável via .env */}\n                        {/* {process.env.SUPPORT_WHATSAPP || '(11) 99999-9999'} */}\n                      </p>\n                    </div>\n                  </div>\n\n                  <Separator />\n\n                  <div className=\"space-y-2\">\n                    <h3 className=\"font-medium\">Horário de Atendimento</h3>\n                    <div className=\"text-sm text-muted-foreground space-y-1\">\n                      <p>Segunda a Sexta: 8h às 18h</p>\n                      <p>Sábados: 8h às 12h</p>\n                      <p>Domingos: Fechado</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card data-testid=\"card-help-resources\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Book className=\"h-5 w-5\" />\n                    <span>Recursos de Ajuda</span>\n                  </CardTitle>\n                  <CardDescription>\n                    Links úteis e documentação\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <Button variant=\"outline\" className=\"w-full justify-start h-auto p-4\" data-testid=\"button-manual\">\n                    <div className=\"flex items-center space-x-3\">\n                      <Book className=\"h-5 w-5 text-blue-600\" />\n                      <div className=\"text-left\">\n                        <div className=\"font-medium\">Manual do Usuário</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Guia completo de uso do sistema\n                        </div>\n                      </div>\n                      <ExternalLink className=\"h-4 w-4 ml-auto\" />\n                    </div>\n                  </Button>\n\n                  <Button variant=\"outline\" className=\"w-full justify-start h-auto p-4\" data-testid=\"button-tutorial\">\n                    <div className=\"flex items-center space-x-3\">\n                      <Users className=\"h-5 w-5 text-green-600\" />\n                      <div className=\"text-left\">\n                        <div className=\"font-medium\">Tutoriais em Vídeo</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Aprenda através de vídeos práticos\n                        </div>\n                      </div>\n                      <ExternalLink className=\"h-4 w-4 ml-auto\" />\n                    </div>\n                  </Button>\n\n                  <Button variant=\"outline\" className=\"w-full justify-start h-auto p-4\" data-testid=\"button-community\">\n                    <div className=\"flex items-center space-x-3\">\n                      <MessageCircle className=\"h-5 w-5 text-purple-600\" />\n                      <div className=\"text-left\">\n                        <div className=\"font-medium\">Comunidade</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Fórum da comunidade de usuários\n                        </div>\n                      </div>\n                      <ExternalLink className=\"h-4 w-4 ml-auto\" />\n                    </div>\n                  </Button>\n\n                  <Separator />\n\n                  <div className=\"bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4\">\n                    <div className=\"flex items-start space-x-3\">\n                      <AlertCircle className=\"h-5 w-5 text-yellow-600 dark:text-yellow-400 mt-0.5\" />\n                      <div className=\"text-sm\">\n                        <h3 className=\"font-medium text-yellow-800 dark:text-yellow-200 mb-1\">\n                          Suporte de Emergência\n                        </h3>\n                        <p className=\"text-yellow-700 dark:text-yellow-300\">\n                          Para problemas críticos fora do horário comercial, \n                          envie um email marcando como \"URGENTE\" no assunto.\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </Layout>\n  );\n}","size_bytes":32323},"client/src/pages/StudentExams.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport StudentLayout from \"@/components/StudentLayout\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport default function StudentExams() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading: authLoading, user } = useAuth();\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  // Redirect if not a student\n  useEffect(() => {\n    if (!authLoading && isAuthenticated && user?.role !== 'student') {\n      window.location.href = \"/\";\n    }\n  }, [authLoading, isAuthenticated, user]);\n\n  if (authLoading || !isAuthenticated || user?.role !== 'student') {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <StudentLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-orange-600 to-red-600 bg-clip-text text-transparent mb-2\">\n            Área de Provas\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-300 text-lg\">\n            Gerencie suas avaliações e acompanhe seu desempenho\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Left Column - Provas */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            \n            {/* Provas Pendentes - URGENTE */}\n            <Card className=\"glassmorphism-card border-2 border-red-200 dark:border-red-800\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-exclamation-triangle text-red-600\"></i>\n                  <span>Provas Urgentes</span>\n                </CardTitle>\n                <CardDescription className=\"text-red-600 dark:text-red-400\">Atenção: Prazo próximo do vencimento</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Prova 1 - Urgente */}\n                <Card className=\"bg-red-50 dark:bg-red-900/20 border-2 border-red-300 dark:border-red-700\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <Badge className=\"bg-red-100 text-red-700 border-red-300\">Urgente</Badge>\n                      <span className=\"text-sm font-medium text-red-700 dark:text-red-300\">Unit 2 Test</span>\n                    </div>\n                    <h4 className=\"font-semibold text-red-900 dark:text-red-100 mb-2\">Prova: Travel & Culture</h4>\n                    <p className=\"text-sm text-red-600 dark:text-red-400 mb-3\">Avaliação sobre vocabulário e gramática das lições 8-12</p>\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <span className=\"text-xs text-red-600 dark:text-red-400\">Prazo: Hoje até 23:59</span>\n                      <span className=\"text-xs text-red-600 dark:text-red-400\">Duração: 45 minutos</span>\n                    </div>\n                    <Button className=\"w-full bg-red-600 hover:bg-red-700\" data-testid=\"button-start-urgent-exam\">\n                      <i className=\"fas fa-play mr-2\"></i>\n                      Iniciar Prova Agora\n                    </Button>\n                  </CardContent>\n                </Card>\n              </CardContent>\n            </Card>\n\n            {/* Próximas Provas */}\n            <Card className=\"glassmorphism-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-calendar-alt text-blue-600\"></i>\n                  <span>Próximas Provas</span>\n                </CardTitle>\n                <CardDescription>Suas avaliações programadas</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                \n                <Card className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <Badge className=\"bg-blue-100 text-blue-700 border-blue-300\">Agendada</Badge>\n                      <span className=\"text-sm font-medium text-blue-700 dark:text-blue-300\">Mid-term Test</span>\n                    </div>\n                    <h4 className=\"font-semibold text-blue-900 dark:text-blue-100 mb-2\">Prova de Meio de Período</h4>\n                    <p className=\"text-sm text-blue-600 dark:text-blue-400 mb-3\">Avaliação abrangente do conteúdo estudado até agora</p>\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <span className=\"text-xs text-blue-600 dark:text-blue-400\">Data: 25/09 às 14:00</span>\n                      <span className=\"text-xs text-blue-600 dark:text-blue-400\">Duração: 90 minutos</span>\n                    </div>\n                    <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-prepare-exam\">\n                      <i className=\"fas fa-book-reader mr-2\"></i>\n                      Preparar-se\n                    </Button>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"bg-gray-50 dark:bg-gray-700/50 border border-gray-200 dark:border-gray-600\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <Badge variant=\"outline\">Futura</Badge>\n                      <span className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Unit 3 Test</span>\n                    </div>\n                    <h4 className=\"font-semibold text-gray-700 dark:text-gray-300 mb-2\">Prova: Business English</h4>\n                    <p className=\"text-sm text-gray-500 dark:text-gray-400 mb-3\">Avaliação sobre vocabulário empresarial e comunicação</p>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-xs text-gray-500 dark:text-gray-400\">Data: A definir</span>\n                      <span className=\"text-xs text-gray-500 dark:text-gray-400\">Duração: 60 minutos</span>\n                    </div>\n                  </CardContent>\n                </Card>\n\n              </CardContent>\n            </Card>\n\n            {/* Provas Realizadas */}\n            <Card className=\"glassmorphism-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-check-circle text-green-600\"></i>\n                  <span>Provas Realizadas</span>\n                </CardTitle>\n                <CardDescription>Histórico de suas avaliações</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                \n                <div className=\"flex items-center justify-between p-4 bg-green-50 dark:bg-green-900/20 rounded-lg border border-green-200 dark:border-green-800\">\n                  <div className=\"flex items-center space-x-3\">\n                    <i className=\"fas fa-check-circle text-green-600 text-xl\"></i>\n                    <div>\n                      <h4 className=\"font-semibold text-green-900 dark:text-green-100\">Unit 1 Test</h4>\n                      <p className=\"text-sm text-green-600 dark:text-green-400\">Realizada em 10/09 • Foundations & Greetings</p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-xl font-bold text-green-600\">9.2</p>\n                    <p className=\"text-xs text-green-600 dark:text-green-400\">Excelente</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center justify-between p-4 bg-green-50 dark:bg-green-900/20 rounded-lg border border-green-200 dark:border-green-800\">\n                  <div className=\"flex items-center space-x-3\">\n                    <i className=\"fas fa-check-circle text-green-600 text-xl\"></i>\n                    <div>\n                      <h4 className=\"font-semibold text-green-900 dark:text-green-100\">Diagnostic Test</h4>\n                      <p className=\"text-sm text-green-600 dark:text-green-400\">Realizada em 01/09 • Avaliação de Nivelamento</p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-xl font-bold text-green-600\">8.5</p>\n                    <p className=\"text-xs text-green-600 dark:text-green-400\">Muito Bom</p>\n                  </div>\n                </div>\n\n              </CardContent>\n            </Card>\n\n          </div>\n\n          {/* Right Column - Estatísticas e Recursos */}\n          <div className=\"space-y-6\">\n            \n            {/* Performance Geral */}\n            <Card className=\"glassmorphism-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-chart-line text-purple-600\"></i>\n                  <span>Performance</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"text-center border-b border-gray-200 dark:border-gray-700 pb-4\">\n                  <p className=\"text-3xl font-bold text-purple-600\">8.9</p>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">Média Geral</p>\n                </div>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-600 dark:text-gray-400\">Provas Realizadas:</span>\n                    <span className=\"font-medium text-gray-900 dark:text-gray-100\">2</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-600 dark:text-gray-400\">Melhor Nota:</span>\n                    <span className=\"font-medium text-green-600\">9.2</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-600 dark:text-gray-400\">Taxa de Aprovação:</span>\n                    <span className=\"font-medium text-blue-600\">100%</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            \n\n            {/* Lembretes */}\n            <Card className=\"glassmorphism-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-bell text-yellow-600\"></i>\n                  <span>Lembretes</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4 text-center\">\n                  <i className=\"fas fa-clock text-yellow-600 text-2xl mb-2\"></i>\n                  <p className=\"text-sm text-yellow-700 dark:text-yellow-300 font-medium mb-1\">\n                    Prova Urgente!\n                  </p>\n                  <p className=\"text-xs text-yellow-600 dark:text-yellow-400\">\n                    Você tem 1 prova para fazer ainda hoje.\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n\n          </div>\n        </div>\n      </div>\n    </StudentLayout>\n  );\n}","size_bytes":12218},"client/src/pages/StudentProgress.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport StudentLayout from \"@/components/StudentLayout\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport default function StudentProgress() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading: authLoading, user } = useAuth();\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  // Redirect if not a student\n  useEffect(() => {\n    if (!authLoading && isAuthenticated && user?.role !== 'student') {\n      window.location.href = \"/\";\n    }\n  }, [authLoading, isAuthenticated, user]);\n\n  if (authLoading || !isAuthenticated || user?.role !== 'student') {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <StudentLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent mb-2\">\n            Meu Progresso\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-300 text-lg\">\n            Acompanhe sua evolução e conquistas no aprendizado\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Left Column - Progresso Principal */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            \n            {/* Progresso Geral */}\n            <Card className=\"glassmorphism-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-chart-line text-blue-600\"></i>\n                  <span>Progresso Geral</span>\n                </CardTitle>\n                <CardDescription>Journey • Intermediário • Book 3</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Progresso Geral */}\n                <div>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Progresso Geral</span>\n                    <span className=\"text-sm font-bold text-gray-900 dark:text-gray-100\">65%</span>\n                  </div>\n                  <Progress value={65} className=\"h-3 bg-gray-200 dark:bg-gray-700\" />\n                </div>\n\n                {/* Livro Atual */}\n                <div>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Livro Atual</span>\n                    <span className=\"text-sm font-bold text-gray-900 dark:text-gray-100\">40%</span>\n                  </div>\n                  <Progress value={40} className=\"h-3 bg-gray-200 dark:bg-gray-700\" />\n                  <div className=\"flex items-center justify-between mt-2 text-xs text-gray-500 dark:text-gray-400\">\n                    <span>23 de 36 lições concluídas</span>\n                    <span>Lesson 8: Travel Adventures</span>\n                  </div>\n                </div>\n\n                {/* Estatísticas */}\n                <div className=\"grid grid-cols-2 gap-4 pt-4 border-t border-gray-200 dark:border-gray-700\">\n                  <div className=\"text-center\">\n                    <p className=\"text-2xl font-bold text-blue-600\">23</p>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">Lições Concluídas</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-2xl font-bold text-green-600\">15h 42m</p>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">Tempo de Estudo</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Lição Atual Detalhada */}\n            <Card className=\"glassmorphism-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-book-open text-purple-600\"></i>\n                  <span>Lição Atual: Travel Adventures</span>\n                </CardTitle>\n                <CardDescription>Complete os 6 passos para finalizar esta lição</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  {/* Passo 1 - Concluído */}\n                  <Card className=\"bg-purple-50 dark:bg-purple-900/20 border border-purple-200 dark:border-purple-800\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"text-sm font-medium text-purple-700 dark:text-purple-300\">Passo 1</span>\n                        <i className=\"fas fa-check-circle text-purple-600\"></i>\n                      </div>\n                      <h4 className=\"font-semibold text-purple-900 dark:text-purple-100 mb-1\">Vocabulary</h4>\n                      <p className=\"text-xs text-purple-600 dark:text-purple-400\">video</p>\n                    </CardContent>\n                  </Card>\n\n                  {/* Passo 2 - Concluído */}\n                  <Card className=\"bg-purple-50 dark:bg-purple-900/20 border border-purple-200 dark:border-purple-800\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"text-sm font-medium text-purple-700 dark:text-purple-300\">Passo 2</span>\n                        <i className=\"fas fa-check-circle text-purple-600\"></i>\n                      </div>\n                      <h4 className=\"font-semibold text-purple-900 dark:text-purple-100 mb-1\">Grammar Focus</h4>\n                      <p className=\"text-xs text-purple-600 dark:text-purple-400\">activity</p>\n                    </CardContent>\n                  </Card>\n\n                  {/* Passo 3 - Concluído */}\n                  <Card className=\"bg-purple-50 dark:bg-purple-900/20 border border-purple-200 dark:border-purple-800\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"text-sm font-medium text-purple-700 dark:text-purple-300\">Passo 3</span>\n                        <i className=\"fas fa-check-circle text-purple-600\"></i>\n                      </div>\n                      <h4 className=\"font-semibold text-purple-900 dark:text-purple-100 mb-1\">Listening Practice</h4>\n                      <p className=\"text-xs text-purple-600 dark:text-purple-400\">audio</p>\n                    </CardContent>\n                  </Card>\n\n                  {/* Passo 4 - Em Progresso */}\n                  <Card className=\"bg-blue-50 dark:bg-blue-900/20 border-2 border-blue-300 dark:border-blue-700\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"text-sm font-medium text-blue-700 dark:text-blue-300\">Passo 4</span>\n                        <i className=\"fas fa-play text-blue-600\"></i>\n                      </div>\n                      <h4 className=\"font-semibold text-blue-900 dark:text-blue-100 mb-1\">Speaking Exercise</h4>\n                      <p className=\"text-xs text-blue-600 dark:text-blue-400\">speaking</p>\n                    </CardContent>\n                  </Card>\n\n                  {/* Passo 5 - Próximo */}\n                  <Card className=\"bg-gray-50 dark:bg-gray-700/50 border border-gray-200 dark:border-gray-600\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Passo 5</span>\n                        <i className=\"fas fa-play text-gray-400\"></i>\n                      </div>\n                      <h4 className=\"font-semibold text-gray-700 dark:text-gray-300 mb-1\">Writing Challenge</h4>\n                      <p className=\"text-xs text-gray-500 dark:text-gray-400\">writing</p>\n                    </CardContent>\n                  </Card>\n\n                  {/* Passo 6 - Próximo */}\n                  <Card className=\"bg-gray-50 dark:bg-gray-700/50 border border-gray-200 dark:border-gray-600\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Passo 6</span>\n                        <i className=\"fas fa-play text-gray-400\"></i>\n                      </div>\n                      <h4 className=\"font-semibold text-gray-700 dark:text-gray-300 mb-1\">Final Quiz</h4>\n                      <p className=\"text-xs text-gray-500 dark:text-gray-400\">quiz</p>\n                    </CardContent>\n                  </Card>\n                </div>\n              </CardContent>\n            </Card>\n\n          </div>\n\n          {/* Right Column - Conquistas e Histórico */}\n          <div className=\"space-y-6\">\n            \n            {/* Conquistas */}\n            <Card className=\"glassmorphism-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-trophy text-yellow-600\"></i>\n                  <span>Conquistas</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Conquista 1 */}\n                <div className=\"flex items-center space-x-3 p-3 bg-pink-50 dark:bg-pink-900/20 rounded-lg border border-pink-200 dark:border-pink-800\">\n                  <div className=\"w-8 h-8 bg-pink-500 rounded-full flex items-center justify-center\">\n                    <i className=\"fas fa-star text-white text-sm\"></i>\n                  </div>\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-semibold text-pink-900 dark:text-pink-100 text-sm\">Primeira Semana</h4>\n                    <p className=\"text-xs text-pink-600 dark:text-pink-400\">Complete sua primeira semana de estudos</p>\n                  </div>\n                  <i className=\"fas fa-check-circle text-pink-600\"></i>\n                </div>\n\n                {/* Conquista 2 */}\n                <div className=\"flex items-center space-x-3 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800\">\n                  <div className=\"w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center\">\n                    <i className=\"fas fa-medal text-white text-sm\"></i>\n                  </div>\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-semibold text-blue-900 dark:text-blue-100 text-sm\">Frequência Exemplar</h4>\n                    <p className=\"text-xs text-blue-600 dark:text-blue-400\">Participe de 10 aulas consecutivas</p>\n                  </div>\n                  <i className=\"fas fa-check-circle text-blue-600\"></i>\n                </div>\n\n                {/* Conquista 3 - Em progresso */}\n                <div className=\"flex items-center space-x-3 p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg border border-gray-200 dark:border-gray-600\">\n                  <div className=\"w-8 h-8 bg-gray-400 rounded-full flex items-center justify-center\">\n                    <i className=\"fas fa-graduation-cap text-white text-sm\"></i>\n                  </div>\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-semibold text-gray-700 dark:text-gray-300 text-sm\">Estudante Dedicado</h4>\n                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">Complete 50 lições (23/50)</p>\n                  </div>\n                  <Progress value={46} className=\"h-2 mt-2\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Histórico de Atividades */}\n            <Card className=\"glassmorphism-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-clock text-blue-600\"></i>\n                  <span>Atividades Recentes</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex items-center space-x-3 p-2 hover:bg-gray-50 dark:hover:bg-gray-700/50 rounded-lg transition-colors\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">Lesson 8 concluída</p>\n                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">Há 2 horas</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-3 p-2 hover:bg-gray-50 dark:hover:bg-gray-700/50 rounded-lg transition-colors\">\n                  <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">Quiz realizado</p>\n                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">Ontem</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-3 p-2 hover:bg-gray-50 dark:hover:bg-gray-700/50 rounded-lg transition-colors\">\n                  <div className=\"w-2 h-2 bg-purple-500 rounded-full\"></div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">Nova conquista desbloqueada</p>\n                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">2 dias atrás</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-3 p-2 hover:bg-gray-50 dark:hover:bg-gray-700/50 rounded-lg transition-colors\">\n                  <div className=\"w-2 h-2 bg-yellow-500 rounded-full\"></div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">Lesson 7 concluída</p>\n                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">3 dias atrás</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n          </div>\n        </div>\n      </div>\n    </StudentLayout>\n  );\n}","size_bytes":15304},"client/src/pages/StudentSchedule.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport StudentLayout from \"@/components/StudentLayout\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport default function StudentSchedule() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading: authLoading, user } = useAuth();\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  // Redirect if not a student\n  useEffect(() => {\n    if (!authLoading && isAuthenticated && user?.role !== 'student') {\n      window.location.href = \"/\";\n    }\n  }, [authLoading, isAuthenticated, user]);\n\n  if (authLoading || !isAuthenticated || user?.role !== 'student') {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <StudentLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-green-600 to-blue-600 bg-clip-text text-transparent mb-2\">\n            Cronograma de Aulas\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-300 text-lg\">\n            Visualize e gerencie suas aulas agendadas\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Left Column - Próximas Aulas */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            \n            {/* Aulas de Hoje */}\n            <Card className=\"glassmorphism-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-calendar-day text-green-600\"></i>\n                  <span>Aulas de Hoje</span>\n                </CardTitle>\n                <CardDescription>Suas aulas agendadas para hoje</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Aula 1 - Hoje */}\n                <div className=\"flex items-center justify-between p-4 bg-purple-50 dark:bg-purple-900/20 rounded-lg border border-purple-200 dark:border-purple-800\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-3 h-3 bg-purple-600 rounded-full\"></div>\n                    <div>\n                      <h4 className=\"font-semibold text-purple-900 dark:text-purple-100\">Lesson 9: Cultural Differences</h4>\n                      <p className=\"text-sm text-purple-600 dark:text-purple-400\">14:00 - 15:30 • Prof. Maria Santos</p>\n                      <Badge className=\"bg-green-100 text-green-700 border-green-300 mt-1\">Em 30 minutos</Badge>\n                    </div>\n                  </div>\n                  <Button size=\"sm\" className=\"bg-purple-600 hover:bg-purple-700\" data-testid=\"button-enter-aula\">\n                    Entrar na Aula\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Próximas Aulas */}\n            <Card className=\"glassmorphism-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-calendar text-blue-600\"></i>\n                  <span>Próximas Aulas</span>\n                </CardTitle>\n                <CardDescription>Suas aulas programadas para os próximos dias</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Aula 2 - Amanhã */}\n                <div className=\"flex items-center justify-between p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-3 h-3 bg-blue-600 rounded-full\"></div>\n                    <div>\n                      <h4 className=\"font-semibold text-blue-900 dark:text-blue-100\">Lesson 10: Business English</h4>\n                      <p className=\"text-sm text-blue-600 dark:text-blue-400\">Amanhã • 14:00 - 15:30 • Prof. Maria Santos</p>\n                    </div>\n                  </div>\n                  <Badge variant=\"outline\">Agendada</Badge>\n                </div>\n\n                {/* Aula 3 */}\n                <div className=\"flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700/50 rounded-lg border border-gray-200 dark:border-gray-600\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-3 h-3 bg-gray-400 rounded-full\"></div>\n                    <div>\n                      <h4 className=\"font-semibold text-gray-700 dark:text-gray-300\">Lesson 11: Technology Today</h4>\n                      <p className=\"text-sm text-gray-500 dark:text-gray-400\">22/09 • 14:00 - 15:30 • Prof. João Silva</p>\n                    </div>\n                  </div>\n                  <Badge variant=\"outline\">Agendada</Badge>\n                </div>\n\n                {/* Aula 4 */}\n                <div className=\"flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700/50 rounded-lg border border-gray-200 dark:border-gray-600\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-3 h-3 bg-gray-400 rounded-full\"></div>\n                    <div>\n                      <h4 className=\"font-semibold text-gray-700 dark:text-gray-300\">Lesson 12: Health and Wellness</h4>\n                      <p className=\"text-sm text-gray-500 dark:text-gray-400\">24/09 • 14:00 - 15:30 • Prof. Ana Costa</p>\n                    </div>\n                  </div>\n                  <Badge variant=\"outline\">Agendada</Badge>\n                </div>\n\n                {/* Aula 5 */}\n                <div className=\"flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700/50 rounded-lg border border-gray-200 dark:border-gray-600\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-3 h-3 bg-gray-400 rounded-full\"></div>\n                    <div>\n                      <h4 className=\"font-semibold text-gray-700 dark:text-gray-300\">Lesson 13: Environmental Issues</h4>\n                      <p className=\"text-sm text-gray-500 dark:text-gray-400\">26/09 • 14:00 - 15:30 • Prof. Maria Santos</p>\n                    </div>\n                  </div>\n                  <Badge variant=\"outline\">Agendada</Badge>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Aulas Passadas */}\n            <Card className=\"glassmorphism-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-history text-gray-600\"></i>\n                  <span>Aulas Anteriores</span>\n                </CardTitle>\n                <CardDescription>Suas últimas aulas realizadas</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between p-4 bg-green-50 dark:bg-green-900/20 rounded-lg border border-green-200 dark:border-green-800\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-3 h-3 bg-green-600 rounded-full\"></div>\n                    <div>\n                      <h4 className=\"font-semibold text-green-900 dark:text-green-100\">Lesson 8: Travel Adventures</h4>\n                      <p className=\"text-sm text-green-600 dark:text-green-400\">Ontem • 14:00 - 15:30 • Prof. Maria Santos</p>\n                    </div>\n                  </div>\n                  <Badge className=\"bg-green-100 text-green-700 border-green-300\">Concluída</Badge>\n                </div>\n\n                <div className=\"flex items-center justify-between p-4 bg-green-50 dark:bg-green-900/20 rounded-lg border border-green-200 dark:border-green-800\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-3 h-3 bg-green-600 rounded-full\"></div>\n                    <div>\n                      <h4 className=\"font-semibold text-green-900 dark:text-green-100\">Lesson 7: Food and Culture</h4>\n                      <p className=\"text-sm text-green-600 dark:text-green-400\">17/09 • 14:00 - 15:30 • Prof. João Silva</p>\n                    </div>\n                  </div>\n                  <Badge className=\"bg-green-100 text-green-700 border-green-300\">Concluída</Badge>\n                </div>\n              </CardContent>\n            </Card>\n\n          </div>\n\n          {/* Right Column - Informações e Links Úteis */}\n          <div className=\"space-y-6\">\n            \n            {/* Resumo da Semana */}\n            <Card className=\"glassmorphism-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-chart-bar text-purple-600\"></i>\n                  <span>Esta Semana</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"text-center\">\n                  <p className=\"text-2xl font-bold text-purple-600\">4</p>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">Aulas Agendadas</p>\n                </div>\n                <div className=\"text-center\">\n                  <p className=\"text-2xl font-bold text-green-600\">2</p>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">Aulas Concluídas</p>\n                </div>\n                <div className=\"text-center\">\n                  <p className=\"text-2xl font-bold text-blue-600\">6h</p>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">Tempo Total</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Informações da Turma */}\n            <Card className=\"glassmorphism-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-users text-blue-600\"></i>\n                  <span>Minha Turma</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"border-b border-gray-200 dark:border-gray-700 pb-2\">\n                  <p className=\"font-semibold text-gray-900 dark:text-gray-100\">Journey - Intermediário</p>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">Book 3, Unit 2</p>\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-600 dark:text-gray-400\">Professora Principal:</span>\n                    <span className=\"font-medium text-gray-900 dark:text-gray-100\">Maria Santos</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-600 dark:text-gray-400\">Horário:</span>\n                    <span className=\"font-medium text-gray-900 dark:text-gray-100\">Ter/Qui 14:00-15:30</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-600 dark:text-gray-400\">Alunos:</span>\n                    <span className=\"font-medium text-gray-900 dark:text-gray-100\">12 estudantes</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Links Úteis */}\n            <Card className=\"glassmorphism-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-link text-orange-600\"></i>\n                  <span>Links Úteis</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-classroom\">\n                  <i className=\"fas fa-chalkboard-teacher mr-2\"></i>\n                  Sala Virtual\n                </Button>\n                <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-materials\">\n                  <i className=\"fas fa-file-pdf mr-2\"></i>\n                  Materiais da Aula\n                </Button>\n                <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-homework\">\n                  <i className=\"fas fa-tasks mr-2\"></i>\n                  Tarefas Pendentes\n                </Button>\n                <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-contact\">\n                  <i className=\"fas fa-envelope mr-2\"></i>\n                  Contatar Professor\n                </Button>\n              </CardContent>\n            </Card>\n\n          </div>\n        </div>\n      </div>\n    </StudentLayout>\n  );\n}","size_bytes":13559},"client/src/pages/StudentWorkbook.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport StudentLayout from \"@/components/StudentLayout\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport default function StudentWorkbook() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading: authLoading, user } = useAuth();\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  // Redirect if not a student\n  useEffect(() => {\n    if (!authLoading && isAuthenticated && user?.role !== 'student') {\n      window.location.href = \"/\";\n    }\n  }, [authLoading, isAuthenticated, user]);\n\n  if (authLoading || !isAuthenticated || user?.role !== 'student') {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <StudentLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent mb-2\">\n            Workbook Digital\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-300 text-lg\">\n            Complete seus exercícios e atividades práticas\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Left Column - Exercícios */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            \n            {/* Progresso Atual */}\n            <Card className=\"glassmorphism-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-chart-line text-purple-600\"></i>\n                  <span>Progresso do Workbook</span>\n                </CardTitle>\n                <CardDescription>Journey • Book 3 • Unit 2</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Exercícios Concluídos</span>\n                    <span className=\"text-sm font-bold text-gray-900 dark:text-gray-100\">12 de 15 (80%)</span>\n                  </div>\n                  <Progress value={80} className=\"h-3 bg-gray-200 dark:bg-gray-700\" />\n                </div>\n                <div className=\"grid grid-cols-3 gap-4 pt-4 border-t border-gray-200 dark:border-gray-700\">\n                  <div className=\"text-center\">\n                    <p className=\"text-lg font-bold text-green-600\">12</p>\n                    <p className=\"text-xs text-gray-600 dark:text-gray-400\">Concluídos</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-lg font-bold text-blue-600\">1</p>\n                    <p className=\"text-xs text-gray-600 dark:text-gray-400\">Em Progresso</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-lg font-bold text-gray-600\">2</p>\n                    <p className=\"text-xs text-gray-600 dark:text-gray-400\">Pendentes</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Exercícios Atuais */}\n            <Card className=\"glassmorphism-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-pencil-alt text-blue-600\"></i>\n                  <span>Exercícios Disponíveis</span>\n                </CardTitle>\n                <CardDescription>Continue de onde parou</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                \n                {/* Exercício Em Progresso */}\n                <Card className=\"bg-blue-50 dark:bg-blue-900/20 border-2 border-blue-300 dark:border-blue-700\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <Badge className=\"bg-blue-100 text-blue-700 border-blue-300\">Em Progresso</Badge>\n                      <span className=\"text-sm font-medium text-blue-700 dark:text-blue-300\">Exercício 13</span>\n                    </div>\n                    <h4 className=\"font-semibold text-blue-900 dark:text-blue-100 mb-2\">Grammar: Past Perfect Continuous</h4>\n                    <p className=\"text-sm text-blue-600 dark:text-blue-400 mb-3\">Complete as frases usando o tempo verbal correto</p>\n                    <Progress value={60} className=\"h-2 mb-3\" />\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-xs text-blue-600 dark:text-blue-400\">3 de 5 questões</span>\n                      <Button size=\"sm\" className=\"bg-blue-600 hover:bg-blue-700\" data-testid=\"button-continue-exercise\">\n                        Continuar\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Exercícios Pendentes */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <Card className=\"bg-gray-50 dark:bg-gray-700/50 border border-gray-200 dark:border-gray-600\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <Badge variant=\"outline\">Pendente</Badge>\n                        <span className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Exercício 14</span>\n                      </div>\n                      <h4 className=\"font-semibold text-gray-700 dark:text-gray-300 mb-2\">Vocabulary: Travel & Tourism</h4>\n                      <p className=\"text-sm text-gray-500 dark:text-gray-400 mb-3\">Aprenda palavras relacionadas a viagens</p>\n                      <Button size=\"sm\" variant=\"outline\" className=\"w-full\" data-testid=\"button-start-exercise\">\n                        Começar\n                      </Button>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-gray-50 dark:bg-gray-700/50 border border-gray-200 dark:border-gray-600\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <Badge variant=\"outline\">Pendente</Badge>\n                        <span className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Exercício 15</span>\n                      </div>\n                      <h4 className=\"font-semibold text-gray-700 dark:text-gray-300 mb-2\">Listening: Airport Announcements</h4>\n                      <p className=\"text-sm text-gray-500 dark:text-gray-400 mb-3\">Pratique a compreensão auditiva</p>\n                      <Button size=\"sm\" variant=\"outline\" className=\"w-full\" disabled data-testid=\"button-start-exercise-locked\">\n                        <i className=\"fas fa-lock mr-2\"></i>\n                        Bloqueado\n                      </Button>\n                    </CardContent>\n                  </Card>\n                </div>\n\n              </CardContent>\n            </Card>\n\n            {/* Exercícios Concluídos Recentes */}\n            <Card className=\"glassmorphism-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-check-circle text-green-600\"></i>\n                  <span>Exercícios Concluídos</span>\n                </CardTitle>\n                <CardDescription>Suas atividades finalizadas recentemente</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex items-center justify-between p-3 bg-green-50 dark:bg-green-900/20 rounded-lg border border-green-200 dark:border-green-800\">\n                  <div className=\"flex items-center space-x-3\">\n                    <i className=\"fas fa-check-circle text-green-600\"></i>\n                    <div>\n                      <h4 className=\"font-semibold text-green-900 dark:text-green-100 text-sm\">Exercício 12: Reading Comprehension</h4>\n                      <p className=\"text-xs text-green-600 dark:text-green-400\">Concluído há 2 horas • Nota: 9.5/10</p>\n                    </div>\n                  </div>\n                  <Button size=\"sm\" variant=\"outline\" data-testid=\"button-review-exercise\">\n                    Revisar\n                  </Button>\n                </div>\n\n                <div className=\"flex items-center justify-between p-3 bg-green-50 dark:bg-green-900/20 rounded-lg border border-green-200 dark:border-green-800\">\n                  <div className=\"flex items-center space-x-3\">\n                    <i className=\"fas fa-check-circle text-green-600\"></i>\n                    <div>\n                      <h4 className=\"font-semibold text-green-900 dark:text-green-100 text-sm\">Exercício 11: Writing Practice</h4>\n                      <p className=\"text-xs text-green-600 dark:text-green-400\">Concluído ontem • Nota: 8.0/10</p>\n                    </div>\n                  </div>\n                  <Button size=\"sm\" variant=\"outline\" data-testid=\"button-review-exercise\">\n                    Revisar\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n          </div>\n\n          {/* Right Column - Estatísticas e Recursos */}\n          <div className=\"space-y-6\">\n            \n            {/* Estatísticas */}\n            <Card className=\"glassmorphism-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-chart-bar text-orange-600\"></i>\n                  <span>Estatísticas</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"text-center border-b border-gray-200 dark:border-gray-700 pb-3\">\n                  <p className=\"text-2xl font-bold text-purple-600\">8.7</p>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">Média Geral</p>\n                </div>\n                <div className=\"grid grid-cols-2 gap-4 text-center\">\n                  <div>\n                    <p className=\"text-lg font-bold text-green-600\">95%</p>\n                    <p className=\"text-xs text-gray-600 dark:text-gray-400\">Taxa de Acertos</p>\n                  </div>\n                  <div>\n                    <p className=\"text-lg font-bold text-blue-600\">4h 20m</p>\n                    <p className=\"text-xs text-gray-600 dark:text-gray-400\">Tempo Estudado</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            \n\n          </div>\n        </div>\n      </div>\n    </StudentLayout>\n  );\n}","size_bytes":11608},"backend/build-frontend.js":{"content":"\n#!/usr/bin/env node\n\nimport { execSync } from 'child_process';\nimport fs from 'fs';\nimport path from 'path';\n\nconsole.log('🏗️  Building frontend...');\n\n// Build do frontend\nexecSync('npm run build', { stdio: 'inherit' });\n\n// Criar estrutura de diretórios se não existir\nconst frontendDir = '/var/www/erp/front';\nif (!fs.existsSync(frontendDir)) {\n  fs.mkdirSync(frontendDir, { recursive: true });\n  console.log(`📁 Created directory: ${frontendDir}`);\n}\n\n// Copiar arquivos do build para o diretório do nginx\nexecSync(`cp -r dist/public/* ${frontendDir}/`, { stdio: 'inherit' });\n\nconsole.log('✅ Frontend build completed and copied to /var/www/erp/front');\n","size_bytes":671},"backend/drizzle.config.ts":{"content":"// .env\nPOSTGRES_URL=\"postgresql://user:password@host:port/database\"\nPOSTGRES_USER=\"user\"\nPOSTGRES_PASSWORD=\"password\"\nPOSTGRES_HOST=\"host\"\nPOSTGRES_PORT=\"5432\"\nPOSTGRES_DB=\"database\"\n\nJWT_SECRET=\"your-super-secret-jwt-key\"\nNODE_ENV=\"development\"\n\n# Configurações adicionais conforme necessário","size_bytes":297},"backend/server.js":{"content":"\n#!/usr/bin/env node\n\n// PM2 entry point - simply runs the compiled backend\nimport('./dist/index.js');\n","size_bytes":103},"backend/setup.js":{"content":"\nconst { Pool } = require('pg');\nconst fs = require('fs');\nconst path = require('path');\n\n// Carregar configurações do .env se existir\nrequire('dotenv').config({ path: '.env' });\n\n// Configurações do banco\nconst DB_CONFIG = {\n  host: 'localhost',\n  port: 5432,\n  user: 'postgres',\n  password: 'admin', // Senha padrão do PostgreSQL no ambiente\n  database: 'postgres' // Conecta ao banco padrão primeiro\n};\n\nconst TARGET_DB = 'school_system';\nconst TARGET_USER = 'school_admin';\nconst TARGET_PASSWORD = 'SchoolSys2024!@#';\n\n// Função para executar comandos SQL\nasync function executeSQL(pool, sql, description) {\n  try {\n    console.log(`Executando: ${description}`);\n    await pool.query(sql);\n    console.log(`✅ ${description} - Sucesso`);\n  } catch (error) {\n    console.error(`❌ ${description} - Erro:`, error.message);\n    throw error;\n  }\n}\n\n// SQL para criar o banco e usuário\nconst CREATE_DATABASE_SQL = `\n-- Criar usuário se não existir\nDO $$ \nBEGIN\n  IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = '${TARGET_USER}') THEN\n    CREATE ROLE ${TARGET_USER} LOGIN PASSWORD '${TARGET_PASSWORD}';\n  END IF;\nEND $$;\n\n-- Criar banco se não existir\nSELECT 'CREATE DATABASE ${TARGET_DB} OWNER ${TARGET_USER}'\nWHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '${TARGET_DB}')\\\\gexec\n`;\n\n// SQL para criar todas as tabelas baseado no schema\nconst CREATE_TABLES_SQL = `\n-- Criar extensões necessárias\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\n\n-- Criar ENUMs\nDO $$ BEGIN\n  CREATE TYPE user_role AS ENUM ('admin', 'secretary', 'teacher', 'student');\nEXCEPTION\n  WHEN duplicate_object THEN null;\nEND $$;\n\nDO $$ BEGIN\n  CREATE TYPE ticket_priority AS ENUM ('low', 'medium', 'high', 'urgent');\nEXCEPTION\n  WHEN duplicate_object THEN null;\nEND $$;\n\nDO $$ BEGIN\n  CREATE TYPE ticket_status AS ENUM ('open', 'in_progress', 'resolved', 'closed');\nEXCEPTION\n  WHEN duplicate_object THEN null;\nEND $$;\n\n-- Tabela de sessões (obrigatória para Replit Auth)\nCREATE TABLE IF NOT EXISTS sessions (\n  sid VARCHAR PRIMARY KEY,\n  sess JSONB NOT NULL,\n  expire TIMESTAMP NOT NULL\n);\n\nCREATE INDEX IF NOT EXISTS IDX_session_expire ON sessions(expire);\n\n-- Tabela de categorias de permissões\nCREATE TABLE IF NOT EXISTS permission_categories (\n  id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n  name VARCHAR UNIQUE NOT NULL,\n  display_name VARCHAR NOT NULL,\n  description TEXT,\n  is_system_category BOOLEAN DEFAULT false,\n  is_active BOOLEAN DEFAULT true,\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Tabela de permissões\nCREATE TABLE IF NOT EXISTS permissions (\n  id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n  name VARCHAR UNIQUE NOT NULL,\n  display_name VARCHAR NOT NULL,\n  description TEXT,\n  category_id VARCHAR REFERENCES permission_categories(id) ON DELETE CASCADE NOT NULL,\n  category VARCHAR NOT NULL,\n  is_active BOOLEAN DEFAULT true,\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Tabela de roles\nCREATE TABLE IF NOT EXISTS roles (\n  id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n  name VARCHAR UNIQUE NOT NULL,\n  display_name VARCHAR NOT NULL,\n  description TEXT,\n  is_system_role BOOLEAN DEFAULT true,\n  is_active BOOLEAN DEFAULT true,\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Tabela de usuários\nCREATE TABLE IF NOT EXISTS users (\n  id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n  email VARCHAR UNIQUE,\n  first_name VARCHAR,\n  last_name VARCHAR,\n  profile_image_url VARCHAR,\n  role user_role DEFAULT 'student',\n  role_id VARCHAR REFERENCES roles(id) ON DELETE SET NULL,\n  is_active BOOLEAN DEFAULT true,\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Tabela de unidades\nCREATE TABLE IF NOT EXISTS units (\n  id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n  name VARCHAR NOT NULL,\n  address TEXT,\n  phone VARCHAR,\n  email VARCHAR,\n  manager_id VARCHAR REFERENCES users(id),\n  is_active BOOLEAN DEFAULT true,\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Tabela de funcionários\nCREATE TABLE IF NOT EXISTS staff (\n  id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n  user_id VARCHAR REFERENCES users(id) NOT NULL,\n  unit_id VARCHAR REFERENCES units(id),\n  employee_id VARCHAR UNIQUE,\n  position VARCHAR,\n  department VARCHAR,\n  salary INTEGER,\n  hire_date TIMESTAMP,\n  is_active BOOLEAN DEFAULT true,\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Tabela de estudantes\nCREATE TABLE IF NOT EXISTS students (\n  id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n  user_id VARCHAR REFERENCES users(id) NOT NULL,\n  student_id VARCHAR UNIQUE,\n  unit_id VARCHAR REFERENCES units(id),\n  enrollment_date TIMESTAMP,\n  status VARCHAR DEFAULT 'active',\n  emergency_contact TEXT,\n  notes TEXT,\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Tabela de cursos\nCREATE TABLE IF NOT EXISTS courses (\n  id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n  name VARCHAR NOT NULL,\n  description TEXT,\n  language VARCHAR NOT NULL,\n  level VARCHAR NOT NULL,\n  duration INTEGER,\n  price INTEGER,\n  is_active BOOLEAN DEFAULT true,\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Tabela de livros\nCREATE TABLE IF NOT EXISTS books (\n  id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n  course_id VARCHAR REFERENCES courses(id) NOT NULL,\n  name VARCHAR NOT NULL,\n  description TEXT,\n  pdf_url VARCHAR,\n  color VARCHAR NOT NULL DEFAULT '#3b82f6',\n  display_order INTEGER DEFAULT 1,\n  total_days INTEGER DEFAULT 30,\n  is_active BOOLEAN DEFAULT true,\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Tabela de turmas\nCREATE TABLE IF NOT EXISTS classes (\n  id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n  book_id VARCHAR REFERENCES books(id) NOT NULL,\n  teacher_id VARCHAR REFERENCES users(id) NOT NULL,\n  unit_id VARCHAR REFERENCES units(id) NOT NULL,\n  name VARCHAR NOT NULL,\n  schedule TEXT,\n  day_of_week INTEGER,\n  start_time VARCHAR,\n  end_time VARCHAR,\n  room VARCHAR,\n  max_students INTEGER DEFAULT 15,\n  current_students INTEGER DEFAULT 0,\n  start_date TIMESTAMP,\n  end_date TIMESTAMP,\n  current_day INTEGER DEFAULT 1,\n  is_active BOOLEAN DEFAULT true,\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Tabela de matrículas\nCREATE TABLE IF NOT EXISTS class_enrollments (\n  id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n  class_id VARCHAR REFERENCES classes(id) NOT NULL,\n  student_id VARCHAR REFERENCES students(id) NOT NULL,\n  enrollment_date TIMESTAMP DEFAULT NOW(),\n  status VARCHAR DEFAULT 'active',\n  final_grade VARCHAR,\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Tabela de aulas\nCREATE TABLE IF NOT EXISTS lessons (\n  id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n  class_id VARCHAR REFERENCES classes(id) NOT NULL,\n  title VARCHAR NOT NULL,\n  book_day INTEGER NOT NULL,\n  date TIMESTAMP NOT NULL,\n  start_time VARCHAR NOT NULL,\n  end_time VARCHAR NOT NULL,\n  room VARCHAR,\n  status VARCHAR DEFAULT 'scheduled',\n  notes TEXT,\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Tabela de permissões de roles\nCREATE TABLE IF NOT EXISTS role_permissions (\n  id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n  role_id VARCHAR REFERENCES roles(id) ON DELETE CASCADE NOT NULL,\n  permission_id VARCHAR REFERENCES permissions(id) ON DELETE CASCADE NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n);\n\nCREATE UNIQUE INDEX IF NOT EXISTS UQ_role_permission ON role_permissions(role_id, permission_id);\n\n-- Tabela de permissões individuais de usuários\nCREATE TABLE IF NOT EXISTS user_permissions (\n  id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n  user_id VARCHAR REFERENCES users(id) ON DELETE CASCADE NOT NULL,\n  permission_id VARCHAR REFERENCES permissions(id) ON DELETE CASCADE NOT NULL,\n  is_granted BOOLEAN DEFAULT true NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW()\n);\n\nCREATE UNIQUE INDEX IF NOT EXISTS UQ_user_permission ON user_permissions(user_id, permission_id);\n\n-- Tabela de configurações de usuário\nCREATE TABLE IF NOT EXISTS user_settings (\n  id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n  user_id VARCHAR REFERENCES users(id) ON DELETE CASCADE NOT NULL,\n  theme VARCHAR DEFAULT 'light',\n  language VARCHAR DEFAULT 'pt-BR',\n  timezone VARCHAR DEFAULT 'America/Sao_Paulo',\n  date_format VARCHAR DEFAULT 'DD/MM/YYYY',\n  currency VARCHAR DEFAULT 'BRL',\n  email_notifications BOOLEAN DEFAULT true,\n  push_notifications BOOLEAN DEFAULT false,\n  system_alerts BOOLEAN DEFAULT true,\n  lesson_reminders BOOLEAN DEFAULT true,\n  weekly_reports BOOLEAN DEFAULT false,\n  auto_save BOOLEAN DEFAULT true,\n  two_factor_enabled BOOLEAN DEFAULT false,\n  session_timeout INTEGER DEFAULT 30,\n  login_alerts BOOLEAN DEFAULT true,\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Tabela de tickets de suporte\nCREATE TABLE IF NOT EXISTS support_tickets (\n  id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n  title VARCHAR NOT NULL,\n  description TEXT NOT NULL,\n  category VARCHAR NOT NULL,\n  priority ticket_priority DEFAULT 'medium',\n  status ticket_status DEFAULT 'open',\n  user_id VARCHAR REFERENCES users(id) ON DELETE CASCADE NOT NULL,\n  assigned_to VARCHAR REFERENCES users(id),\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Tabela de respostas de tickets\nCREATE TABLE IF NOT EXISTS support_ticket_responses (\n  id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n  ticket_id VARCHAR REFERENCES support_tickets(id) ON DELETE CASCADE NOT NULL,\n  message TEXT NOT NULL,\n  is_from_support BOOLEAN DEFAULT false,\n  user_id VARCHAR REFERENCES users(id) ON DELETE CASCADE NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n);\n`;\n\n// SQL para inserir dados iniciais\nconst INSERT_INITIAL_DATA_SQL = `\n-- Inserir categorias de permissões\nINSERT INTO permission_categories (id, name, display_name, description, is_system_category) VALUES\n('cat-1', 'dashboard', 'Dashboard', 'Acesso ao painel principal', true),\n('cat-2', 'units', 'Unidades', 'Gerenciamento de unidades', true),\n('cat-3', 'staff', 'Funcionários', 'Gerenciamento de funcionários', true),\n('cat-4', 'students', 'Estudantes', 'Gerenciamento de estudantes', true),\n('cat-5', 'courses', 'Cursos', 'Gerenciamento de cursos e livros', true),\n('cat-6', 'classes', 'Turmas', 'Gerenciamento de turmas', true),\n('cat-7', 'schedule', 'Agenda', 'Gerenciamento de horários e aulas', true),\n('cat-8', 'financial', 'Financeiro', 'Módulo financeiro', true),\n('cat-9', 'support', 'Suporte', 'Sistema de suporte', true),\n('cat-10', 'settings', 'Configurações', 'Configurações do sistema', true),\n('cat-11', 'permissions', 'Permissões', 'Gerenciamento de permissões', true)\nON CONFLICT (name) DO NOTHING;\n\n-- Inserir todas as permissões CRUD\nINSERT INTO permissions (id, name, display_name, description, category_id, category) VALUES\n-- Dashboard\n('perm-1', 'access_dashboard', 'Acesso ao Dashboard', 'Visualizar painel principal', 'cat-1', 'dashboard'),\n('perm-2', 'view_dashboard_stats', 'Ver Estatísticas', 'Visualizar estatísticas do dashboard', 'cat-1', 'dashboard'),\n\n-- Unidades - CRUD\n('perm-3', 'access_units', 'Acesso a Unidades', 'Visualizar módulo de unidades', 'cat-2', 'units'),\n('perm-4', 'create_units', 'Criar Unidades', 'Criar novas unidades', 'cat-2', 'units'),\n('perm-5', 'read_units', 'Visualizar Unidades', 'Visualizar informações das unidades', 'cat-2', 'units'),\n('perm-6', 'update_units', 'Editar Unidades', 'Editar informações das unidades', 'cat-2', 'units'),\n('perm-7', 'delete_units', 'Excluir Unidades', 'Excluir unidades do sistema', 'cat-2', 'units'),\n\n-- Funcionários - CRUD\n('perm-8', 'access_staff', 'Acesso a Funcionários', 'Visualizar módulo de funcionários', 'cat-3', 'staff'),\n('perm-9', 'create_staff', 'Criar Funcionários', 'Cadastrar novos funcionários', 'cat-3', 'staff'),\n('perm-10', 'read_staff', 'Visualizar Funcionários', 'Visualizar informações dos funcionários', 'cat-3', 'staff'),\n('perm-11', 'update_staff', 'Editar Funcionários', 'Editar informações dos funcionários', 'cat-3', 'staff'),\n('perm-12', 'delete_staff', 'Excluir Funcionários', 'Remover funcionários do sistema', 'cat-3', 'staff'),\n\n-- Estudantes - CRUD\n('perm-13', 'access_students', 'Acesso a Estudantes', 'Visualizar módulo de estudantes', 'cat-4', 'students'),\n('perm-14', 'create_students', 'Criar Estudantes', 'Cadastrar novos estudantes', 'cat-4', 'students'),\n('perm-15', 'read_students', 'Visualizar Estudantes', 'Visualizar informações dos estudantes', 'cat-4', 'students'),\n('perm-16', 'update_students', 'Editar Estudantes', 'Editar informações dos estudantes', 'cat-4', 'students'),\n('perm-17', 'delete_students', 'Excluir Estudantes', 'Remover estudantes do sistema', 'cat-4', 'students'),\n\n-- Cursos - CRUD\n('perm-18', 'access_courses', 'Acesso a Cursos', 'Visualizar módulo de cursos', 'cat-5', 'courses'),\n('perm-19', 'create_courses', 'Criar Cursos', 'Criar novos cursos e livros', 'cat-5', 'courses'),\n('perm-20', 'read_courses', 'Visualizar Cursos', 'Visualizar informações dos cursos', 'cat-5', 'courses'),\n('perm-21', 'update_courses', 'Editar Cursos', 'Editar informações dos cursos', 'cat-5', 'courses'),\n('perm-22', 'delete_courses', 'Excluir Cursos', 'Remover cursos do sistema', 'cat-5', 'courses'),\n\n-- Turmas - CRUD\n('perm-23', 'access_classes', 'Acesso a Turmas', 'Visualizar módulo de turmas', 'cat-6', 'classes'),\n('perm-24', 'create_classes', 'Criar Turmas', 'Criar novas turmas', 'cat-6', 'classes'),\n('perm-25', 'read_classes', 'Visualizar Turmas', 'Visualizar informações das turmas', 'cat-6', 'classes'),\n('perm-26', 'update_classes', 'Editar Turmas', 'Editar informações das turmas', 'cat-6', 'classes'),\n('perm-27', 'delete_classes', 'Excluir Turmas', 'Remover turmas do sistema', 'cat-6', 'classes'),\n\n-- Agenda/Aulas - CRUD\n('perm-28', 'access_schedule', 'Acesso à Agenda', 'Visualizar módulo de agenda', 'cat-7', 'schedule'),\n('perm-29', 'create_lessons', 'Criar Aulas', 'Criar novas aulas', 'cat-7', 'schedule'),\n('perm-30', 'read_lessons', 'Visualizar Aulas', 'Visualizar informações das aulas', 'cat-7', 'schedule'),\n('perm-31', 'update_lessons', 'Editar Aulas', 'Editar informações das aulas', 'cat-7', 'schedule'),\n('perm-32', 'delete_lessons', 'Excluir Aulas', 'Remover aulas do sistema', 'cat-7', 'schedule'),\n\n-- Financeiro - CRUD\n('perm-33', 'access_financial', 'Acesso ao Financeiro', 'Visualizar módulo financeiro', 'cat-8', 'financial'),\n('perm-34', 'create_financial', 'Criar Registros Financeiros', 'Criar novos registros financeiros', 'cat-8', 'financial'),\n('perm-35', 'read_financial', 'Visualizar Financeiro', 'Visualizar informações financeiras', 'cat-8', 'financial'),\n('perm-36', 'update_financial', 'Editar Financeiro', 'Editar informações financeiras', 'cat-8', 'financial'),\n('perm-37', 'delete_financial', 'Excluir Financeiro', 'Remover registros financeiros', 'cat-8', 'financial'),\n\n-- Suporte - CRUD\n('perm-38', 'access_support', 'Acesso ao Suporte', 'Visualizar sistema de suporte', 'cat-9', 'support'),\n('perm-39', 'create_support', 'Criar Tickets', 'Criar tickets de suporte', 'cat-9', 'support'),\n('perm-40', 'read_support', 'Visualizar Suporte', 'Visualizar tickets de suporte', 'cat-9', 'support'),\n('perm-41', 'update_support', 'Editar Suporte', 'Editar tickets de suporte', 'cat-9', 'support'),\n('perm-42', 'delete_support', 'Excluir Suporte', 'Remover tickets de suporte', 'cat-9', 'support'),\n\n-- Configurações - CRUD\n('perm-43', 'access_settings', 'Acesso às Configurações', 'Visualizar configurações', 'cat-10', 'settings'),\n('perm-44', 'create_settings', 'Criar Configurações', 'Criar novas configurações', 'cat-10', 'settings'),\n('perm-45', 'read_settings', 'Visualizar Configurações', 'Visualizar configurações', 'cat-10', 'settings'),\n('perm-46', 'update_settings', 'Editar Configurações', 'Editar configurações', 'cat-10', 'settings'),\n('perm-47', 'delete_settings', 'Excluir Configurações', 'Remover configurações', 'cat-10', 'settings'),\n\n-- Permissões - CRUD\n('perm-48', 'access_permissions', 'Acesso às Permissões', 'Visualizar sistema de permissões', 'cat-11', 'permissions'),\n('perm-49', 'create_permissions', 'Criar Permissões', 'Criar novas permissões', 'cat-11', 'permissions'),\n('perm-50', 'read_permissions', 'Visualizar Permissões', 'Visualizar permissões', 'cat-11', 'permissions'),\n('perm-51', 'update_permissions', 'Editar Permissões', 'Editar permissões', 'cat-11', 'permissions'),\n('perm-52', 'delete_permissions', 'Excluir Permissões', 'Remover permissões', 'cat-11', 'permissions')\nON CONFLICT (name) DO NOTHING;\n\n-- Inserir roles do sistema\nINSERT INTO roles (id, name, display_name, description, is_system_role) VALUES\n('role-1', 'admin', 'Administrativo', 'Acesso total ao sistema', true),\n('role-2', 'secretary', 'Secretário', 'Acesso completo exceto configurações críticas', true),\n('role-3', 'teacher', 'Professor', 'Acesso focado em ensino e turmas', true),\n('role-4', 'student', 'Aluno', 'Acesso limitado à área do aluno', true)\nON CONFLICT (name) DO NOTHING;\n\n-- Configurar permissões para ADMIN (todas as permissões)\nINSERT INTO role_permissions (role_id, permission_id)\nSELECT 'role-1', id FROM permissions\nON CONFLICT DO NOTHING;\n\n-- Configurar permissões para SECRETARY (quase todas exceto delete críticos)\nINSERT INTO role_permissions (role_id, permission_id)\nSELECT 'role-2', id FROM permissions \nWHERE name NOT IN ('delete_units', 'delete_permissions', 'create_permissions', 'delete_permissions')\nON CONFLICT DO NOTHING;\n\n-- Configurar permissões para TEACHER (foco em turmas e aulas)\nINSERT INTO role_permissions (role_id, permission_id)\nSELECT 'role-3', id FROM permissions \nWHERE name IN (\n  'access_dashboard', 'view_dashboard_stats',\n  'read_units', 'read_students', 'read_courses', \n  'access_classes', 'read_classes', 'update_classes',\n  'access_schedule', 'create_lessons', 'read_lessons', 'update_lessons', 'delete_lessons',\n  'access_support', 'create_support', 'read_support'\n)\nON CONFLICT DO NOTHING;\n\n-- Configurar permissões para STUDENT (apenas área do aluno)\nINSERT INTO role_permissions (role_id, permission_id)\nSELECT 'role-4', id FROM permissions \nWHERE name IN ('access_support', 'create_support', 'read_support')\nON CONFLICT DO NOTHING;\n\n-- Criar usuário administrador padrão\nINSERT INTO users (id, email, first_name, last_name, role, role_id) VALUES\n('admin-1', 'admin@escola.com', 'Administrador', 'Sistema', 'admin', 'role-1')\nON CONFLICT (email) DO NOTHING;\n\n-- Dados demo para teste\nINSERT INTO units (id, name, address, phone, email) VALUES\n('unit-1', 'Unidade Centro', 'Rua Principal, 123', '(11) 1234-5678', 'centro@escola.com'),\n('unit-2', 'Unidade Norte', 'Av. Norte, 456', '(11) 2345-6789', 'norte@escola.com')\nON CONFLICT (id) DO NOTHING;\n\nINSERT INTO courses (id, name, description, language, level) VALUES\n('course-1', 'Inglês Básico', 'Curso de inglês para iniciantes', 'English', 'beginner'),\n('course-2', 'Español Intermedio', 'Curso de espanhol intermediário', 'Spanish', 'intermediate')\nON CONFLICT (id) DO NOTHING;\n\nINSERT INTO books (id, course_id, name, description, color) VALUES\n('book-1', 'course-1', 'English Basic - Level 1', 'Primeiro livro de inglês básico', '#3b82f6'),\n('book-2', 'course-2', 'Español Intermedio - Libro 1', 'Primeiro livro de espanhol intermediário', '#ef4444')\nON CONFLICT (id) DO NOTHING;\n`;\n\n// SQL para dar permissões completas ao usuário\nconst GRANT_PERMISSIONS_SQL = `\n-- Dar todas as permissões ao usuário school_admin\nGRANT ALL PRIVILEGES ON DATABASE ${TARGET_DB} TO ${TARGET_USER};\nGRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO ${TARGET_USER};\nGRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO ${TARGET_USER};\nGRANT ALL PRIVILEGES ON ALL FUNCTIONS IN SCHEMA public TO ${TARGET_USER};\n\n-- Permissões para tabelas futuras\nALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO ${TARGET_USER};\nALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO ${TARGET_USER};\nALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON FUNCTIONS TO ${TARGET_USER};\n`;\n\n// Função para deletar tudo\nasync function deleteAll() {\n  console.log('🗑️  Deletando banco de dados e usuário...');\n  \n  const pool = new Pool(DB_CONFIG);\n  \n  try {\n    // Desconectar todos os usuários do banco\n    await executeSQL(pool, `\n      SELECT pg_terminate_backend(pid)\n      FROM pg_stat_activity\n      WHERE datname = '${TARGET_DB}' AND pid <> pg_backend_pid();\n    `, 'Desconectando usuários ativos');\n\n    // Deletar banco\n    await executeSQL(pool, `DROP DATABASE IF EXISTS ${TARGET_DB};`, 'Deletando banco de dados');\n    \n    // Deletar usuário\n    await executeSQL(pool, `DROP ROLE IF EXISTS ${TARGET_USER};`, 'Deletando usuário');\n    \n    console.log('✅ Banco e usuário deletados com sucesso!');\n  } catch (error) {\n    console.error('❌ Erro ao deletar:', error.message);\n  } finally {\n    await pool.end();\n  }\n}\n\n// Função principal de setup\nasync function setup(isReset = false) {\n  console.log(`🚀 Iniciando setup do banco PostgreSQL...`);\n  console.log(`📋 Configurações:`);\n  console.log(`   - Host: ${DB_CONFIG.host}:${DB_CONFIG.port}`);\n  console.log(`   - Banco: ${TARGET_DB}`);\n  console.log(`   - Usuário: ${TARGET_USER}`);\n  \n  if (isReset) {\n    await deleteAll();\n  }\n\n  const pool = new Pool(DB_CONFIG);\n  \n  try {\n    // Criar banco e usuário\n    await executeSQL(pool, CREATE_DATABASE_SQL, 'Criando banco e usuário');\n    await pool.end();\n    \n    // Conectar ao novo banco\n    const targetPool = new Pool({\n      ...DB_CONFIG,\n      database: TARGET_DB,\n      user: TARGET_USER,\n      password: TARGET_PASSWORD\n    });\n    \n    // Criar todas as tabelas\n    await executeSQL(targetPool, CREATE_TABLES_SQL, 'Criando tabelas e estruturas');\n    \n    // Inserir dados iniciais\n    await executeSQL(targetPool, INSERT_INITIAL_DATA_SQL, 'Inserindo dados iniciais');\n    \n    await targetPool.end();\n    \n    // Dar permissões completas\n    const adminPool = new Pool(DB_CONFIG);\n    await executeSQL(adminPool, GRANT_PERMISSIONS_SQL, 'Configurando permissões');\n    await adminPool.end();\n    \n    console.log('');\n    console.log('✅ Setup concluído com sucesso!');\n    console.log('');\n    console.log('📋 Informações de conexão:');\n    console.log(`   DATABASE_URL=postgresql://${TARGET_USER}:${TARGET_PASSWORD}@${DB_CONFIG.host}:${DB_CONFIG.port}/${TARGET_DB}`);\n    console.log('');\n    console.log('🔐 Credenciais de acesso:');\n    console.log(`   - PostgreSQL User: ${TARGET_USER}`);\n    console.log(`   - PostgreSQL Password: ${TARGET_PASSWORD}`);\n    console.log(`   - Database: ${TARGET_DB}`);\n    console.log('');\n    console.log('👤 Usuário admin da aplicação:');\n    console.log('   Email: admin@escola.com');\n    console.log('   Role: admin (acesso total ao sistema)');\n    console.log('');\n    console.log('📊 Permissões configuradas:');\n    console.log('   - Admin: Acesso total (todas as permissões CRUD)');\n    console.log('   - Secretary: Acesso quase completo');\n    console.log('   - Teacher: Acesso focado em turmas e aulas'); \n    console.log('   - Student: Acesso limitado à área do aluno');\n    console.log('');\n    console.log('⚠️  Para usar o banco, adicione esta variável ao seu ambiente:');\n    console.log(`   export DATABASE_URL=\"postgresql://${TARGET_USER}:${TARGET_PASSWORD}@${DB_CONFIG.host}:${DB_CONFIG.port}/${TARGET_DB}\"`);\n    console.log('');\n    console.log('🚀 Ou crie um arquivo .env com:');\n    console.log(`   DATABASE_URL=postgresql://${TARGET_USER}:${TARGET_PASSWORD}@${DB_CONFIG.host}:${DB_CONFIG.port}/${TARGET_DB}`);\n    \n  } catch (error) {\n    console.error('❌ Erro durante o setup:', error.message);\n    process.exit(1);\n  }\n}\n\n// Processar argumentos da linha de comando\nconst args = process.argv.slice(2);\n\nif (args.includes('--delete')) {\n  deleteAll().then(() => process.exit(0));\n} else if (args.includes('--reset')) {\n  setup(true).then(() => process.exit(0));\n} else {\n  setup(false).then(() => process.exit(0));\n}\n","size_bytes":24308},"backend/start-all.js":{"content":"\n#!/usr/bin/env node\n\nimport { execSync } from 'child_process';\nimport fs from 'fs';\n\nconsole.log('🚀 Iniciando configuração completa do backend...');\n\n// Verificar se o .env existe\nif (!fs.existsSync('.env')) {\n  console.log('❌ Arquivo .env não encontrado na raiz do projeto!');\n  console.log('📝 Copie o arquivo .env.example para .env e configure as variáveis');\n  process.exit(1);\n}\n\ntry {\n  // 1. Instalar dependências do backend\n  console.log('📦 Instalando dependências do backend...');\n  execSync('npm install', { stdio: 'inherit', cwd: './backend' });\n\n  // 2. Executar setup do banco\n  console.log('🗄️  Configurando banco de dados PostgreSQL...');\n  execSync('node setup.js', { stdio: 'inherit', cwd: './backend' });\n\n  // 3. Executar migrations se necessário\n  console.log('🔄 Executando push do schema...');\n  execSync('npm run db:push', { stdio: 'inherit', cwd: './backend' });\n\n  console.log('✅ Backend configurado com sucesso!');\n  console.log('');\n  console.log('🎯 Para iniciar o backend:');\n  console.log('   cd backend && npm run dev');\n  console.log('');\n  console.log('🌐 Servidor rodará em: http://localhost:5052');\n\n} catch (error) {\n  console.error('❌ Erro durante a configuração:', error.message);\n  process.exit(1);\n}\n","size_bytes":1276},"backend/start-backend.js":{"content":"\n#!/usr/bin/env node\n\nimport { execSync } from 'child_process';\n\nconsole.log('🚀 Starting backend server...');\n\n// Build do backend\nconsole.log('Building backend...');\nexecSync('npm run build', { stdio: 'inherit' });\n\n// Iniciar apenas o backend\nconsole.log('Starting backend on port 5052...');\nexecSync('NODE_ENV=production PORT=5052 node dist/index.js', { stdio: 'inherit' });\n","size_bytes":381},"frontend/postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"frontend/tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\", \"Inter\", \"system-ui\", \"sans-serif\"],\n        serif: [\"var(--font-serif)\", \"Georgia\", \"serif\"],\n        mono: [\"var(--font-mono)\", \"Menlo\", \"monospace\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2833},"frontend/vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    host: \"0.0.0.0\",\n    port: 5051,\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n    proxy: {\n      '/api': {\n        target: process.env.BACKEND_URL || 'http://localhost:5052',\n        changeOrigin: true,\n        secure: false,\n      }\n    }\n  },\n});\n","size_bytes":1279},"backend/server/db.ts":{"content":"import { drizzle } from \"drizzle-orm/node-postgres\";\nimport { Pool } from \"pg\";\n\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL || \"postgresql://school_admin:SchoolSys2024!@#@localhost:5432/school_system\",\n});\n\nexport const db = drizzle(pool);","size_bytes":265},"backend/server/index.ts":{"content":"\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport cors from \"cors\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic } from \"./vite\";\n\nconst app = express();\n\n// CORS configuration for separated frontend/backend\nif (process.env.NODE_ENV === \"production\" && process.env.FRONTEND_URL) {\n  app.use(cors({\n    origin: process.env.FRONTEND_URL,\n    credentials: true,\n    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n    allowedHeaders: ['Content-Type', 'Authorization', 'Cookie']\n  }));\n}\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Simple session configuration\napp.use(session({\n  secret: process.env.SESSION_SECRET || 'demo-secret-key-change-in-production',\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    httpOnly: true,\n    secure: false, // Set to true in production with HTTPS\n    maxAge: 24 * 60 * 60 * 1000 // 24 hours\n  }\n}));\n\nfunction log(message: string) {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour12: false,\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n  });\n\n  console.log(`${formattedTime} [express] ${message}`);\n}\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  const port = process.env.PORT || 5052;\n  server.listen(port, \"0.0.0.0\", () => {\n    log(`Backend serving on port ${port}`);\n  });\n})();\n","size_bytes":2739},"backend/server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"backend/server/routes.ts":{"content":"\nimport type { Express } from \"express\";\nimport express from \"express\";\nimport { createServer, type Server } from \"http\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport { storage } from \"./storage\";\nimport { \n  insertUnitSchema, \n  insertStaffSchema, \n  insertStudentSchema,\n  insertCourseSchema,\n  insertClassSchema,\n  insertLessonSchema,\n  insertBookSchema,\n  insertPermissionCategorySchema,\n  insertPermissionSchema,\n  insertRoleSchema,\n  insertUserSettingsSchema,\n  insertSupportTicketSchema,\n  insertSupportTicketResponseSchema,\n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\n\n\nconst updateRolePermissionsSchema = z.object({\n  permissionIds: z.array(z.string())\n});\n\n// Simple demo users for login\nconst demoUsers = [\n  { id: '1', email: 'admin@demo.com', password: 'admin123', firstName: 'Ivan', lastName: 'Silva', role: 'admin' },\n  { id: '2', email: 'teacher@demo.com', password: 'teacher123', firstName: 'Ivan', lastName: 'Silva', role: 'teacher' },\n  { id: '3', email: 'secretary@demo.com', password: 'secretary123', firstName: 'Ivan', lastName: 'Silva', role: 'secretary' },\n  { id: '4', email: 'student@demo.com', password: 'student123', firstName: 'Ivan', lastName: 'Silva', role: 'student' },\n];\n\n// Simple middleware to check if user is logged in\nconst isAuthenticated = (req: any, res: any, next: any) => {\n  if (req.session?.user) {\n    return next();\n  }\n  return res.status(401).json({ message: \"Unauthorized\" });\n};\n\n\n\n// Middleware para permitir apenas admin (novo sistema simplificado)\nconst requireAdminOnly = (req: any, res: any, next: any) => {\n  if (req.session?.user?.role === 'admin') {\n    return next();\n  }\n  return res.status(403).json({ message: \"Forbidden - Admin role required\" });\n};\n\n// Middleware to check if user has admin or secretary role\nconst requireAdminOrSecretary = (req: any, res: any, next: any) => {\n  if (req.session?.user?.role === 'admin' || req.session?.user?.role === 'secretary') {\n    return next();\n  }\n  return res.status(403).json({ message: \"Forbidden - Admin or Secretary role required\" });\n};\n\n// Configure multer for file uploads\nconst bookUploads = multer({\n  storage: multer.diskStorage({\n    destination: (req, file, cb) => {\n      cb(null, './uploads/books');\n    },\n    filename: (req, file, cb) => {\n      const bookId = req.params.id;\n      const ext = path.extname(file.originalname);\n      cb(null, `book_${bookId}_${Date.now()}${ext}`);\n    }\n  }),\n  fileFilter: (req, file, cb) => {\n    if (file.mimetype === 'application/pdf') {\n      cb(null, true);\n    } else {\n      cb(new Error('Only PDF files are allowed!') as any, false);\n    }\n  },\n  limits: {\n    fileSize: 50 * 1024 * 1024 // 50MB limit\n  }\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Serve uploaded files\n  app.use('/uploads', express.static('uploads'));\n\n  // Demo login endpoint\n  app.post('/api/auth/login', async (req, res) => {\n    const { email, password } = req.body;\n    \n    const user = demoUsers.find(u => u.email === email && u.password === password);\n    \n    if (!user) {\n      return res.status(401).json({ message: \"Credenciais inválidas\" });\n    }\n\n    // Store user in session\n    (req.session as any).user = {\n      id: user.id,\n      email: user.email,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      role: user.role\n    };\n\n    res.json({ user: (req.session as any).user });\n  });\n\n  // Get current user\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    res.json(req.session.user);\n  });\n\n  // Get effective permissions for current user based on their role\n  app.get('/api/auth/effective-permissions', isAuthenticated, async (req: any, res) => {\n    try {\n      const rolePermissions = await storage.getRolePermissionsByName(req.session.user.role);\n      // Return permissions in the format expected by the frontend\n      const permissions = rolePermissions.map(rp => rp.permission);\n      res.json({ permissions: permissions || [] });\n    } catch (error) {\n      console.error('Error getting effective permissions:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  // Logout endpoint\n  app.post('/api/auth/logout', (req, res) => {\n    req.session.destroy(() => {\n      res.json({ message: \"Logged out\" });\n    });\n  });\n\n  // Dashboard stats\n  app.get(\"/api/dashboard/stats\", isAuthenticated, async (req, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Units routes\n  app.get(\"/api/units\", isAuthenticated, async (req, res) => {\n    try {\n      const units = await storage.getUnits();\n      res.json(units);\n    } catch (error) {\n      console.error(\"Error fetching units:\", error);\n      res.status(500).json({ message: \"Failed to fetch units\" });\n    }\n  });\n\n  app.get(\"/api/units/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const unit = await storage.getUnit(req.params.id);\n      if (!unit) {\n        return res.status(404).json({ message: \"Unit not found\" });\n      }\n      res.json(unit);\n    } catch (error) {\n      console.error(\"Error fetching unit:\", error);\n      res.status(500).json({ message: \"Failed to fetch unit\" });\n    }\n  });\n\n  app.post(\"/api/units\", isAuthenticated, async (req, res) => {\n    try {\n      const unitData = insertUnitSchema.parse(req.body);\n      const unit = await storage.createUnit(unitData);\n      res.status(201).json(unit);\n    } catch (error) {\n      console.error(\"Error creating unit:\", error);\n      res.status(400).json({ message: \"Invalid unit data\" });\n    }\n  });\n\n  app.put(\"/api/units/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const unitData = insertUnitSchema.partial().parse(req.body);\n      const unit = await storage.updateUnit(req.params.id, unitData);\n      res.json(unit);\n    } catch (error) {\n      console.error(\"Error updating unit:\", error);\n      res.status(400).json({ message: \"Invalid unit data\" });\n    }\n  });\n\n  app.delete(\"/api/units/:id\", isAuthenticated, async (req, res) => {\n    try {\n      await storage.deleteUnit(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting unit:\", error);\n      res.status(500).json({ message: \"Failed to delete unit\" });\n    }\n  });\n\n  // Staff routes\n  app.get(\"/api/staff\", isAuthenticated, async (req, res) => {\n    try {\n      const staff = await storage.getStaff();\n      res.json(staff);\n    } catch (error) {\n      console.error(\"Error fetching staff:\", error);\n      res.status(500).json({ message: \"Failed to fetch staff\" });\n    }\n  });\n\n  app.get(\"/api/staff/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const staff = await storage.getStaffMember(req.params.id);\n      if (!staff) {\n        return res.status(404).json({ message: \"Staff member not found\" });\n      }\n      res.json(staff);\n    } catch (error) {\n      console.error(\"Error fetching staff member:\", error);\n      res.status(500).json({ message: \"Failed to fetch staff member\" });\n    }\n  });\n\n  app.post(\"/api/staff\", isAuthenticated, async (req, res) => {\n    try {\n      const staffData = insertStaffSchema.parse(req.body);\n      const staff = await storage.createStaff(staffData);\n      res.status(201).json(staff);\n    } catch (error) {\n      console.error(\"Error creating staff member:\", error);\n      res.status(400).json({ message: \"Invalid staff data\" });\n    }\n  });\n\n  app.put(\"/api/staff/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const staffData = insertStaffSchema.partial().parse(req.body);\n      const staff = await storage.updateStaff(req.params.id, staffData);\n      res.json(staff);\n    } catch (error) {\n      console.error(\"Error updating staff member:\", error);\n      res.status(400).json({ message: \"Invalid staff data\" });\n    }\n  });\n\n  app.delete(\"/api/staff/:id\", isAuthenticated, async (req, res) => {\n    try {\n      await storage.deleteStaff(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting staff member:\", error);\n      res.status(500).json({ message: \"Failed to delete staff member\" });\n    }\n  });\n\n  // Students routes\n  app.get(\"/api/students\", isAuthenticated, async (req, res) => {\n    try {\n      const students = await storage.getStudents();\n      res.json(students);\n    } catch (error) {\n      console.error(\"Error fetching students:\", error);\n      res.status(500).json({ message: \"Failed to fetch students\" });\n    }\n  });\n\n  app.get(\"/api/students/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const student = await storage.getStudent(req.params.id);\n      if (!student) {\n        return res.status(404).json({ message: \"Student not found\" });\n      }\n      res.json(student);\n    } catch (error) {\n      console.error(\"Error fetching student:\", error);\n      res.status(500).json({ message: \"Failed to fetch student\" });\n    }\n  });\n\n  app.post(\"/api/students\", isAuthenticated, async (req, res) => {\n    try {\n      const studentData = insertStudentSchema.parse(req.body);\n      const student = await storage.createStudent(studentData);\n      res.status(201).json(student);\n    } catch (error) {\n      console.error(\"Error creating student:\", error);\n      res.status(400).json({ message: \"Invalid student data\" });\n    }\n  });\n\n  app.put(\"/api/students/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const studentData = insertStudentSchema.partial().parse(req.body);\n      const student = await storage.updateStudent(req.params.id, studentData);\n      res.json(student);\n    } catch (error) {\n      console.error(\"Error updating student:\", error);\n      res.status(400).json({ message: \"Invalid student data\" });\n    }\n  });\n\n  app.delete(\"/api/students/:id\", isAuthenticated, async (req, res) => {\n    try {\n      await storage.deleteStudent(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting student:\", error);\n      res.status(500).json({ message: \"Failed to delete student\" });\n    }\n  });\n\n  // Courses routes\n  app.get(\"/api/courses\", isAuthenticated, async (req, res) => {\n    try {\n      const courses = await storage.getCourses();\n      res.json(courses);\n    } catch (error) {\n      console.error(\"Error fetching courses:\", error);\n      res.status(500).json({ message: \"Failed to fetch courses\" });\n    }\n  });\n\n  app.get(\"/api/courses/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const course = await storage.getCourse(req.params.id);\n      if (!course) {\n        return res.status(404).json({ message: \"Course not found\" });\n      }\n      res.json(course);\n    } catch (error) {\n      console.error(\"Error fetching course:\", error);\n      res.status(500).json({ message: \"Failed to fetch course\" });\n    }\n  });\n\n  app.post(\"/api/courses\", isAuthenticated, async (req, res) => {\n    try {\n      const courseData = insertCourseSchema.parse(req.body);\n      const course = await storage.createCourse(courseData);\n      res.status(201).json(course);\n    } catch (error) {\n      console.error(\"Error creating course:\", error);\n      res.status(400).json({ message: \"Invalid course data\" });\n    }\n  });\n\n  app.put(\"/api/courses/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const courseData = insertCourseSchema.partial().parse(req.body);\n      const course = await storage.updateCourse(req.params.id, courseData);\n      res.json(course);\n    } catch (error) {\n      console.error(\"Error updating course:\", error);\n      res.status(400).json({ message: \"Invalid course data\" });\n    }\n  });\n\n  app.delete(\"/api/courses/:id\", isAuthenticated, async (req, res) => {\n    try {\n      await storage.deleteCourse(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting course:\", error);\n      res.status(500).json({ message: \"Failed to delete course\" });\n    }\n  });\n\n  // Books routes\n  app.get(\"/api/books\", isAuthenticated, async (req, res) => {\n    try {\n      const books = await storage.getBooks();\n      res.json(books);\n    } catch (error) {\n      console.error(\"Error fetching books:\", error);\n      res.status(500).json({ message: \"Failed to fetch books\" });\n    }\n  });\n\n  app.get(\"/api/books/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const book = await storage.getBook(req.params.id);\n      if (!book) {\n        return res.status(404).json({ message: \"Book not found\" });\n      }\n      res.json(book);\n    } catch (error) {\n      console.error(\"Error fetching book:\", error);\n      res.status(500).json({ message: \"Failed to fetch book\" });\n    }\n  });\n\n  app.post(\"/api/books\", isAuthenticated, async (req, res) => {\n    try {\n      const bookData = insertBookSchema.parse(req.body);\n      const book = await storage.createBook(bookData);\n      res.status(201).json(book);\n    } catch (error) {\n      console.error(\"Error creating book:\", error);\n      res.status(400).json({ message: \"Invalid book data\" });\n    }\n  });\n\n  app.put(\"/api/books/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const bookData = insertBookSchema.partial().parse(req.body);\n      const book = await storage.updateBook(req.params.id, bookData);\n      res.json(book);\n    } catch (error) {\n      console.error(\"Error updating book:\", error);\n      res.status(400).json({ message: \"Invalid book data\" });\n    }\n  });\n\n  app.delete(\"/api/books/:id\", isAuthenticated, async (req, res) => {\n    try {\n      await storage.deleteBook(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting book:\", error);\n      res.status(500).json({ message: \"Failed to delete book\" });\n    }\n  });\n\n  // PDF upload route for books\n  app.post(\"/api/books/:id/upload\", isAuthenticated, bookUploads.single('pdf'), async (req, res) => {\n    try {\n      const bookId = req.params.id;\n      const file = req.file;\n\n      if (!file) {\n        return res.status(400).json({ message: \"No PDF file provided\" });\n      }\n\n      // Check if book exists\n      const book = await storage.getBook(bookId);\n      if (!book) {\n        return res.status(404).json({ message: \"Book not found\" });\n      }\n\n      // Update book with new PDF URL\n      const pdfUrl = `/uploads/books/${file.filename}`;\n      const updatedBook = await storage.updateBook(bookId, { pdfUrl });\n\n      res.json({\n        message: \"PDF uploaded successfully\",\n        book: updatedBook,\n        fileInfo: {\n          filename: file.filename,\n          originalName: file.originalname,\n          size: file.size,\n          url: pdfUrl\n        }\n      });\n    } catch (error: any) {\n      console.error(\"Error uploading PDF:\", error);\n      if (error.message === 'Only PDF files are allowed!') {\n        return res.status(400).json({ message: \"Only PDF files are allowed\" });\n      }\n      res.status(500).json({ message: \"Failed to upload PDF file\" });\n    }\n  });\n\n  // Classes routes\n  app.get(\"/api/classes\", isAuthenticated, async (req, res) => {\n    try {\n      const classes = await storage.getClasses();\n      res.json(classes);\n    } catch (error) {\n      console.error(\"Error fetching classes:\", error);\n      res.status(500).json({ message: \"Failed to fetch classes\" });\n    }\n  });\n\n  app.get(\"/api/classes/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const classItem = await storage.getClass(req.params.id);\n      if (!classItem) {\n        return res.status(404).json({ message: \"Class not found\" });\n      }\n      res.json(classItem);\n    } catch (error) {\n      console.error(\"Error fetching class:\", error);\n      res.status(500).json({ message: \"Failed to fetch class\" });\n    }\n  });\n\n  app.get(\"/api/classes/teacher/:teacherId\", isAuthenticated, async (req, res) => {\n    try {\n      const classes = await storage.getClassesByTeacher(req.params.teacherId);\n      res.json(classes);\n    } catch (error) {\n      console.error(\"Error fetching teacher classes:\", error);\n      res.status(500).json({ message: \"Failed to fetch teacher classes\" });\n    }\n  });\n\n  app.post(\"/api/classes\", isAuthenticated, requireAdminOrSecretary, async (req, res) => {\n    try {\n      const classData = insertClassSchema.parse(req.body);\n      const newClass = await storage.createClass(classData);\n      res.status(201).json(newClass);\n    } catch (error) {\n      console.error(\"Error creating class:\", error);\n      res.status(400).json({ message: \"Invalid class data\" });\n    }\n  });\n\n  app.put(\"/api/classes/:id\", isAuthenticated, requireAdminOrSecretary, async (req, res) => {\n    try {\n      const classData = insertClassSchema.partial().parse(req.body);\n      const updatedClass = await storage.updateClass(req.params.id, classData);\n      res.json(updatedClass);\n    } catch (error) {\n      console.error(\"Error updating class:\", error);\n      res.status(400).json({ message: \"Invalid class data\" });\n    }\n  });\n\n  app.delete(\"/api/classes/:id\", isAuthenticated, requireAdminOrSecretary, async (req, res) => {\n    try {\n      await storage.deleteClass(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting class:\", error);\n      res.status(500).json({ message: \"Failed to delete class\" });\n    }\n  });\n\n  // Lessons/Schedule routes\n  app.get(\"/api/lessons\", isAuthenticated, async (req, res) => {\n    try {\n      const lessons = await storage.getLessons();\n      res.json(lessons);\n    } catch (error) {\n      console.error(\"Error fetching lessons:\", error);\n      res.status(500).json({ message: \"Failed to fetch lessons\" });\n    }\n  });\n\n  app.get(\"/api/lessons/today\", isAuthenticated, async (req, res) => {\n    try {\n      const lessons = await storage.getTodaysLessons();\n      res.json(lessons);\n    } catch (error) {\n      console.error(\"Error fetching today's lessons:\", error);\n      res.status(500).json({ message: \"Failed to fetch today's lessons\" });\n    }\n  });\n\n  app.get(\"/api/lessons/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const lesson = await storage.getLesson(req.params.id);\n      if (!lesson) {\n        return res.status(404).json({ message: \"Lesson not found\" });\n      }\n      res.json(lesson);\n    } catch (error) {\n      console.error(\"Error fetching lesson:\", error);\n      res.status(500).json({ message: \"Failed to fetch lesson\" });\n    }\n  });\n\n  app.get(\"/api/lessons/class/:classId\", isAuthenticated, async (req, res) => {\n    try {\n      const lessons = await storage.getLessonsByClass(req.params.classId);\n      res.json(lessons);\n    } catch (error) {\n      console.error(\"Error fetching class lessons:\", error);\n      res.status(500).json({ message: \"Failed to fetch class lessons\" });\n    }\n  });\n\n  app.get(\"/api/lessons/teacher/:teacherId\", isAuthenticated, async (req, res) => {\n    try {\n      const lessons = await storage.getLessonsByTeacher(req.params.teacherId);\n      res.json(lessons);\n    } catch (error) {\n      console.error(\"Error fetching teacher lessons:\", error);\n      res.status(500).json({ message: \"Failed to fetch teacher lessons\" });\n    }\n  });\n\n  app.post(\"/api/lessons\", isAuthenticated, async (req, res) => {\n    try {\n      const lessonData = insertLessonSchema.parse(req.body);\n      const lesson = await storage.createLesson(lessonData);\n      res.status(201).json(lesson);\n    } catch (error) {\n      console.error(\"Error creating lesson:\", error);\n      res.status(400).json({ message: \"Invalid lesson data\" });\n    }\n  });\n\n  app.put(\"/api/lessons/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const lessonData = insertLessonSchema.partial().parse(req.body);\n      const lesson = await storage.updateLesson(req.params.id, lessonData);\n      res.json(lesson);\n    } catch (error) {\n      console.error(\"Error updating lesson:\", error);\n      res.status(400).json({ message: \"Invalid lesson data\" });\n    }\n  });\n\n  app.delete(\"/api/lessons/:id\", isAuthenticated, async (req, res) => {\n    try {\n      await storage.deleteLesson(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting lesson:\", error);\n      res.status(500).json({ message: \"Failed to delete lesson\" });\n    }\n  });\n\n  // Check lesson conflicts endpoint\n  app.post(\"/api/lessons/check-conflicts\", isAuthenticated, async (req, res) => {\n    try {\n      const { teacherId, date, startTime, endTime, excludeLessonId } = req.body;\n      \n      if (!teacherId || !date || !startTime || !endTime) {\n        return res.status(400).json({ message: \"Missing required fields: teacherId, date, startTime, endTime\" });\n      }\n\n      const conflictCheck = await storage.checkLessonConflicts(\n        teacherId,\n        new Date(date),\n        startTime,\n        endTime,\n        excludeLessonId\n      );\n\n      res.json(conflictCheck);\n    } catch (error) {\n      console.error(\"Error checking lesson conflicts:\", error);\n      res.status(500).json({ message: \"Failed to check lesson conflicts\" });\n    }\n  });\n\n  // Schedule/Agenda routes para administração\n  app.get(\"/api/schedule/admin\", isAuthenticated, requireAdminOrSecretary, async (req, res) => {\n    try {\n      // Busca todas as turmas com horários para agenda administrativa\n      const classes = await storage.getClasses();\n      \n      // Formata os dados para agenda (pode ter múltiplas turmas no mesmo horário)\n      const scheduleData = classes.map(cls => ({\n        id: cls.id,\n        title: cls.name,\n        teacher: `${cls.teacher.firstName} ${cls.teacher.lastName}`,\n        teacherId: cls.teacher.id,\n        book: cls.book.name,\n        bookColor: cls.book.color,\n        dayOfWeek: cls.dayOfWeek,\n        startTime: cls.startTime,\n        endTime: cls.endTime,\n        room: cls.room,\n        unit: cls.unit.name,\n        currentDay: cls.currentDay,\n        totalDays: cls.book.totalDays\n      }));\n      \n      res.json(scheduleData);\n    } catch (error) {\n      console.error(\"Error fetching admin schedule:\", error);\n      res.status(500).json({ message: \"Failed to fetch admin schedule\" });\n    }\n  });\n\n  app.get(\"/api/classes/teacher/:teacherId\", isAuthenticated, async (req, res) => {\n    try {\n      // Busca as turmas do professor específico\n      const classes = await storage.getClassesByTeacher(req.params.teacherId);\n      \n      const classesData = classes.map(cls => ({\n        id: cls.id,\n        name: cls.name,\n        book: {\n          id: cls.book.id,\n          name: cls.book.name,\n          color: cls.book.color,\n          totalDays: cls.book.totalDays\n        },\n        schedule: cls.schedule,\n        dayOfWeek: cls.dayOfWeek,\n        startTime: cls.startTime,\n        endTime: cls.endTime,\n        room: cls.room,\n        maxStudents: cls.maxStudents,\n        currentStudents: cls.currentStudents,\n        currentDay: cls.currentDay,\n        unit: cls.unit\n      }));\n      \n      res.json(classesData);\n    } catch (error) {\n      console.error(\"Error fetching teacher classes:\", error);\n      res.status(500).json({ message: \"Failed to fetch teacher classes\" });\n    }\n  });\n\n  app.get(\"/api/schedule/teacher/:teacherId\", isAuthenticated, async (req, res) => {\n    try {\n      // Busca as turmas do professor específico (sem conflito de horário)\n      const classes = await storage.getClassesByTeacher(req.params.teacherId);\n      \n      const scheduleData = classes.map(cls => ({\n        id: cls.id,\n        title: cls.name,\n        book: cls.book.name,\n        bookColor: cls.book.color,\n        dayOfWeek: cls.dayOfWeek,\n        startTime: cls.startTime,\n        endTime: cls.endTime,\n        room: cls.room,\n        unit: cls.unit.name,\n        currentDay: cls.currentDay,\n        totalDays: cls.book.totalDays,\n        studentsCount: cls.currentStudents,\n        maxStudents: cls.maxStudents\n      }));\n      \n      res.json(scheduleData);\n    } catch (error) {\n      console.error(\"Error fetching teacher schedule:\", error);\n      res.status(500).json({ message: \"Failed to fetch teacher schedule\" });\n    }\n  });\n\n\n  // Permissions routes - read-only catalog for UI\n  // Permission Categories routes\n  app.get(\"/api/permission-categories\", isAuthenticated, requireAdminOnly, async (req, res) => {\n    try {\n      const categories = await storage.getPermissionCategories();\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Error fetching permission categories:\", error);\n      res.status(500).json({ message: \"Failed to fetch permission categories\" });\n    }\n  });\n\n  app.get(\"/api/permission-categories/:id\", isAuthenticated, requireAdminOnly, async (req, res) => {\n    try {\n      const category = await storage.getPermissionCategory(req.params.id);\n      if (!category) {\n        return res.status(404).json({ message: \"Permission category not found\" });\n      }\n      res.json(category);\n    } catch (error) {\n      console.error(\"Error fetching permission category:\", error);\n      res.status(500).json({ message: \"Failed to fetch permission category\" });\n    }\n  });\n\n  app.post(\"/api/permission-categories\", isAuthenticated, requireAdminOnly, async (req, res) => {\n    try {\n      const categoryData = insertPermissionCategorySchema.parse(req.body);\n      const category = await storage.createPermissionCategory(categoryData);\n      res.status(201).json(category);\n    } catch (error) {\n      console.error(\"Error creating permission category:\", error);\n      if (error instanceof Error) {\n        return res.status(400).json({ message: error.message });\n      }\n      res.status(500).json({ message: \"Failed to create permission category\" });\n    }\n  });\n\n  app.put(\"/api/permission-categories/:id\", isAuthenticated, requireAdminOnly, async (req, res) => {\n    try {\n      const categoryData = insertPermissionCategorySchema.partial().parse(req.body);\n      const category = await storage.updatePermissionCategory(req.params.id, categoryData);\n      res.json(category);\n    } catch (error) {\n      console.error(\"Error updating permission category:\", error);\n      if (error instanceof Error) {\n        return res.status(400).json({ message: error.message });\n      }\n      res.status(500).json({ message: \"Failed to update permission category\" });\n    }\n  });\n\n  app.delete(\"/api/permission-categories/:id\", isAuthenticated, requireAdminOnly, async (req, res) => {\n    try {\n      await storage.deletePermissionCategory(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting permission category:\", error);\n      if (error instanceof Error) {\n        return res.status(400).json({ message: error.message });\n      }\n      res.status(500).json({ message: \"Failed to delete permission category\" });\n    }\n  });\n\n  app.get(\"/api/permissions\", isAuthenticated, requireAdminOnly, async (req, res) => {\n    try {\n      const permissions = await storage.getPermissions();\n      res.json(permissions);\n    } catch (error) {\n      console.error(\"Error fetching permissions:\", error);\n      res.status(500).json({ message: \"Failed to fetch permissions\" });\n    }\n  });\n\n  app.get(\"/api/permissions/:id\", isAuthenticated, requireAdminOnly, async (req, res) => {\n    try {\n      const permission = await storage.getPermission(req.params.id);\n      if (!permission) {\n        return res.status(404).json({ message: \"Permission not found\" });\n      }\n      res.json(permission);\n    } catch (error) {\n      console.error(\"Error fetching permission:\", error);\n      res.status(500).json({ message: \"Failed to fetch permission\" });\n    }\n  });\n\n  app.post(\"/api/permissions\", isAuthenticated, requireAdminOnly, async (req, res) => {\n    try {\n      const permissionData = insertPermissionSchema.parse(req.body);\n      const permission = await storage.createPermission(permissionData);\n      res.status(201).json(permission);\n    } catch (error) {\n      console.error(\"Error creating permission:\", error);\n      if (error instanceof Error) {\n        return res.status(400).json({ message: error.message });\n      }\n      res.status(500).json({ message: \"Failed to create permission\" });\n    }\n  });\n\n  app.put(\"/api/permissions/:id\", isAuthenticated, requireAdminOnly, async (req, res) => {\n    try {\n      const permissionData = insertPermissionSchema.partial().parse(req.body);\n      const permission = await storage.updatePermission(req.params.id, permissionData);\n      res.json(permission);\n    } catch (error) {\n      console.error(\"Error updating permission:\", error);\n      if (error instanceof Error) {\n        return res.status(400).json({ message: error.message });\n      }\n      res.status(500).json({ message: \"Failed to update permission\" });\n    }\n  });\n\n  app.delete(\"/api/permissions/:id\", isAuthenticated, requireAdminOnly, async (req, res) => {\n    try {\n      await storage.deletePermission(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting permission:\", error);\n      if (error instanceof Error) {\n        return res.status(400).json({ message: error.message });\n      }\n      res.status(500).json({ message: \"Failed to delete permission\" });\n    }\n  });\n\n\n  // Roles routes - manage system roles\n  app.get(\"/api/roles\", isAuthenticated, requireAdminOnly, async (req, res) => {\n    try {\n      const roles = await storage.getRoles();\n      res.json(roles);\n    } catch (error) {\n      console.error(\"Error fetching roles:\", error);\n      res.status(500).json({ message: \"Failed to fetch roles\" });\n    }\n  });\n\n  app.get(\"/api/roles/:id\", isAuthenticated, requireAdminOnly, async (req, res) => {\n    try {\n      const role = await storage.getRole(req.params.id);\n      if (!role) {\n        return res.status(404).json({ message: \"Role not found\" });\n      }\n      res.json(role);\n    } catch (error) {\n      console.error(\"Error fetching role:\", error);\n      res.status(500).json({ message: \"Failed to fetch role\" });\n    }\n  });\n\n  app.get(\"/api/roles/:id/permissions\", isAuthenticated, requireAdminOnly, async (req, res) => {\n    try {\n      const roleWithPermissions = await storage.getRoleWithPermissions(req.params.id);\n      if (!roleWithPermissions) {\n        return res.status(404).json({ message: \"Role not found\" });\n      }\n      res.json(roleWithPermissions);\n    } catch (error) {\n      console.error(\"Error fetching role permissions:\", error);\n      res.status(500).json({ message: \"Failed to fetch role permissions\" });\n    }\n  });\n\n  app.put(\"/api/roles/:id/permissions\", isAuthenticated, requireAdminOnly, async (req, res) => {\n    try {\n      const { permissionIds } = updateRolePermissionsSchema.parse(req.body);\n      \n      // Validate that all permission IDs exist\n      if (permissionIds.length > 0) {\n        const allPermissions = await storage.getPermissions();\n        const validPermissionIds = allPermissions.map(p => p.id);\n        const invalidIds = permissionIds.filter(id => !validPermissionIds.includes(id));\n        \n        if (invalidIds.length > 0) {\n          return res.status(400).json({ \n            message: \"Invalid permission IDs provided\", \n            invalidIds \n          });\n        }\n      }\n      \n      await storage.updateRolePermissions(req.params.id, permissionIds);\n      \n      // Return updated role permissions\n      const updatedRolePermissions = await storage.getRoleWithPermissions(req.params.id);\n      res.json(updatedRolePermissions);\n    } catch (error: any) {\n      console.error(\"Error updating role permissions:\", error);\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid request data\", errors: error.errors });\n      }\n      if (error.message?.includes(\"not found\")) {\n        return res.status(404).json({ message: \"Role not found\" });\n      }\n      res.status(500).json({ message: \"Failed to update role permissions\" });\n    }\n  });\n\n  app.post(\"/api/roles\", isAuthenticated, requireAdminOnly, async (req, res) => {\n    try {\n      // Create safe schema that excludes isSystemRole to prevent privilege escalation\n      const safeRoleData = insertRoleSchema.omit({ isSystemRole: true }).parse(req.body);\n      \n      // Force isSystemRole to false for all custom roles created via API\n      const roleData = {\n        ...safeRoleData,\n        isSystemRole: false\n      };\n      \n      const role = await storage.createRole(roleData);\n      res.status(201).json(role);\n    } catch (error: any) {\n      console.error(\"Error creating role:\", error);\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid request data\", errors: error.errors });\n      }\n      if (error.message?.includes(\"already exists\")) {\n        return res.status(409).json({ message: error.message });\n      }\n      res.status(500).json({ message: \"Failed to create role\" });\n    }\n  });\n\n  app.put(\"/api/roles/:id\", isAuthenticated, requireAdminOnly, async (req, res) => {\n    try {\n      // Create safe schema that excludes isSystemRole to prevent system role modification\n      const safeRoleData = insertRoleSchema.omit({ isSystemRole: true }).partial().parse(req.body);\n      \n      const role = await storage.updateRole(req.params.id, safeRoleData);\n      res.json(role);\n    } catch (error: any) {\n      console.error(\"Error updating role:\", error);\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid request data\", errors: error.errors });\n      }\n      if (error.message?.includes(\"not found\")) {\n        return res.status(404).json({ message: \"Role not found\" });\n      }\n      if (error.message?.includes(\"Cannot modify\") || error.message?.includes(\"system roles\")) {\n        return res.status(403).json({ message: \"Cannot modify system roles\" });\n      }\n      res.status(500).json({ message: \"Failed to update role\" });\n    }\n  });\n\n  app.delete(\"/api/roles/:id\", isAuthenticated, requireAdminOnly, async (req, res) => {\n    try {\n      await storage.deleteRole(req.params.id);\n      res.status(204).send();\n    } catch (error: any) {\n      console.error(\"Error deleting role:\", error);\n      if (error.message?.includes(\"not found\")) {\n        return res.status(404).json({ message: \"Role not found\" });\n      }\n      if (error.message?.includes(\"Cannot delete system roles\")) {\n        return res.status(403).json({ message: \"Cannot delete system roles\" });\n      }\n      res.status(500).json({ message: \"Failed to delete role\" });\n    }\n  });\n\n  // User Settings routes\n  app.get(\"/api/users/:id/settings\", isAuthenticated, async (req: any, res) => {\n    try {\n      // Users can access their own settings, admin can access anyone's\n      const currentUserId = req.session.user.id;\n      const requestedUserId = req.params.id;\n      const userRole = req.session.user.role;\n      \n      if (currentUserId !== requestedUserId && userRole !== 'admin') {\n        return res.status(403).json({ message: \"Forbidden - Can only access your own settings\" });\n      }\n      \n      const settings = await storage.getUserSettings(requestedUserId);\n      res.json(settings || {});\n    } catch (error) {\n      console.error(\"Error fetching user settings:\", error);\n      res.status(500).json({ message: \"Failed to fetch user settings\" });\n    }\n  });\n\n  app.put(\"/api/users/:id/settings\", isAuthenticated, async (req: any, res) => {\n    try {\n      // Users can update their own settings, admin can update anyone's\n      const currentUserId = req.session.user.id;\n      const requestedUserId = req.params.id;\n      const userRole = req.session.user.role;\n      \n      if (currentUserId !== requestedUserId && userRole !== 'admin') {\n        return res.status(403).json({ message: \"Forbidden - Can only update your own settings\" });\n      }\n      \n      const settingsData = insertUserSettingsSchema.partial().parse(req.body);\n      const updatedSettings = await storage.updateUserSettings(requestedUserId, settingsData);\n      res.json(updatedSettings);\n    } catch (error: any) {\n      console.error(\"Error updating user settings:\", error);\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid request data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update user settings\" });\n    }\n  });\n\n  // Support Tickets routes\n  app.get(\"/api/support/tickets\", isAuthenticated, async (req: any, res) => {\n    try {\n      const currentUserId = req.session.user.id;\n      const userRole = req.session.user.role;\n      \n      // Admin can see all tickets, others can see only their own\n      let tickets;\n      if (userRole === 'admin') {\n        tickets = await storage.getSupportTickets();\n      } else {\n        tickets = await storage.getSupportTicketsByUser(currentUserId);\n      }\n      \n      res.json(tickets);\n    } catch (error) {\n      console.error(\"Error fetching support tickets:\", error);\n      res.status(500).json({ message: \"Failed to fetch support tickets\" });\n    }\n  });\n\n  app.get(\"/api/support/tickets/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const currentUserId = req.session.user.id;\n      const userRole = req.session.user.role;\n      \n      const ticket = await storage.getSupportTicket(req.params.id);\n      if (!ticket) {\n        return res.status(404).json({ message: \"Ticket not found\" });\n      }\n      \n      // Users can only access their own tickets, admin can access all\n      if (ticket.userId !== currentUserId && userRole !== 'admin') {\n        return res.status(403).json({ message: \"Forbidden - Can only access your own tickets\" });\n      }\n      \n      res.json(ticket);\n    } catch (error) {\n      console.error(\"Error fetching support ticket:\", error);\n      res.status(500).json({ message: \"Failed to fetch support ticket\" });\n    }\n  });\n\n  app.post(\"/api/support/tickets\", isAuthenticated, async (req: any, res) => {\n    try {\n      const currentUserId = req.session.user.id;\n      const ticketData = insertSupportTicketSchema.parse(req.body);\n      \n      const newTicket = await storage.createSupportTicket({\n        ...ticketData,\n        userId: currentUserId,\n      });\n      \n      // TODO: Send email notification to support team\n      // This would be implemented server-side using environment variables:\n      // if (process.env.SUPPORT_EMAIL) {\n      //   await sendEmail({\n      //     to: process.env.SUPPORT_EMAIL,\n      //     subject: `Novo ticket: ${newTicket.title}`,\n      //     body: ticketData.description,\n      //     priority: ticketData.priority,\n      //   });\n      // }\n      \n      res.status(201).json(newTicket);\n    } catch (error: any) {\n      console.error(\"Error creating support ticket:\", error);\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid request data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create support ticket\" });\n    }\n  });\n\n  app.put(\"/api/support/tickets/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const currentUserId = req.session.user.id;\n      const userRole = req.session.user.role;\n      \n      // Only admin can update ticket status and assignment\n      if (userRole !== 'admin') {\n        return res.status(403).json({ message: \"Forbidden - Only admin can update tickets\" });\n      }\n      \n      const ticketData = insertSupportTicketSchema.partial().parse(req.body);\n      const updatedTicket = await storage.updateSupportTicket(req.params.id, ticketData);\n      res.json(updatedTicket);\n    } catch (error: any) {\n      console.error(\"Error updating support ticket:\", error);\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid request data\", errors: error.errors });\n      }\n      if (error.message?.includes(\"not found\")) {\n        return res.status(404).json({ message: \"Ticket not found\" });\n      }\n      res.status(500).json({ message: \"Failed to update support ticket\" });\n    }\n  });\n\n  app.post(\"/api/support/tickets/:ticketId/responses\", isAuthenticated, async (req: any, res) => {\n    try {\n      const currentUserId = req.session.user.id;\n      const userRole = req.session.user.role;\n      const ticketId = req.params.ticketId;\n      \n      // Check if ticket exists and user has access\n      const ticket = await storage.getSupportTicket(ticketId);\n      if (!ticket) {\n        return res.status(404).json({ message: \"Ticket not found\" });\n      }\n      \n      if (ticket.userId !== currentUserId && userRole !== 'admin') {\n        return res.status(403).json({ message: \"Forbidden - Can only respond to your own tickets\" });\n      }\n      \n      const responseData = insertSupportTicketResponseSchema.parse(req.body);\n      const newResponse = await storage.createSupportTicketResponse({\n        ...responseData,\n        ticketId,\n        userId: currentUserId,\n        isFromSupport: userRole === 'admin',\n      });\n      \n      res.status(201).json(newResponse);\n    } catch (error: any) {\n      console.error(\"Error creating support ticket response:\", error);\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid request data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create support ticket response\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":41377},"backend/server/storage.ts":{"content":"import type {\n  InsertUnit,\n  InsertStaff,\n  InsertStudent,\n  InsertCourse,\n  InsertClass,\n  InsertLesson,\n  InsertBook,\n  InsertPermission,\n  InsertPermissionCategory,\n  InsertRole,\n  InsertRolePermission,\n  InsertUserPermission,\n  InsertUserSettings,\n  InsertSupportTicket,\n  InsertSupportTicketResponse,\n  Unit,\n  Staff,\n  Student,\n  Course,\n  Class,\n  Lesson,\n  Book,\n  User,\n  UpsertUser,\n  StaffWithUser,\n  StudentWithUser,\n  ClassWithDetails,\n  Permission,\n  PermissionCategory,\n  Role,\n  RolePermission,\n  UserPermission,\n  UserWithPermissions,\n  RoleWithPermissions,\n  PermissionsByCategory,\n  UserSettings,\n  SupportTicket,\n  SupportTicketResponse,\n  SupportTicketWithResponses,\n} from \"@shared/schema\";\nimport {\n  units,\n  users,\n  staff,\n  students,\n  courses,\n  classes,\n  lessons,\n  books,\n  permissions,\n  permissionCategories,\n  roles,\n  rolePermissions,\n  userPermissions,\n  userSettings,\n  supportTickets,\n  supportTicketResponses,\n} from \"@shared/schema\";\nimport { eq, and, desc, sql } from \"drizzle-orm\";\nimport { db } from \"./db\";\n\n// Demo data in memory - no database needed\nlet demoUnits: Unit[] = [{\n  id: '1',\n  name: 'Unidade Centro',\n  address: 'Rua das Flores, 123 - Centro',\n  phone: '(11) 3456-7890',\n  email: 'centro@edumanage.com',\n  managerId: null,\n  isActive: true,\n  createdAt: new Date('2024-01-15'),\n  updatedAt: new Date('2024-01-15'),\n}, {\n  id: '2',\n  name: 'Unidade Vila Nova',\n  address: 'Av. Principal, 456 - Vila Nova',\n  phone: '(11) 3456-7891',\n  email: 'vilanova@edumanage.com',\n  managerId: null,\n  isActive: true,\n  createdAt: new Date('2024-02-10'),\n  updatedAt: new Date('2024-02-10'),\n}, ];\n\nlet demoUsers: User[] = [{\n  id: '1', // Admin demo user\n  email: 'admin@demo.com',\n  firstName: 'Admin',\n  lastName: 'Sistema',\n  profileImageUrl: null,\n  role: 'admin',\n  roleId: null,\n  isActive: true,\n  createdAt: new Date('2024-01-01'),\n  updatedAt: new Date('2024-01-01'),\n}, {\n  id: 'user-1',\n  email: 'joao@edumanage.com',\n  firstName: 'João',\n  lastName: 'Silva',\n  profileImageUrl: null,\n  role: 'teacher',\n  roleId: null,\n  isActive: true,\n  createdAt: new Date('2024-01-20'),\n  updatedAt: new Date('2024-01-20'),\n}, {\n  id: 'user-2',\n  email: 'maria@edumanage.com',\n  firstName: 'Maria',\n  lastName: 'Santos',\n  profileImageUrl: null,\n  role: 'teacher',\n  roleId: null,\n  isActive: true,\n  createdAt: new Date('2024-01-22'),\n  updatedAt: new Date('2024-01-22'),\n}, {\n  id: 'user-3',\n  email: 'carlos@edumanage.com',\n  firstName: 'Carlos',\n  lastName: 'Oliveira',\n  profileImageUrl: null,\n  role: 'secretary',\n  roleId: null,\n  isActive: true,\n  createdAt: new Date('2024-02-01'),\n  updatedAt: new Date('2024-02-01'),\n}, {\n  id: 'user-7',\n  email: 'ana.teacher@edumanage.com',\n  firstName: 'Ana',\n  lastName: 'Costa',\n  profileImageUrl: null,\n  role: 'teacher',\n  roleId: null,\n  isActive: true,\n  createdAt: new Date('2024-01-15'),\n  updatedAt: new Date('2024-01-15'),\n}, {\n  id: 'user-8',\n  email: 'felipe@edumanage.com',\n  firstName: 'Felipe',\n  lastName: 'Rodrigues',\n  profileImageUrl: null,\n  role: 'teacher',\n  roleId: null,\n  isActive: true,\n  createdAt: new Date('2024-02-05'),\n  updatedAt: new Date('2024-02-05'),\n}, {\n  id: 'user-9',\n  email: 'patricia@edumanage.com',\n  firstName: 'Patricia',\n  lastName: 'Lima',\n  profileImageUrl: null,\n  role: 'teacher',\n  roleId: null,\n  isActive: true,\n  createdAt: new Date('2024-01-18'),\n  updatedAt: new Date('2024-01-18'),\n}, {\n  id: 'user-4',\n  email: 'ana@email.com',\n  firstName: 'Ana',\n  lastName: 'Aluno',\n  profileImageUrl: null,\n  role: 'student',\n  roleId: null,\n  isActive: true,\n  createdAt: new Date('2024-01-15'),\n  updatedAt: new Date('2024-01-15'),\n}, {\n  id: 'user-5',\n  email: 'pedro@email.com',\n  firstName: 'Pedro',\n  lastName: 'Fernandes',\n  profileImageUrl: null,\n  role: 'student',\n  roleId: null,\n  isActive: true,\n  createdAt: new Date('2024-02-01'),\n  updatedAt: new Date('2024-02-01'),\n}, {\n  id: 'user-6',\n  email: 'lucia@email.com',\n  firstName: 'Lucia',\n  lastName: 'Martins',\n  profileImageUrl: null,\n  role: 'student',\n  roleId: null,\n  isActive: true,\n  createdAt: new Date('2024-01-20'),\n  updatedAt: new Date('2024-01-20'),\n}];\n\nlet demoStaff: Staff[] = [{\n  id: '1',\n  userId: 'user-1',\n  unitId: '1',\n  employeeId: 'EMP001',\n  position: 'Professor de Inglês',\n  department: 'Ensino',\n  salary: 5000,\n  hireDate: new Date('2024-01-20'),\n  isActive: true,\n  createdAt: new Date('2024-01-20'),\n  updatedAt: new Date('2024-01-20'),\n}, {\n  id: '2',\n  userId: 'user-2',\n  unitId: '1',\n  employeeId: 'EMP002',\n  position: 'Professor de Espanhol',\n  department: 'Ensino',\n  salary: 4800,\n  hireDate: new Date('2024-01-22'),\n  isActive: true,\n  createdAt: new Date('2024-01-22'),\n  updatedAt: new Date('2024-01-22'),\n}, {\n  id: '3',\n  userId: 'user-3',\n  unitId: '2',\n  employeeId: 'EMP003',\n  position: 'Secretário',\n  department: 'Administrativo',\n  salary: 3000,\n  hireDate: new Date('2024-02-01'),\n  isActive: true,\n  createdAt: new Date('2024-02-01'),\n  updatedAt: new Date('2024-02-01'),\n}, {\n  id: '4',\n  userId: 'user-7',\n  unitId: '1',\n  employeeId: 'EMP004',\n  position: 'Professor de Inglês',\n  department: 'Ensino',\n  salary: 5200,\n  hireDate: new Date('2024-01-15'),\n  isActive: true,\n  createdAt: new Date('2024-01-15'),\n  updatedAt: new Date('2024-01-15'),\n}, {\n  id: '5',\n  userId: 'user-8',\n  unitId: '2',\n  employeeId: 'EMP005',\n  position: 'Professor de Inglês',\n  department: 'Ensino',\n  salary: 4900,\n  hireDate: new Date('2024-02-05'),\n  isActive: true,\n  createdAt: new Date('2024-02-05'),\n  updatedAt: new Date('2024-02-05'),\n}, {\n  id: '6',\n  userId: 'user-9',\n  unitId: '1',\n  employeeId: 'EMP006',\n  position: 'Professor de Espanhol',\n  department: 'Ensino',\n  salary: 4700,\n  hireDate: new Date('2024-01-18'),\n  isActive: true,\n  createdAt: new Date('2024-01-18'),\n  updatedAt: new Date('2024-01-18'),\n}, ];\n\nlet demoStudents: Student[] = [{\n  id: '1',\n  userId: 'user-4',\n  unitId: '1',\n  studentId: 'STU001',\n  enrollmentDate: new Date('2024-01-15'),\n  status: 'active',\n  emergencyContact: '(11) 98888-1111 - Contato de emergência',\n  notes: null,\n  createdAt: new Date('2024-01-15'),\n  updatedAt: new Date('2024-01-15'),\n}, {\n  id: '2',\n  userId: 'user-5',\n  unitId: '1',\n  studentId: 'STU002',\n  enrollmentDate: new Date('2024-02-01'),\n  status: 'active',\n  emergencyContact: '(11) 98888-2222 - Contato de emergência',\n  notes: null,\n  createdAt: new Date('2024-02-01'),\n  updatedAt: new Date('2024-02-01'),\n}, {\n  id: '3',\n  userId: 'user-6',\n  unitId: '2',\n  studentId: 'STU003',\n  enrollmentDate: new Date('2024-01-20'),\n  status: 'active',\n  emergencyContact: '(11) 98888-3333 - Contato de emergência',\n  notes: null,\n  createdAt: new Date('2024-01-20'),\n  updatedAt: new Date('2024-01-20'),\n}, ];\n\nlet demoCourses: Course[] = [{\n  id: '1',\n  name: 'Inglês Básico',\n  description: 'Curso de inglês para iniciantes',\n  language: 'English',\n  level: 'Básico',\n  duration: 120,\n  price: 299,\n  isActive: true,\n  createdAt: new Date('2024-01-10'),\n  updatedAt: new Date('2024-01-10'),\n}, {\n  id: '2',\n  name: 'Inglês Intermediário',\n  description: 'Curso de inglês para nível intermediário',\n  language: 'English',\n  level: 'Intermediário',\n  duration: 150,\n  price: 399,\n  isActive: true,\n  createdAt: new Date('2024-01-10'),\n  updatedAt: new Date('2024-01-10'),\n}, {\n  id: '3',\n  name: 'Espanhol Básico',\n  description: 'Curso de espanhol para iniciantes',\n  language: 'Spanish',\n  level: 'Básico',\n  duration: 100,\n  price: 259,\n  isActive: true,\n  createdAt: new Date('2024-01-12'),\n  updatedAt: new Date('2024-01-12'),\n}, ];\n\nlet demoBooks: Book[] = [{\n  id: '1',\n  courseId: '1',\n  name: 'English Basic - Book 1',\n  description: 'Livro básico de inglês para iniciantes',\n  pdfUrl: '/books/english-basic-1.pdf',\n  color: '#3b82f6', // Azul claro\n  displayOrder: 1,\n  totalDays: 30,\n  isActive: true,\n  createdAt: new Date('2024-01-10'),\n  updatedAt: new Date('2024-01-10'),\n}, {\n  id: '2',\n  courseId: '1',\n  name: 'English Basic - Book 2',\n  description: 'Segundo livro básico de inglês',\n  pdfUrl: '/books/english-basic-2.pdf',\n  color: '#1d4ed8', // Azul mais escuro\n  displayOrder: 2,\n  totalDays: 35,\n  isActive: true,\n  createdAt: new Date('2024-01-10'),\n  updatedAt: new Date('2024-01-10'),\n}, {\n  id: '3',\n  courseId: '2',\n  name: 'English Intermediate - Book 1',\n  description: 'Livro de inglês intermediário',\n  pdfUrl: '/books/english-intermediate-1.pdf',\n  color: '#10b981', // Verde\n  displayOrder: 1,\n  totalDays: 40,\n  isActive: true,\n  createdAt: new Date('2024-01-10'),\n  updatedAt: new Date('2024-01-10'),\n}, {\n  id: '4',\n  courseId: '2',\n  name: 'English Intermediate - Book 2',\n  description: 'Segundo livro de inglês intermediário',\n  pdfUrl: '/books/english-intermediate-2.pdf',\n  color: '#059669', // Verde mais escuro\n  displayOrder: 2,\n  totalDays: 42,\n  isActive: true,\n  createdAt: new Date('2024-01-10'),\n  updatedAt: new Date('2024-01-10'),\n}, {\n  id: '5',\n  courseId: '3',\n  name: 'Español Básico - Libro 1',\n  description: 'Livro básico de espanhol',\n  pdfUrl: '/books/spanish-basic-1.pdf',\n  color: '#f59e0b', // Laranja\n  displayOrder: 1,\n  totalDays: 25,\n  isActive: true,\n  createdAt: new Date('2024-01-12'),\n  updatedAt: new Date('2024-01-12'),\n}, {\n  id: '6',\n  courseId: '3',\n  name: 'Español Básico - Libro 2',\n  description: 'Segundo livro básico de espanhol',\n  pdfUrl: '/books/spanish-basic-2.pdf',\n  color: '#d97706', // Laranja mais escuro\n  displayOrder: 2,\n  totalDays: 28,\n  isActive: true,\n  createdAt: new Date('2024-01-12'),\n  updatedAt: new Date('2024-01-12'),\n}, {\n  id: '7',\n  courseId: '1',\n  name: 'English Basic - Book 3',\n  description: 'Terceiro livro básico de inglês',\n  pdfUrl: '/books/english-basic-3.pdf',\n  color: '#1e40af', // Azul ainda mais escuro\n  displayOrder: 3,\n  totalDays: 40,\n  isActive: true,\n  createdAt: new Date('2024-01-10'),\n  updatedAt: new Date('2024-01-10'),\n}, {\n  id: '8',\n  courseId: '2',\n  name: 'English Advanced - Book 1',\n  description: 'Livro avançado de inglês',\n  pdfUrl: '/books/english-advanced-1.pdf',\n  color: '#8b5cf6', // Roxo\n  displayOrder: 1,\n  totalDays: 45,\n  isActive: true,\n  createdAt: new Date('2024-01-10'),\n  updatedAt: new Date('2024-01-10'),\n}];\n\nlet demoClasses: Class[] = [{\n  id: '1',\n  bookId: '1',\n  teacherId: 'user-1',\n  unitId: '1',\n  name: 'Turma Inglês A1 - Manhã',\n  schedule: 'Segunda e Quarta 09:00-11:00',\n  dayOfWeek: 1, // Monday\n  startTime: '09:00',\n  endTime: '11:00',\n  room: 'Sala 101',\n  maxStudents: 15,\n  currentStudents: 12,\n  startDate: new Date('2024-02-01'),\n  endDate: new Date('2024-05-30'),\n  currentDay: 5,\n  isActive: true,\n  createdAt: new Date('2024-01-25'),\n  updatedAt: new Date('2024-01-25'),\n}, {\n  id: '2',\n  bookId: '2',\n  teacherId: 'user-1',\n  unitId: '1',\n  name: 'Turma Inglês A2 - Tarde',\n  schedule: 'Segunda e Quarta 14:00-16:00',\n  dayOfWeek: 1, // Monday\n  startTime: '14:00',\n  endTime: '16:00',\n  room: 'Sala 102',\n  maxStudents: 15,\n  currentStudents: 10,\n  startDate: new Date('2024-02-01'),\n  endDate: new Date('2024-05-30'),\n  currentDay: 8,\n  isActive: true,\n  createdAt: new Date('2024-01-25'),\n  updatedAt: new Date('2024-01-25'),\n}, {\n  id: '3',\n  bookId: '3',\n  teacherId: 'user-2',\n  unitId: '1',\n  name: 'Turma Inglês B1 - Noite',\n  schedule: 'Segunda e Quarta 19:00-21:00',\n  dayOfWeek: 1, // Monday\n  startTime: '19:00',\n  endTime: '21:00',\n  room: 'Sala 103',\n  maxStudents: 12,\n  currentStudents: 8,\n  startDate: new Date('2024-02-15'),\n  endDate: new Date('2024-06-15'),\n  currentDay: 3,\n  isActive: true,\n  createdAt: new Date('2024-02-05'),\n  updatedAt: new Date('2024-02-05'),\n}, {\n  id: '4',\n  bookId: '5',\n  teacherId: 'user-2',\n  unitId: '1',\n  name: 'Turma Espanhol A1',\n  schedule: 'Terça e Quinta 18:00-20:00',\n  dayOfWeek: 2, // Tuesday\n  startTime: '18:00',\n  endTime: '20:00',\n  room: 'Sala 201',\n  maxStudents: 12,\n  currentStudents: 9,\n  startDate: new Date('2024-02-15'),\n  endDate: new Date('2024-06-15'),\n  currentDay: 4,\n  isActive: true,\n  createdAt: new Date('2024-02-05'),\n  updatedAt: new Date('2024-02-05'),\n}, {\n  id: '5',\n  bookId: '4',\n  teacherId: 'user-7',\n  unitId: '1',\n  name: 'Turma Inglês B2 - Manhã',\n  schedule: 'Terça e Quinta 10:00-12:00',\n  dayOfWeek: 2, // Tuesday\n  startTime: '10:00',\n  endTime: '12:00',\n  room: 'Sala 104',\n  maxStudents: 15,\n  currentStudents: 13,\n  startDate: new Date('2024-02-01'),\n  endDate: new Date('2024-05-30'),\n  currentDay: 12,\n  isActive: true,\n  createdAt: new Date('2024-01-25'),\n  updatedAt: new Date('2024-01-25'),\n}, {\n  id: '6',\n  bookId: '7',\n  teacherId: 'user-7',\n  unitId: '1',\n  name: 'Turma Inglês A3 - Tarde',\n  schedule: 'Quarta e Sexta 15:00-17:00',\n  dayOfWeek: 3, // Wednesday\n  startTime: '15:00',\n  endTime: '17:00',\n  room: 'Sala 105',\n  maxStudents: 15,\n  currentStudents: 11,\n  startDate: new Date('2024-02-01'),\n  endDate: new Date('2024-05-30'),\n  currentDay: 18,\n  isActive: true,\n  createdAt: new Date('2024-01-25'),\n  updatedAt: new Date('2024-01-25'),\n}, {\n  id: '7',\n  bookId: '8',\n  teacherId: 'user-8',\n  unitId: '2',\n  name: 'Turma Inglês Avançado',\n  schedule: 'Quinta e Sexta 19:00-21:00',\n  dayOfWeek: 4, // Thursday\n  startTime: '19:00',\n  endTime: '21:00',\n  room: 'Sala 301',\n  maxStudents: 10,\n  currentStudents: 7,\n  startDate: new Date('2024-02-01'),\n  endDate: new Date('2024-05-30'),\n  currentDay: 22,\n  isActive: true,\n  createdAt: new Date('2024-01-25'),\n  updatedAt: new Date('2024-01-25'),\n}, {\n  id: '8',\n  bookId: '6',\n  teacherId: 'user-9',\n  unitId: '1',\n  name: 'Turma Espanhol A2',\n  schedule: 'Sexta 16:00-18:00',\n  dayOfWeek: 5, // Friday\n  startTime: '16:00',\n  endTime: '18:00',\n  room: 'Sala 202',\n  maxStudents: 12,\n  currentStudents: 10,\n  startDate: new Date('2024-02-01'),\n  endDate: new Date('2024-05-30'),\n  currentDay: 15,\n  isActive: true,\n  createdAt: new Date('2024-01-25'),\n  updatedAt: new Date('2024-01-25'),\n}, ];\n\nlet demoLessons: Lesson[] = [{\n  id: '1',\n  classId: '1',\n  title: 'Present Simple Tense',\n  bookDay: 5,\n  date: new Date('2024-02-26'),\n  startTime: '19:00',\n  endTime: '21:00',\n  room: 'Sala 101',\n  status: 'completed',\n  notes: 'Aula sobre tempo presente simples',\n  createdAt: new Date('2024-02-20'),\n  updatedAt: new Date('2024-02-26'),\n}, {\n  id: '2',\n  classId: '1',\n  title: 'Present Continuous',\n  bookDay: 6,\n  date: new Date('2024-02-28'),\n  startTime: '19:00',\n  endTime: '21:00',\n  room: 'Sala 101',\n  status: 'scheduled',\n  notes: 'Aula sobre presente contínuo',\n  createdAt: new Date('2024-02-20'),\n  updatedAt: new Date('2024-02-20'),\n}, {\n  id: '3',\n  classId: '2',\n  title: 'Verbos Irregulares',\n  bookDay: 3,\n  date: new Date('2024-02-27'),\n  startTime: '18:00',\n  endTime: '20:00',\n  room: 'Sala 102',\n  status: 'completed',\n  notes: 'Conjugação de verbos irregulares',\n  createdAt: new Date('2024-02-20'),\n  updatedAt: new Date('2024-02-27'),\n}, ];\n\n// Permission categories demo data - categorias fixas do sistema + possibilidade de adicionar novas\nlet demoPermissionCategories: PermissionCategory[] = [\n  { id: 'cat-1', name: 'dashboard', displayName: 'Dashboard', description: 'Categoria para permissões do dashboard', isSystemCategory: true, isActive: true, createdAt: new Date(), updatedAt: new Date() },\n  { id: 'cat-2', name: 'units', displayName: 'Unidades', description: 'Categoria para permissões de unidades', isSystemCategory: true, isActive: true, createdAt: new Date(), updatedAt: new Date() },\n  { id: 'cat-3', name: 'staff', displayName: 'Colaboradores', description: 'Categoria para permissões de colaboradores', isSystemCategory: true, isActive: true, createdAt: new Date(), updatedAt: new Date() },\n  { id: 'cat-4', name: 'students', displayName: 'Alunos', description: 'Categoria para permissões de alunos', isSystemCategory: true, isActive: true, createdAt: new Date(), updatedAt: new Date() },\n  { id: 'cat-5', name: 'courses', displayName: 'Cursos', description: 'Categoria para permissões de cursos', isSystemCategory: true, isActive: true, createdAt: new Date(), updatedAt: new Date() },\n  { id: 'cat-6', name: 'schedule', displayName: 'Agenda', description: 'Categoria para permissões de agenda', isSystemCategory: true, isActive: true, createdAt: new Date(), updatedAt: new Date() },\n  { id: 'cat-7', name: 'system', displayName: 'Sistema', description: 'Categoria para permissões do sistema', isSystemCategory: true, isActive: true, createdAt: new Date(), updatedAt: new Date() },\n];\n\n// Permissions demo data - baseado nas páginas do menu\nlet demoPermissions: Permission[] = [\n  // Páginas principais do menu\n  { id: '1', name: 'access_dashboard', displayName: 'Dashboard', description: 'Acesso à página Dashboard', categoryId: 'cat-1', category: 'dashboard', isActive: true, createdAt: new Date(), updatedAt: new Date() },\n  { id: '2', name: 'access_units', displayName: 'Unidades', description: 'Acesso à página de Unidades', categoryId: 'cat-2', category: 'units', isActive: true, createdAt: new Date(), updatedAt: new Date() },\n  { id: '3', name: 'access_staff', displayName: 'Colaboradores', description: 'Acesso à página de Colaboradores', categoryId: 'cat-3', category: 'staff', isActive: true, createdAt: new Date(), updatedAt: new Date() },\n  { id: '4', name: 'access_students', displayName: 'Alunos', description: 'Acesso à página de Alunos', categoryId: 'cat-4', category: 'students', isActive: true, createdAt: new Date(), updatedAt: new Date() },\n  { id: '5', name: 'access_courses', displayName: 'Cursos', description: 'Acesso à página de Cursos', categoryId: 'cat-5', category: 'courses', isActive: true, createdAt: new Date(), updatedAt: new Date() },\n  { id: '6', name: 'access_schedule', displayName: 'Agenda', description: 'Acesso à página de Agenda', categoryId: 'cat-6', category: 'schedule', isActive: true, createdAt: new Date(), updatedAt: new Date() },\n  { id: '8', name: 'access_student_area', displayName: 'Área do Aluno', description: 'Acesso à Área do Aluno', categoryId: 'cat-4', category: 'students', isActive: true, createdAt: new Date(), updatedAt: new Date() },\n  { id: '9', name: 'access_settings', displayName: 'Configurações', description: 'Acesso às Configurações do sistema', categoryId: 'cat-7', category: 'system', isActive: true, createdAt: new Date(), updatedAt: new Date() },\n  { id: '10', name: 'access_permissions', displayName: 'Permissões', description: 'Acesso ao gerenciamento de Permissões', categoryId: 'cat-7', category: 'system', isActive: true, createdAt: new Date(), updatedAt: new Date() },\n];\n\n// Roles demo data - roles fixos conforme solicitado\nlet demoRoles: Role[] = [\n  { id: '1', name: 'admin', displayName: 'Administrativo', description: 'Acesso total ao sistema', isSystemRole: true, isActive: true, createdAt: new Date(), updatedAt: new Date() },\n  { id: '2', name: 'teacher', displayName: 'Professor', description: 'Acesso a turmas e agenda', isSystemRole: true, isActive: true, createdAt: new Date(), updatedAt: new Date() },\n  { id: '3', name: 'secretary', displayName: 'Secretaria', description: 'Gestão de alunos e unidades', isSystemRole: true, isActive: true, createdAt: new Date(), updatedAt: new Date() },\n  { id: '4', name: 'student', displayName: 'Aluno', description: 'Acesso à área do aluno', isSystemRole: true, isActive: true, createdAt: new Date(), updatedAt: new Date() },\n];\n\n// Role permissions demo data\nlet demoRolePermissions: RolePermission[] = [\n  // Admin - acesso total\n  { id: '1', roleId: '1', permissionId: '1', createdAt: new Date() }, // Dashboard\n  { id: '2', roleId: '1', permissionId: '2', createdAt: new Date() }, // Unidades\n  { id: '3', roleId: '1', permissionId: '3', createdAt: new Date() }, // Colaboradores\n  { id: '4', roleId: '1', permissionId: '4', createdAt: new Date() }, // Alunos\n  { id: '5', roleId: '1', permissionId: '5', createdAt: new Date() }, // Cursos\n  { id: '6', roleId: '1', permissionId: '6', createdAt: new Date() }, // Agenda\n  { id: '8', roleId: '1', permissionId: '8', createdAt: new Date() }, // Área do Aluno\n  { id: '9', roleId: '1', permissionId: '9', createdAt: new Date() }, // Configurações\n\n  // Teacher - acesso limitado\n  { id: '10', roleId: '2', permissionId: '1', createdAt: new Date() }, // Dashboard\n  { id: '11', roleId: '2', permissionId: '4', createdAt: new Date() }, // Alunos\n  { id: '12', roleId: '2', permissionId: '5', createdAt: new Date() }, // Cursos\n  { id: '13', roleId: '2', permissionId: '6', createdAt: new Date() }, // Agenda\n\n  // Secretary - gestão de alunos e unidades\n  { id: '14', roleId: '3', permissionId: '1', createdAt: new Date() }, // Dashboard\n  { id: '15', roleId: '3', permissionId: '2', createdAt: new Date() }, // Unidades\n  { id: '16', roleId: '3', permissionId: '4', createdAt: new Date() }, // Alunos\n  { id: '17', roleId: '3', permissionId: '5', createdAt: new Date() }, // Cursos\n  { id: '18', roleId: '3', permissionId: '6', createdAt: new Date() }, // Agenda\n\n  // Student - área do aluno apenas\n  { id: '19', roleId: '4', permissionId: '8', createdAt: new Date() }, // Área do Aluno\n\n  // Financial - financeiro e relatórios\n  { id: '20', roleId: '5', permissionId: '1', createdAt: new Date() }, // Dashboard\n  { id: '21', roleId: '5', permissionId: '7', createdAt: new Date() }, // Financeiro\n\n  // Developer - acesso total (igual admin)\n  { id: '22', roleId: '6', permissionId: '1', createdAt: new Date() }, // Dashboard\n  { id: '23', roleId: '6', permissionId: '2', createdAt: new Date() }, // Unidades\n  { id: '24', roleId: '6', permissionId: '3', createdAt: new Date() }, // Colaboradores\n  { id: '25', roleId: '6', permissionId: '4', createdAt: new Date() }, // Alunos\n  { id: '26', roleId: '6', permissionId: '5', createdAt: new Date() }, // Cursos\n  { id: '27', roleId: '6', permissionId: '6', createdAt: new Date() }, // Agenda\n  { id: '28', roleId: '6', permissionId: '7', createdAt: new Date() }, // Financeiro\n  { id: '29', roleId: '6', permissionId: '8', createdAt: new Date() }, // Área do Aluno\n  { id: '30', roleId: '6', permissionId: '9', createdAt: new Date() }, // Configurações\n];\n\n// User permissions demo data - permissões individuais por usuário (inicialmente vazio)\nlet demoUserPermissions: UserPermission[] = [];\n\n// User permissions demo data - permissões individuais de usuário\n\n// User settings demo data\nlet demoUserSettings: UserSettings[] = [];\n\n// Support tickets demo data\nlet demoSupportTickets: SupportTicket[] = [];\n\n// Support ticket responses demo data\nlet demoSupportTicketResponses: SupportTicketResponse[] = [];\n\nexport interface IStorage {\n  // User operations (mandatory for Replit Auth)\n  getUser(id: string): Promise < User | undefined > ;\n  upsertUser(user: UpsertUser): Promise < User > ;\n\n  // Units\n  getUnits(): Promise < Unit[] > ;\n  getUnit(id: string): Promise < Unit | undefined > ;\n  createUnit(unit: InsertUnit): Promise < Unit > ;\n  updateUnit(id: string, unit: Partial < InsertUnit > ): Promise < Unit > ;\n  deleteUnit(id: string): Promise < void > ;\n\n  // Books\n  getBooks(): Promise < Book[] > ;\n  getBook(id: string): Promise < Book | undefined > ;\n  createBook(book: InsertBook): Promise < Book > ;\n  updateBook(id: string, book: Partial < InsertBook > ): Promise < Book > ;\n  deleteBook(id: string): Promise < void > ;\n\n  // Staff\n  getStaff(): Promise < StaffWithUser[] > ;\n  getStaffMember(id: string): Promise < StaffWithUser | undefined > ;\n  createStaff(staff: InsertStaff): Promise < Staff > ;\n  updateStaff(id: string, staff: Partial < InsertStaff > ): Promise < Staff > ;\n  deleteStaff(id: string): Promise < void > ;\n\n  // Students\n  getStudents(): Promise < StudentWithUser[] > ;\n  getStudent(id: string): Promise < StudentWithUser | undefined > ;\n  createStudent(student: InsertStudent): Promise < Student > ;\n  updateStudent(id: string, student: Partial < InsertStudent > ): Promise < Student > ;\n  deleteStudent(id: string): Promise < void > ;\n\n  // Courses\n  getCourses(): Promise < Course[] > ;\n  getCourse(id: string): Promise < Course | undefined > ;\n  createCourse(course: InsertCourse): Promise < Course > ;\n  updateCourse(id: string, course: Partial < InsertCourse > ): Promise < Course > ;\n  deleteCourse(id: string): Promise < void > ;\n\n  // Classes\n  getClasses(): Promise < ClassWithDetails[] > ;\n  getClass(id: string): Promise < ClassWithDetails | undefined > ;\n  getClassesByTeacher(teacherId: string): Promise < ClassWithDetails[] > ;\n  createClass(classData: InsertClass): Promise < Class > ;\n  updateClass(id: string, classData: Partial < InsertClass > ): Promise < Class > ;\n  deleteClass(id: string): Promise < void > ;\n\n  // Lessons/Schedule\n  getLessons(): Promise < Lesson[] > ;\n  getLesson(id: string): Promise < Lesson | undefined > ;\n  getLessonsByClass(classId: string): Promise < Lesson[] > ;\n  getLessonsByTeacher(teacherId: string): Promise < Lesson[] > ;\n  getTodaysLessons(): Promise < Lesson[] > ;\n  createLesson(lesson: InsertLesson): Promise < Lesson > ;\n  updateLesson(id: string, lesson: Partial < InsertLesson > ): Promise < Lesson > ;\n  deleteLesson(id: string): Promise < void > ;\n  checkLessonConflicts(teacherId: string, date: Date, startTime: string, endTime: string, excludeLessonId?: string): Promise<{ hasConflict: boolean; conflictingLesson?: Lesson }>;\n\n  // Dashboard stats\n  getDashboardStats(): Promise < {\n    totalStudents: number;\n    activeTeachers: number;\n    todaysClasses: number;\n    monthlyRevenue: number;\n  } > ;\n\n  // Permission Categories\n  getPermissionCategories(): Promise<PermissionCategory[]>;\n  getPermissionCategory(id: string): Promise<PermissionCategory | undefined>;\n  createPermissionCategory(category: InsertPermissionCategory): Promise<PermissionCategory>;\n  updatePermissionCategory(id: string, category: Partial<InsertPermissionCategory>): Promise<PermissionCategory>;\n  deletePermissionCategory(id: string): Promise<void>;\n\n  // Permissions\n  getPermissions(): Promise<Permission[]>;\n  getPermission(id: string): Promise<Permission | undefined>;\n  getPermissionsByCategory(): Promise<PermissionsByCategory>;\n  createPermission(permission: InsertPermission): Promise<Permission>;\n  updatePermission(id: string, permission: Partial<InsertPermission>): Promise<Permission>;\n  deletePermission(id: string): Promise<void>;\n\n  // Roles\n  getRoles(): Promise<Role[]>;\n  getRole(id: string): Promise<Role | undefined>;\n  getRoleWithPermissions(id: string): Promise<RoleWithPermissions | undefined>;\n  createRole(role: InsertRole): Promise<Role>;\n  updateRole(id: string, role: Partial<InsertRole>): Promise<Role>;\n  deleteRole(id: string): Promise<void>;\n\n  // Role Permissions\n  getRolePermissions(roleId: string): Promise<RolePermission[]>;\n  addPermissionToRole(roleId: string, permissionId: string): Promise<RolePermission>;\n  removePermissionFromRole(roleId: string, permissionId: string): Promise<void>;\n  updateRolePermissions(roleId: string, permissionIds: string[]): Promise<void>;\n\n\n  // User Settings\n  getUserSettings(userId: string): Promise<UserSettings | undefined>;\n  createUserSettings(settings: InsertUserSettings): Promise<UserSettings>;\n  updateUserSettings(userId: string, settings: Partial<InsertUserSettings>): Promise<UserSettings>;\n\n  // Support Tickets\n  getSupportTickets(): Promise<SupportTicket[]>;\n  getSupportTicketsByUser(userId: string): Promise<SupportTicket[]>;\n  getSupportTicket(id: string): Promise<SupportTicketWithResponses | undefined>;\n  createSupportTicket(ticket: InsertSupportTicket): Promise<SupportTicket>;\n  updateSupportTicket(id: string, ticket: Partial<InsertSupportTicket>): Promise<SupportTicket>;\n  deleteSupportTicket(id: string): Promise<void>;\n  \n  // Support Ticket Responses\n  createSupportTicketResponse(response: InsertSupportTicketResponse): Promise<SupportTicketResponse>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // Helper function to check for teacher time conflicts\n  private checkTeacherTimeConflict(\n    teacherId: string,\n    dayOfWeek: number | null,\n    startTime: string | null,\n    endTime: string | null,\n    excludeClassId ? : string\n  ): { hasConflict: boolean; conflictingClass ? : Class } {\n    if (!dayOfWeek || !startTime || !endTime) {\n      return { hasConflict: false };\n    }\n\n    // Convert time strings to minutes for easy comparison\n    const timeToMinutes = (time: string): number => {\n      const [hours, minutes] = time.split(':').map(Number);\n      return hours * 60 + minutes;\n    };\n\n    const newStartMinutes = timeToMinutes(startTime);\n    const newEndMinutes = timeToMinutes(endTime);\n\n    // Find existing classes for this teacher on the same day\n    const existingClasses = demoClasses.filter(cls =>\n      cls.teacherId === teacherId &&\n      cls.dayOfWeek === dayOfWeek &&\n      cls.isActive &&\n      (excludeClassId ? cls.id !== excludeClassId : true)\n    );\n\n    for (const existingClass of existingClasses) {\n      if (!existingClass.startTime || !existingClass.endTime) continue;\n\n      const existingStartMinutes = timeToMinutes(existingClass.startTime);\n      const existingEndMinutes = timeToMinutes(existingClass.endTime);\n\n      // Check for overlap: new class starts before existing ends AND new class ends after existing starts\n      if (newStartMinutes < existingEndMinutes && newEndMinutes > existingStartMinutes) {\n        return { hasConflict: true, conflictingClass: existingClass };\n      }\n    }\n\n    return { hasConflict: false };\n  }\n\n  // Helper function to check for lesson time conflicts\n  private checkLessonTimeConflict(\n    teacherId: string,\n    date: Date,\n    startTime: string,\n    endTime: string,\n    excludeLessonId ? : string\n  ): { hasConflict: boolean; conflictingLesson ? : Lesson } {\n    // Convert time strings to minutes for easy comparison\n    const timeToMinutes = (time: string): number => {\n      const [hours, minutes] = time.split(':').map(Number);\n      return hours * 60 + minutes;\n    };\n\n    const newStartMinutes = timeToMinutes(startTime);\n    const newEndMinutes = timeToMinutes(endTime);\n\n    // Normalize date for comparison (set to start of day)\n    const targetDate = new Date(date);\n    targetDate.setHours(0, 0, 0, 0);\n\n    // Find teacher's classes to get list of classes they teach\n    const teacherClasses = demoClasses.filter(cls => cls.teacherId === teacherId);\n    const classIds = teacherClasses.map(cls => cls.id);\n\n    // Find existing lessons for this teacher on the same date\n    const existingLessons = demoLessons.filter(lesson => {\n      if (excludeLessonId && lesson.id === excludeLessonId) return false;\n      if (!classIds.includes(lesson.classId)) return false;\n\n      const lessonDate = new Date(lesson.date);\n      lessonDate.setHours(0, 0, 0, 0);\n\n      return lessonDate.getTime() === targetDate.getTime();\n    });\n\n    for (const existingLesson of existingLessons) {\n      const existingStartMinutes = timeToMinutes(existingLesson.startTime);\n      const existingEndMinutes = timeToMinutes(existingLesson.endTime);\n\n      // Check for overlap: new lesson starts before existing ends AND new lesson ends after existing starts\n      if (newStartMinutes < existingEndMinutes && newEndMinutes > existingStartMinutes) {\n        return { hasConflict: true, conflictingLesson: existingLesson };\n      }\n    }\n\n    return { hasConflict: false };\n  }\n\n  // User operations (mandatory for Replit Auth)\n  async getUser(id: string): Promise < User | undefined > {\n    // Try to find the user in the demoUsers array (includes admin user with id '1')\n    const demoUser = demoUsers.find(u => u.id === id);\n    if (demoUser) {\n      return demoUser;\n    }\n\n    // Demo mode fallback - returning a dummy user for login demonstration\n    if (id === 'demo-user-id') {\n      return {\n        id: 'demo-user-id',\n        email: 'demo@example.com',\n        firstName: 'Demo',\n        lastName: 'User',\n        profileImageUrl: null,\n        role: 'student',\n        roleId: null,\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n    }\n\n    return undefined;\n  }\n\n  async upsertUser(user: UpsertUser): Promise < User > {\n    // Demo mode - just log\n    console.log('Demo user upserted:', user);\n    // In a real app, you'd save this to a database\n    const existingUserIndex = demoUsers.findIndex(u => u.id === user.id);\n    const newUser: User = {\n      id: user.id || crypto.randomUUID(),\n      email: user.email || null,\n      firstName: user.firstName || null,\n      lastName: user.lastName || null,\n      profileImageUrl: user.profileImageUrl || null,\n      role: user.role || 'student',\n      roleId: user.roleId || null,\n      isActive: user.isActive ?? true,\n      createdAt: user.createdAt || new Date(),\n      updatedAt: user.updatedAt || new Date(),\n    };\n\n    if (existingUserIndex > -1) {\n      demoUsers[existingUserIndex] = newUser;\n    } else {\n      demoUsers.push(newUser);\n    }\n    return newUser;\n  }\n\n  // Units\n  async getUnits(): Promise < Unit[] > {\n    if (!db) {\n      console.warn('Database not available, using demo data');\n      return [...demoUnits];\n    }\n    return await db.select().from(units).where(eq(units.isActive, true));\n  }\n\n  async getUnit(id: string): Promise < Unit | undefined > {\n    if (!db) {\n      console.warn('Database not available, using demo data');\n      return demoUnits.find(unit => unit.id === id);\n    }\n    const result = await db.select().from(units).where(eq(units.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createUnit(unit: InsertUnit): Promise < Unit > {\n    if (!db) {\n      console.warn('Database not available, using demo data');\n      // Demo mode - create in memory\n      const id = crypto.randomUUID();\n      const newUnit: Unit = {\n        id,\n        name: unit.name,\n        address: unit.address || null,\n        phone: unit.phone || null,\n        email: unit.email || null,\n        managerId: unit.managerId || null,\n        isActive: unit.isActive ?? true,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n      demoUnits.push(newUnit);\n      return newUnit;\n    }\n    const result = await db.insert(units).values({\n      ...unit,\n      isActive: unit.isActive ?? true,\n    }).returning();\n    return result[0];\n  }\n\n  async updateUnit(id: string, unit: Partial < InsertUnit > ): Promise < Unit > {\n    if (!db) {\n      console.warn('Database not available, using demo data');\n      // Demo mode - update in memory\n      const index = demoUnits.findIndex(u => u.id === id);\n      if (index === -1) throw new Error('Unit not found');\n      const updatedUnit = {\n        ...demoUnits[index],\n        ...unit,\n        updatedAt: new Date(),\n      };\n      demoUnits[index] = updatedUnit;\n      return updatedUnit;\n    }\n    const result = await db.update(units)\n      .set({ ...unit, updatedAt: new Date() })\n      .where(eq(units.id, id))\n      .returning();\n    \n    if (result.length === 0) {\n      throw new Error('Unit not found');\n    }\n    return result[0];\n  }\n\n  async deleteUnit(id: string): Promise < void > {\n    if (!db) {\n      console.warn('Database not available, using demo data');\n      // Demo mode - remove from memory\n      const index = demoUnits.findIndex(unit => unit.id === id);\n      if (index !== -1) {\n        demoUnits.splice(index, 1);\n      }\n      return;\n    }\n    await db.update(units)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(units.id, id));\n  }\n\n  // Books\n  async getBooks(): Promise < Book[] > {\n    if (!db) {\n      console.warn('Database not available, using demo data');\n      return [...demoBooks];\n    }\n    return await db.select().from(books).where(eq(books.isActive, true));\n  }\n\n  async getBook(id: string): Promise < Book | undefined > {\n    if (!db) {\n      console.warn('Database not available, using demo data');\n      return demoBooks.find(book => book.id === id);\n    }\n    const result = await db.select().from(books).where(eq(books.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createBook(bookData: InsertBook): Promise < Book > {\n    if (!db) {\n      console.warn('Database not available, using demo data');\n      // Demo mode - validate course exists in demo data\n      const course = demoCourses.find(c => c.id === bookData.courseId);\n      if (!course) {\n        throw new Error(`Course with ID ${bookData.courseId} not found`);\n      }\n      if (!course.isActive) {\n        throw new Error(`Cannot create book for inactive course: ${course.name}`);\n      }\n      const id = crypto.randomUUID();\n      const newBook: Book = {\n        id,\n        courseId: bookData.courseId,\n        name: bookData.name,\n        description: bookData.description || null,\n        pdfUrl: bookData.pdfUrl || null,\n        color: bookData.color || '#3b82f6',\n        displayOrder: bookData.displayOrder ?? 1,\n        totalDays: bookData.totalDays ?? 30,\n        isActive: bookData.isActive ?? true,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n      demoBooks.push(newBook);\n      return newBook;\n    }\n    // Validate that the course exists and is active\n    const courseResult = await db.select().from(courses).where(eq(courses.id, bookData.courseId)).limit(1);\n    if (courseResult.length === 0) {\n      throw new Error(`Course with ID ${bookData.courseId} not found`);\n    }\n    if (!courseResult[0].isActive) {\n      throw new Error(`Cannot create book for inactive course: ${courseResult[0].name}`);\n    }\n    const result = await db.insert(books).values({\n      ...bookData,\n      color: bookData.color || '#3b82f6',\n      displayOrder: bookData.displayOrder ?? 1,\n      totalDays: bookData.totalDays ?? 30,\n      isActive: bookData.isActive ?? true,\n    }).returning();\n    return result[0];\n  }\n\n  async updateBook(id: string, bookData: Partial < InsertBook > ): Promise < Book > {\n    if (!db) {\n      console.warn('Database not available, using demo data');\n      // Demo mode\n      const index = demoBooks.findIndex(b => b.id === id);\n      if (index === -1) throw new Error('Book not found');\n      // If courseId is being updated, validate that the new course exists and is active\n      if (bookData.courseId) {\n        const course = demoCourses.find(c => c.id === bookData.courseId);\n        if (!course) {\n          throw new Error(`Course with ID ${bookData.courseId} not found`);\n        }\n        if (!course.isActive) {\n          throw new Error(`Cannot update book to inactive course: ${course.name}`);\n        }\n      }\n      const updatedBook = {\n        ...demoBooks[index],\n        ...bookData,\n        updatedAt: new Date(),\n      };\n      demoBooks[index] = updatedBook;\n      return updatedBook;\n    }\n    // If courseId is being updated, validate that the new course exists and is active\n    if (bookData.courseId) {\n      const courseResult = await db.select().from(courses).where(eq(courses.id, bookData.courseId)).limit(1);\n      if (courseResult.length === 0) {\n        throw new Error(`Course with ID ${bookData.courseId} not found`);\n      }\n      if (!courseResult[0].isActive) {\n        throw new Error(`Cannot update book to inactive course: ${courseResult[0].name}`);\n      }\n    }\n    const result = await db.update(books)\n      .set({ ...bookData, updatedAt: new Date() })\n      .where(eq(books.id, id))\n      .returning();\n    \n    if (result.length === 0) {\n      throw new Error('Book not found');\n    }\n    return result[0];\n  }\n\n  async deleteBook(id: string): Promise < void > {\n    if (!db) {\n      console.warn('Database not available, using demo data');\n      // Demo mode - check references in demo data\n      const referencingClasses = demoClasses.filter(cls => cls.bookId === id);\n      if (referencingClasses.length > 0) {\n        const classNames = referencingClasses.map(cls => cls.name).join(', ');\n        throw new Error(`Cannot delete book: it is being used by the following classes: ${classNames}`);\n      }\n      const index = demoBooks.findIndex(book => book.id === id);\n      if (index !== -1) {\n        demoBooks.splice(index, 1);\n      }\n      return;\n    }\n    // Check if any classes reference this book\n    const referencingClasses = await db.select().from(classes).where(eq(classes.bookId, id));\n    if (referencingClasses.length > 0) {\n      const classNames = referencingClasses.map(cls => cls.name).join(', ');\n      throw new Error(`Cannot delete book: it is being used by the following classes: ${classNames}`);\n    }\n    await db.update(books)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(books.id, id));\n  }\n\n  // Staff\n  async getStaff(): Promise < StaffWithUser[] > {\n    if (!db) {\n      console.warn('Database not available, using demo data');\n      // Demo mode - use in memory data\n      return demoStaff.map(staff => {\n        const user = demoUsers.find(u => u.id === staff.userId);\n        if (!user) throw new Error(`User not found for staff ${staff.id}`);\n        return {\n          ...staff,\n          user\n        };\n      });\n    }\n    const result = await db.select()\n      .from(staff)\n      .innerJoin(users, eq(staff.userId, users.id))\n      .where(eq(staff.isActive, true));\n    \n    return result.map(row => ({\n      ...row.staff,\n      user: row.users\n    }));\n  }\n\n  async getStaffMember(id: string): Promise < StaffWithUser | undefined > {\n    if (!db) {\n      console.warn('Database not available, using demo data');\n      // Demo mode\n      const staff = demoStaff.find(staff => staff.id === id);\n      if (!staff) return undefined;\n      const user = demoUsers.find(u => u.id === staff.userId);\n      if (!user) return undefined;\n      return {\n        ...staff,\n        user\n      };\n    }\n    const result = await db.select()\n      .from(staff)\n      .innerJoin(users, eq(staff.userId, users.id))\n      .where(eq(staff.id, id))\n      .limit(1);\n    \n    if (result.length === 0) return undefined;\n    \n    return {\n      ...result[0].staff,\n      user: result[0].users\n    };\n  }\n\n  async createStaff(staffData: InsertStaff): Promise < Staff > {\n    if (!db) {\n      console.warn('Database not available, using demo data');\n      // Demo mode\n      const id = crypto.randomUUID();\n      const newStaff: Staff = {\n        id,\n        userId: staffData.userId,\n        unitId: staffData.unitId || null,\n        employeeId: staffData.employeeId || null,\n        position: staffData.position || null,\n        department: staffData.department || null,\n        salary: staffData.salary || null,\n        hireDate: staffData.hireDate || null,\n        isActive: staffData.isActive ?? true,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n      demoStaff.push(newStaff);\n      return newStaff;\n    }\n    const result = await db.insert(staff).values({\n      ...staffData,\n      isActive: staffData.isActive ?? true,\n    }).returning();\n    return result[0];\n  }\n\n  async updateStaff(id: string, staffData: Partial < InsertStaff > ): Promise < Staff > {\n    if (!db) {\n      console.warn('Database not available, using demo data');\n      // Demo mode\n      const index = demoStaff.findIndex(s => s.id === id);\n      if (index === -1) throw new Error('Staff not found');\n      const updatedStaff = {\n        ...demoStaff[index],\n        ...staffData,\n        updatedAt: new Date(),\n      };\n      demoStaff[index] = updatedStaff;\n      return updatedStaff;\n    }\n    const result = await db.update(staff)\n      .set({ ...staffData, updatedAt: new Date() })\n      .where(eq(staff.id, id))\n      .returning();\n    \n    if (result.length === 0) {\n      throw new Error('Staff not found');\n    }\n    return result[0];\n  }\n\n  async deleteStaff(id: string): Promise < void > {\n    if (!db) {\n      console.warn('Database not available, using demo data');\n      // Demo mode\n      const index = demoStaff.findIndex(staff => staff.id === id);\n      if (index !== -1) {\n        demoStaff.splice(index, 1);\n      }\n      return;\n    }\n    await db.update(staff)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(staff.id, id));\n  }\n\n  // Students\n  async getStudents(): Promise < StudentWithUser[] > {\n    if (!db) {\n      console.warn('Database not available, using demo data');\n      // Demo mode\n      return demoStudents.map(student => {\n        const user = demoUsers.find(u => u.id === student.userId);\n        if (!user) throw new Error(`User not found for student ${student.id}`);\n        return {\n          ...student,\n          user\n        };\n      });\n    }\n    const result = await db.select()\n      .from(students)\n      .innerJoin(users, eq(students.userId, users.id))\n      .where(eq(users.isActive, true));\n    \n    return result.map(row => ({\n      ...row.students,\n      user: row.users\n    }));\n  }\n\n  async getStudent(id: string): Promise < StudentWithUser | undefined > {\n    if (!db) {\n      console.warn('Database not available, using demo data');\n      // Demo mode\n      const student = demoStudents.find(student => student.id === id);\n      if (!student) return undefined;\n      const user = demoUsers.find(u => u.id === student.userId);\n      if (!user) return undefined;\n      return {\n        ...student,\n        user\n      };\n    }\n    const result = await db.select()\n      .from(students)\n      .innerJoin(users, eq(students.userId, users.id))\n      .where(eq(students.id, id))\n      .limit(1);\n    \n    if (result.length === 0) return undefined;\n    \n    return {\n      ...result[0].students,\n      user: result[0].users\n    };\n  }\n\n  async createStudent(studentData: InsertStudent): Promise < Student > {\n    if (!db) {\n      console.warn('Database not available, using demo data');\n      // Demo mode\n      const id = crypto.randomUUID();\n      const newStudent: Student = {\n        id,\n        userId: studentData.userId,\n        studentId: studentData.studentId || null,\n        unitId: studentData.unitId || null,\n        enrollmentDate: studentData.enrollmentDate || null,\n        status: studentData.status || 'active',\n        emergencyContact: studentData.emergencyContact || null,\n        notes: studentData.notes || null,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n      demoStudents.push(newStudent);\n      return newStudent;\n    }\n    const result = await db.insert(students).values({\n      ...studentData,\n      status: studentData.status || 'active',\n    }).returning();\n    return result[0];\n  }\n\n  async updateStudent(id: string, studentData: Partial < InsertStudent > ): Promise < Student > {\n    if (!db) {\n      console.warn('Database not available, using demo data');\n      // Demo mode\n      const index = demoStudents.findIndex(s => s.id === id);\n      if (index === -1) throw new Error('Student not found');\n      const updatedStudent = {\n        ...demoStudents[index],\n        ...studentData,\n        updatedAt: new Date(),\n      };\n      demoStudents[index] = updatedStudent;\n      return updatedStudent;\n    }\n    const result = await db.update(students)\n      .set({ ...studentData, updatedAt: new Date() })\n      .where(eq(students.id, id))\n      .returning();\n    \n    if (result.length === 0) {\n      throw new Error('Student not found');\n    }\n    return result[0];\n  }\n\n  async deleteStudent(id: string): Promise < void > {\n    if (!db) {\n      console.warn('Database not available, using demo data');\n      // Demo mode\n      const index = demoStudents.findIndex(student => student.id === id);\n      if (index !== -1) {\n        demoStudents.splice(index, 1);\n      }\n      return;\n    }\n    await db.update(users)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(users.id, \n        db.select({ userId: students.userId })\n          .from(students)\n          .where(eq(students.id, id))\n      ));\n  }\n\n  // Courses\n  async getCourses(): Promise < Course[] > {\n    if (!db) {\n      console.warn('Database not available, using demo data');\n      return [...demoCourses];\n    }\n    return await db.select().from(courses).where(eq(courses.isActive, true));\n  }\n\n  async getCourse(id: string): Promise < Course | undefined > {\n    if (!db) {\n      console.warn('Database not available, using demo data');\n      return demoCourses.find(course => course.id === id);\n    }\n    const result = await db.select().from(courses).where(eq(courses.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createCourse(courseData: InsertCourse): Promise < Course > {\n    if (!db) {\n      console.warn('Database not available, using demo data');\n      // Demo mode\n      const id = crypto.randomUUID();\n      const newCourse: Course = {\n        id,\n        name: courseData.name,\n        description: courseData.description || null,\n        language: courseData.language,\n        level: courseData.level,\n        duration: courseData.duration || null,\n        price: courseData.price || null,\n        isActive: courseData.isActive ?? true,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n      demoCourses.push(newCourse);\n      return newCourse;\n    }\n    const result = await db.insert(courses).values({\n      ...courseData,\n      isActive: courseData.isActive ?? true,\n    }).returning();\n    return result[0];\n  }\n\n  async updateCourse(id: string, courseData: Partial < InsertCourse > ): Promise < Course > {\n    if (!db) {\n      console.warn('Database not available, using demo data');\n      // Demo mode\n      const index = demoCourses.findIndex(c => c.id === id);\n      if (index === -1) throw new Error('Course not found');\n      const updatedCourse = {\n        ...demoCourses[index],\n        ...courseData,\n        updatedAt: new Date(),\n      };\n      demoCourses[index] = updatedCourse;\n      return updatedCourse;\n    }\n    const result = await db.update(courses)\n      .set({ ...courseData, updatedAt: new Date() })\n      .where(eq(courses.id, id))\n      .returning();\n    \n    if (result.length === 0) {\n      throw new Error('Course not found');\n    }\n    return result[0];\n  }\n\n  async deleteCourse(id: string): Promise < void > {\n    if (!db) {\n      console.warn('Database not available, using demo data');\n      // Demo mode - check references in demo data\n      const referencingBooks = demoBooks.filter(book => book.courseId === id);\n      if (referencingBooks.length > 0) {\n        const bookNames = referencingBooks.map(book => book.name).join(', ');\n        throw new Error(`Cannot delete course: it has the following books associated with it: ${bookNames}`);\n      }\n      const index = demoCourses.findIndex(course => course.id === id);\n      if (index !== -1) {\n        demoCourses.splice(index, 1);\n      }\n      return;\n    }\n    // Check if any books reference this course\n    const referencingBooks = await db.select().from(books).where(eq(books.courseId, id));\n    if (referencingBooks.length > 0) {\n      const bookNames = referencingBooks.map(book => book.name).join(', ');\n      throw new Error(`Cannot delete course: it has the following books associated with it: ${bookNames}`);\n    }\n    await db.update(courses)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(courses.id, id));\n  }\n\n  // Classes\n  async getClasses(): Promise < ClassWithDetails[] > {\n    return demoClasses.map(cls => {\n      const book = demoBooks.find(b => b.id === cls.bookId);\n      const course = book ? demoCourses.find(c => c.id === book.courseId) : undefined;\n      const teacher = demoUsers.find(u => u.id === cls.teacherId);\n      const unit = demoUnits.find(u => u.id === cls.unitId);\n\n      if (!book || !course || !teacher || !unit) {\n        throw new Error(`Missing required data for class ${cls.id}`);\n      }\n\n      return {\n        ...cls,\n        book: { ...book, course },\n        teacher,\n        unit,\n        enrollments: [],\n      };\n    });\n  }\n\n  async getClass(id: string): Promise < ClassWithDetails | undefined > {\n    const cls = demoClasses.find(cls => cls.id === id);\n    if (!cls) return undefined;\n\n    const book = demoBooks.find(b => b.id === cls.bookId);\n    const course = book ? demoCourses.find(c => c.id === book.courseId) : undefined;\n    const teacher = demoUsers.find(u => u.id === cls.teacherId);\n    const unit = demoUnits.find(u => u.id === cls.unitId);\n\n    if (!book || !course || !teacher || !unit) return undefined;\n\n    return {\n      ...cls,\n      book: { ...book, course },\n      teacher,\n      unit,\n      enrollments: [],\n    };\n  }\n\n  async getClassesByTeacher(teacherId: string): Promise < ClassWithDetails[] > {\n    const classes = demoClasses.filter(cls => cls.teacherId === teacherId && cls.isActive);\n\n    return classes.map(cls => {\n      const book = demoBooks.find(b => b.id === cls.bookId);\n      const unit = demoUnits.find(u => u.id === cls.unitId);\n      const course = book ? demoCourses.find(c => c.id === book.courseId) : undefined;\n      const teacher = demoUsers.find(u => u.id === cls.teacherId);\n\n      return {\n        ...cls,\n        book: book ? { ...book, course: course || demoCourses[0] } : { ...demoBooks[0], course: demoCourses[0] },\n        unit: unit || demoUnits[0],\n        teacher: teacher,\n        enrollments: []\n      };\n    });\n  }\n\n  async createClass(classData: InsertClass): Promise < Class > {\n    // Validate that the book exists and is active\n    const book = demoBooks.find(b => b.id === classData.bookId);\n    if (!book) {\n      throw new Error(`Book with ID ${classData.bookId} not found`);\n    }\n    if (!book.isActive) {\n      throw new Error(`Cannot create class for inactive course: ${book.name}`);\n    }\n\n    // Validate that the teacher exists and has teacher role\n    const teacher = demoUsers.find(u => u.id === classData.teacherId);\n    if (!teacher) {\n      throw new Error(`Teacher with ID ${classData.teacherId} not found`);\n    }\n    if (teacher.role !== 'teacher') {\n      throw new Error(`User ${teacher.firstName} ${teacher.lastName} is not a teacher (current role: ${teacher.role})`);\n    }\n    if (!teacher.isActive) {\n      throw new Error(`Cannot assign inactive teacher ${teacher.firstName} ${teacher.lastName} to class`);\n    }\n\n    // Check for time conflicts with teacher's existing classes\n    const timeConflict = this.checkTeacherTimeConflict(\n      classData.teacherId,\n      classData.dayOfWeek || null,\n      classData.startTime || null,\n      classData.endTime || null\n    );\n\n    if (timeConflict.hasConflict && timeConflict.conflictingClass) {\n      throw new Error(`Teacher ${teacher.firstName} ${teacher.lastName} already has a class \"${timeConflict.conflictingClass.name}\" at this time (${timeConflict.conflictingClass.startTime}-${timeConflict.conflictingClass.endTime})`);\n    }\n\n    const id = crypto.randomUUID();\n    const newClass: Class = {\n      id,\n      bookId: classData.bookId,\n      teacherId: classData.teacherId,\n      unitId: classData.unitId,\n      name: classData.name,\n      schedule: classData.schedule || null,\n      dayOfWeek: classData.dayOfWeek || null,\n      startTime: classData.startTime || null,\n      endTime: classData.endTime || null,\n      room: classData.room || null,\n      maxStudents: classData.maxStudents ?? 15,\n      currentStudents: classData.currentStudents ?? 0,\n      startDate: classData.startDate || null,\n      endDate: classData.endDate || null,\n      currentDay: classData.currentDay ?? 1,\n      isActive: classData.isActive ?? true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    demoClasses.push(newClass);\n    return newClass;\n  }\n\n  async updateClass(id: string, classData: Partial < InsertClass > ): Promise < Class > {\n    const index = demoClasses.findIndex(c => c.id === id);\n    if (index === -1) throw new Error('Class not found');\n\n    const currentClass = demoClasses[index];\n\n    // If teacher, day, or time is being updated, check for conflicts\n    const teacherId = classData.teacherId || currentClass.teacherId;\n    const dayOfWeek = classData.dayOfWeek !== undefined ? classData.dayOfWeek : currentClass.dayOfWeek;\n    const startTime = classData.startTime !== undefined ? classData.startTime : currentClass.startTime;\n    const endTime = classData.endTime !== undefined ? classData.endTime : currentClass.endTime;\n\n    if (classData.teacherId || classData.dayOfWeek !== undefined ||\n      classData.startTime !== undefined || classData.endTime !== undefined) {\n\n      const timeConflict = this.checkTeacherTimeConflict(\n        teacherId,\n        dayOfWeek,\n        startTime,\n        endTime,\n        id // Exclude current class from conflict check\n      );\n\n      if (timeConflict.hasConflict && timeConflict.conflictingClass) {\n        const teacher = demoUsers.find(u => u.id === teacherId);\n        const teacherName = teacher ? `${teacher.firstName} ${teacher.lastName}` : teacherId;\n        throw new Error(`Teacher ${teacherName} already has a class \"${timeConflict.conflictingClass.name}\" at this time (${timeConflict.conflictingClass.startTime}-${timeConflict.conflictingClass.endTime})`);\n      }\n    }\n\n    const updatedClass = {\n      ...currentClass,\n      ...classData,\n      updatedAt: new Date(),\n    };\n    demoClasses[index] = updatedClass;\n    return updatedClass;\n  }\n\n  async deleteClass(id: string): Promise < void > {\n    const index = demoClasses.findIndex(cls => cls.id === id);\n    if (index !== -1) {\n      demoClasses.splice(index, 1);\n    }\n  }\n\n  // Lessons/Schedule\n  async getLessons(): Promise < Lesson[] > {\n    return [...demoLessons].sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n  }\n\n  async getLesson(id: string): Promise < Lesson | undefined > {\n    return demoLessons.find(lesson => lesson.id === id);\n  }\n\n  async getLessonsByClass(classId: string): Promise < Lesson[] > {\n    return demoLessons.filter(lesson => lesson.classId === classId);\n  }\n\n  async getLessonsByTeacher(teacherId: string): Promise < Lesson[] > {\n    // Find classes taught by this teacher, then find lessons for those classes\n    const teacherClasses = demoClasses.filter(cls => cls.teacherId === teacherId);\n    const classIds = teacherClasses.map(cls => cls.id);\n    return demoLessons.filter(lesson => classIds.includes(lesson.classId));\n  }\n\n  async getTodaysLessons(): Promise < Lesson[] > {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n\n    return demoLessons.filter(lesson => {\n      const lessonDate = new Date(lesson.date);\n      return lessonDate >= today && lessonDate < tomorrow;\n    });\n  }\n\n  async createLesson(lessonData: InsertLesson): Promise < Lesson > {\n    // Validate that the class exists\n    const classData = demoClasses.find(cls => cls.id === lessonData.classId);\n    if (!classData) {\n      throw new Error(`Class with ID ${lessonData.classId} not found`);\n    }\n\n    // Get the teacher ID from the class\n    const teacherId = classData.teacherId;\n\n    // Check for lesson conflicts\n    const conflictCheck = this.checkLessonTimeConflict(\n      teacherId,\n      lessonData.date,\n      lessonData.startTime,\n      lessonData.endTime\n    );\n\n    if (conflictCheck.hasConflict && conflictCheck.conflictingLesson) {\n      const teacher = demoUsers.find(u => u.id === teacherId);\n      const teacherName = teacher ? `${teacher.firstName} ${teacher.lastName}` : teacherId;\n      throw new Error(`Professor ${teacherName} já tem uma aula \"${conflictCheck.conflictingLesson.title}\" neste horário (${conflictCheck.conflictingLesson.startTime}-${conflictCheck.conflictingLesson.endTime})`);\n    }\n\n    const id = crypto.randomUUID();\n    const newLesson: Lesson = {\n      id,\n      classId: lessonData.classId,\n      title: lessonData.title,\n      bookDay: lessonData.bookDay,\n      date: lessonData.date,\n      startTime: lessonData.startTime,\n      endTime: lessonData.endTime,\n      room: lessonData.room || null,\n      status: lessonData.status || 'scheduled',\n      notes: lessonData.notes || null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    demoLessons.push(newLesson);\n    return newLesson;\n  }\n\n  async updateLesson(id: string, lessonData: Partial < InsertLesson > ): Promise < Lesson > {\n    const index = demoLessons.findIndex(l => l.id === id);\n    if (index === -1) throw new Error('Lesson not found');\n\n    const currentLesson = demoLessons[index];\n\n    // If date, start time, or end time is being updated, check for conflicts\n    const date = lessonData.date || currentLesson.date;\n    const startTime = lessonData.startTime || currentLesson.startTime;\n    const endTime = lessonData.endTime || currentLesson.endTime;\n    const classId = lessonData.classId || currentLesson.classId;\n\n    // Get the teacher ID from the class\n    const classData = demoClasses.find(cls => cls.id === classId);\n    if (!classData) {\n      throw new Error(`Class with ID ${classId} not found`);\n    }\n    const teacherId = classData.teacherId;\n\n    if (lessonData.date || lessonData.startTime || lessonData.endTime) {\n      const conflictCheck = this.checkLessonTimeConflict(\n        teacherId,\n        date,\n        startTime,\n        endTime,\n        id // Exclude current lesson from conflict check\n      );\n\n      if (conflictCheck.hasConflict && conflictCheck.conflictingLesson) {\n        const teacher = demoUsers.find(u => u.id === teacherId);\n        const teacherName = teacher ? `${teacher.firstName} ${teacher.lastName}` : teacherId;\n        throw new Error(`Professor ${teacherName} já tem uma aula \"${conflictCheck.conflictingLesson.title}\" neste horário (${conflictCheck.conflictingLesson.startTime}-${conflictCheck.conflictingLesson.endTime})`);\n      }\n    }\n\n    const updatedLesson = {\n      ...currentLesson,\n      ...lessonData,\n      updatedAt: new Date(),\n    };\n    demoLessons[index] = updatedLesson;\n    return updatedLesson;\n  }\n\n  async deleteLesson(id: string): Promise < void > {\n    const index = demoLessons.findIndex(lesson => lesson.id === id);\n    if (index !== -1) {\n      demoLessons.splice(index, 1);\n    }\n  }\n\n  async checkLessonConflicts(teacherId: string, date: Date, startTime: string, endTime: string, excludeLessonId ? : string): Promise<{ hasConflict: boolean; conflictingLesson ? : Lesson }> {\n    return this.checkLessonTimeConflict(teacherId, date, startTime, endTime, excludeLessonId);\n  }\n\n  // Dashboard stats\n  async getDashboardStats(): Promise < {\n    totalStudents: number;\n    activeTeachers: number;\n    todaysClasses: number;\n    monthlyRevenue: number;\n  } > {\n    // Count teachers by checking users with teacher role\n    const activeTeachers = demoUsers.filter(user => user.role === 'teacher' && user.isActive).length;\n\n    // Get today's lessons by comparing dates properly\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n\n    const todaysLessons = demoLessons.filter(lesson => {\n      const lessonDate = new Date(lesson.date);\n      return lessonDate >= today && lessonDate < tomorrow;\n    }).length;\n\n    return {\n      totalStudents: demoStudents.length,\n      activeTeachers: activeTeachers,\n      todaysClasses: todaysLessons,\n      monthlyRevenue: 47200, // Placeholder - would calculate from payments table\n    };\n  }\n\n  // Permission Categories\n  async getPermissionCategories(): Promise<PermissionCategory[]> {\n    return [...demoPermissionCategories]\n      .filter(c => c.isActive)\n      .sort((a, b) => a.displayName.localeCompare(b.displayName));\n  }\n\n  async getPermissionCategory(id: string): Promise<PermissionCategory | undefined> {\n    return demoPermissionCategories.find(c => c.id === id);\n  }\n\n  async createPermissionCategory(categoryData: InsertPermissionCategory): Promise<PermissionCategory> {\n    // Check if category name already exists (case-insensitive)\n    const existingCategory = demoPermissionCategories.find(c => c.name.toLowerCase() === categoryData.name.toLowerCase());\n    if (existingCategory) {\n      throw new Error(`Permission category with name \"${categoryData.name}\" already exists`);\n    }\n\n    const id = crypto.randomUUID();\n    const newCategory: PermissionCategory = {\n      id,\n      name: categoryData.name,\n      displayName: categoryData.displayName,\n      description: categoryData.description || null,\n      isSystemCategory: categoryData.isSystemCategory ?? false,\n      isActive: categoryData.isActive ?? true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    demoPermissionCategories.push(newCategory);\n    return newCategory;\n  }\n\n  async updatePermissionCategory(id: string, categoryData: Partial<InsertPermissionCategory>): Promise<PermissionCategory> {\n    const index = demoPermissionCategories.findIndex(c => c.id === id);\n    if (index === -1) throw new Error('Permission category not found');\n\n    const existingCategory = demoPermissionCategories[index];\n    \n    // Prevent editing system categories name\n    if (existingCategory.isSystemCategory && categoryData.name) {\n      throw new Error('Cannot modify name of system categories');\n    }\n\n    // Check if name is being updated and already exists in another category (case-insensitive)\n    if (categoryData.name) {\n      const duplicateCategory = demoPermissionCategories.find(c => c.name.toLowerCase() === categoryData.name!.toLowerCase() && c.id !== id);\n      if (duplicateCategory) {\n        throw new Error(`Permission category with name \"${categoryData.name}\" already exists`);\n      }\n    }\n\n    const updatedCategory = {\n      ...existingCategory,\n      ...categoryData,\n      updatedAt: new Date(),\n    };\n    demoPermissionCategories[index] = updatedCategory;\n    return updatedCategory;\n  }\n\n  async deletePermissionCategory(id: string): Promise<void> {\n    const category = demoPermissionCategories.find(c => c.id === id);\n    if (!category) throw new Error('Permission category not found');\n\n    // Prevent deleting system categories\n    if (category.isSystemCategory) {\n      throw new Error('Cannot delete system categories');\n    }\n\n    // Check if category has permissions assigned\n    const categoryPermissions = demoPermissions.filter(p => p.categoryId === id);\n    if (categoryPermissions.length > 0) {\n      throw new Error('Cannot delete category that has permissions assigned to it');\n    }\n\n    const index = demoPermissionCategories.findIndex(c => c.id === id);\n    if (index !== -1) {\n      demoPermissionCategories.splice(index, 1);\n    }\n  }\n\n  // Permissions\n  async getPermissions(): Promise<Permission[]> {\n    return [...demoPermissions]\n      .filter(p => p.isActive)\n      .sort((a, b) => a.displayName.localeCompare(b.displayName));\n  }\n\n  async getPermission(id: string): Promise<Permission | undefined> {\n    return demoPermissions.find(p => p.id === id);\n  }\n\n  async getPermissionsByCategory(): Promise<PermissionsByCategory> {\n    const permissions = await this.getPermissions();\n    const categorized: PermissionsByCategory = {};\n\n    permissions.forEach(permission => {\n      if (!categorized[permission.category]) {\n        categorized[permission.category] = [];\n      }\n      categorized[permission.category].push(permission);\n    });\n\n    return categorized;\n  }\n\n  async createPermission(permissionData: InsertPermission): Promise<Permission> {\n    // Check if permission name already exists (case-insensitive)\n    const existingPermission = demoPermissions.find(p => p.name.toLowerCase() === permissionData.name.toLowerCase());\n    if (existingPermission) {\n      throw new Error(`Permission with name \"${permissionData.name}\" already exists`);\n    }\n\n    // Validate that the category exists\n    const category = demoPermissionCategories.find(c => c.id === permissionData.categoryId);\n    if (!category) {\n      throw new Error(`Permission category with id \"${permissionData.categoryId}\" not found`);\n    }\n\n    const id = crypto.randomUUID();\n    const newPermission: Permission = {\n      id,\n      name: permissionData.name,\n      displayName: permissionData.displayName,\n      description: permissionData.description || null,\n      categoryId: permissionData.categoryId,\n      category: category.name, // Sync category name for backward compatibility\n      isActive: permissionData.isActive ?? true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    demoPermissions.push(newPermission);\n    return newPermission;\n  }\n\n  async updatePermission(id: string, permissionData: Partial<InsertPermission>): Promise<Permission> {\n    const index = demoPermissions.findIndex(p => p.id === id);\n    if (index === -1) throw new Error('Permission not found');\n\n    // Check if name is being updated and already exists in another permission (case-insensitive)\n    if (permissionData.name) {\n      const existingPermission = demoPermissions.find(p => p.name.toLowerCase() === permissionData.name!.toLowerCase() && p.id !== id);\n      if (existingPermission) {\n        throw new Error(`Permission with name \"${permissionData.name}\" already exists`);\n      }\n    }\n\n    const updatedPermission = {\n      ...demoPermissions[index],\n      ...permissionData,\n      updatedAt: new Date(),\n    };\n    demoPermissions[index] = updatedPermission;\n    return updatedPermission;\n  }\n\n  async deletePermission(id: string): Promise<void> {\n    const permission = demoPermissions.find(p => p.id === id);\n    if (!permission) throw new Error('Permission not found');\n\n    // Check if permission is referenced by any role\n    const referencingRolePermissions = demoRolePermissions.filter(rp => rp.permissionId === id);\n    if (referencingRolePermissions.length > 0) {\n      const roles = referencingRolePermissions.map(rp => {\n        const role = demoRoles.find(r => r.id === rp.roleId);\n        return role ? role.displayName : 'Unknown Role';\n      }).join(', ');\n      throw new Error(`Cannot delete permission: it is assigned to the following roles: ${roles}`);\n    }\n\n    // Remove permission from all roles (cascade cleanup)\n    demoRolePermissions = demoRolePermissions.filter(rp => rp.permissionId !== id);\n\n    const index = demoPermissions.findIndex(p => p.id === id);\n    if (index !== -1) {\n      demoPermissions.splice(index, 1);\n    }\n  }\n\n  // Roles\n  async getRoles(): Promise<Role[]> {\n    return [...demoRoles]\n      .filter(r => r.isActive)\n      .sort((a, b) => {\n        // System roles first, then custom roles, both alphabetically\n        if (a.isSystemRole && !b.isSystemRole) return -1;\n        if (!a.isSystemRole && b.isSystemRole) return 1;\n        return a.displayName.localeCompare(b.displayName);\n      });\n  }\n\n  async getRole(id: string): Promise<Role | undefined> {\n    return demoRoles.find(r => r.id === id);\n  }\n\n  async getRoleWithPermissions(id: string): Promise<RoleWithPermissions | undefined> {\n    const role = demoRoles.find(r => r.id === id);\n    if (!role) return undefined;\n\n    const rolePermissions = demoRolePermissions\n      .filter(rp => rp.roleId === id)\n      .map(rp => {\n        const permission = demoPermissions.find(p => p.id === rp.permissionId);\n        return {\n          ...rp,\n          permission: permission!\n        };\n      })\n      .filter(rp => rp.permission); // Only include valid permissions\n\n    return {\n      ...role,\n      rolePermissions\n    };\n  }\n\n  async createRole(roleData: InsertRole): Promise<Role> {\n    // Check if role name already exists (case-insensitive)\n    const existingRole = demoRoles.find(r => r.name.toLowerCase() === roleData.name.toLowerCase());\n    if (existingRole) {\n      throw new Error(`Role with name \"${roleData.name}\" already exists`);\n    }\n\n    const id = crypto.randomUUID();\n    const newRole: Role = {\n      id,\n      name: roleData.name,\n      displayName: roleData.displayName,\n      description: roleData.description || null,\n      isSystemRole: roleData.isSystemRole ?? false,\n      isActive: roleData.isActive ?? true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    demoRoles.push(newRole);\n    return newRole;\n  }\n\n  async updateRole(id: string, roleData: Partial<InsertRole>): Promise<Role> {\n    const index = demoRoles.findIndex(r => r.id === id);\n    if (index === -1) throw new Error('Role not found');\n\n    const currentRole = demoRoles[index];\n\n    // Prevent updating system roles\n    if (currentRole.isSystemRole && (roleData.name || roleData.isSystemRole === false)) {\n      throw new Error('Cannot modify name or system status of system roles');\n    }\n\n    // Check if name is being updated and already exists in another role (case-insensitive)\n    if (roleData.name) {\n      const existingRole = demoRoles.find(r => r.name.toLowerCase() === roleData.name!.toLowerCase() && r.id !== id);\n      if (existingRole) {\n        throw new Error(`Role with name \"${roleData.name}\" already exists`);\n      }\n    }\n\n    const updatedRole = {\n      ...currentRole,\n      ...roleData,\n      updatedAt: new Date(),\n    };\n    demoRoles[index] = updatedRole;\n    return updatedRole;\n  }\n\n  async deleteRole(id: string): Promise<void> {\n    const role = demoRoles.find(r => r.id === id);\n    if (!role) throw new Error('Role not found');\n\n    // Prevent deleting system roles\n    if (role.isSystemRole) {\n      throw new Error('Cannot delete system roles');\n    }\n\n    // Set roleId to null for users assigned to this role (cascade cleanup)\n    demoUsers.forEach(user => {\n      if (user.roleId === id) {\n        user.roleId = null;\n        user.updatedAt = new Date();\n      }\n    });\n\n    // Remove all role permissions (cascade cleanup)\n    demoRolePermissions = demoRolePermissions.filter(rp => rp.roleId !== id);\n\n    // Remove the role\n    const index = demoRoles.findIndex(r => r.id === id);\n    if (index !== -1) {\n      demoRoles.splice(index, 1);\n    }\n  }\n\n  // Role Permissions\n  async getRolePermissions(roleId: string): Promise<RolePermission[]> {\n    return demoRolePermissions.filter(rp => rp.roleId === roleId);\n  }\n\n  // Get role permissions by role name (for demo users who use role names)\n  async getRolePermissionsByName(roleName: string): Promise<(RolePermission & { permission: Permission })[]> {\n    // Admin has access to ALL permissions - total access as requested\n    if (roleName === 'admin') {\n      const allPermissions = await this.getPermissions();\n      return allPermissions.map(permission => ({\n        id: crypto.randomUUID(),\n        roleId: '1', // admin role ID\n        permissionId: permission.id,\n        createdAt: new Date(),\n        permission\n      }));\n    }\n\n    // Find the role by name\n    const role = demoRoles.find(r => r.name === roleName);\n    if (!role) {\n      console.warn(`Role '${roleName}' not found`);\n      return [];\n    }\n\n    // Get role permissions for this role ID\n    const rolePermissions = demoRolePermissions.filter(rp => rp.roleId === role.id);\n    \n    // Join with permissions data to return complete permission information\n    const permissionsWithData: (RolePermission & { permission: Permission })[] = [];\n    \n    for (const rp of rolePermissions) {\n      const permission = demoPermissions.find(p => p.id === rp.permissionId && p.isActive);\n      if (permission) {\n        permissionsWithData.push({\n          ...rp,\n          permission\n        });\n      } else {\n        console.warn(`Permission ${rp.permissionId} not found or inactive for role ${roleName}`);\n      }\n    }\n\n    return permissionsWithData;\n  }\n\n  async addPermissionToRole(roleId: string, permissionId: string): Promise<RolePermission> {\n    // Check if role exists\n    const role = demoRoles.find(r => r.id === roleId);\n    if (!role) throw new Error('Role not found');\n\n    // Check if permission exists\n    const permission = demoPermissions.find(p => p.id === permissionId);\n    if (!permission) throw new Error('Permission not found');\n\n    // Check if permission is already assigned to role\n    const existingRolePermission = demoRolePermissions.find(rp => rp.roleId === roleId && rp.permissionId === permissionId);\n    if (existingRolePermission) {\n      throw new Error('Permission is already assigned to this role');\n    }\n\n    const id = crypto.randomUUID();\n    const newRolePermission: RolePermission = {\n      id,\n      roleId,\n      permissionId,\n      createdAt: new Date(),\n    };\n    demoRolePermissions.push(newRolePermission);\n    return newRolePermission;\n  }\n\n  async removePermissionFromRole(roleId: string, permissionId: string): Promise<void> {\n    const index = demoRolePermissions.findIndex(rp => rp.roleId === roleId && rp.permissionId === permissionId);\n    if (index !== -1) {\n      demoRolePermissions.splice(index, 1);\n    }\n  }\n\n  async updateRolePermissions(roleId: string, permissionIds: string[]): Promise<void> {\n    // Check if role exists\n    const role = demoRoles.find(r => r.id === roleId);\n    if (!role) throw new Error('Role not found');\n\n    // Check if all permissions exist\n    for (const permissionId of permissionIds) {\n      const permission = demoPermissions.find(p => p.id === permissionId);\n      if (!permission) throw new Error(`Permission with id ${permissionId} not found`);\n    }\n\n    // Remove all current permissions for this role\n    demoRolePermissions = demoRolePermissions.filter(rp => rp.roleId !== roleId);\n\n    // Add new permissions\n    for (const permissionId of permissionIds) {\n      const id = crypto.randomUUID();\n      const newRolePermission: RolePermission = {\n        id,\n        roleId,\n        permissionId,\n        createdAt: new Date(),\n      };\n      demoRolePermissions.push(newRolePermission);\n    }\n  }\n\n  // User Permissions - permissões individuais por usuário\n  async getUserPermissions(userId: string): Promise<UserPermission[]> {\n    return demoUserPermissions.filter(up => up.userId === userId);\n  }\n\n  async getUserWithPermissions(userId: string): Promise<UserWithPermissions | undefined> {\n    try {\n      // Find user in the correct demo users array that matches the login IDs\n      const loginDemoUsers = [\n        { id: '1', email: 'admin@demo.com', firstName: 'Ivan', lastName: 'Silva', role: 'admin' },\n        { id: '2', email: 'teacher@demo.com', firstName: 'Ivan', lastName: 'Silva', role: 'teacher' },\n        { id: '3', email: 'secretary@demo.com', firstName: 'Ivan', lastName: 'Silva', role: 'secretary' },\n        { id: '4', email: 'student@demo.com', firstName: 'Ivan', lastName: 'Silva', role: 'student' },\n      ];\n      \n      const user = loginDemoUsers.find(u => u.id === userId);\n      if (!user) {\n        return undefined;\n      }\n\n      // Find the role object by name\n      const role = demoRoles.find(r => r.name === user.role && r.isActive);\n      \n      if (!role) {\n        console.warn(`Role '${user.role}' not found or inactive for user ${userId}`);\n        return {\n          ...user,\n          role: null,\n          userPermissions: [],\n        };\n      }\n      \n      // Get effective permissions from role\n      const rolePermissions = demoRolePermissions.filter(rp => rp.roleId === role.id);\n      \n      const userPermissions: (UserPermission & { permission: Permission })[] = [];\n      \n      for (const rp of rolePermissions) {\n        const permission = demoPermissions.find(p => p.id === rp.permissionId && p.isActive);\n        if (permission) {\n          userPermissions.push({\n            permission,\n            isGranted: true,\n            id: crypto.randomUUID(),\n            userId: user.id,\n            permissionId: permission.id,\n            createdAt: new Date(),\n            updatedAt: new Date()\n          });\n        } else {\n          console.warn(`Permission ${rp.permissionId} not found or inactive for role ${role.name}`);\n        }\n      }\n\n      return {\n        ...user,\n        role,\n        userPermissions,\n      };\n    } catch (error) {\n      console.error(\"Error fetching user with permissions:\", error);\n      throw error;\n    }\n  }\n\n  async grantUserPermission(userId: string, permissionId: string): Promise<UserPermission> {\n    // Check if user exists\n    const user = demoUsers.find(u => u.id === userId);\n    if (!user) throw new Error('User not found');\n\n    // Check if permission exists\n    const permission = demoPermissions.find(p => p.id === permissionId);\n    if (!permission) throw new Error('Permission not found');\n\n    // Check if permission is already granted to user\n    const existingUserPermission = demoUserPermissions.find(up => up.userId === userId && up.permissionId === permissionId);\n    if (existingUserPermission) {\n      // Update existing permission to granted\n      existingUserPermission.isGranted = true;\n      existingUserPermission.updatedAt = new Date();\n      return existingUserPermission;\n    }\n\n    const id = crypto.randomUUID();\n    const newUserPermission: UserPermission = {\n      id,\n      userId,\n      permissionId,\n      isGranted: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    demoUserPermissions.push(newUserPermission);\n    return newUserPermission;\n  }\n\n  async revokeUserPermission(userId: string, permissionId: string): Promise<void> {\n    const existingUserPermission = demoUserPermissions.find(up => up.userId === userId && up.permissionId === permissionId);\n    if (existingUserPermission) {\n      // Set to revoked instead of deleting to maintain audit trail\n      existingUserPermission.isGranted = false;\n      existingUserPermission.updatedAt = new Date();\n    }\n  }\n\n  async updateUserPermissions(userId: string, permissionIds: string[]): Promise<void> {\n    // Check if user exists\n    const user = demoUsers.find(u => u.id === userId);\n    if (!user) throw new Error('User not found');\n\n    // Check if all permissions exist\n    for (const permissionId of permissionIds) {\n      const permission = demoPermissions.find(p => p.id === permissionId);\n      if (!permission) throw new Error(`Permission with id ${permissionId} not found`);\n    }\n\n    // Remove all current permissions for this user\n    demoUserPermissions = demoUserPermissions.filter(up => up.userId !== userId);\n\n    // Add new permissions\n    for (const permissionId of permissionIds) {\n      const id = crypto.randomUUID();\n      const newUserPermission: UserPermission = {\n        id,\n        userId,\n        permissionId,\n        isGranted: true,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n      demoUserPermissions.push(newUserPermission);\n    }\n  }\n\n  async getUsersWithPermissions(): Promise<UserWithPermissions[]> {\n    return Promise.all(\n      demoUsers.map(async (user) => {\n        const userWithPermissions = await this.getUserWithPermissions(user.id);\n        return userWithPermissions!;\n      })\n    );\n  }\n\n  // Migration function - sincronizar usuários com permissões baseadas no role atual\n  async migrateUsersToIndividualPermissions(): Promise<void> {\n    console.log('Iniciando migração de usuários para permissões individuais...');\n\n    // Limpar permissões existentes de usuários\n    demoUserPermissions.length = 0;\n\n    // Para cada usuário, criar permissões baseadas no seu role atual\n    for (const user of demoUsers) {\n      const userRole = user.role; // Role enum do usuário (mantido para compatibilidade)\n\n      if (!userRole) continue;\n\n      // Obter permissões do role correspondente\n      let rolePermissionIds: string[] = [];\n\n      switch (userRole) {\n        case 'admin':\n          // Admin tem acesso a todas as páginas incluindo configurações\n          rolePermissionIds = ['1', '2', '3', '4', '5', '6', '7', '8', '9']; // Dashboard, Unidades, Colaboradores, Alunos, Cursos, Agenda, Financeiro, Área do Aluno, Configurações\n          break;\n\n        case 'teacher':\n          // Professor tem acesso a dashboard, alunos, cursos e agenda\n          rolePermissionIds = ['1', '4', '5', '6']; // Dashboard, Alunos, Cursos, Agenda\n          break;\n\n        case 'secretary':\n          // Secretária tem acesso a dashboard, unidades, alunos, cursos e agenda\n          rolePermissionIds = ['1', '2', '4', '5', '6']; // Dashboard, Unidades, Alunos, Cursos, Agenda\n          break;\n\n\n        case 'student':\n          // Aluno tem acesso a dashboard e área do aluno\n          rolePermissionIds = ['1', '8']; // Dashboard, Área do Aluno\n          break;\n\n        default:\n          // Role desconhecido, dar apenas dashboard\n          rolePermissionIds = ['1']; // Dashboard\n      }\n\n      // Criar permissões individuais para o usuário\n      for (const permissionId of rolePermissionIds) {\n        const id = crypto.randomUUID();\n        const userPermission: UserPermission = {\n          id,\n          userId: user.id,\n          permissionId,\n          isGranted: true,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        };\n        demoUserPermissions.push(userPermission);\n      }\n\n      console.log(`Usuário ${user.firstName} ${user.lastName} (${userRole}) migrado com ${rolePermissionIds.length} permissões`);\n    }\n\n    console.log(`Migração concluída! ${demoUsers.length} usuários migrados com ${demoUserPermissions.length} permissões individuais`);\n  }\n\n  // User Settings\n  async getUserSettings(userId: string): Promise<UserSettings | undefined> {\n    return demoUserSettings.find(s => s.userId === userId);\n  }\n\n  async createUserSettings(settings: InsertUserSettings): Promise<UserSettings> {\n    const id = crypto.randomUUID();\n    const newSettings: UserSettings = {\n      id,\n      ...settings,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    demoUserSettings.push(newSettings);\n    return newSettings;\n  }\n\n  async updateUserSettings(userId: string, settings: Partial<InsertUserSettings>): Promise<UserSettings> {\n    const index = demoUserSettings.findIndex(s => s.userId === userId);\n    if (index === -1) {\n      // Create new settings if they don't exist\n      return this.createUserSettings({ userId, ...settings } as InsertUserSettings);\n    }\n\n    const updatedSettings = {\n      ...demoUserSettings[index],\n      ...settings,\n      updatedAt: new Date(),\n    };\n    demoUserSettings[index] = updatedSettings;\n    return updatedSettings;\n  }\n\n  // Support Tickets\n  async getSupportTickets(): Promise<SupportTicket[]> {\n    return [...demoSupportTickets].sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async getSupportTicketsByUser(userId: string): Promise<SupportTicket[]> {\n    return demoSupportTickets\n      .filter(t => t.userId === userId)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async getSupportTicket(id: string): Promise<SupportTicketWithResponses | undefined> {\n    const ticket = demoSupportTickets.find(t => t.id === id);\n    if (!ticket) return undefined;\n\n    const user = demoUsers.find(u => u.id === ticket.userId);\n    const assignedUser = ticket.assignedTo ? demoUsers.find(u => u.id === ticket.assignedTo) : undefined;\n    const responses = demoSupportTicketResponses.filter(r => r.ticketId === id);\n\n    if (!user) return undefined;\n\n    return {\n      ...ticket,\n      user,\n      assignedUser,\n      responses,\n    };\n  }\n\n  async createSupportTicket(ticket: InsertSupportTicket): Promise<SupportTicket> {\n    const id = crypto.randomUUID();\n    const newTicket: SupportTicket = {\n      id,\n      ...ticket,\n      status: 'open',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    demoSupportTickets.push(newTicket);\n    return newTicket;\n  }\n\n  async updateSupportTicket(id: string, ticket: Partial<InsertSupportTicket>): Promise<SupportTicket> {\n    const index = demoSupportTickets.findIndex(t => t.id === id);\n    if (index === -1) throw new Error('Ticket not found');\n\n    const updatedTicket = {\n      ...demoSupportTickets[index],\n      ...ticket,\n      updatedAt: new Date(),\n    };\n    demoSupportTickets[index] = updatedTicket;\n    return updatedTicket;\n  }\n\n  async deleteSupportTicket(id: string): Promise<void> {\n    const index = demoSupportTickets.findIndex(t => t.id === id);\n    if (index !== -1) {\n      demoSupportTickets.splice(index, 1);\n      // Also remove associated responses\n      for (let i = demoSupportTicketResponses.length - 1; i >= 0; i--) {\n        if (demoSupportTicketResponses[i].ticketId === id) {\n          demoSupportTicketResponses.splice(i, 1);\n        }\n      }\n    }\n  }\n\n  // Support Ticket Responses\n  async createSupportTicketResponse(response: InsertSupportTicketResponse): Promise<SupportTicketResponse> {\n    const id = crypto.randomUUID();\n    const newResponse: SupportTicketResponse = {\n      id,\n      ...response,\n      createdAt: new Date(),\n    };\n    demoSupportTicketResponses.push(newResponse);\n    return newResponse;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n\n","size_bytes":88474},"backend/server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../../frontend/vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2275},"backend/shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport { relations } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  boolean,\n  pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (mandatory for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User roles enum - simplificado para 4 roles fixos\nexport const userRoleEnum = pgEnum('user_role', [\n  'admin',     // Administrativo - acesso total\n  'secretary', // Secretario - acesso quase total\n  'teacher',   // Professor - acesso limitado focado em ensino  \n  'student'    // Aluno - apenas área do aluno\n]);\n\n// Permission categories table - for dynamic categories\nexport const permissionCategories = pgTable(\"permission_categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull().unique(), // ex: \"dashboard\", \"units\", \"custom_reports\"\n  displayName: varchar(\"display_name\").notNull(), // ex: \"Dashboard\", \"Unidades\", \"Relatórios Customizados\"\n  description: text(\"description\"),\n  isSystemCategory: boolean(\"is_system_category\").default(false), // true for fixed categories\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Permissions table - todas as permissões disponíveis no sistema\nexport const permissions = pgTable(\"permissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull().unique(), // ex: \"access_units\", \"access_schedule\"\n  displayName: varchar(\"display_name\").notNull(), // ex: \"Acesso a Unidades\", \"Acesso a Agenda\"\n  description: text(\"description\"),\n  categoryId: varchar(\"category_id\").references(() => permissionCategories.id, { onDelete: 'cascade' }).notNull(),\n  category: varchar(\"category\").notNull(), // Keep for backward compatibility, will be synced with categoryId\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Roles table - mantido para compatibilidade, mas com foco nos 4 roles fixos\nexport const roles = pgTable(\"roles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull().unique(), // \"admin\", \"secretary\", \"teacher\", \"student\"\n  displayName: varchar(\"display_name\").notNull(), // \"Administrativo\", \"Secretario\", \"Professor\", \"Aluno\"\n  description: text(\"description\"),\n  isSystemRole: boolean(\"is_system_role\").default(true), // todos os 4 roles são fixos do sistema\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Role permissions relationship - quais permissões cada role tem (para os 4 roles fixos)\nexport const rolePermissions = pgTable(\"role_permissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  roleId: varchar(\"role_id\").references(() => roles.id, { onDelete: 'cascade' }).notNull(),\n  permissionId: varchar(\"permission_id\").references(() => permissions.id, { onDelete: 'cascade' }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => [\n  index(\"UQ_role_permission\").on(table.roleId, table.permissionId),\n]);\n\n// User storage table (mandatory for Replit Auth)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: userRoleEnum(\"role\").default('student'), // Sistema simplificado: apenas 4 roles fixos\n  roleId: varchar(\"role_id\").references(() => roles.id, { onDelete: 'set null' }), // referência para tabela roles\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Units table\nexport const units = pgTable(\"units\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  address: text(\"address\"),\n  phone: varchar(\"phone\"),\n  email: varchar(\"email\"),\n  managerId: varchar(\"manager_id\").references(() => users.id),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Staff table (extends users with additional info)\nexport const staff = pgTable(\"staff\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  unitId: varchar(\"unit_id\").references(() => units.id),\n  employeeId: varchar(\"employee_id\").unique(),\n  position: varchar(\"position\"),\n  department: varchar(\"department\"),\n  salary: integer(\"salary\"),\n  hireDate: timestamp(\"hire_date\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Students table\nexport const students = pgTable(\"students\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  studentId: varchar(\"student_id\").unique(),\n  unitId: varchar(\"unit_id\").references(() => units.id),\n  enrollmentDate: timestamp(\"enrollment_date\"),\n  status: varchar(\"status\").default('active'), // active, inactive, graduated\n  emergencyContact: text(\"emergency_contact\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Courses table\nexport const courses = pgTable(\"courses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  language: varchar(\"language\").notNull(),\n  level: varchar(\"level\").notNull(), // beginner, intermediate, advanced\n  duration: integer(\"duration\"), // duration in hours\n  price: integer(\"price\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Books table - livros virtuais dentro de cada curso\nexport const books = pgTable(\"books\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  courseId: varchar(\"course_id\").references(() => courses.id).notNull(),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  pdfUrl: varchar(\"pdf_url\"), // URL do arquivo PDF do livro\n  color: varchar(\"color\").notNull().default('#3b82f6'), // Cor do livro em hex\n  displayOrder: integer(\"display_order\").default(1), // Ordem do livro dentro do curso\n  totalDays: integer(\"total_days\").default(30), // Quantos dias de aula tem o livro\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Classes table (turmas)\nexport const classes = pgTable(\"classes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  bookId: varchar(\"book_id\").references(() => books.id).notNull(),\n  teacherId: varchar(\"teacher_id\").references(() => users.id).notNull(),\n  unitId: varchar(\"unit_id\").references(() => units.id).notNull(),\n  name: varchar(\"name\").notNull(),\n  schedule: text(\"schedule\"), // JSON string with schedule info\n  dayOfWeek: integer(\"day_of_week\"), // 0=Sunday, 1=Monday, ..., 6=Saturday  \n  startTime: varchar(\"start_time\"), // formato HH:mm\n  endTime: varchar(\"end_time\"), // formato HH:mm\n  room: varchar(\"room\"),\n  maxStudents: integer(\"max_students\").default(15),\n  currentStudents: integer(\"current_students\").default(0),\n  startDate: timestamp(\"start_date\"),\n  endDate: timestamp(\"end_date\"),\n  currentDay: integer(\"current_day\").default(1), // Qual DIA a turma está atualmente\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Class enrollments\nexport const classEnrollments = pgTable(\"class_enrollments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  classId: varchar(\"class_id\").references(() => classes.id).notNull(),\n  studentId: varchar(\"student_id\").references(() => students.id).notNull(),\n  enrollmentDate: timestamp(\"enrollment_date\").defaultNow(),\n  status: varchar(\"status\").default('active'), // active, dropped, completed\n  finalGrade: varchar(\"final_grade\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Schedule/Lessons table\nexport const lessons = pgTable(\"lessons\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  classId: varchar(\"class_id\").references(() => classes.id).notNull(),\n  title: varchar(\"title\").notNull(),\n  bookDay: integer(\"book_day\").notNull(), // DIA 1, DIA 2, etc. do livro\n  date: timestamp(\"date\").notNull(),\n  startTime: varchar(\"start_time\").notNull(),\n  endTime: varchar(\"end_time\").notNull(),\n  room: varchar(\"room\"),\n  status: varchar(\"status\").default('scheduled'), // scheduled, in_progress, completed, cancelled\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// User permissions table - permissões individuais por usuário baseadas nas páginas do menu\nexport const userPermissions = pgTable(\"user_permissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  permissionId: varchar(\"permission_id\").references(() => permissions.id, { onDelete: 'cascade' }).notNull(),\n  isGranted: boolean(\"is_granted\").default(true).notNull(), // permite negação explícita de permissão\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => [\n  index(\"UQ_user_permission\").on(table.userId, table.permissionId),\n]);\n\n// Relations - restauradas para manter compatibilidade\nexport const permissionCategoriesRelations = relations(permissionCategories, ({ many }) => ({\n  permissions: many(permissions),\n}));\n\nexport const permissionsRelations = relations(permissions, ({ one, many }) => ({\n  category: one(permissionCategories, {\n    fields: [permissions.categoryId],\n    references: [permissionCategories.id],\n  }),\n  rolePermissions: many(rolePermissions),\n  userPermissions: many(userPermissions),\n}));\n\nexport const rolesRelations = relations(roles, ({ many }) => ({\n  rolePermissions: many(rolePermissions),\n  users: many(users),\n}));\n\nexport const rolePermissionsRelations = relations(rolePermissions, ({ one }) => ({\n  role: one(roles, {\n    fields: [rolePermissions.roleId],\n    references: [roles.id],\n  }),\n  permission: one(permissions, {\n    fields: [rolePermissions.permissionId],\n    references: [permissions.id],\n  }),\n}));\n\nexport const userPermissionsRelations = relations(userPermissions, ({ one }) => ({\n  user: one(users, {\n    fields: [userPermissions.userId],\n    references: [users.id],\n  }),\n  permission: one(permissions, {\n    fields: [userPermissions.permissionId],\n    references: [permissions.id],\n  }),\n}));\n\nexport const usersRelations = relations(users, ({ one, many }) => ({\n  staff: one(staff, {\n    fields: [users.id],\n    references: [staff.userId],\n  }),\n  student: one(students, {\n    fields: [users.id],\n    references: [students.userId],\n  }),\n  role: one(roles, {\n    fields: [users.roleId],\n    references: [roles.id],\n  }),\n  teachingClasses: many(classes),\n  managedUnits: many(units),\n  userPermissions: many(userPermissions),\n}));\n\nexport const unitsRelations = relations(units, ({ one, many }) => ({\n  manager: one(users, {\n    fields: [units.managerId],\n    references: [users.id],\n  }),\n  staff: many(staff),\n  students: many(students),\n  classes: many(classes),\n}));\n\nexport const staffRelations = relations(staff, ({ one }) => ({\n  user: one(users, {\n    fields: [staff.userId],\n    references: [users.id],\n  }),\n  unit: one(units, {\n    fields: [staff.unitId],\n    references: [units.id],\n  }),\n}));\n\nexport const studentsRelations = relations(students, ({ one, many }) => ({\n  user: one(users, {\n    fields: [students.userId],\n    references: [users.id],\n  }),\n  unit: one(units, {\n    fields: [students.unitId],\n    references: [units.id],\n  }),\n  enrollments: many(classEnrollments),\n}));\n\nexport const coursesRelations = relations(courses, ({ many }) => ({\n  classes: many(classes),\n  books: many(books),\n}));\n\nexport const booksRelations = relations(books, ({ one, many }) => ({\n  course: one(courses, {\n    fields: [books.courseId],\n    references: [courses.id],\n  }),\n  classes: many(classes),\n}));\n\nexport const classesRelations = relations(classes, ({ one, many }) => ({\n  book: one(books, {\n    fields: [classes.bookId],\n    references: [books.id],\n  }),\n  teacher: one(users, {\n    fields: [classes.teacherId],\n    references: [users.id],\n  }),\n  unit: one(units, {\n    fields: [classes.unitId],\n    references: [units.id],\n  }),\n  enrollments: many(classEnrollments),\n  lessons: many(lessons),\n}));\n\nexport const classEnrollmentsRelations = relations(classEnrollments, ({ one }) => ({\n  class: one(classes, {\n    fields: [classEnrollments.classId],\n    references: [classes.id],\n  }),\n  student: one(students, {\n    fields: [classEnrollments.studentId],\n    references: [students.id],\n  }),\n}));\n\nexport const lessonsRelations = relations(lessons, ({ one }) => ({\n  class: one(classes, {\n    fields: [lessons.classId],\n    references: [classes.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUnitSchema = createInsertSchema(units).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertStaffSchema = createInsertSchema(staff).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertStudentSchema = createInsertSchema(students).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCourseSchema = createInsertSchema(courses).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertClassSchema = createInsertSchema(classes).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertLessonSchema = createInsertSchema(lessons).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertBookSchema = createInsertSchema(books).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPermissionCategorySchema = createInsertSchema(permissionCategories).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPermissionSchema = createInsertSchema(permissions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertRoleSchema = createInsertSchema(roles).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertRolePermissionSchema = createInsertSchema(rolePermissions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserPermissionSchema = createInsertSchema(userPermissions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type InsertUnit = z.infer<typeof insertUnitSchema>;\nexport type InsertStaff = z.infer<typeof insertStaffSchema>;\nexport type InsertStudent = z.infer<typeof insertStudentSchema>;\nexport type InsertCourse = z.infer<typeof insertCourseSchema>;\nexport type InsertClass = z.infer<typeof insertClassSchema>;\nexport type InsertLesson = z.infer<typeof insertLessonSchema>;\nexport type InsertBook = z.infer<typeof insertBookSchema>;\nexport type InsertPermissionCategory = z.infer<typeof insertPermissionCategorySchema>;\nexport type InsertPermission = z.infer<typeof insertPermissionSchema>;\nexport type InsertRole = z.infer<typeof insertRoleSchema>;\nexport type InsertRolePermission = z.infer<typeof insertRolePermissionSchema>;\nexport type InsertUserPermission = z.infer<typeof insertUserPermissionSchema>;\n\nexport type Unit = typeof units.$inferSelect;\nexport type Staff = typeof staff.$inferSelect;\nexport type Student = typeof students.$inferSelect;\nexport type Course = typeof courses.$inferSelect;\nexport type Book = typeof books.$inferSelect;\nexport type Class = typeof classes.$inferSelect;\nexport type Lesson = typeof lessons.$inferSelect;\nexport type ClassEnrollment = typeof classEnrollments.$inferSelect;\nexport type PermissionCategory = typeof permissionCategories.$inferSelect;\nexport type Permission = typeof permissions.$inferSelect;\nexport type Role = typeof roles.$inferSelect;\nexport type RolePermission = typeof rolePermissions.$inferSelect;\nexport type UserPermission = typeof userPermissions.$inferSelect;\n\n// Extended types with relations\nexport type UserWithRole = User & { role: Role | null };\nexport type UserWithPermissions = User & { \n  role: Role | null;\n  userPermissions: (UserPermission & { permission: Permission })[];\n};\nexport type StaffWithUser = Staff & { user: User };\nexport type StudentWithUser = Student & { user: User };\nexport type ClassWithDetails = Class & { \n  book: Book & { course: Course };\n  teacher: User; \n  unit: Unit;\n  enrollments: (ClassEnrollment & { student: StudentWithUser })[];\n};\n\n// Novo tipo para livros com detalhes do curso\nexport type BookWithDetails = Book & {\n  course: Course;\n  classes: Class[];\n};\n\n// Novo tipo para cursos com todos os detalhes\nexport type CourseWithDetails = Course & {\n  books: (Book & { classes: Class[] })[];\n};\n\n// Tipos para sistema de permissões\nexport type RoleWithPermissions = Role & {\n  rolePermissions: (RolePermission & { permission: Permission })[];\n};\n\nexport type PermissionsByCategory = Record<string, Permission[]>;\n\n// User Settings table\nexport const userSettings = pgTable(\"user_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  theme: varchar(\"theme\").default('light'), // 'light' | 'dark'\n  language: varchar(\"language\").default('pt-BR'),\n  timezone: varchar(\"timezone\").default('America/Sao_Paulo'),\n  dateFormat: varchar(\"date_format\").default('DD/MM/YYYY'),\n  currency: varchar(\"currency\").default('BRL'),\n  emailNotifications: boolean(\"email_notifications\").default(true),\n  pushNotifications: boolean(\"push_notifications\").default(false),\n  systemAlerts: boolean(\"system_alerts\").default(true),\n  lessonReminders: boolean(\"lesson_reminders\").default(true),\n  weeklyReports: boolean(\"weekly_reports\").default(false),\n  autoSave: boolean(\"auto_save\").default(true),\n  twoFactorEnabled: boolean(\"two_factor_enabled\").default(false),\n  sessionTimeout: integer(\"session_timeout\").default(30), // minutes\n  loginAlerts: boolean(\"login_alerts\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Support ticket priority and status enums\nexport const ticketPriorityEnum = pgEnum('ticket_priority', ['low', 'medium', 'high', 'urgent']);\nexport const ticketStatusEnum = pgEnum('ticket_status', ['open', 'in_progress', 'resolved', 'closed']);\n\n// Support Tickets table\nexport const supportTickets = pgTable(\"support_tickets\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  category: varchar(\"category\").notNull(),\n  priority: ticketPriorityEnum(\"priority\").default('medium'),\n  status: ticketStatusEnum(\"status\").default('open'),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  assignedTo: varchar(\"assigned_to\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Support ticket responses table\nexport const supportTicketResponses = pgTable(\"support_ticket_responses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  ticketId: varchar(\"ticket_id\").references(() => supportTickets.id, { onDelete: 'cascade' }).notNull(),\n  message: text(\"message\").notNull(),\n  isFromSupport: boolean(\"is_from_support\").default(false),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas for new tables\nexport const insertUserSettingsSchema = createInsertSchema(userSettings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSupportTicketSchema = createInsertSchema(supportTickets).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  userId: true,\n  assignedTo: true,\n  status: true,\n});\n\nexport const insertSupportTicketResponseSchema = createInsertSchema(supportTicketResponses).omit({\n  id: true,\n  createdAt: true,\n  ticketId: true,\n  userId: true,\n});\n\n// Types for new tables\nexport type InsertUserSettings = z.infer<typeof insertUserSettingsSchema>;\nexport type UserSettings = typeof userSettings.$inferSelect;\nexport type InsertSupportTicket = z.infer<typeof insertSupportTicketSchema>;\nexport type SupportTicket = typeof supportTickets.$inferSelect;\nexport type InsertSupportTicketResponse = z.infer<typeof insertSupportTicketResponseSchema>;\nexport type SupportTicketResponse = typeof supportTicketResponses.$inferSelect;\n\n// Extended types with relations\nexport type SupportTicketWithResponses = SupportTicket & {\n  responses: SupportTicketResponse[];\n  user: User;\n  assignedUser?: User;\n};\n","size_bytes":22058},"frontend/client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/contexts/ThemeContext\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/Landing\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport Units from \"@/pages/Units\";\nimport Staff from \"@/pages/Staff\";\nimport Students from \"@/pages/Students\";\nimport Courses from \"@/pages/Courses\";\nimport Schedule from \"@/pages/Schedule\";\nimport StudentArea from \"@/pages/StudentArea\";\nimport TeacherArea from \"@/pages/TeacherArea\";\nimport Financial from \"@/pages/Financial\";\nimport Permissions from \"@/pages/Permissions\";\nimport Settings from \"@/pages/Settings\";\nimport Support from \"@/pages/Support\";\nimport StudentProgress from \"@/pages/StudentProgress\";\nimport StudentSchedule from \"@/pages/StudentSchedule\";\nimport StudentWorkbook from \"@/pages/StudentWorkbook\";\nimport StudentExams from \"@/pages/StudentExams\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading, user } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {!isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : user?.role === 'student' ? (\n        <>\n          <Route path=\"/\" component={StudentArea} />\n          <Route path=\"/student-area\" component={StudentArea} />\n          <Route path=\"/support\" component={Support} />\n          <Route path=\"/aluno/workbook\" component={StudentWorkbook} />\n          <Route path=\"/aluno/provas\" component={StudentExams} />\n          <Route path=\"/aluno/cronograma\" component={StudentSchedule} />\n          <Route path=\"/aluno/progresso\" component={StudentProgress} />\n        </>\n      ) : (\n        <>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/units\" component={Units} />\n          <Route path=\"/staff\" component={Staff} />\n          <Route path=\"/students\" component={Students} />\n          <Route path=\"/courses\" component={Courses} />\n          <Route path=\"/schedule\" component={Schedule} />\n          <Route path=\"/professor\" component={TeacherArea} />\n          <Route path=\"/financial\" component={Financial} />\n          <Route path=\"/permissions\" component={Permissions} />\n          <Route path=\"/settings\" component={Settings} />\n          <Route path=\"/support\" component={Support} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <div className=\"theme-transition\">\n            <Toaster />\n            <Router />\n          </div>\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":3151},"frontend/client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 96.1%);\n  --foreground: hsl(0, 0%, 17.6%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(0, 0%, 17.6%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(0, 0%, 17.6%);\n  --primary: hsl(271, 100%, 59%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(21, 100%, 51%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(0, 0%, 88.2%);\n  --muted-foreground: hsl(0, 0%, 45%);\n  --accent: hsl(271, 100%, 95%);\n  --accent-foreground: hsl(0, 0%, 17.6%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(0, 0%, 88.2%);\n  --input: hsl(0, 0%, 88.2%);\n  --ring: hsl(271, 100%, 59%);\n  --chart-1: hsl(271, 100%, 59%);\n  --chart-2: hsl(21, 100%, 51%);\n  --chart-3: hsl(213, 94%, 68%);\n  --chart-4: hsl(151, 55%, 41%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(0, 0%, 96.1%);\n  --sidebar-foreground: hsl(0, 0%, 17.6%);\n  --sidebar-primary: hsl(271, 100%, 59%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(271, 100%, 95%);\n  --sidebar-accent-foreground: hsl(271, 100%, 59%);\n  --sidebar-border: hsl(0, 0%, 88.2%);\n  --sidebar-ring: hsl(271, 100%, 59%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 16px;\n  --shadow-2xs: 0 1px 2px rgba(0, 0, 0, 0.05);\n  --shadow-xs: 0 1px 3px rgba(0, 0, 0, 0.08);\n  --shadow-sm: 0 2px 4px rgba(0, 0, 0, 0.06);\n  --shadow: 0 4px 8px rgba(0, 0, 0, 0.08);\n  --shadow-md: 0 6px 12px rgba(0, 0, 0, 0.1);\n  --shadow-lg: 0 8px 16px rgba(0, 0, 0, 0.12);\n  --shadow-xl: 0 12px 24px rgba(0, 0, 0, 0.15);\n  --shadow-2xl: 0 16px 32px rgba(0, 0, 0, 0.18);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 9%);\n  --foreground: hsl(0, 0%, 98%);\n  --card: hsl(0, 0%, 12%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --popover: hsl(0, 0%, 12%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --primary: hsl(271, 100%, 70%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(21, 100%, 60%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(0, 0%, 20%);\n  --muted-foreground: hsl(0, 0%, 65%);\n  --accent: hsl(0, 0%, 15%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62%, 30%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(0, 0%, 20%);\n  --input: hsl(0, 0%, 20%);\n  --ring: hsl(271, 100%, 70%);\n  --chart-1: hsl(271, 100%, 70%);\n  --chart-2: hsl(21, 100%, 60%);\n  --chart-3: hsl(213, 94%, 68%);\n  --chart-4: hsl(151, 55%, 41%);\n  --chart-5: hsl(341, 75%, 55%);\n  --sidebar: hsl(0, 0%, 12%);\n  --sidebar-foreground: hsl(0, 0%, 98%);\n  --sidebar-primary: hsl(271, 100%, 70%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(0, 0%, 15%);\n  --sidebar-accent-foreground: hsl(0, 0%, 98%);\n  --sidebar-border: hsl(0, 0%, 20%);\n  --sidebar-ring: hsl(271, 100%, 70%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 16px;\n  --shadow-2xs: 0px 1px 2px 0px rgba(0, 0, 0, 0.3);\n  --shadow-xs: 0px 1px 3px 0px rgba(0, 0, 0, 0.4);\n  --shadow-sm: 0px 1px 3px 0px rgba(0, 0, 0, 0.4), 0px 1px 2px -1px rgba(0, 0, 0, 0.4);\n  --shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.4), 0px 1px 2px -1px rgba(0, 0, 0, 0.4);\n  --shadow-md: 0px 4px 6px -1px rgba(0, 0, 0, 0.4), 0px 2px 4px -2px rgba(0, 0, 0, 0.4);\n  --shadow-lg: 0px 10px 15px -3px rgba(0, 0, 0, 0.4), 0px 4px 6px -4px rgba(0, 0, 0, 0.4);\n  --shadow-xl: 0px 20px 25px -5px rgba(0, 0, 0, 0.4), 0px 8px 10px -6px rgba(0, 0, 0, 0.4);\n  --shadow-2xl: 0px 25px 50px -12px rgba(0, 0, 0, 0.5);\n}\n\n.glassmorphism {\n  background: rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(15px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);\n}\n\n.glassmorphism-card {\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(20px);\n  border: 1px solid rgba(255, 255, 255, 0.3);\n  box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.1);\n}\n\n.dark .glassmorphism {\n  background: rgba(15, 23, 42, 0.8);\n  backdrop-filter: blur(20px);\n  border: 1px solid rgba(148, 163, 184, 0.1);\n  box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.6);\n}\n\n.dark .glassmorphism-card {\n  background: rgba(15, 23, 42, 0.9);\n  backdrop-filter: blur(20px);\n  border: 1px solid rgba(148, 163, 184, 0.2);\n  box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.6);\n}\n\n.theme-transition {\n  transition: background-color 0.3s ease, border-color 0.3s ease, color 0.3s ease;\n}\n\n.sidebar-hover:hover {\n  background: linear-gradient(135deg, rgba(177, 48, 255, 0.15), rgba(255, 101, 6, 0.1));\n  border-radius: var(--radius);\n}\n\n.card-hover:hover {\n  transform: translateY(-4px);\n  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);\n}\n\n.transition-smooth {\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.gradient-primary {\n  background: linear-gradient(135deg, #b130ff, #d850ff);\n}\n\n.gradient-secondary {\n  background: linear-gradient(135deg, #ff6506, #ff8533);\n}\n\n.gradient-accent {\n  background: linear-gradient(135deg, #b130ff, #ff6506);\n}\n\n.text-gradient {\n  background: linear-gradient(135deg, #b130ff, #ff6506);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n}\n\n.icon-glow {\n  filter: drop-shadow(0 0 8px rgba(177, 48, 255, 0.3));\n}\n\n.neon-border {\n  border: 1px solid transparent;\n  background: linear-gradient(var(--background), var(--background)) padding-box,\n              linear-gradient(135deg, #b130ff, #ff6506) border-box;\n}\n\n.button-hover-effect {\n  position: relative;\n  overflow: hidden;\n  transition: all 0.3s ease;\n}\n\n.button-hover-effect::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: -100%;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\n  transition: left 0.5s ease;\n}\n\n.button-hover-effect:hover::before {\n  left: 100%;\n}\n\n.button-hover-effect:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);\n}\n\n.navbar-shadow {\n  box-shadow: 0 2px 8px -2px rgba(0, 0, 0, 0.08), 0 1px 2px -1px rgba(0, 0, 0, 0.04);\n}\n\n.dark .navbar-shadow {\n  box-shadow: 0 2px 8px -2px rgba(0, 0, 0, 0.3), 0 1px 2px -1px rgba(0, 0, 0, 0.2);\n}\n\n/* Força z-index máximo para dropdowns */\n[data-radix-popper-content-wrapper] {\n  z-index: 999999 !important;\n}\n\n[data-radix-hover-card-content] {\n  z-index: 999999 !important;\n}\n\n/* Garante que hover cards apareçam sobre outros elementos */\n.hover-card-content {\n  z-index: 999999 !important;\n  position: fixed !important;\n}\n\n@keyframes twinkle {\n  0%, 100% { opacity: 0.3; transform: scale(1); }\n  50% { opacity: 1; transform: scale(1.2); }\n}\n\n@keyframes float {\n  0%, 100% { transform: translateY(0px); }\n  50% { transform: translateY(-10px); }\n}\n\n@keyframes slideInUp {\n  from {\n    opacity: 0;\n    transform: translateY(30px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes fadeInScale {\n  from {\n    opacity: 0;\n    transform: scale(0.95);\n  }\n  to {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\n\n.animate-twinkle {\n  animation: twinkle 2s ease-in-out infinite;\n}\n\n.animate-float {\n  animation: float 3s ease-in-out infinite;\n}\n\n.animate-slide-in-up {\n  animation: slideInUp 0.6s ease-out;\n}\n\n.animate-fade-in-scale {\n  animation: fadeInScale 0.5s ease-out;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n","size_bytes":7665},"frontend/client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"frontend/client/src/components/ClassModal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { insertClassSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Loader2, Trash2 } from \"lucide-react\";\n\n// Extended schema for class form validation\nconst classFormSchema = insertClassSchema.extend({\n  name: z.string().min(1, \"Nome da turma é obrigatório\"),\n  bookId: z.string().min(1, \"Livro é obrigatório\"),\n  teacherId: z.string().min(1, \"Professor é obrigatório\"),\n  unitId: z.string().min(1, \"Unidade é obrigatória\"),\n  dayOfWeek: z.coerce.number().min(0).max(6, \"Dia da semana deve ser entre 0-6\"),\n  startTime: z.string().min(1, \"Horário de início é obrigatório\"),\n  endTime: z.string().min(1, \"Horário de fim é obrigatório\"),\n  maxStudents: z.coerce.number().min(1, \"Máximo de alunos deve ser pelo menos 1\"),\n}).refine((data) => {\n  if (data.startTime && data.endTime) {\n    const start = data.startTime.split(':').map(Number);\n    const end = data.endTime.split(':').map(Number);\n    const startMinutes = start[0] * 60 + start[1];\n    const endMinutes = end[0] * 60 + end[1];\n    return endMinutes > startMinutes;\n  }\n  return true;\n}, {\n  message: \"Horário de fim deve ser posterior ao horário de início\",\n  path: [\"endTime\"],\n});\n\ntype ClassFormData = z.infer<typeof classFormSchema>;\n\ninterface ClassModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  classToEdit?: any; // Existing class data when editing\n}\n\nconst daysOfWeek = [\n  { value: 0, label: \"Domingo\" },\n  { value: 1, label: \"Segunda-feira\" },\n  { value: 2, label: \"Terça-feira\" },\n  { value: 3, label: \"Quarta-feira\" },\n  { value: 4, label: \"Quinta-feira\" },\n  { value: 5, label: \"Sexta-feira\" },\n  { value: 6, label: \"Sábado\" },\n];\n\nexport default function ClassModal({ \n  isOpen, \n  onClose, \n  classToEdit\n}: ClassModalProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);\n\n  const isEditing = !!classToEdit;\n\n  // Fetch books for dropdown\n  const { data: books = [], isLoading: booksLoading } = useQuery<any[]>({\n    queryKey: [\"/api/books\"],\n    enabled: isOpen,\n  });\n\n  // Fetch teachers for dropdown\n  const { data: staff = [], isLoading: staffLoading } = useQuery<any[]>({\n    queryKey: [\"/api/staff\"],\n    enabled: isOpen,\n  });\n\n  // Fetch units for dropdown\n  const { data: units = [], isLoading: unitsLoading } = useQuery<any[]>({\n    queryKey: [\"/api/units\"],\n    enabled: isOpen,\n  });\n\n  // Filter teachers from staff\n  const teachers = staff.filter(s => s.user?.role === 'teacher');\n\n  const form = useForm<ClassFormData>({\n    resolver: zodResolver(classFormSchema),\n    defaultValues: {\n      name: \"\",\n      bookId: \"\",\n      teacherId: \"\",\n      unitId: \"\",\n      dayOfWeek: 1, // Monday by default\n      startTime: \"\",\n      endTime: \"\",\n      room: \"\",\n      maxStudents: 15,\n      currentStudents: 0,\n    },\n  });\n\n  // Reset form when modal opens/closes or when classToEdit changes\n  useEffect(() => {\n    if (isOpen) {\n      if (classToEdit) {\n        // Editing existing class\n        form.reset({\n          name: classToEdit.name,\n          bookId: classToEdit.bookId,\n          teacherId: classToEdit.teacherId,\n          unitId: classToEdit.unitId,\n          dayOfWeek: classToEdit.dayOfWeek,\n          startTime: classToEdit.startTime,\n          endTime: classToEdit.endTime,\n          room: classToEdit.room || \"\",\n          maxStudents: classToEdit.maxStudents || 15,\n          currentStudents: classToEdit.currentStudents || 0,\n        });\n      } else {\n        // Creating new class\n        form.reset({\n          name: \"\",\n          bookId: \"\",\n          teacherId: \"\",\n          unitId: \"\",\n          dayOfWeek: 1,\n          startTime: \"\",\n          endTime: \"\",\n          room: \"\",\n          maxStudents: 15,\n          currentStudents: 0,\n        });\n      }\n    }\n  }, [isOpen, classToEdit, form]);\n\n  // Create class mutation\n  const createClassMutation = useMutation({\n    mutationFn: async (data: ClassFormData) => {\n      return await apiRequest(\"POST\", \"/api/classes\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/classes\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/schedule/admin\"] });\n      toast({\n        title: \"Sucesso!\",\n        description: \"Turma criada com sucesso.\",\n      });\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Falha ao criar turma. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update class mutation\n  const updateClassMutation = useMutation({\n    mutationFn: async (data: ClassFormData) => {\n      return await apiRequest(\"PUT\", `/api/classes/${classToEdit.id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/classes\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/schedule/admin\"] });\n      toast({\n        title: \"Sucesso!\",\n        description: \"Turma atualizada com sucesso.\",\n      });\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Falha ao atualizar turma. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete class mutation\n  const deleteClassMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"DELETE\", `/api/classes/${classToEdit.id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/classes\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/schedule/admin\"] });\n      toast({\n        title: \"Sucesso!\",\n        description: \"Turma excluída com sucesso.\",\n      });\n      setShowDeleteConfirm(false);\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Falha ao excluir turma. Tente novamente.\",\n        variant: \"destructive\",\n      });\n      setShowDeleteConfirm(false);\n    },\n  });\n\n  const onSubmit = async (data: ClassFormData) => {\n    if (isEditing) {\n      updateClassMutation.mutate(data);\n    } else {\n      createClassMutation.mutate(data);\n    }\n  };\n\n  const handleClose = () => {\n    form.reset();\n    setShowDeleteConfirm(false);\n    onClose();\n  };\n\n  const handleDeleteConfirm = () => {\n    deleteClassMutation.mutate();\n  };\n\n  const isSubmitting = createClassMutation.isPending || updateClassMutation.isPending || deleteClassMutation.isPending;\n\n  return (\n    <>\n      <Dialog open={isOpen} onOpenChange={handleClose}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>\n              {isEditing ? \"Editar Turma\" : \"Nova Turma\"}\n            </DialogTitle>\n          </DialogHeader>\n\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {/* Class Name */}\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nome da Turma</FormLabel>\n                      <FormControl>\n                        <Input {...field} data-testid=\"input-class-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Book Selection */}\n                <FormField\n                  control={form.control}\n                  name=\"bookId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Livro</FormLabel>\n                      <FormControl>\n                        <Select \n                          value={field.value} \n                          onValueChange={field.onChange}\n                          disabled={booksLoading}\n                          data-testid=\"select-book\"\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Selecione um livro\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {books.map((book: any) => (\n                              <SelectItem key={book.id} value={book.id}>\n                                {book.name} - {book.course?.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Teacher Selection */}\n                <FormField\n                  control={form.control}\n                  name=\"teacherId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Professor</FormLabel>\n                      <FormControl>\n                        <Select \n                          value={field.value} \n                          onValueChange={field.onChange}\n                          disabled={staffLoading}\n                          data-testid=\"select-teacher\"\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Selecione um professor\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {teachers.map((teacher: any) => (\n                              <SelectItem key={teacher.user.id} value={teacher.user.id}>\n                                {teacher.user.firstName} {teacher.user.lastName}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Unit Selection */}\n                <FormField\n                  control={form.control}\n                  name=\"unitId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Unidade</FormLabel>\n                      <FormControl>\n                        <Select \n                          value={field.value} \n                          onValueChange={field.onChange}\n                          disabled={unitsLoading}\n                          data-testid=\"select-unit\"\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Selecione uma unidade\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {units.map((unit: any) => (\n                              <SelectItem key={unit.id} value={unit.id}>\n                                {unit.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Day of Week */}\n                <FormField\n                  control={form.control}\n                  name=\"dayOfWeek\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Dia da Semana</FormLabel>\n                      <FormControl>\n                        <Select \n                          value={field.value?.toString()} \n                          onValueChange={(value) => field.onChange(parseInt(value))}\n                          data-testid=\"select-day-of-week\"\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Selecione o dia\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {daysOfWeek.map((day) => (\n                              <SelectItem key={day.value} value={day.value.toString()}>\n                                {day.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Start Time */}\n                <FormField\n                  control={form.control}\n                  name=\"startTime\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Horário de Início</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"time\" \n                          {...field}\n                          data-testid=\"input-start-time\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* End Time */}\n                <FormField\n                  control={form.control}\n                  name=\"endTime\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Horário de Fim</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"time\" \n                          {...field}\n                          data-testid=\"input-end-time\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Room */}\n                <FormField\n                  control={form.control}\n                  name=\"room\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Sala</FormLabel>\n                      <FormControl>\n                        <Input {...field} value={field.value || \"\"} data-testid=\"input-room\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Max Students */}\n                <FormField\n                  control={form.control}\n                  name=\"maxStudents\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Máximo de Alunos</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          min=\"1\"\n                          {...field}\n                          data-testid=\"input-max-students\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              {/* Form Actions */}\n              <div className=\"flex justify-between pt-4\">\n                <div>\n                  {isEditing && (\n                    <Button\n                      type=\"button\"\n                      variant=\"destructive\"\n                      onClick={() => setShowDeleteConfirm(true)}\n                      disabled={isSubmitting}\n                      data-testid=\"button-delete-class\"\n                    >\n                      <Trash2 className=\"mr-2 h-4 w-4\" />\n                      Excluir Turma\n                    </Button>\n                  )}\n                </div>\n                <div className=\"flex space-x-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={handleClose}\n                    disabled={isSubmitting}\n                    data-testid=\"button-cancel\"\n                  >\n                    Cancelar\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={isSubmitting}\n                    data-testid=\"button-save-class\"\n                  >\n                    {isSubmitting ? (\n                      <>\n                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                        {deleteClassMutation.isPending ? \"Excluindo...\" : (isEditing ? \"Atualizando...\" : \"Criando...\")}\n                      </>\n                    ) : (\n                      isEditing ? \"Atualizar\" : \"Criar Turma\"\n                    )}\n                  </Button>\n                </div>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={showDeleteConfirm} onOpenChange={setShowDeleteConfirm}>\n        <AlertDialogContent data-testid=\"dialog-delete-confirm\">\n          <AlertDialogHeader>\n            <AlertDialogTitle>Confirmar Exclusão</AlertDialogTitle>\n            <AlertDialogDescription>\n              Tem certeza de que deseja excluir a turma \"{classToEdit?.name}\"? \n              Esta ação não pode ser desfeita e todas as aulas relacionadas também serão excluídas.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\" disabled={deleteClassMutation.isPending}>\n              Cancelar\n            </AlertDialogCancel>\n            <AlertDialogAction\n              onClick={handleDeleteConfirm}\n              disabled={deleteClassMutation.isPending}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n              data-testid=\"button-confirm-delete\"\n            >\n              {deleteClassMutation.isPending ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Excluindo...\n                </>\n              ) : (\n                \"Excluir\"\n              )}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n}","size_bytes":19334},"frontend/client/src/components/Layout.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport Sidebar from \"@/components/Sidebar\";\nimport StudentLayout from \"@/components/StudentLayout\";\nimport { Button } from \"@/components/ui/button\";\nimport { useState, useEffect } from \"react\";\nimport { Menu, Settings, Bell, LogOut } from \"lucide-react\";\nimport { ThemeToggle } from \"@/components/ThemeToggle\";\nimport { \n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation, useRoute } from 'wouter';\n\n\ninterface LayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function Layout({ children }: LayoutProps) {\n  const { user, isLoading, isAuthenticated } = useAuth();\n  const [sidebarExpanded, setSidebarExpanded] = useState(true);\n  const [isMobile, setIsMobile] = useState(false);\n  const [location] = useLocation();\n\n  // Use StudentLayout for students\n  if (user?.role === 'student') {\n    return <StudentLayout>{children}</StudentLayout>;\n  }\n  const { toast } = useToast();\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch('/api/auth/logout', {\n        method: 'POST',\n        credentials: 'include',\n      });\n      if (!response.ok) {\n        throw new Error('Erro ao fazer logout');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Logout realizado\",\n        description: \"Você foi desconectado com sucesso.\",\n      });\n      // Redirecionar para a página de login\n      window.location.href = '/';\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erro no logout\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  // Detectar se é mobile\n  useEffect(() => {\n    const checkMobile = () => {\n      setIsMobile(window.innerWidth < 768);\n      // No mobile, sidebar começa contraído\n      if (window.innerWidth < 768) {\n        setSidebarExpanded(false);\n      }\n    };\n\n    checkMobile();\n    window.addEventListener('resize', checkMobile);\n    return () => window.removeEventListener('resize', checkMobile);\n  }, []);\n\n  const toggleSidebar = () => {\n    setSidebarExpanded(!sidebarExpanded);\n  };\n\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <div className=\"w-12 h-12 bg-primary rounded-2xl flex items-center justify-center mx-auto mb-4\">\n            <i className=\"fas fa-graduation-cap text-primary-foreground text-xl animate-pulse\"></i>\n          </div>\n          <p className=\"text-muted-foreground\">Carregando...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null; // Will be handled by the routing\n  }\n\n  \n\n\n  return (\n    <div className=\"flex h-screen bg-background theme-transition\">\n      <Sidebar expanded={sidebarExpanded} isMobile={isMobile} />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <div className=\"flex justify-between items-center p-4 bg-gray-50/50 border-b border-gray-100/80 navbar-shadow backdrop-blur-sm dark:bg-gray-900/50 dark:border-gray-800/50 theme-transition\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={toggleSidebar}\n            className=\"hover:bg-primary/10 transition-colors\"\n            data-testid=\"button-toggle-sidebar\"\n          >\n            <Menu className=\"h-5 w-5\" />\n          </Button>\n\n          {user && (\n            <div className=\"flex items-center space-x-3\">\n              <ThemeToggle />\n              <DropdownMenu>\n                <DropdownMenuTrigger className=\"flex items-center space-x-3 hover:bg-accent/50 rounded-lg p-2 transition-colors cursor-pointer focus:outline-none\" data-testid=\"dropdown-user\">\n                <div className=\"text-right\">\n                  <p className=\"text-sm font-medium text-foreground\">\n                    {user.firstName} {user.lastName}\n                  </p>\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                      {user.role === 'admin' && 'Administrador'}\n                      {user.role === 'teacher' && 'Professor'}\n                      {user.role === 'secretary' && 'Secretário'}\n                      {user.role === 'student' && 'Estudante'}\n                    </p>\n                </div>\n                <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n                  <span className=\"text-primary-foreground text-sm font-medium\">\n                    {user.firstName?.[0]}{user.lastName?.[0]}\n                  </span>\n                </div>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\" className=\"w-48\" style={{ zIndex: 999999 }}>\n                <DropdownMenuItem className=\"cursor-default\" data-testid=\"menu-item-settings\">\n                  <Settings className=\"mr-2 h-4 w-4\" />\n                  <span>Configurações</span>\n                </DropdownMenuItem>\n                <DropdownMenuItem className=\"cursor-default\" data-testid=\"menu-item-notifications\">\n                  <Bell className=\"mr-2 h-4 w-4\" />\n                  <span>Notificações</span>\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem\n                  className=\"cursor-pointer\"\n                  data-testid=\"menu-item-logout\"\n                  onClick={handleLogout}\n                >\n                  <LogOut className=\"mr-2 h-4 w-4\" />\n                  <span>Sair</span>\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n              </DropdownMenu>\n            </div>\n          )}\n        </div>\n        <main className=\"flex-1 overflow-auto p-6 bg-background theme-transition\">\n          {children}\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":6081},"frontend/client/src/components/LessonModal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { insertLessonSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { CalendarIcon, Loader2 } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { format } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\n\n// Extended schema for lesson form validation\nconst lessonFormSchema = insertLessonSchema.extend({\n  date: z.date({ required_error: \"Data é obrigatória\" }),\n  startTime: z.string().min(1, \"Horário de início é obrigatório\"),\n  endTime: z.string().min(1, \"Horário de fim é obrigatório\"),\n  bookDay: z.coerce.number().min(1, \"Dia do livro deve ser pelo menos 1\"),\n}).refine((data) => {\n  if (data.startTime && data.endTime) {\n    const start = data.startTime.split(':').map(Number);\n    const end = data.endTime.split(':').map(Number);\n    const startMinutes = start[0] * 60 + start[1];\n    const endMinutes = end[0] * 60 + end[1];\n    return endMinutes > startMinutes;\n  }\n  return true;\n}, {\n  message: \"Horário de fim deve ser posterior ao horário de início\",\n  path: [\"endTime\"],\n});\n\ntype LessonFormData = z.infer<typeof lessonFormSchema>;\n\ninterface LessonModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  lessonToEdit?: any; // Existing lesson data when editing\n  defaultClassId?: string; // Pre-select a class when creating from class context\n}\n\nexport default function LessonModal({ \n  isOpen, \n  onClose, \n  lessonToEdit, \n  defaultClassId \n}: LessonModalProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [conflictCheck, setConflictCheck] = useState<{ hasConflict: boolean; conflictingLesson?: any } | null>(null);\n  const [checkingConflict, setCheckingConflict] = useState(false);\n\n  const isEditing = !!lessonToEdit;\n\n  // Fetch classes (filtered by teacher if user is a teacher)\n  const { data: classes = [], isLoading: classesLoading } = useQuery<any[]>({\n    queryKey: user?.role === 'teacher' \n      ? [\"/api/classes/teacher\", user.id]\n      : [\"/api/classes\"],\n    enabled: isOpen,\n  });\n\n  const form = useForm<LessonFormData>({\n    resolver: zodResolver(lessonFormSchema),\n    defaultValues: {\n      classId: defaultClassId || \"\",\n      title: \"\",\n      bookDay: 1,\n      date: new Date(),\n      startTime: \"\",\n      endTime: \"\",\n      room: \"\",\n      status: \"scheduled\",\n      notes: \"\",\n    },\n  });\n\n  // Reset form when modal opens/closes or when lessonToEdit changes\n  useEffect(() => {\n    if (isOpen) {\n      if (lessonToEdit) {\n        // Editing existing lesson\n        form.reset({\n          classId: lessonToEdit.classId,\n          title: lessonToEdit.title,\n          bookDay: lessonToEdit.bookDay,\n          date: new Date(lessonToEdit.date),\n          startTime: lessonToEdit.startTime,\n          endTime: lessonToEdit.endTime,\n          room: lessonToEdit.room || \"\",\n          status: lessonToEdit.status,\n          notes: lessonToEdit.notes || \"\",\n        });\n      } else {\n        // Creating new lesson\n        form.reset({\n          classId: defaultClassId || \"\",\n          title: \"\",\n          bookDay: 1,\n          date: new Date(),\n          startTime: \"\",\n          endTime: \"\",\n          room: \"\",\n          status: \"scheduled\",\n          notes: \"\",\n        });\n      }\n      setConflictCheck(null);\n    }\n  }, [isOpen, lessonToEdit, defaultClassId, form]);\n\n  // Check for conflicts when time fields change\n  const checkConflicts = async (classId: string, date: Date, startTime: string, endTime: string) => {\n    if (!classId || !startTime || !endTime) {\n      setConflictCheck(null);\n      return;\n    }\n\n    // Get teacher ID from selected class\n    const selectedClass = classes.find((cls: any) => cls.id === classId);\n    if (!selectedClass?.teacher?.id) {\n      setConflictCheck(null);\n      return;\n    }\n\n    setCheckingConflict(true);\n    try {\n      const conflictResult = await apiRequest('POST', '/api/lessons/check-conflicts', {\n        teacherId: selectedClass.teacher.id,\n        date: date.toISOString(),\n        startTime,\n        endTime,\n        excludeLessonId: lessonToEdit?.id\n      }) as { hasConflict: boolean; conflictingLesson?: any };\n      setConflictCheck(conflictResult);\n    } catch (error) {\n      console.error('Error checking conflicts:', error);\n      setConflictCheck(null);\n    } finally {\n      setCheckingConflict(false);\n    }\n  };\n\n  // Watch form fields for conflict checking\n  const watchedClassId = form.watch(\"classId\");\n  const watchedDate = form.watch(\"date\");\n  const watchedStartTime = form.watch(\"startTime\");\n  const watchedEndTime = form.watch(\"endTime\");\n\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      checkConflicts(watchedClassId, watchedDate, watchedStartTime, watchedEndTime);\n    }, 500); // Debounce conflict checking\n\n    return () => clearTimeout(timeoutId);\n  }, [watchedClassId, watchedDate, watchedStartTime, watchedEndTime, classes]);\n\n  // Create lesson mutation\n  const createLessonMutation = useMutation({\n    mutationFn: async (data: LessonFormData) => {\n      const lessonData = {\n        ...data,\n        date: data.date.toISOString(),\n      };\n      return await apiRequest(\"POST\", \"/api/lessons\", lessonData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/lessons\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/lessons/today\"] });\n      // Invalidate teacher queries with correct key format\n      if (user?.role === 'teacher') {\n        queryClient.invalidateQueries({ queryKey: [\"/api/lessons/teacher\", user.id] });\n      } else {\n        queryClient.invalidateQueries({ queryKey: [\"/api/lessons/teacher\"] });\n      }\n      toast({\n        title: \"Sucesso!\",\n        description: \"Aula criada com sucesso.\",\n      });\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Falha ao criar aula. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update lesson mutation\n  const updateLessonMutation = useMutation({\n    mutationFn: async (data: LessonFormData) => {\n      const lessonData = {\n        ...data,\n        date: data.date.toISOString(),\n      };\n      return await apiRequest(\"PUT\", `/api/lessons/${lessonToEdit.id}`, lessonData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/lessons\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/lessons/today\"] });\n      // Invalidate teacher queries with correct key format\n      if (user?.role === 'teacher') {\n        queryClient.invalidateQueries({ queryKey: [\"/api/lessons/teacher\", user.id] });\n      } else {\n        queryClient.invalidateQueries({ queryKey: [\"/api/lessons/teacher\"] });\n      }\n      toast({\n        title: \"Sucesso!\",\n        description: \"Aula atualizada com sucesso.\",\n      });\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Falha ao atualizar aula. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = async (data: LessonFormData) => {\n    // Final conflict check before submission\n    if (conflictCheck?.hasConflict) {\n      toast({\n        title: \"Conflito de horário\",\n        description: \"Resolve o conflito de horário antes de salvar.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (isEditing) {\n      updateLessonMutation.mutate(data);\n    } else {\n      createLessonMutation.mutate(data);\n    }\n  };\n\n  const handleClose = () => {\n    form.reset();\n    setConflictCheck(null);\n    onClose();\n  };\n\n  const isSubmitting = createLessonMutation.isPending || updateLessonMutation.isPending;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>\n            {isEditing ? \"Editar Aula\" : \"Nova Aula\"}\n          </DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {/* Class Selection */}\n              <FormField\n                control={form.control}\n                name=\"classId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Turma</FormLabel>\n                    <FormControl>\n                      <Select \n                        value={field.value} \n                        onValueChange={field.onChange}\n                        disabled={classesLoading}\n                        data-testid=\"select-class\"\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Selecione uma turma\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {(classes as any[]).map((cls: any) => (\n                            <SelectItem key={cls.id} value={cls.id}>\n                              {cls.name} - {cls.book?.name}\n                              {user?.role !== 'teacher' && cls.teacher && (\n                                <span className=\"text-sm text-muted-foreground ml-2\">\n                                  ({cls.teacher.firstName} {cls.teacher.lastName})\n                                </span>\n                              )}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Title */}\n              <FormField\n                control={form.control}\n                name=\"title\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Título da Aula</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-lesson-title\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Book Day */}\n              <FormField\n                control={form.control}\n                name=\"bookDay\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Dia do Livro</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        min=\"1\"\n                        {...field}\n                        data-testid=\"input-book-day\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Date */}\n              <FormField\n                control={form.control}\n                name=\"date\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Data</FormLabel>\n                    <FormControl>\n                      <Popover>\n                        <PopoverTrigger asChild>\n                          <Button\n                            variant=\"outline\"\n                            className={cn(\n                              \"w-full justify-start text-left font-normal\",\n                              !field.value && \"text-muted-foreground\"\n                            )}\n                            data-testid=\"input-lesson-date\"\n                          >\n                            <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                            {field.value ? (\n                              format(field.value, \"PPP\", { locale: ptBR })\n                            ) : (\n                              \"Selecione uma data\"\n                            )}\n                          </Button>\n                        </PopoverTrigger>\n                        <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                          <Calendar\n                            mode=\"single\"\n                            selected={field.value}\n                            onSelect={field.onChange}\n                            initialFocus\n                          />\n                        </PopoverContent>\n                      </Popover>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Start Time */}\n              <FormField\n                control={form.control}\n                name=\"startTime\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Horário de Início</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"time\" \n                        {...field}\n                        data-testid=\"input-start-time\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* End Time */}\n              <FormField\n                control={form.control}\n                name=\"endTime\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Horário de Fim</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"time\" \n                        {...field}\n                        data-testid=\"input-end-time\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Room */}\n              <FormField\n                control={form.control}\n                name=\"room\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Sala</FormLabel>\n                    <FormControl>\n                      <Input {...field} value={field.value || \"\"} data-testid=\"input-room\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Status */}\n              <FormField\n                control={form.control}\n                name=\"status\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Status</FormLabel>\n                    <FormControl>\n                      <Select \n                        value={field.value || \"scheduled\"} \n                        onValueChange={field.onChange}\n                        data-testid=\"select-status\"\n                      >\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"scheduled\">Agendado</SelectItem>\n                          <SelectItem value=\"in_progress\">Em andamento</SelectItem>\n                          <SelectItem value=\"completed\">Concluído</SelectItem>\n                          <SelectItem value=\"cancelled\">Cancelado</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Notes */}\n            <FormField\n              control={form.control}\n              name=\"notes\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Observações</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      {...field} \n                      value={field.value || \"\"}\n                      rows={3}\n                      data-testid=\"textarea-notes\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Conflict Warning */}\n            {checkingConflict && (\n              <div className=\"flex items-center space-x-2 text-muted-foreground\">\n                <Loader2 className=\"h-4 w-4 animate-spin\" />\n                <span>Verificando conflitos...</span>\n              </div>\n            )}\n\n            {conflictCheck?.hasConflict && (\n              <div className=\"p-3 rounded-md bg-destructive/10 border border-destructive/20\">\n                <div className=\"flex items-start space-x-2\">\n                  <div className=\"text-destructive\">⚠️</div>\n                  <div>\n                    <h4 className=\"font-medium text-destructive\">Conflito de horário detectado</h4>\n                    <p className=\"text-sm text-destructive/80 mt-1\">\n                      Já existe uma aula \"{conflictCheck.conflictingLesson?.title}\" \n                      no horário {conflictCheck.conflictingLesson?.startTime}-{conflictCheck.conflictingLesson?.endTime}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Form Actions */}\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={handleClose}\n                disabled={isSubmitting}\n                data-testid=\"button-cancel\"\n              >\n                Cancelar\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={isSubmitting || conflictCheck?.hasConflict}\n                data-testid=\"button-save-lesson\"\n              >\n                {isSubmitting ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    {isEditing ? \"Atualizando...\" : \"Criando...\"}\n                  </>\n                ) : (\n                  isEditing ? \"Atualizar\" : \"Criar Aula\"\n                )}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":19134},"frontend/client/src/components/PageLoader.tsx":{"content":"\nimport { useState, useEffect } from 'react';\n\ninterface PageLoaderProps {\n  children: React.ReactNode;\n  delay?: number;\n}\n\nexport function PageLoader({ children, delay = 30 }: PageLoaderProps) {\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setIsVisible(true);\n    }, delay);\n\n    return () => clearTimeout(timer);\n  }, [delay]);\n\n  return (\n    <div \n      className={`transition-all duration-300 ease-out ${\n        isVisible \n          ? 'opacity-100 translate-y-0' \n          : 'opacity-0 translate-y-8'\n      }`}\n    >\n      {children}\n    </div>\n  );\n}\n\ninterface FadeInProps {\n  children: React.ReactNode;\n  delay?: number;\n  direction?: 'up' | 'down' | 'left' | 'right';\n  className?: string;\n}\n\nexport function FadeIn({ \n  children, \n  delay = 0, \n  direction = 'up',\n  className = '' \n}: FadeInProps) {\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setIsVisible(true);\n    }, delay);\n\n    return () => clearTimeout(timer);\n  }, [delay]);\n\n  const getTransform = () => {\n    if (isVisible) return 'translate-x-0 translate-y-0';\n    \n    switch (direction) {\n      case 'up': return 'translate-y-8';\n      case 'down': return '-translate-y-8';\n      case 'left': return 'translate-x-8';\n      case 'right': return '-translate-x-8';\n      default: return 'translate-y-8';\n    }\n  };\n\n  return (\n    <div \n      className={`transition-all duration-300 ease-out ${\n        isVisible \n          ? 'opacity-100' \n          : 'opacity-0'\n      } ${getTransform()} ${className}`}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport function StaggeredFadeIn({ \n  children, \n  stagger = 100,\n  className = ''\n}: {\n  children: React.ReactNode[];\n  stagger?: number;\n  className?: string;\n}) {\n  return (\n    <div className={className}>\n      {children.map((child, index) => (\n        <FadeIn key={index} delay={index * stagger}>\n          {child}\n        </FadeIn>\n      ))}\n    </div>\n  );\n}\n","size_bytes":2032},"frontend/client/src/components/Sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n\ninterface SidebarProps {\n  expanded: boolean;\n  isMobile: boolean;\n}\n\nexport default function Sidebar({ expanded, isMobile }: SidebarProps) {\n  const { user } = useAuth();\n  const [location] = useLocation();\n\n  // Get role-based permissions for access control\n  const { data: rolePermissions, isLoading: permissionsLoading } = useQuery({\n    queryKey: ['/api/auth/effective-permissions'],\n    enabled: !!user?.id,\n    retry: false,\n  });\n\n  const isActive = (path: string) => {\n    if (path === \"/\" && location === \"/\") return true;\n    if (path !== \"/\" && location.startsWith(path)) return true;\n    return false;\n  };\n\n  const canAccess = (permissionName: string) => {\n    // Admin role always has access (failsafe)\n    if (user?.role === 'admin') {\n      return true;\n    }\n\n    // If role permissions are still loading, don't show any menu items (eliminates flicker)\n    if (permissionsLoading) {\n      return false;\n    }\n    \n    // If role permissions haven't loaded yet or are malformed, deny access\n    if (!rolePermissions || !Array.isArray((rolePermissions as any)?.permissions)) {\n      return false;\n    }\n    \n    // Check if user's role has the specific permission\n    return (rolePermissions as any).permissions.some((permission: any) => \n      permission.name === permissionName\n    );\n  };\n\n  const menuItems = [\n    {\n      path: \"/\",\n      icon: \"fas fa-chart-line\",\n      label: \"Dashboard\",\n      permission: \"access_dashboard\"\n    },\n    {\n      path: \"/units\",\n      icon: \"fas fa-building\",\n      label: \"Unidades\",\n      permission: \"access_units\"\n    },\n    {\n      path: \"/staff\",\n      icon: \"fas fa-users\",\n      label: \"Colaboradores\", \n      permission: \"access_staff\"\n    },\n    {\n      path: \"/students\",\n      icon: \"fas fa-user-graduate\",\n      label: \"Alunos\",\n      permission: \"access_students\"\n    },\n    {\n      path: \"/courses\",\n      icon: \"fas fa-book\",\n      label: \"Cursos\",\n      permission: \"access_courses\"\n    },\n    {\n      path: \"/schedule\",\n      icon: \"fas fa-calendar-alt\",\n      label: \"Agenda\",\n      permission: \"access_schedule\"\n    },\n    {\n      path: \"/student-area\",\n      icon: \"fas fa-book-open\",\n      label: \"Área do Aluno\",\n      permission: \"access_student_area\"\n    }\n  ];\n\n  const systemMenuItems = [\n    {\n      path: \"/financial\",\n      icon: \"fas fa-dollar-sign\",\n      label: \"Financeiro\",\n      permission: \"access_financial\"\n    },\n    {\n      path: \"/settings\",\n      icon: \"fas fa-cog\",\n      label: \"Configurações\",\n      permission: \"access_settings\"\n    },\n    {\n      path: \"/permissions\",\n      icon: \"fas fa-shield-alt\",\n      label: \"Permissões\",\n      permission: \"access_permissions\"\n    },\n    {\n      path: \"/support\",\n      icon: \"fas fa-question-circle\",\n      label: \"Suporte\",\n      permission: \"access_support\"\n    }\n  ];\n\n  return (\n    <aside \n      className={`${\n        expanded ? (isMobile ? 'w-64' : 'w-64') : 'w-16'\n      } ${\n        isMobile && !expanded ? 'hidden' : ''\n      } glassmorphism-card border-r border-white/20 flex flex-col shadow-xl backdrop-blur-xl transition-all duration-300 ease-in-out overflow-hidden ${\n        isMobile && expanded ? 'fixed inset-y-0 left-0 z-50' : ''\n      }`} \n      data-testid=\"sidebar\"\n    >\n      {/* Logo & Brand */}\n      <div className={`${expanded ? 'p-6' : 'p-3'} border-b border-white/20 transition-all duration-300`}>\n        <div className={`flex items-center ${expanded ? 'space-x-3' : 'justify-center'}`}>\n          <div className=\"w-12 h-12 gradient-primary rounded-xl flex items-center justify-center icon-glow shadow-lg flex-shrink-0\">\n            <i className=\"fas fa-graduation-cap text-white text-xl\"></i>\n          </div>\n          {expanded && (\n            <div className=\"overflow-hidden\">\n              <h1 className=\"text-xl font-bold text-gradient whitespace-nowrap\">OpenLife</h1>\n              <p className=\"text-xs text-muted-foreground font-medium whitespace-nowrap\">Escola de Idiomas</p>\n            </div>\n          )}\n        </div>\n      </div>\n\n\n      {/* Navigation */}\n      <nav className={`flex-1 overflow-y-auto overflow-x-hidden ${expanded ? 'p-4' : 'p-2'} transition-all duration-300`}>\n        <div className=\"space-y-2\">\n          {/* Main Menu Items */}\n          {menuItems\n            .filter(item => canAccess(item.permission))\n            .map((item) => (\n              <Link key={item.path} href={item.path}>\n                <a\n                  className={`flex items-center ${expanded ? 'space-x-3 px-4 py-3' : 'justify-center px-2 py-3'} rounded-xl transition-smooth group relative ${\n                    isActive(item.path)\n                      ? \"gradient-primary text-white shadow-lg icon-glow\"\n                      : \"text-muted-foreground sidebar-hover\"\n                  }`}\n                  data-testid={`link-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n                  title={!expanded ? item.label : undefined}\n                >\n                  <i className={`${item.icon} w-5 flex-shrink-0`}></i>\n                  {expanded && <span className=\"text-sm font-medium whitespace-nowrap\">{item.label}</span>}\n                  {!expanded && (\n                    <div className=\"absolute left-16 bg-gray-900 text-white text-sm px-2 py-1 rounded-md opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none z-50 whitespace-nowrap\">\n                      {item.label}\n                    </div>\n                  )}\n                </a>\n              </Link>\n            ))}\n\n          {/* Sistema Section */}\n          {(systemMenuItems.some(item => canAccess(item.permission)) || user) && (\n            <div className=\"pt-4\">\n              {expanded && (\n                <p className=\"text-xs font-semibold text-muted-foreground uppercase tracking-wider mb-2\">\n                  Sistema\n                </p>\n              )}\n              <div className=\"space-y-1\">\n                {systemMenuItems\n                  .filter(item => item.path === '/support' ? !!user : canAccess(item.permission))\n                  .map((item) => (\n                    <Link key={item.path} href={item.path}>\n                      <a\n                        className={`flex items-center ${expanded ? 'space-x-3 px-4 py-3' : 'justify-center px-2 py-3'} rounded-xl transition-smooth group relative ${\n                          isActive(item.path)\n                            ? \"gradient-secondary text-white shadow-lg\"\n                            : \"text-muted-foreground sidebar-hover\"\n                        }`}\n                        data-testid={`link-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n                        title={!expanded ? item.label : undefined}\n                      >\n                        <i className={`${item.icon} w-5 flex-shrink-0`}></i>\n                        {expanded && <span className=\"text-sm whitespace-nowrap\">{item.label}</span>}\n                        {!expanded && (\n                          <div className=\"absolute left-16 bg-gray-900 text-white text-sm px-2 py-1 rounded-md opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none z-50 whitespace-nowrap\">\n                            {item.label}\n                          </div>\n                        )}\n                      </a>\n                    </Link>\n                  ))}\n              </div>\n            </div>\n          )}\n        </div>\n      </nav>\n\n    </aside>\n  );\n}","size_bytes":7642},"frontend/client/src/components/StatsCard.tsx":{"content":"interface StatsCardProps {\n  title: string;\n  value: string | number;\n  change?: string;\n  changeType?: 'positive' | 'negative' | 'neutral';\n  icon: string;\n  iconColor: 'blue' | 'green' | 'purple' | 'yellow' | 'red';\n  'data-testid'?: string;\n}\n\nexport default function StatsCard({ \n  title, \n  value, \n  change, \n  changeType = 'neutral', \n  icon, \n  iconColor,\n  'data-testid': testId \n}: StatsCardProps) {\n  \n  const getIconBgColor = (color: string) => {\n    switch (color) {\n      case 'blue': return 'bg-blue-100';\n      case 'green': return 'bg-green-100';\n      case 'purple': return 'bg-purple-100';\n      case 'yellow': return 'bg-yellow-100';\n      case 'red': return 'bg-red-100';\n      default: return 'bg-gray-100';\n    }\n  };\n\n  const getIconTextColor = (color: string) => {\n    switch (color) {\n      case 'blue': return 'text-blue-600';\n      case 'green': return 'text-green-600';\n      case 'purple': return 'text-purple-600';\n      case 'yellow': return 'text-yellow-600';\n      case 'red': return 'text-red-600';\n      default: return 'text-gray-600';\n    }\n  };\n\n  const getChangeColor = (type: string) => {\n    switch (type) {\n      case 'positive': return 'text-green-600';\n      case 'negative': return 'text-red-600';\n      default: return 'text-muted-foreground';\n    }\n  };\n\n  return (\n    <div \n      className=\"bg-card rounded-lg border border-border p-6 shadow-sm card-hover transition-smooth\"\n      data-testid={testId}\n    >\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <p className=\"text-sm font-medium text-muted-foreground\">{title}</p>\n          <p className=\"text-3xl font-bold text-foreground\" data-testid={`${testId}-value`}>\n            {value}\n          </p>\n          {change && (\n            <p className={`text-sm mt-1 ${getChangeColor(changeType)}`}>\n              {changeType === 'positive' && <i className=\"fas fa-arrow-up mr-1\"></i>}\n              {changeType === 'negative' && <i className=\"fas fa-arrow-down mr-1\"></i>}\n              <span data-testid={`${testId}-change`}>{change}</span>\n              {changeType !== 'neutral' && ' este mês'}\n            </p>\n          )}\n        </div>\n        <div className={`w-12 h-12 ${getIconBgColor(iconColor)} rounded-lg flex items-center justify-center`}>\n          <i className={`${icon} ${getIconTextColor(iconColor)} text-xl`}></i>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2414},"frontend/client/src/components/StudentLayout.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useState } from \"react\";\nimport { Menu, Settings, Bell, LogOut } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { ThemeToggle } from \"@/components/ThemeToggle\";\nimport { \n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\n\ninterface StudentLayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function StudentLayout({ children }: StudentLayoutProps) {\n  const { user, isLoading, isAuthenticated } = useAuth();\n  const queryClient = useQueryClient();\n  const [location] = useLocation();\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch('/api/auth/logout', {\n        method: 'POST',\n      });\n      if (!response.ok) {\n        throw new Error('Logout failed');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      // Clear all queries and redirect to login\n      queryClient.clear();\n      window.location.href = '/';\n    },\n  });\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <div className=\"w-12 h-12 bg-primary rounded-2xl flex items-center justify-center mx-auto mb-4\">\n            <i className=\"fas fa-graduation-cap text-primary-foreground text-xl animate-pulse\"></i>\n          </div>\n          <p className=\"text-muted-foreground\">Carregando...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null; // Will be handled by the routing\n  }\n\n  const studentMenuItems = [\n    {\n      path: \"/\",\n      label: \"Dashboard\",\n      icon: \"fas fa-home\",\n    },\n    {\n      path: \"/aluno/workbook\",\n      label: \"Workbook\",\n      icon: \"fas fa-book\",\n    },\n    {\n      path: \"/aluno/provas\",\n      label: \"Provas\",\n      icon: \"fas fa-clipboard-check\",\n    },\n    {\n      path: \"/aluno/cronograma\",\n      label: \"Cronograma\",\n      icon: \"fas fa-calendar-alt\",\n    },\n    {\n      path: \"/aluno/progresso\",\n      label: \"Meu Progresso\",\n      icon: \"fas fa-chart-line\",\n    },\n  ];\n\n  const isActive = (path: string) => {\n    if (path === \"/\" && (location === \"/\" || location === \"/student-area\")) return true;\n    if (path !== \"/\" && location.startsWith(path)) return true;\n    return false;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900\">\n      {/* Top Header - Minimal */}\n      <header className=\"bg-white/80 dark:bg-gray-800/80 backdrop-blur-md border-b border-gray-200/50 dark:border-gray-700/50 sticky top-0 z-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            {/* Logo */}\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-8 h-8 bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-graduation-cap text-white text-sm\"></i>\n              </div>\n              <span className=\"text-lg font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n                OpenLife\n              </span>\n            </div>\n\n            {/* User Menu */}\n            {user && (\n              <div className=\"flex items-center space-x-3\">\n                <ThemeToggle />\n                <DropdownMenu>\n                  <DropdownMenuTrigger className=\"flex items-center space-x-3 hover:bg-gray-100/50 dark:hover:bg-gray-700/50 rounded-lg p-2 transition-colors cursor-pointer focus:outline-none\" data-testid=\"dropdown-user\">\n                    <div className=\"text-right\">\n                      <p className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">\n                        {user.firstName} {user.lastName}\n                      </p>\n                      <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                        {user.role === 'admin' && 'Administrador'}\n                        {user.role === 'teacher' && 'Professor'}\n                        {user.role === 'secretary' && 'Secretário'}\n                        {user.role === 'student' && 'Estudante'}\n                      </p>\n                    </div>\n                    <div className=\"w-8 h-8 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full flex items-center justify-center\">\n                      <span className=\"text-white text-sm font-medium\">\n                        {user.firstName?.[0]}{user.lastName?.[0]}\n                      </span>\n                    </div>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\" className=\"w-48\">\n                    <DropdownMenuItem className=\"cursor-default\" data-testid=\"menu-item-settings\">\n                      <Settings className=\"mr-2 h-4 w-4\" />\n                      <span>Configurações</span>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem className=\"cursor-default\" data-testid=\"menu-item-notifications\">\n                      <Bell className=\"mr-2 h-4 w-4\" />\n                      <span>Notificações</span>\n                    </DropdownMenuItem>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem\n                      className=\"cursor-pointer\"\n                      data-testid=\"menu-item-logout\"\n                      onClick={handleLogout}\n                    >\n                      <LogOut className=\"mr-2 h-4 w-4\" />\n                      <span>Sair</span>\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </div>\n            )}\n          </div>\n        </div>\n      </header>\n\n      {/* Student Navigation Menu */}\n      <nav className=\"bg-white/60 dark:bg-gray-800/60 backdrop-blur-sm border-b border-gray-200/30 dark:border-gray-700/30\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-center py-4\">\n            <div className=\"flex space-x-1 sm:space-x-2\">\n              {studentMenuItems.map((item) => (\n                <Link key={item.path} href={item.path}>\n                  <a\n                    className={`flex items-center space-x-2 px-3 py-2 sm:px-4 sm:py-3 rounded-xl text-sm font-medium transition-all duration-200 whitespace-nowrap ${\n                      isActive(item.path)\n                        ? \"bg-gradient-to-r from-blue-500 to-purple-500 text-white shadow-lg transform scale-105\"\n                        : \"text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 hover:bg-gray-100/50 dark:hover:bg-gray-700/50\"\n                    }`}\n                    data-testid={`link-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n                  >\n                    <i className={`${item.icon} text-sm`}></i>\n                    <span className=\"hidden sm:inline\">{item.label}</span>\n                  </a>\n                </Link>\n              ))}\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {children}\n      </main>\n    </div>\n  );\n}","size_bytes":7516},"frontend/client/src/components/ThemeToggle.tsx":{"content":"\nimport { Moon, Sun } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { useTheme } from '@/contexts/ThemeContext';\n\nexport function ThemeToggle() {\n  const { theme, toggleTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      className=\"relative w-9 h-9 rounded-lg transition-all duration-300 hover:bg-accent/50\"\n      aria-label={`Alternar para tema ${theme === 'light' ? 'escuro' : 'claro'}`}\n    >\n      <Sun className={`h-4 w-4 absolute transition-all duration-500 ${\n        theme === 'dark' \n          ? 'rotate-90 scale-0 opacity-0' \n          : 'rotate-0 scale-100 opacity-100'\n      }`} />\n      <Moon className={`h-4 w-4 absolute transition-all duration-500 ${\n        theme === 'light' \n          ? '-rotate-90 scale-0 opacity-0' \n          : 'rotate-0 scale-100 opacity-100'\n      }`} />\n    </Button>\n  );\n}\n","size_bytes":915},"frontend/client/src/contexts/ThemeContext.tsx":{"content":"\nimport React, { createContext, useContext, useEffect, useState } from 'react';\n\ntype Theme = 'light' | 'dark';\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n  isDark: boolean;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    // Verifica localStorage primeiro, se não existir usa 'light' como padrão\n    const saved = localStorage.getItem('theme') as Theme;\n    if (saved) return saved;\n    \n    // Define 'light' como tema padrão ao invés de verificar a preferência do sistema\n    return 'light';\n  });\n\n  useEffect(() => {\n    const root = document.documentElement;\n    \n    // Remove classes anteriores\n    root.classList.remove('light', 'dark');\n    \n    // Adiciona a classe do tema atual\n    root.classList.add(theme);\n    \n    // Salva no localStorage\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prev => prev === 'light' ? 'dark' : 'light');\n  };\n\n  return (\n    <ThemeContext.Provider value={{\n      theme,\n      toggleTheme,\n      isDark: theme === 'dark'\n    }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}\n","size_bytes":1478},"frontend/client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"frontend/client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"frontend/client/src/hooks/useAuth.ts":{"content":"\nimport { useQuery } from \"@tanstack/react-query\";\n\ninterface User {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  role: string;\n}\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":372},"frontend/client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"frontend/client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"frontend/client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"frontend/client/src/pages/Courses.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Plus, BookOpen, Upload, Edit, Trash2, Eye, Palette } from \"lucide-react\";\nimport Layout from \"@/components/Layout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { Course, Book, CourseWithDetails, BookWithDetails, InsertCourse, InsertBook } from \"@shared/schema\";\nimport { insertCourseSchema, insertBookSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport default function Courses() {\n  const { toast } = useToast();\n  const [selectedCourse, setSelectedCourse] = useState<Course | null>(null);\n  const [isCreateCourseOpen, setIsCreateCourseOpen] = useState(false);\n  const [isCreateBookOpen, setIsCreateBookOpen] = useState(false);\n  const [editingCourse, setEditingCourse] = useState<Course | null>(null);\n  const [editingBook, setEditingBook] = useState<Book | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [uploadingPdf, setUploadingPdf] = useState<string | null>(null);\n\n  // Extended schemas for form validation\n  const courseFormSchema = insertCourseSchema.extend({\n    duration: z.coerce.number().positive(\"Duração deve ser maior que 0\").optional(),\n    price: z.coerce.number().positive(\"Preço deve ser maior que 0\").optional()\n  });\n\n  const bookFormSchema = insertBookSchema.extend({\n    totalDays: z.coerce.number().min(1, \"Total de dias deve ser pelo menos 1\"),\n    color: z.string().regex(/^#[0-9A-F]{6}$/i, \"Cor deve estar em formato hexadecimal válido\")\n  });\n\n  // Course form\n  const courseForm = useForm<z.infer<typeof courseFormSchema>>({\n    resolver: zodResolver(courseFormSchema),\n    mode: \"onChange\",\n    reValidateMode: \"onChange\",\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      language: \"\",\n      level: \"\",\n      duration: undefined,\n      price: undefined,\n      isActive: true\n    }\n  });\n\n  // Book form\n  const bookForm = useForm<z.infer<typeof bookFormSchema>>({\n    resolver: zodResolver(bookFormSchema),\n    mode: \"onChange\",\n    reValidateMode: \"onChange\",\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      color: \"#3b82f6\",\n      totalDays: 30,\n      courseId: \"\",\n      displayOrder: 1,\n      isActive: true\n    }\n  });\n\n  // Fetch courses\n  const { data: courses = [], isLoading: coursesLoading } = useQuery({\n    queryKey: [\"/api/courses\"],\n    queryFn: () => fetch(\"/api/courses\").then(res => res.json()) as Promise<Course[]>\n  });\n\n  // Fetch books\n  const { data: books = [], isLoading: booksLoading } = useQuery({\n    queryKey: [\"/api/books\"],\n    queryFn: () => fetch(\"/api/books\").then(res => res.json()) as Promise<Book[]>\n  });\n\n  // Create course mutation\n  const createCourseMutation = useMutation({\n    mutationFn: (data: z.infer<typeof courseFormSchema>) => apiRequest(\"/api/courses\", \"POST\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/courses\"] });\n      toast({ title: \"Curso criado com sucesso!\" });\n      setIsCreateCourseOpen(false);\n      courseForm.reset();\n    },\n    onError: (error: any) => {\n      toast({ title: \"Erro ao criar curso\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  // Update course mutation\n  const updateCourseMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string, data: z.infer<typeof courseFormSchema> }) => apiRequest(`/api/courses/${id}`, \"PUT\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/courses\"] });\n      toast({ title: \"Curso atualizado com sucesso!\" });\n      setEditingCourse(null);\n      courseForm.reset();\n    },\n    onError: (error: any) => {\n      toast({ title: \"Erro ao atualizar curso\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  // Delete course mutation\n  const deleteCourseMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(`/api/courses/${id}`, \"DELETE\"),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/courses\"] });\n      toast({ title: \"Curso excluído com sucesso!\" });\n    },\n    onError: () => {\n      toast({ title: \"Erro ao excluir curso\", variant: \"destructive\" });\n    }\n  });\n\n  // Create book mutation\n  const createBookMutation = useMutation({\n    mutationFn: (data: z.infer<typeof bookFormSchema>) => apiRequest(\"/api/books\", \"POST\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/books\"] });\n      toast({ title: \"Livro criado com sucesso!\" });\n      setIsCreateBookOpen(false);\n      bookForm.reset();\n    },\n    onError: (error: any) => {\n      toast({ title: \"Erro ao criar livro\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  // Update book mutation\n  const updateBookMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string, data: Partial<z.infer<typeof bookFormSchema>> }) => apiRequest(`/api/books/${id}`, \"PUT\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/books\"] });\n      toast({ title: \"Livro atualizado com sucesso!\" });\n      setEditingBook(null);\n      bookForm.reset();\n    },\n    onError: (error: any) => {\n      toast({ title: \"Erro ao atualizar livro\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  // PDF upload mutation\n  const uploadPdfMutation = useMutation({\n    mutationFn: async ({ bookId, file }: { bookId: string, file: File }) => {\n      const formData = new FormData();\n      formData.append('pdf', file);\n      return fetch(`/api/books/${bookId}/upload`, {\n        method: 'POST',\n        body: formData\n      }).then(res => res.json());\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/books\"] });\n      toast({ title: \"PDF enviado com sucesso!\" });\n      setUploadingPdf(null);\n    },\n    onError: (error: any) => {\n      toast({ title: \"Erro ao enviar PDF\", description: error.message, variant: \"destructive\" });\n      setUploadingPdf(null);\n    }\n  });\n\n  // Delete book mutation\n  const deleteBookMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(`/api/books/${id}`, \"DELETE\"),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/books\"] });\n      toast({ title: \"Livro excluído com sucesso!\" });\n    },\n    onError: () => {\n      toast({ title: \"Erro ao excluir livro\", variant: \"destructive\" });\n    }\n  });\n\n  const handleCreateCourse = (data: z.infer<typeof courseFormSchema>) => {\n    createCourseMutation.mutate(data);\n  };\n\n  const handleUpdateCourse = (data: z.infer<typeof courseFormSchema>) => {\n    if (!editingCourse) return;\n    updateCourseMutation.mutate({ id: editingCourse.id, data });\n  };\n\n  const handleEditCourse = (course: Course) => {\n    setEditingCourse(course);\n    courseForm.reset({\n      name: course.name,\n      description: course.description || \"\",\n      language: course.language,\n      level: course.level,\n      duration: course.duration || undefined,\n      price: course.price || undefined,\n      isActive: course.isActive\n    });\n  };\n\n  const handleCreateBook = (data: z.infer<typeof bookFormSchema>) => {\n    if (!selectedCourse) {\n      toast({ title: \"Erro\", description: \"Selecione um curso primeiro\", variant: \"destructive\" });\n      return;\n    }\n    const bookData = { ...data, courseId: selectedCourse.id };\n    createBookMutation.mutate(bookData);\n  };\n\n  const handleUpdateBook = (data: z.infer<typeof bookFormSchema>) => {\n    if (!editingBook) return;\n    updateBookMutation.mutate({ id: editingBook.id, data });\n  };\n\n  const handleEditBook = (book: Book) => {\n    setEditingBook(book);\n    bookForm.reset({\n      name: book.name,\n      description: book.description || \"\",\n      color: book.color,\n      totalDays: book.totalDays ?? 30,\n      courseId: book.courseId,\n      displayOrder: book.displayOrder ?? 1,\n      isActive: book.isActive\n    });\n  };\n\n  const handlePdfUpload = (bookId: string, file: File) => {\n    setUploadingPdf(bookId);\n    uploadPdfMutation.mutate({ bookId, file });\n  };\n\n  const openPdfFileDialog = (bookId: string) => {\n    if (fileInputRef.current) {\n      fileInputRef.current.onchange = (e) => {\n        const file = (e.target as HTMLInputElement).files?.[0];\n        if (file && file.type === 'application/pdf') {\n          handlePdfUpload(bookId, file);\n        } else {\n          toast({ title: \"Erro\", description: \"Por favor, selecione um arquivo PDF\", variant: \"destructive\" });\n        }\n      };\n      fileInputRef.current.click();\n    }\n  };\n\n  const predefinedColors = [\n    '#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6',\n    '#06b6d4', '#84cc16', '#f97316', '#ec4899', '#6366f1'\n  ];\n\n  const getBooksByCourseid = (courseId: string) => {\n    return books.filter(book => book.courseId === courseId);\n  };\n\n  return (\n    <Layout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gradient\">Gerenciar Cursos</h1>\n            <p className=\"text-muted-foreground\">Administre cursos, livros e conteúdo educacional</p>\n          </div>\n          <Button \n            onClick={() => setIsCreateCourseOpen(true)}\n            className=\"gap-2\"\n            data-testid=\"button-create-course\"\n          >\n            <Plus className=\"w-4 h-4\" />\n            Novo Curso\n          </Button>\n        </div>\n\n        <Tabs defaultValue=\"courses\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"courses\">Cursos</TabsTrigger>\n            <TabsTrigger value=\"books\">Livros</TabsTrigger>\n          </TabsList>\n\n          {/* Courses Tab */}\n          <TabsContent value=\"courses\" className=\"space-y-4\">\n            {coursesLoading ? (\n              <div className=\"text-center py-8\">\n                <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto\"></div>\n                <p className=\"mt-4 text-muted-foreground\">Carregando cursos...</p>\n              </div>\n            ) : (\n              <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n                {courses && courses.map((course) => (\n                  <Card key={course.id} className=\"glassmorphism-card hover:shadow-lg transition-shadow\" data-testid={`card-course-${course.id}`}>\n                    <CardHeader>\n                      <div className=\"flex items-center justify-between\">\n                        <CardTitle className=\"text-lg\">{course.name}</CardTitle>\n                        <div className=\"flex gap-2\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleEditCourse(course)}\n                            data-testid={`button-edit-course-${course.id}`}\n                          >\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => deleteCourseMutation.mutate(course.id)}\n                            data-testid={`button-delete-course-${course.id}`}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <Badge variant=\"secondary\">{course.language}</Badge>\n                        <Badge variant=\"outline\">{course.level}</Badge>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-sm text-muted-foreground mb-4\">{course.description}</p>\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span>Duração: {course.duration}h</span>\n                        <span className=\"font-semibold\">R$ {course.price}</span>\n                      </div>\n                      <div className=\"mt-4\">\n                        <p className=\"text-sm mb-2\">Livros: {getBooksByCourseid(course.id).length}</p>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => setSelectedCourse(course)}\n                          className=\"w-full\"\n                          data-testid={`button-view-books-${course.id}`}\n                        >\n                          <BookOpen className=\"w-4 h-4 mr-2\" />\n                          Ver Livros\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </TabsContent>\n\n          {/* Books Tab */}\n          <TabsContent value=\"books\" className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <p className=\"text-sm text-muted-foreground\">\n                {selectedCourse ? `Livros do curso: ${selectedCourse.name}` : \"Selecione um curso para gerenciar livros\"}\n              </p>\n              {selectedCourse && (\n                <Button \n                  onClick={() => setIsCreateBookOpen(true)}\n                  size=\"sm\"\n                  className=\"gap-2\"\n                  data-testid=\"button-create-book\"\n                >\n                  <Plus className=\"w-4 h-4\" />\n                  Novo Livro\n                </Button>\n              )}\n            </div>\n\n            {selectedCourse ? (\n              booksLoading ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto\"></div>\n                </div>\n              ) : (\n                <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n                  {getBooksByCourseid(selectedCourse.id).map((book) => (\n                    <Card key={book.id} className=\"glassmorphism-card\" data-testid={`card-book-${book.id}`}>\n                      <CardHeader>\n                        <div className=\"flex items-center gap-3\">\n                          <div \n                            className=\"w-6 h-6 rounded-md border-2 border-white shadow-sm ring-1 ring-black/10\"\n                            style={{ backgroundColor: book.color }}\n                            title={`Cor: ${book.color}`}\n                          ></div>\n                          <CardTitle className=\"text-base\">{book.name}</CardTitle>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleEditBook(book)}\n                            data-testid={`button-edit-book-${book.id}`}\n                          >\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => deleteBookMutation.mutate(book.id)}\n                            data-testid={`button-delete-book-${book.id}`}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </CardHeader>\n                      <CardContent>\n                        <p className=\"text-sm text-muted-foreground mb-3\">{book.description}</p>\n                        <div className=\"space-y-3 text-sm\">\n                          <div className=\"flex justify-between\">\n                            <span>Total de dias:</span>\n                            <span className=\"font-medium\">{book.totalDays ?? 30}</span>\n                          </div>\n                          \n                          {/* PDF Section */}\n                          <div className=\"space-y-2\">\n                            {book.pdfUrl ? (\n                              <div className=\"flex items-center justify-between\">\n                                <div className=\"flex items-center gap-2\">\n                                  <Eye className=\"w-4 h-4 text-primary\" />\n                                  <span className=\"text-sm\">PDF disponível</span>\n                                </div>\n                                <div className=\"flex gap-1\">\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"ghost\"\n                                    onClick={() => window.open(book.pdfUrl!, '_blank')}\n                                    className=\"h-7 px-2\"\n                                  >\n                                    <Eye className=\"w-3 h-3\" />\n                                  </Button>\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"ghost\"\n                                    onClick={() => openPdfFileDialog(book.id)}\n                                    disabled={uploadingPdf === book.id}\n                                    className=\"h-7 px-2\"\n                                  >\n                                    <Upload className=\"w-3 h-3\" />\n                                  </Button>\n                                </div>\n                              </div>\n                            ) : (\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => openPdfFileDialog(book.id)}\n                                disabled={uploadingPdf === book.id}\n                                className=\"w-full h-8\"\n                              >\n                                <Upload className=\"w-3 h-3 mr-1\" />\n                                {uploadingPdf === book.id ? 'Enviando...' : 'Upload PDF'}\n                              </Button>\n                            )}\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              )\n            ) : (\n              <div className=\"text-center py-12\">\n                <BookOpen className=\"w-16 h-16 mx-auto text-muted-foreground mb-4\" />\n                <p className=\"text-muted-foreground\">Selecione um curso na aba \"Cursos\" para gerenciar seus livros</p>\n              </div>\n            )}\n          </TabsContent>\n        </Tabs>\n\n        {/* Create Course Dialog */}\n        <Dialog open={isCreateCourseOpen} onOpenChange={setIsCreateCourseOpen}>\n          <DialogContent data-testid=\"dialog-create-course\">\n            <DialogHeader>\n              <DialogTitle>Criar Novo Curso</DialogTitle>\n            </DialogHeader>\n            <Form {...courseForm}>\n              <form onSubmit={courseForm.handleSubmit(handleCreateCourse)} className=\"space-y-4\">\n                <FormField\n                  control={courseForm.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nome do Curso</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"Ex: Inglês Básico\"\n                          data-testid=\"input-course-name\"\n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={courseForm.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Descrição</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Descrição do curso\"\n                          data-testid=\"input-course-description\"\n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={courseForm.control}\n                    name=\"language\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Idioma</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-course-language\">\n                              <SelectValue placeholder=\"Selecione\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"English\">Inglês</SelectItem>\n                            <SelectItem value=\"Spanish\">Espanhol</SelectItem>\n                            <SelectItem value=\"French\">Francês</SelectItem>\n                            <SelectItem value=\"German\">Alemão</SelectItem>\n                            <SelectItem value=\"Italian\">Italiano</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={courseForm.control}\n                    name=\"level\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Nível</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-course-level\">\n                              <SelectValue placeholder=\"Selecione\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"Básico\">Básico</SelectItem>\n                            <SelectItem value=\"Intermediário\">Intermediário</SelectItem>\n                            <SelectItem value=\"Avançado\">Avançado</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={courseForm.control}\n                    name=\"duration\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Duração (horas)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            placeholder=\"120\"\n                            data-testid=\"input-course-duration\"\n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={courseForm.control}\n                    name=\"price\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Preço (R$)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            placeholder=\"299\"\n                            data-testid=\"input-course-price\"\n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"flex gap-2 justify-end pt-4\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsCreateCourseOpen(false)}\n                  >\n                    Cancelar\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createCourseMutation.isPending || !courseForm.formState.isValid}\n                    data-testid=\"button-save-course\"\n                  >\n                    {createCourseMutation.isPending ? 'Criando...' : 'Criar Curso'}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Create Book Dialog */}\n        <Dialog open={isCreateBookOpen} onOpenChange={setIsCreateBookOpen}>\n          <DialogContent data-testid=\"dialog-create-book\" className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingBook ? 'Editar Livro' : `Novo Livro - ${selectedCourse?.name}`}\n              </DialogTitle>\n            </DialogHeader>\n            <Form {...bookForm}>\n              <form onSubmit={bookForm.handleSubmit(editingBook ? handleUpdateBook : handleCreateBook)} className=\"space-y-4\">\n                <FormField\n                  control={bookForm.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nome do Livro</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"Ex: English Basic - Book 1\"\n                          data-testid=\"input-book-name\"\n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={bookForm.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Descrição</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Descrição do livro\"\n                          data-testid=\"input-book-description\"\n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={bookForm.control}\n                    name=\"color\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Cor do Livro</FormLabel>\n                        <FormControl>\n                          <div className=\"space-y-3\">\n                            {/* Color Preview */}\n                            <div className=\"flex items-center gap-3\">\n                              <div \n                                className=\"w-8 h-8 rounded-md border-2 border-muted shadow-sm\"\n                                style={{ backgroundColor: field.value }}\n                              ></div>\n                              <span className=\"text-sm text-muted-foreground\">Preview</span>\n                            </div>\n                            \n                            {/* Predefined Color Swatches */}\n                            <div className=\"grid grid-cols-5 gap-2\">\n                              {predefinedColors.map((color) => (\n                                <button\n                                  key={color}\n                                  type=\"button\"\n                                  className={`w-8 h-8 rounded-md border-2 transition-all hover:scale-110 ${\n                                    field.value === color ? 'border-primary' : 'border-muted'\n                                  }`}\n                                  style={{ backgroundColor: color }}\n                                  onClick={() => field.onChange(color)}\n                                  aria-label={`Select color ${color}`}\n                                />\n                              ))}\n                            </div>\n                            \n                            {/* Color Input and Hex Input */}\n                            <div className=\"flex gap-2\">\n                              <input\n                                type=\"color\"\n                                value={field.value}\n                                onChange={(e) => field.onChange(e.target.value)}\n                                className=\"w-12 h-10 rounded border cursor-pointer\"\n                                data-testid=\"input-book-color\"\n                              />\n                              <Input\n                                value={field.value}\n                                onChange={(e) => field.onChange(e.target.value)}\n                                placeholder=\"#3b82f6\"\n                                data-testid=\"input-book-color-hex\"\n                                className=\"flex-1\"\n                              />\n                            </div>\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={bookForm.control}\n                    name=\"totalDays\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Total de Dias</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            min=\"1\"\n                            placeholder=\"30\"\n                            data-testid=\"input-book-total-days\"\n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                {/* PDF Upload Section */}\n                {editingBook && (\n                  <div className=\"space-y-3 p-4 bg-muted/50 rounded-lg\">\n                    <div className=\"flex items-center gap-2\">\n                      <Upload className=\"w-4 h-4\" />\n                      <span className=\"font-medium\">PDF do Livro</span>\n                    </div>\n                    \n                    {editingBook.pdfUrl ? (\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <Eye className=\"w-4 h-4 text-primary\" />\n                          <span className=\"text-sm\">PDF disponível</span>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Button\n                            type=\"button\"\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => window.open(editingBook.pdfUrl!, '_blank')}\n                          >\n                            <Eye className=\"w-4 h-4 mr-1\" />\n                            Ver PDF\n                          </Button>\n                          <Button\n                            type=\"button\"\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => openPdfFileDialog(editingBook.id)}\n                            disabled={uploadingPdf === editingBook.id}\n                          >\n                            <Upload className=\"w-4 h-4 mr-1\" />\n                            {uploadingPdf === editingBook.id ? 'Enviando...' : 'Substituir'}\n                          </Button>\n                        </div>\n                      </div>\n                    ) : (\n                      <Button\n                        type=\"button\"\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => openPdfFileDialog(editingBook.id)}\n                        disabled={uploadingPdf === editingBook.id}\n                        className=\"w-full\"\n                      >\n                        <Upload className=\"w-4 h-4 mr-2\" />\n                        {uploadingPdf === editingBook.id ? 'Enviando...' : 'Fazer Upload do PDF'}\n                      </Button>\n                    )}\n                  </div>\n                )}\n\n                <div className=\"flex gap-2 justify-end pt-4\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => {\n                      setIsCreateBookOpen(false);\n                      setEditingBook(null);\n                      bookForm.reset();\n                    }}\n                  >\n                    Cancelar\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createBookMutation.isPending || updateBookMutation.isPending || !bookForm.formState.isValid}\n                    data-testid=\"button-save-book\"\n                  >\n                    {editingBook \n                      ? (updateBookMutation.isPending ? 'Atualizando...' : 'Atualizar Livro')\n                      : (createBookMutation.isPending ? 'Criando...' : 'Criar Livro')\n                    }\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Edit Course Dialog */}\n        <Dialog open={!!editingCourse} onOpenChange={(open) => {\n          if (!open) {\n            setEditingCourse(null);\n            courseForm.reset();\n          }\n        }}>\n          <DialogContent data-testid=\"dialog-edit-course\">\n            <DialogHeader>\n              <DialogTitle>Editar Curso</DialogTitle>\n            </DialogHeader>\n            <div className=\"grid gap-4 py-4\">\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"edit-course-name\">Nome do Curso</Label>\n                <Input\n                  id=\"edit-course-name\"\n                  value={courseForm.name}\n                  onChange={(e) => setCourseForm(prev => ({ ...prev, name: e.target.value }))}\n                  data-testid=\"input-edit-course-name\"\n                />\n              </div>\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"edit-course-description\">Descrição</Label>\n                <Textarea\n                  id=\"edit-course-description\"\n                  value={courseForm.description}\n                  onChange={(e) => setCourseForm(prev => ({ ...prev, description: e.target.value }))}\n                  data-testid=\"input-edit-course-description\"\n                />\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"edit-course-language\">Idioma</Label>\n                  <Select value={courseForm.language} onValueChange={(value) => setCourseForm(prev => ({ ...prev, language: value }))}>\n                    <SelectTrigger data-testid=\"select-edit-course-language\">\n                      <SelectValue placeholder=\"Selecione\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"English\">Inglês</SelectItem>\n                      <SelectItem value=\"Spanish\">Espanhol</SelectItem>\n                      <SelectItem value=\"French\">Francês</SelectItem>\n                      <SelectItem value=\"German\">Alemão</SelectItem>\n                      <SelectItem value=\"Italian\">Italiano</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"edit-course-level\">Nível</Label>\n                  <Select value={courseForm.level} onValueChange={(value) => setCourseForm(prev => ({ ...prev, level: value }))}>\n                    <SelectTrigger data-testid=\"select-edit-course-level\">\n                      <SelectValue placeholder=\"Selecione\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"Básico\">Básico</SelectItem>\n                      <SelectItem value=\"Intermediário\">Intermediário</SelectItem>\n                      <SelectItem value=\"Avançado\">Avançado</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"edit-course-duration\">Duração (horas)</Label>\n                  <Input\n                    id=\"edit-course-duration\"\n                    type=\"number\"\n                    value={courseForm.duration}\n                    onChange={(e) => setCourseForm(prev => ({ ...prev, duration: e.target.value }))}\n                    data-testid=\"input-edit-course-duration\"\n                  />\n                </div>\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"edit-course-price\">Preço (R$)</Label>\n                  <Input\n                    id=\"edit-course-price\"\n                    type=\"number\"\n                    value={courseForm.price}\n                    onChange={(e) => setCourseForm(prev => ({ ...prev, price: e.target.value }))}\n                    data-testid=\"input-edit-course-price\"\n                  />\n                </div>\n              </div>\n            </div>\n            <div className=\"flex gap-2 justify-end\">\n              <Button variant=\"outline\" onClick={() => {\n                setEditingCourse(null);\n                resetCourseForm();\n              }}>\n                Cancelar\n              </Button>\n              <Button \n                onClick={handleUpdateCourse} \n                disabled={updateCourseMutation.isPending}\n                data-testid=\"button-update-course\"\n              >\n                Atualizar\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Edit Book Dialog */}\n        <Dialog open={!!editingBook} onOpenChange={(open) => {\n          if (!open) {\n            setEditingBook(null);\n            bookForm.reset();\n          }\n        }}>\n          <DialogContent data-testid=\"dialog-edit-book\">\n            <DialogHeader>\n              <DialogTitle>Editar Livro</DialogTitle>\n            </DialogHeader>\n            <div className=\"grid gap-4 py-4\">\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"edit-book-name\">Nome do Livro</Label>\n                <Input\n                  id=\"edit-book-name\"\n                  value={bookForm.name}\n                  onChange={(e) => setBookForm(prev => ({ ...prev, name: e.target.value }))}\n                  data-testid=\"input-edit-book-name\"\n                />\n              </div>\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"edit-book-description\">Descrição</Label>\n                <Textarea\n                  id=\"edit-book-description\"\n                  value={bookForm.description}\n                  onChange={(e) => setBookForm(prev => ({ ...prev, description: e.target.value }))}\n                  data-testid=\"input-edit-book-description\"\n                />\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"edit-book-color\">Cor do Livro</Label>\n                  <div className=\"flex gap-2 items-center\">\n                    <Input\n                      id=\"edit-book-color\"\n                      type=\"color\"\n                      value={bookForm.color}\n                      onChange={(e) => setBookForm(prev => ({ ...prev, color: e.target.value }))}\n                      className=\"w-12 h-10 p-1\"\n                      data-testid=\"input-edit-book-color\"\n                    />\n                    <Input\n                      value={bookForm.color}\n                      onChange={(e) => setBookForm(prev => ({ ...prev, color: e.target.value }))}\n                      placeholder=\"#3b82f6\"\n                      data-testid=\"input-edit-book-color-hex\"\n                    />\n                  </div>\n                </div>\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"edit-book-totalDays\">Total de Dias</Label>\n                  <Input\n                    id=\"edit-book-totalDays\"\n                    type=\"number\"\n                    min=\"1\"\n                    value={bookForm.totalDays}\n                    onChange={(e) => setBookForm(prev => ({ ...prev, totalDays: e.target.value }))}\n                    data-testid=\"input-edit-book-total-days\"\n                  />\n                </div>\n              </div>\n            </div>\n            <div className=\"flex gap-2 justify-end\">\n              <Button variant=\"outline\" onClick={() => {\n                setEditingBook(null);\n                resetBookForm();\n              }}>\n                Cancelar\n              </Button>\n              <Button \n                onClick={handleUpdateBook} \n                disabled={updateBookMutation.isPending}\n                data-testid=\"button-update-book\"\n              >\n                Atualizar\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Hidden file input for PDF uploads */}\n        <input\n          ref={fileInputRef}\n          type=\"file\"\n          accept=\"application/pdf\"\n          style={{ display: 'none' }}\n        />\n      </div>\n    </Layout>\n  );\n}","size_bytes":43240},"frontend/client/src/pages/Dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Layout from \"@/components/Layout\";\nimport StatsCard from \"@/components/StatsCard\";\nimport { PageLoader, FadeIn, StaggeredFadeIn } from \"@/components/PageLoader\";\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading: authLoading, user } = useAuth();\n\n  const { data: stats, isLoading } = useQuery<{\n    totalStudents: number;\n    activeTeachers: number;\n    todaysClasses: number;\n    monthlyRevenue: number;\n  }>({\n    queryKey: [\"/api/dashboard/stats\"],\n    retry: false,\n  });\n\n  const { data: todaysLessons } = useQuery<any[]>({\n    queryKey: [\"/api/lessons/today\"],\n    retry: false,\n  });\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  if (authLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <Layout>\n      <PageLoader>\n        <div className=\"p-4 lg:p-6 space-y-4 lg:space-y-6\">\n          <FadeIn delay={50}>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-12 h-12 gradient-primary rounded-xl flex items-center justify-center icon-glow\">\n                <i className=\"fas fa-chart-line text-white text-lg\"></i>\n              </div>\n              <div>\n                <h2 className=\"text-3xl font-bold text-gradient\">Dashboard</h2>\n                <p className=\"text-sm text-muted-foreground\">Visão geral do sistema de gestão escolar</p>\n              </div>\n            </div>\n          </FadeIn>\n\n        {/* Stats Cards */}\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-4 gap-4 lg:gap-6\">\n              {Array.from({ length: 4 }).map((_, index) => (\n                <FadeIn key={index} delay={100 + index * 50}>\n                  <div className=\"bg-card rounded-lg border border-border p-6 animate-pulse\">\n                    <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n                    <div className=\"h-8 bg-muted rounded w-1/2 mb-2\"></div>\n                    <div className=\"h-3 bg-muted rounded w-2/3\"></div>\n                  </div>\n                </FadeIn>\n              ))}\n            </div>\n          ) : (\n            <StaggeredFadeIn \n              stagger={80}\n              className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-4 gap-4 lg:gap-6\"\n            >\n              {(() => {\n                  const availableCards = [];\n                  \n                  // Admin vê tudo\n                  if (user?.role === 'admin') {\n                    availableCards.push(\n                      <StatsCard\n                        key=\"students\"\n                        title=\"Total de Alunos\"\n                        value={stats?.totalStudents || 0}\n                        change=\"+12%\"\n                        changeType=\"positive\"\n                        icon=\"fas fa-user-graduate\"\n                        iconColor=\"blue\"\n                        data-testid=\"card-total-students\"\n                      />,\n                      <StatsCard\n                        key=\"teachers\"\n                        title=\"Professores Ativos\"\n                        value={stats?.activeTeachers || 0}\n                        change=\"+3%\"\n                        changeType=\"positive\"\n                        icon=\"fas fa-chalkboard-teacher\"\n                        iconColor=\"green\"\n                        data-testid=\"card-active-teachers\"\n                      />,\n                      <StatsCard\n                        key=\"classes\"\n                        title=\"Aulas Hoje\"\n                        value={stats?.todaysClasses || 0}\n                        change=\"92 concluídas\"\n                        changeType=\"neutral\"\n                        icon=\"fas fa-calendar-check\"\n                        iconColor=\"purple\"\n                        data-testid=\"card-todays-classes\"\n                      />,\n                      <StatsCard\n                        key=\"revenue\"\n                        title=\"Receita Mensal\"\n                        value={`R$ ${(stats?.monthlyRevenue || 0).toLocaleString()}`}\n                        change=\"+8%\"\n                        changeType=\"positive\"\n                        icon=\"fas fa-dollar-sign\"\n                        iconColor=\"yellow\"\n                        data-testid=\"card-monthly-revenue\"\n                      />\n                    );\n                  }\n                  // Professor - só vê dados relevantes para ele\n                  else if (user?.role === 'teacher') {\n                    availableCards.push(\n                      <StatsCard\n                        key=\"my-students\"\n                        title=\"Meus Alunos\"\n                        value={85}\n                        change=\"+5 novos\"\n                        changeType=\"positive\"\n                        icon=\"fas fa-user-graduate\"\n                        iconColor=\"blue\"\n                        data-testid=\"card-my-students\"\n                      />,\n                      <StatsCard\n                        key=\"my-classes\"\n                        title=\"Minhas Turmas\"\n                        value={4}\n                        change=\"2 ativas hoje\"\n                        changeType=\"neutral\"\n                        icon=\"fas fa-users\"\n                        iconColor=\"green\"\n                        data-testid=\"card-my-classes\"\n                      />,\n                      <StatsCard\n                        key=\"classes-today\"\n                        title=\"Aulas Hoje\"\n                        value={stats?.todaysClasses || 0}\n                        change=\"próximas\"\n                        changeType=\"neutral\"\n                        icon=\"fas fa-calendar-check\"\n                        iconColor=\"purple\"\n                        data-testid=\"card-todays-classes\"\n                      />\n                    );\n                  }\n                  // Secretary - vê tudo exceto receita\n                  else if (user?.role === 'secretary') {\n                    availableCards.push(\n                      <StatsCard\n                        key=\"students\"\n                        title=\"Total de Alunos\"\n                        value={stats?.totalStudents || 0}\n                        change=\"+12%\"\n                        changeType=\"positive\"\n                        icon=\"fas fa-user-graduate\"\n                        iconColor=\"blue\"\n                        data-testid=\"card-total-students\"\n                      />,\n                      <StatsCard\n                        key=\"teachers\"\n                        title=\"Professores Ativos\"\n                        value={stats?.activeTeachers || 0}\n                        change=\"+3%\"\n                        changeType=\"positive\"\n                        icon=\"fas fa-chalkboard-teacher\"\n                        iconColor=\"green\"\n                        data-testid=\"card-active-teachers\"\n                      />,\n                      <StatsCard\n                        key=\"classes\"\n                        title=\"Aulas Hoje\"\n                        value={stats?.todaysClasses || 0}\n                        change=\"92 concluídas\"\n                        changeType=\"neutral\"\n                        icon=\"fas fa-calendar-check\"\n                        iconColor=\"purple\"\n                        data-testid=\"card-todays-classes\"\n                      />\n                    );\n                  }\n                  // Student - só vê suas aulas\n                  else if (user?.role === 'student') {\n                    availableCards.push(\n                      <StatsCard\n                        key=\"classes\"\n                        title=\"Minhas Aulas Hoje\"\n                        value={stats?.todaysClasses || 0}\n                        change=\"próximas aulas\"\n                        changeType=\"neutral\"\n                        icon=\"fas fa-calendar-check\"\n                        iconColor=\"purple\"\n                        data-testid=\"card-my-classes\"\n                      />\n                    );\n                  }\n                  \n                  return availableCards;\n                })()}\n              </StaggeredFadeIn>\n            )}\n\n        {/* Main Content Grid */}\n          <FadeIn delay={300}>\n            <div className=\"grid grid-cols-1 xl:grid-cols-3 gap-4 lg:gap-6\">\n              {/* Schedule Overview */}\n              <div className=\"xl:col-span-2 glassmorphism-card rounded-2xl border border-white/20 shadow-xl\">\n            <div className=\"p-6 border-b border-white/20\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-8 h-8 gradient-secondary rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-calendar-day text-white text-sm\"></i>\n                  </div>\n                  <h3 className=\"text-lg font-semibold text-foreground\">Agenda de Hoje</h3>\n                </div>\n                <button className=\"gradient-primary text-white px-4 py-2 rounded-lg text-sm font-medium hover:shadow-lg transition-smooth\">\n                  Ver todas\n                </button>\n              </div>\n            </div>\n            <div className=\"p-6\" data-testid=\"todays-schedule\">\n              <div className=\"space-y-4\">\n                {!todaysLessons || todaysLessons.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <i className=\"fas fa-calendar-times text-muted-foreground text-4xl mb-4\"></i>\n                    <p className=\"text-muted-foreground\">Nenhuma aula agendada para hoje</p>\n                  </div>\n                ) : (\n                  todaysLessons.map((lesson: any) => (\n                    <div key={lesson.id} className=\"flex items-center space-x-4 p-4 rounded-lg bg-muted/50 border border-border/50\">\n                      <div className=\"w-12 h-12 bg-primary rounded-lg flex items-center justify-center flex-shrink-0\">\n                        <i className=\"fas fa-clock text-primary-foreground\"></i>\n                      </div>\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-medium text-foreground\">{lesson.title}</h4>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {lesson.startTime} - {lesson.endTime}\n                          {lesson.room && ` • Sala ${lesson.room}`}\n                        </p>\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        <button className=\"px-3 py-1 text-xs bg-green-100 text-green-700 rounded-full\">\n                          {lesson.status === 'scheduled' ? 'Agendado' : \n                           lesson.status === 'in_progress' ? 'Em andamento' : \n                           'Concluído'}\n                        </button>\n                      </div>\n                    </div>\n                  ))\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Recent Activities */}\n          <div className=\"glassmorphism-card rounded-2xl border border-white/20 shadow-xl\">\n            <div className=\"p-6 border-b border-white/20\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-8 h-8 gradient-accent rounded-lg flex items-center justify-center\">\n                  <i className=\"fas fa-clock text-white text-sm\"></i>\n                </div>\n                <h3 className=\"text-lg font-semibold text-foreground\">Atividades Recentes</h3>\n              </div>\n            </div>\n            <div className=\"p-6\">\n              <div className=\"space-y-4\" data-testid=\"recent-activities\">\n                <div className=\"text-center py-8\">\n                  <i className=\"fas fa-clock text-muted-foreground text-4xl mb-4\"></i>\n                  <p className=\"text-muted-foreground\">Nenhuma atividade recente</p>\n                </div>\n              </div>\n            </div>\n          </div>\n          </div>\n          </FadeIn>\n\n        </div>\n      </PageLoader>\n    </Layout>\n  );\n}\n","size_bytes":12896},"frontend/client/src/pages/Financial.tsx":{"content":"\nimport { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Layout from \"@/components/Layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { PageLoader, FadeIn, StaggeredFadeIn } from \"@/components/PageLoader\";\nimport { Mail, MessageSquare, Phone, Edit } from \"lucide-react\";\n\ninterface Customer {\n  id: string;\n  name: string;\n  plan: string;\n  responsible: string;\n  valueInArrears: number;\n  daysInArrears: number;\n  lastContact: string;\n  contact: string;\n  status: 'first-notice' | 'negotiation' | 'second-notice';\n}\n\nexport default function Financial() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading: authLoading, user } = useAuth();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  // Mock data baseado na imagem\n  const [financialData] = useState({\n    totalInArrears: 3030.00,\n    accountsInArrears: 3,\n    averageDelay: 16,\n    defaultRate: 12.5\n  });\n\n  const [customers] = useState<Customer[]>([\n    {\n      id: \"1\",\n      name: \"Larissa Oliveira\",\n      plan: \"Mensalidade Semestral - 1ª parcela\",\n      responsible: \"Roberto Oliveira\",\n      valueInArrears: 2400.00,\n      daysInArrears: 15,\n      lastContact: \"2024-01-10\",\n      contact: \"63\",\n      status: 'first-notice'\n    },\n    {\n      id: \"2\", \n      name: \"Carlos Eduardo Lima\",\n      plan: \"Mensalidade Janeiro\",\n      responsible: \"Sandra Lima\",\n      valueInArrears: 630.00,\n      daysInArrears: 8,\n      lastContact: \"2024-01-15\",\n      contact: \"11\",\n      status: 'negotiation'\n    }\n  ]);\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"Você foi desconectado. Redirecionando...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  if (authLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  // Check permissions\n  const canViewFinancial = user?.role === 'admin';\n\n  if (!canViewFinancial) {\n    return (\n      <Layout>\n        <div className=\"flex items-center justify-center h-full\">\n          <div className=\"text-center\">\n            <i className=\"fas fa-lock text-muted-foreground text-6xl mb-4\"></i>\n            <h3 className=\"text-xl font-semibold mb-2\">Acesso Negado</h3>\n            <p className=\"text-muted-foreground\">Você não tem permissão para acessar esta área.</p>\n          </div>\n        </div>\n      </Layout>\n    );\n  }\n\n  const filteredCustomers = customers.filter(customer =>\n    customer.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    customer.responsible.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'first-notice':\n        return <Badge variant=\"outline\">Primeiro Aviso</Badge>;\n      case 'negotiation':\n        return <Badge variant=\"outline\">Negociação</Badge>;\n      case 'second-notice':\n        return <Badge variant=\"outline\">Segundo Aviso</Badge>;\n      default:\n        return <Badge variant=\"secondary\">Status</Badge>;\n    }\n  };\n\n  const getStatusCount = (status: string) => {\n    return customers.filter(c => c.status === status).length;\n  };\n\n  return (\n    <Layout>\n      <PageLoader>\n        <div className=\"p-4 lg:p-6 space-y-4 lg:space-y-6\">\n          <FadeIn delay={50}>\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-12 h-12 gradient-primary rounded-xl flex items-center justify-center icon-glow\">\n                  <i className=\"fas fa-dollar-sign text-white text-lg\"></i>\n                </div>\n                <div>\n                  <h2 className=\"text-3xl font-bold text-gradient\">Controle de Inadimplência</h2>\n                  <p className=\"text-sm text-muted-foreground\">Dashboard de inadimplência e recuperação de crédito</p>\n                </div>\n              </div>\n              <div className=\"flex space-x-2\">\n                <Button variant=\"outline\" className=\"gap-2\">\n                  <Mail className=\"w-4 h-4\" />\n                  Enviar E-mails\n                </Button>\n                <Button className=\"gap-2 bg-purple-600 hover:bg-purple-700\">\n                  <MessageSquare className=\"w-4 h-4\" />\n                  Notificar WhatsApp\n                </Button>\n              </div>\n            </div>\n          </FadeIn>\n\n          {/* Stats Cards */}\n          <StaggeredFadeIn \n            stagger={80}\n            className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4 lg:gap-6\"\n          >\n            <Card className=\"glassmorphism-card rounded-2xl border border-white/20 shadow-xl\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Total Inadimplência</p>\n                    <p className=\"text-2xl font-bold text-foreground\">\n                      R$ {financialData.totalInArrears.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}\n                    </p>\n                  </div>\n                  <div className=\"w-8 h-8 bg-red-600 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-exclamation-triangle text-white\"></i>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glassmorphism-card rounded-2xl border border-white/20 shadow-xl\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Contas em Atraso</p>\n                    <p className=\"text-2xl font-bold text-foreground\">{financialData.accountsInArrears}</p>\n                  </div>\n                  <div className=\"w-8 h-8 bg-purple-600 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-calendar-times text-white\"></i>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glassmorphism-card rounded-2xl border border-white/20 shadow-xl\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Média de Atraso</p>\n                    <p className=\"text-2xl font-bold text-foreground\">{financialData.averageDelay} dias</p>\n                  </div>\n                  <div className=\"w-8 h-8 bg-yellow-600 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-clock text-white\"></i>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glassmorphism-card rounded-2xl border border-white/20 shadow-xl\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Taxa de Inadimplência</p>\n                    <p className=\"text-2xl font-bold text-foreground\">{financialData.defaultRate}%</p>\n                  </div>\n                  <div className=\"w-8 h-8 bg-orange-600 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-chart-line text-white\"></i>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </StaggeredFadeIn>\n\n          {/* Status Cards Row */}\n          <StaggeredFadeIn \n            stagger={100}\n            className=\"grid grid-cols-1 md:grid-cols-3 gap-4 lg:gap-6\"\n          >\n            <Card className=\"glassmorphism-card rounded-2xl border border-white/20 shadow-xl\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-lg font-bold text-foreground\">{getStatusCount('first-notice')}</p>\n                    <p className=\"text-sm text-muted-foreground\">Primeiro Aviso</p>\n                    <p className=\"text-xs text-muted-foreground/70\">Contatos iniciais</p>\n                  </div>\n                  <div className=\"w-8 h-8 bg-yellow-600 rounded-lg flex items-center justify-center\">\n                    <span className=\"text-white font-bold\">●</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glassmorphism-card rounded-2xl border border-white/20 shadow-xl\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-lg font-bold text-foreground\">{getStatusCount('negotiation')}</p>\n                    <p className=\"text-sm text-muted-foreground\">Em Negociação</p>\n                    <p className=\"text-xs text-muted-foreground/70\">Acordos em andamento</p>\n                  </div>\n                  <div className=\"w-8 h-8 bg-purple-600 rounded-lg flex items-center justify-center\">\n                    <span className=\"text-white font-bold\">●</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glassmorphism-card rounded-2xl border border-white/20 shadow-xl\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-lg font-bold text-foreground\">{getStatusCount('second-notice')}</p>\n                    <p className=\"text-sm text-muted-foreground\">Segundo Aviso</p>\n                    <p className=\"text-xs text-muted-foreground/70\">Situação crítica</p>\n                  </div>\n                  <div className=\"w-8 h-8 bg-red-600 rounded-lg flex items-center justify-center\">\n                    <span className=\"text-white font-bold\">●</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </StaggeredFadeIn>\n\n          {/* Contas em Atraso */}\n          <FadeIn delay={300}>\n            <Card className=\"glassmorphism-card rounded-2xl border border-white/20 shadow-xl\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-8 h-8 bg-red-600 rounded-lg flex items-center justify-center\">\n                      <i className=\"fas fa-exclamation-triangle text-white text-sm\"></i>\n                    </div>\n                    <CardTitle className=\"text-lg font-semibold\">Contas em Atraso</CardTitle>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Input\n                      placeholder=\"Buscar cliente...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"w-64\"\n                    />\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {filteredCustomers.map((customer) => (\n                    <div key={customer.id} className=\"p-4 rounded-lg bg-muted/50 border border-border/50\">\n                      <div className=\"flex items-center justify-between mb-3\">\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-semibold text-foreground\">{customer.name}</h4>\n                          <p className=\"text-sm text-muted-foreground\">{customer.plan}</p>\n                          <p className=\"text-xs text-muted-foreground\">Responsável: {customer.responsible}</p>\n                        </div>\n                        <div className=\"text-right mr-4\">\n                          <p className=\"text-sm text-muted-foreground\">Valor em Atraso</p>\n                          <p className=\"text-lg font-bold text-red-600\">\n                            R$ {customer.valueInArrears.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}\n                          </p>\n                        </div>\n                        <div className=\"text-right mr-4\">\n                          <p className=\"text-sm text-muted-foreground\">Dias em Atraso</p>\n                          <p className=\"text-lg font-bold text-foreground\">{customer.daysInArrears} dias</p>\n                        </div>\n                        <div className=\"text-right mr-4\">\n                          <p className=\"text-sm text-muted-foreground\">Último Contato</p>\n                          <p className=\"text-sm text-foreground\">{customer.lastContact}</p>\n                        </div>\n                        <div className=\"text-right mr-4\">\n                          <p className=\"text-sm text-muted-foreground\">Contato</p>\n                          <p className=\"text-sm text-foreground\">{customer.contact}</p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-3\">\n                          {getStatusBadge(customer.status)}\n                          <div className=\"flex space-x-2\">\n                            <Button size=\"sm\" variant=\"outline\" className=\"gap-1\">\n                              <Phone className=\"w-3 h-3\" />\n                              Ligar\n                            </Button>\n                            <Button size=\"sm\" variant=\"outline\" className=\"gap-1\">\n                              <Mail className=\"w-3 h-3\" />\n                              E-mail\n                            </Button>\n                            <Button size=\"sm\" variant=\"outline\" className=\"gap-1\">\n                              <MessageSquare className=\"w-3 h-3\" />\n                              WhatsApp\n                            </Button>\n                          </div>\n                        </div>\n                        <div className=\"flex space-x-2\">\n                          <Button size=\"sm\" className=\"gap-1 bg-purple-600 hover:bg-purple-700\">\n                            Negociar\n                          </Button>\n                          <Button size=\"sm\" variant=\"outline\" className=\"gap-1\">\n                            <Edit className=\"w-3 h-3\" />\n                            Editar\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </FadeIn>\n        </div>\n      </PageLoader>\n    </Layout>\n  );\n}\n","size_bytes":15515},"frontend/client/src/pages/Landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { ThemeToggle } from \"@/components/ThemeToggle\";\nimport { useState, useEffect } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\n\n// Demo users for display\nconst demoUsers = [\n  { email: 'admin@demo.com', password: 'admin123', role: 'Administrador' },\n  { email: 'teacher@demo.com', password: 'teacher123', role: 'Professor' },\n  { email: 'secretary@demo.com', password: 'secretary123', role: 'Secretário' },\n  { email: 'student@demo.com', password: 'student123', role: 'Aluno' },\n];\n\nexport default function Landing() {\n  const [email, setEmail] = useState(\"admin@demo.com\");\n  const [password, setPassword] = useState(\"admin123\");\n  const [stars, setStars] = useState<Array<{ id: number; x: number; y: number; size: number; animationDelay: number }>>([]);\n\n  useEffect(() => {\n    // Generate random stars for the background\n    const generateStars = () => {\n      const newStars = [];\n      for (let i = 0; i < 100; i++) {\n        newStars.push({\n          id: i,\n          x: Math.random() * 100,\n          y: Math.random() * 100,\n          size: Math.random() * 3 + 1,\n          animationDelay: Math.random() * 3\n        });\n      }\n      setStars(newStars);\n    };\n\n    generateStars();\n  }, []);\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: { email: string; password: string }) => {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(credentials),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Login failed');\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      // Redirect to main app\n      window.location.href = '/';\n    },\n    onError: (error: Error) => {\n      alert('Erro no login: ' + error.message);\n    },\n  });\n\n  const handleLogin = () => {\n    loginMutation.mutate({ email, password });\n  };\n\n  const setDemoUser = (user: { email: string; password: string }) => {\n    setEmail(user.email);\n    setPassword(user.password);\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col lg:flex-row relative\">\n      {/* Theme Toggle - Fixed top right */}\n      <div className=\"fixed top-4 right-4 z-50\">\n        <ThemeToggle />\n      </div>\n      \n      {/* Left Column - Welcome Section with Stars */}\n      <div className=\"hidden lg:flex lg:w-1/2 relative bg-gradient-to-br from-purple-900 via-purple-700 to-purple-800 overflow-hidden\">\n        {/* Stars Animation */}\n        <div className=\"absolute inset-0\">\n          {stars.map((star) => (\n            <div\n              key={star.id}\n              className=\"absolute bg-white rounded-full animate-twinkle\"\n              style={{\n                left: `${star.x}%`,\n                top: `${star.y}%`,\n                width: `${star.size}px`,\n                height: `${star.size}px`,\n                animationDelay: `${star.animationDelay}s`,\n                animationDuration: '3s'\n              }}\n            />\n          ))}\n        </div>\n\n        {/* Overlay gradient */}\n        <div className=\"absolute inset-0 bg-gradient-to-t from-black/30 to-transparent\" />\n\n        {/* Content */}\n        <div className=\"relative z-10 flex flex-col justify-center items-center text-center px-8 lg:px-12 text-white w-full\">\n          <div className=\"w-20 h-20 bg-white/20 backdrop-blur-sm rounded-3xl flex items-center justify-center mb-8 border border-white/30\">\n            <i className=\"fas fa-graduation-cap text-white text-3xl\"></i>\n          </div>\n\n          <h1 className=\"text-5xl font-bold mb-4 bg-gradient-to-r from-white to-orange-200 bg-clip-text text-transparent\">\n            Bem-vindo ao Portal\n          </h1>\n\n          <h2 className=\"text-3xl font-semibold mb-6 text-orange-100\">\n            OpenLife\n          </h2>\n\n          <p className=\"text-xl text-orange-200 mb-8 max-w-md leading-relaxed\">\n            Sistema completo de gestão escolar para escolas de idiomas. \n            Gerencie alunos, professores, horários e muito mais.\n          </p>\n\n          <div className=\"grid grid-cols-2 gap-4 lg:gap-6 mt-8 w-full max-w-sm mx-auto\">\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 lg:w-16 lg:h-16 bg-white/20 backdrop-blur-sm rounded-2xl flex items-center justify-center mx-auto mb-3 border border-white/30\">\n                <i className=\"fas fa-users text-white text-lg lg:text-2xl\"></i>\n              </div>\n              <p className=\"text-xs lg:text-sm text-orange-200\">Gestão de Alunos</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 lg:w-16 lg:h-16 bg-white/20 backdrop-blur-sm rounded-2xl flex items-center justify-center mx-auto mb-3 border border-white/30\">\n                <i className=\"fas fa-calendar-alt text-white text-lg lg:text-2xl\"></i>\n              </div>\n              <p className=\"text-xs lg:text-sm text-orange-200\">Agenda Inteligente</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Right Column - Login Form */}\n      <div className=\"w-full lg:w-1/2 flex items-center justify-center p-4 sm:p-6 lg:p-8 bg-gradient-to-br from-purple-100 via-purple-50 to-indigo-100 dark:from-gray-900 dark:via-gray-800 dark:to-black theme-transition min-h-screen lg:min-h-auto\">\n        <div className=\"w-full max-w-md mx-auto\">\n          {/* Mobile Logo */}\n          <div className=\"lg:hidden text-center mb-8\">\n            <div className=\"w-16 h-16 bg-primary rounded-2xl flex items-center justify-center mx-auto mb-4\">\n              <i className=\"fas fa-graduation-cap text-primary-foreground text-2xl\"></i>\n            </div>\n            <h1 className=\"text-2xl font-bold text-foreground\">OpenLife</h1>\n            <p className=\"text-muted-foreground\">Sistema de Gestão Escolar</p>\n          </div>\n\n\n          <Card className=\"shadow-2xl glassmorphism-card mb-6 theme-transition\">\n            <CardHeader className=\"space-y-4 pb-6\">\n              <div className=\"text-center\">\n                <CardTitle className=\"text-2xl font-bold text-foreground\">\n                  Login Demonstrativo\n                </CardTitle>\n                <CardDescription className=\"text-muted-foreground mt-2\">\n                  Escolha um usuário demo ou digite suas credenciais\n                </CardDescription>\n              </div>\n            </CardHeader>\n\n            <CardContent className=\"space-y-6\">\n              {/* Demo Users */}\n              <div className=\"space-y-3\">\n                <Label className=\"text-sm font-medium\">Usuários Demo:</Label>\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-2\">\n                  {demoUsers.map((user, index) => (\n                    <Button\n                      key={index}\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setDemoUser(user)}\n                      className=\"h-auto p-3 flex flex-col items-start bg-white/30 dark:bg-white/10 hover:bg-blue-50 dark:hover:bg-white/20 border-gray-200 dark:border-gray-600 text-left transition-all duration-200\"\n                    >\n                      <span className=\"font-medium text-xs\">{user.role}</span>\n                      <span className=\"text-xs text-muted-foreground truncate w-full\">\n                        {user.email}\n                      </span>\n                    </Button>\n                  ))}\n                </div>\n              </div>\n\n              <div className=\"relative\">\n                <div className=\"absolute inset-0 flex items-center\">\n                  <span className=\"w-full border-t border-gray-200\" />\n                </div>\n                <div className=\"relative flex justify-center text-xs uppercase\">\n                  <span className=\"bg-white dark:bg-gray-800 px-2 text-muted-foreground\">\n                    Ou digite manualmente\n                  </span>\n                </div>\n              </div>\n\n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\" className=\"text-sm font-medium\">\n                    Email\n                  </Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"seu@email.com\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                    className=\"h-10 sm:h-12 bg-white/30 dark:bg-white/10 border-gray-200 dark:border-gray-600 focus:border-primary dark:focus:border-primary\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password\" className=\"text-sm font-medium\">\n                    Senha\n                  </Label>\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    placeholder=\"••••••••\"\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    className=\"h-10 sm:h-12 bg-white/30 dark:bg-white/10 border-gray-200 dark:border-gray-600 focus:border-primary dark:focus:border-primary\"\n                  />\n                </div>\n              </div>\n\n              <Button \n                onClick={handleLogin}\n                disabled={loginMutation.isPending}\n                className=\"w-full h-10 sm:h-12 bg-gradient-to-r from-primary to-blue-600 hover:from-primary/90 hover:to-blue-600/90 text-white font-medium text-sm sm:text-base shadow-lg hover:shadow-xl transition-all duration-200 button-hover-effect\"\n                data-testid=\"button-login\"\n              >\n                <i className=\"fas fa-sign-in-alt mr-2\"></i>\n                {loginMutation.isPending ? 'Entrando...' : 'Entrar no Sistema'}\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Demo Info */}\n          <Card className=\"border-border bg-muted/50 theme-transition\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"w-6 h-6 bg-primary rounded-full flex items-center justify-center flex-shrink-0 mt-0.5\">\n                  <i className=\"fas fa-info text-primary-foreground text-xs\"></i>\n                </div>\n                <div>\n                  <h3 className=\"font-medium text-foreground mb-1\">Sistema Demonstrativo</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Este é um ambiente de demonstração. Todos os dados são fictícios e \n                    serão redefinidos periodicamente.\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"mt-8 text-center\">\n            <p className=\"text-xs text-muted-foreground\">\n              © 2024 OpenLife. Todos os direitos reservados.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":11332},"frontend/client/src/pages/Permissions.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport Layout from \"@/components/Layout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { insertRoleSchema } from \"@shared/schema\";\nimport { Crown, UserCog, GraduationCap, BookOpen, Shield, Settings, CheckCircle, Tag, Info, Plus, Edit, Trash2 } from \"lucide-react\";\n\n// Schema baseado no compartilhado com validações específicas da UI\nconst createRoleSchema = insertRoleSchema\n  .omit({ isSystemRole: true }) // Remove campo de sistema para segurança\n  .extend({\n    name: z.string()\n      .min(1, \"Nome é obrigatório\")\n      .max(50, \"Nome deve ter no máximo 50 caracteres\")\n      .regex(/^[a-zA-Z0-9_-]+$/, \"Nome deve conter apenas letras, números, underscore e hífen\")\n      .refine(\n        (value) => !['admin', 'secretary', 'teacher', 'student'].includes(value.toLowerCase()),\n        \"Este nome é reservado pelo sistema\"\n      ),\n    displayName: z.string()\n      .min(1, \"Nome de exibição é obrigatório\")\n      .max(100, \"Nome de exibição deve ter no máximo 100 caracteres\"),\n    description: z.string()\n      .max(500, \"Descrição deve ter no máximo 500 caracteres\")\n      .optional()\n  });\n\ntype CreateRoleFormData = z.infer<typeof createRoleSchema>;\n\nexport default function Permissions() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [selectedRole, setSelectedRole] = useState<any>(null);\n  const [permissionsModalOpen, setPermissionsModalOpen] = useState(false);\n  const [selectedPermissions, setSelectedPermissions] = useState<string[]>([]);\n  const [createRoleModalOpen, setCreateRoleModalOpen] = useState(false);\n  const [editRoleModalOpen, setEditRoleModalOpen] = useState(false);\n  const [roleToEdit, setRoleToEdit] = useState<any>(null);\n\n  // Apenas admin pode acessar (removido developer conforme solicitado)\n  if (!user || user.role !== 'admin') {\n    return (\n      <Layout>\n        <div className=\"p-6\">\n          <div className=\"text-center\">\n            <h2 className=\"text-2xl font-bold text-red-600 mb-4\">Acesso Negado</h2>\n            <p className=\"text-muted-foreground\">\n              Apenas o administrador pode gerenciar permissões do sistema.\n            </p>\n          </div>\n        </div>\n      </Layout>\n    );\n  }\n\n  // Buscar todos os roles do sistema\n  const { data: roles, isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/roles\"],\n    retry: false,\n  });\n\n  // Buscar todas as permissões disponíveis\n  const { data: permissions } = useQuery<any[]>({\n    queryKey: [\"/api/permissions\"],\n    retry: false,\n  });\n\n  // Buscar permissões do role selecionado\n  const { \n    data: roleWithPermissions, \n    isLoading: rolePermissionsLoading \n  } = useQuery({\n    queryKey: [\"/api/roles\", selectedRole?.id, \"permissions\"],\n    enabled: !!selectedRole?.id && permissionsModalOpen,\n    retry: false,\n  });\n\n  // Mutation para atualizar permissões do role\n  const updateRolePermissionsMutation = useMutation({\n    mutationFn: async (data: { roleId: string; permissionIds: string[] }) => {\n      await apiRequest(\"PUT\", `/api/roles/${data.roleId}/permissions`, { permissionIds: data.permissionIds });\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/roles\", variables.roleId, \"permissions\"] });\n      toast({\n        title: \"Sucesso!\",\n        description: \"Permissões do nível atualizadas com sucesso.\",\n      });\n      setPermissionsModalOpen(false);\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao atualizar permissões do nível. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mutation para criar novo role\n  const createRoleMutation = useMutation({\n    mutationFn: async (data: CreateRoleFormData) => {\n      await apiRequest(\"POST\", \"/api/roles\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/roles\"] });\n      toast({\n        title: \"Sucesso!\",\n        description: \"Novo nível de acesso criado com sucesso.\",\n      });\n      setCreateRoleModalOpen(false);\n      createRoleForm.reset();\n    },\n    onError: (error: any) => {\n      let errorMessage = \"Erro ao criar nível de acesso. Tente novamente.\";\n      \n      // Tratar erro 409 (conflito) especificamente\n      if (error.response?.status === 409 || error.message?.includes(\"already exists\")) {\n        errorMessage = \"Nome já em uso ou reservado pelo sistema.\";\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n      \n      toast({\n        title: \"Erro\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mutation para atualizar role\n  const updateRoleMutation = useMutation({\n    mutationFn: async (data: { id: string; roleData: Partial<CreateRoleFormData> }) => {\n      await apiRequest(\"PUT\", `/api/roles/${data.id}`, data.roleData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/roles\"] });\n      toast({\n        title: \"Sucesso!\",\n        description: \"Nível de acesso atualizado com sucesso.\",\n      });\n      setEditRoleModalOpen(false);\n      setRoleToEdit(null);\n      editRoleForm.reset();\n    },\n    onError: (error: any) => {\n      let errorMessage = \"Erro ao atualizar nível de acesso. Tente novamente.\";\n      \n      // Tratar erro 409 (conflito) especificamente\n      if (error.response?.status === 409 || error.message?.includes(\"already exists\")) {\n        errorMessage = \"Nome já em uso ou reservado pelo sistema.\";\n      } else if (error.response?.status === 403 || error.message?.includes(\"Cannot modify\")) {\n        errorMessage = \"Não é possível modificar níveis de sistema.\";\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n      \n      toast({\n        title: \"Erro\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mutation para deletar role\n  const deleteRoleMutation = useMutation({\n    mutationFn: async (roleId: string) => {\n      await apiRequest(\"DELETE\", `/api/roles/${roleId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/roles\"] });\n      toast({\n        title: \"Sucesso!\",\n        description: \"Nível de acesso removido com sucesso.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Erro ao remover nível de acesso. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Form para criação de role\n  const createRoleForm = useForm<CreateRoleFormData>({\n    resolver: zodResolver(createRoleSchema),\n    defaultValues: {\n      name: \"\",\n      displayName: \"\",\n      description: \"\",\n    },\n  });\n\n  // Form para edição de role\n  const editRoleForm = useForm<CreateRoleFormData>({\n    resolver: zodResolver(createRoleSchema),\n    defaultValues: {\n      name: \"\",\n      displayName: \"\",\n      description: \"\",\n    },\n  });\n\n  // Mapear roles para os 4 tipos fixos\n  const getRoleInfo = (role: string) => {\n    switch (role) {\n      case 'admin':\n        return { \n          icon: Crown, \n          color: 'bg-red-100 text-red-700 dark:bg-red-900 dark:text-red-300',\n          displayName: 'Administrativo'\n        };\n      case 'secretary':\n        return { \n          icon: UserCog, \n          color: 'bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-300',\n          displayName: 'Secretario'\n        };\n      case 'teacher':\n        return { \n          icon: BookOpen, \n          color: 'bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300',\n          displayName: 'Professor'\n        };\n      case 'student':\n        return { \n          icon: GraduationCap, \n          color: 'bg-purple-100 text-purple-700 dark:bg-purple-900 dark:text-purple-300',\n          displayName: 'Aluno'\n        };\n      default:\n        return { \n          icon: UserCog, \n          color: 'bg-gray-100 text-gray-700 dark:bg-gray-900 dark:text-gray-300',\n          displayName: role\n        };\n    }\n  };\n\n  // Abrir modal de permissões\n  const handleManagePermissions = (role: any) => {\n    setSelectedRole(role);\n    setPermissionsModalOpen(true);\n  };\n\n  // Salvar permissões\n  const handleSavePermissions = () => {\n    if (!selectedRole?.id) return;\n    \n    updateRolePermissionsMutation.mutate({\n      roleId: selectedRole.id,\n      permissionIds: selectedPermissions\n    });\n  };\n\n  // Criar novo role\n  const handleCreateRole = (data: CreateRoleFormData) => {\n    createRoleMutation.mutate(data);\n  };\n\n  // Abrir modal de edição\n  const handleEditRole = (role: any) => {\n    if (role.isSystemRole) {\n      toast({\n        title: \"Não permitido\",\n        description: \"Níveis de sistema não podem ser editados.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    setRoleToEdit(role);\n    editRoleForm.reset({\n      name: role.name,\n      displayName: role.displayName,\n      description: role.description || \"\",\n    });\n    setEditRoleModalOpen(true);\n  };\n\n  // Atualizar role\n  const handleUpdateRole = (data: CreateRoleFormData) => {\n    if (!roleToEdit?.id) return;\n    \n    updateRoleMutation.mutate({\n      id: roleToEdit.id,\n      roleData: data\n    });\n  };\n\n  // Deletar role\n  const handleDeleteRole = (role: any) => {\n    if (role.isSystemRole) {\n      toast({\n        title: \"Não permitido\",\n        description: \"Níveis de sistema não podem ser removidos.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (confirm(`Tem certeza que deseja remover o nível \"${role.displayName}\"? Esta ação não pode ser desfeita.`)) {\n      deleteRoleMutation.mutate(role.id);\n    }\n  };\n\n  // Inicializar permissões selecionadas quando modal abre\n  useEffect(() => {\n    if (permissionsModalOpen && roleWithPermissions && (roleWithPermissions as any)?.rolePermissions) {\n      const grantedPermissionIds = (roleWithPermissions as any).rolePermissions\n        .map((rp: any) => rp.permission.id);\n      setSelectedPermissions(grantedPermissionIds);\n    }\n  }, [permissionsModalOpen, roleWithPermissions]);\n\n  // Limpar estados quando modal fecha\n  useEffect(() => {\n    if (!permissionsModalOpen) {\n      setSelectedPermissions([]);\n      setSelectedRole(null);\n    }\n  }, [permissionsModalOpen]);\n\n  // Toggle permissão\n  const togglePermission = (permissionId: string) => {\n    setSelectedPermissions(prev => \n      prev.includes(permissionId)\n        ? prev.filter(id => id !== permissionId)\n        : [...prev, permissionId]\n    );\n  };\n\n  return (\n    <Layout>\n      <div className=\"p-6 space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\" data-testid=\"text-permissions-title\">\n              Gerenciamento de Níveis de Acesso\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Configure as permissões para cada nível de usuário do sistema\n            </p>\n          </div>\n          \n          <div className=\"flex items-center gap-4\">\n            <Button \n              onClick={() => setCreateRoleModalOpen(true)}\n              className=\"flex items-center gap-2\"\n              data-testid=\"button-create-role\"\n            >\n              <Plus className=\"w-4 h-4\" />\n              Adicionar Novo Nível\n            </Button>\n            \n            <div className=\"text-sm text-muted-foreground bg-muted px-3 py-2 rounded-lg flex items-center\">\n              <Info className=\"w-4 h-4 mr-2\" />\n              4 níveis fixos + personalizados\n            </div>\n          </div>\n        </div>\n\n        {/* Cards dos níveis/roles */}\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {Array.from({ length: 4 }).map((_, index) => (\n              <Card key={index} className=\"animate-pulse\">\n                <CardHeader>\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-16 h-16 bg-muted rounded-lg\"></div>\n                    <div className=\"flex-1 space-y-2\">\n                      <div className=\"h-6 bg-muted rounded w-3/4\"></div>\n                      <div className=\"h-4 bg-muted rounded w-1/2\"></div>\n                    </div>\n                  </div>\n                </CardHeader>\n              </Card>\n            ))}\n          </div>\n        ) : !roles || roles.length === 0 ? (\n          <Card>\n            <CardContent className=\"py-12 text-center\">\n              <Shield className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">Nenhum nível encontrado</h3>\n              <p className=\"text-muted-foreground\">\n                Não há níveis de acesso configurados no sistema.\n              </p>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {roles.map((role: any) => {\n              const roleInfo = getRoleInfo(role.name);\n              const IconComponent = roleInfo.icon;\n              return (\n                <Card key={role.id} className=\"hover:shadow-md transition-shadow\">\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className={`w-16 h-16 rounded-lg flex items-center justify-center ${roleInfo.color}`}>\n                        <IconComponent className=\"w-8 h-8\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <CardTitle className=\"text-xl\">\n                          {role.displayName ?? roleInfo.displayName}\n                        </CardTitle>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {role.description ?? 'Nível de acesso do sistema'}\n                        </p>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  \n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        <Tag className=\"w-3 h-3 mr-1\" />\n                        {role.isSystemRole ? 'Sistema' : 'Personalizado'}\n                      </Badge>\n                      {role.isActive && (\n                        <Badge variant=\"secondary\" className=\"text-xs text-green-700 bg-green-100 dark:text-green-300 dark:bg-green-900\">\n                          <CheckCircle className=\"w-3 h-3 mr-1\" />\n                          Ativo\n                        </Badge>\n                      )}\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <Button \n                        onClick={() => handleManagePermissions(role)}\n                        className=\"w-full\"\n                        size=\"sm\"\n                        data-testid={`button-manage-permissions-${role.id}`}\n                      >\n                        <Settings className=\"w-4 h-4 mr-2\" />\n                        Configurar Permissões\n                      </Button>\n                      \n                      {!role.isSystemRole && (\n                        <div className=\"flex gap-2\">\n                          <Button\n                            onClick={() => handleEditRole(role)}\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"flex-1\"\n                            data-testid={`button-edit-role-${role.id}`}\n                          >\n                            <Edit className=\"w-4 h-4 mr-2\" />\n                            Editar\n                          </Button>\n                          \n                          <Button\n                            onClick={() => handleDeleteRole(role)}\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"flex-1 border-red-200 text-red-600 hover:bg-red-50 dark:border-red-800 dark:text-red-400 dark:hover:bg-red-950\"\n                            data-testid={`button-delete-role-${role.id}`}\n                          >\n                            <Trash2 className=\"w-4 h-4 mr-2\" />\n                            Remover\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        )}\n\n        {/* Modal de Permissões */}\n        <Dialog open={permissionsModalOpen} onOpenChange={setPermissionsModalOpen}>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>\n                Configurar Permissões do Nível\n              </DialogTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                {selectedRole && \n                  `${selectedRole.displayName} - ${selectedRole.description}`\n                }\n              </p>\n            </DialogHeader>\n            \n            <div className=\"space-y-4\">\n              {rolePermissionsLoading ? (\n                <div className=\"space-y-3\">\n                  <Label className=\"text-sm font-medium\">Carregando permissões...</Label>\n                  <div className=\"space-y-2\">\n                    {Array.from({ length: 4 }).map((_, index) => (\n                      <div key={index} className=\"flex items-center space-x-2 animate-pulse\">\n                        <div className=\"w-4 h-4 bg-muted rounded\"></div>\n                        <div className=\"w-32 h-4 bg-muted rounded\"></div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              ) : !permissions || permissions.length === 0 ? (\n                <div className=\"text-center py-4\">\n                  <p className=\"text-sm text-muted-foreground\">Nenhuma permissão encontrada.</p>\n                </div>\n              ) : (\n                <div className=\"space-y-3\">\n                  <Label className=\"text-sm font-medium\">Selecione as permissões para este nível de acesso:</Label>\n                  <div className=\"max-h-60 overflow-y-auto space-y-2\">\n                    {permissions.map((permission: any) => (\n                      <div key={permission.id} className=\"flex items-center space-x-2\">\n                        <Checkbox\n                          id={permission.id}\n                          checked={selectedPermissions.includes(permission.id)}\n                          onCheckedChange={() => togglePermission(permission.id)}\n                          data-testid={`checkbox-permission-${permission.name}`}\n                        />\n                        <Label \n                          htmlFor={permission.id} \n                          className=\"text-sm cursor-pointer flex-1\"\n                        >\n                          {permission.displayName ?? permission.name ?? 'Permissão'}\n                        </Label>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n            \n            <DialogFooter>\n              <Button \n                variant=\"outline\" \n                onClick={() => setPermissionsModalOpen(false)}\n                data-testid=\"button-cancel-permissions\"\n              >\n                Cancelar\n              </Button>\n              <Button \n                onClick={handleSavePermissions}\n                disabled={updateRolePermissionsMutation.isPending}\n                data-testid=\"button-save-permissions\"\n              >\n                {updateRolePermissionsMutation.isPending ? 'Salvando...' : 'Salvar'}\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n\n        {/* Modal de Criação de Role */}\n        <Dialog \n          open={createRoleModalOpen} \n          onOpenChange={(open) => {\n            if (!open) {\n              createRoleForm.reset();\n            }\n            setCreateRoleModalOpen(open);\n          }}\n        >\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>\n                Adicionar Novo Nível de Acesso\n              </DialogTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                Crie um novo nível de acesso personalizado para o sistema\n              </p>\n            </DialogHeader>\n            \n            <Form {...createRoleForm}>\n              <form onSubmit={createRoleForm.handleSubmit(handleCreateRole)} className=\"space-y-4\">\n                <FormField\n                  control={createRoleForm.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nome Interno</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          placeholder=\"ex: coordinator, supervisor\"\n                          data-testid=\"input-role-name\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                      <p className=\"text-xs text-muted-foreground\">\n                        Apenas letras, números, underscore e hífen\n                      </p>\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={createRoleForm.control}\n                  name=\"displayName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nome de Exibição</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          placeholder=\"ex: Coordenador, Supervisor\"\n                          data-testid=\"input-role-display-name\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={createRoleForm.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Descrição (Opcional)</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          {...field} \n                          placeholder=\"Descreva as responsabilidades deste nível...\"\n                          rows={3}\n                          data-testid=\"input-role-description\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <DialogFooter>\n                  <Button \n                    type=\"button\"\n                    variant=\"outline\" \n                    onClick={() => setCreateRoleModalOpen(false)}\n                    data-testid=\"button-cancel-create-role\"\n                  >\n                    Cancelar\n                  </Button>\n                  <Button \n                    type=\"submit\"\n                    disabled={createRoleMutation.isPending}\n                    data-testid=\"button-submit-create-role\"\n                  >\n                    {createRoleMutation.isPending ? 'Criando...' : 'Criar Nível'}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Modal de Edição de Role */}\n        <Dialog \n          open={editRoleModalOpen} \n          onOpenChange={(open) => {\n            if (!open) {\n              editRoleForm.reset();\n              setRoleToEdit(null);\n            }\n            setEditRoleModalOpen(open);\n          }}\n        >\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>\n                Editar Nível de Acesso\n              </DialogTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                {roleToEdit && `Editando: ${roleToEdit.displayName}`}\n              </p>\n            </DialogHeader>\n            \n            <Form {...editRoleForm}>\n              <form onSubmit={editRoleForm.handleSubmit(handleUpdateRole)} className=\"space-y-4\">\n                <FormField\n                  control={editRoleForm.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nome Interno</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          placeholder=\"ex: coordinator, supervisor\"\n                          data-testid=\"input-edit-role-name\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                      <p className=\"text-xs text-muted-foreground\">\n                        Apenas letras, números, underscore e hífen\n                      </p>\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={editRoleForm.control}\n                  name=\"displayName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nome de Exibição</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          placeholder=\"ex: Coordenador, Supervisor\"\n                          data-testid=\"input-edit-role-display-name\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={editRoleForm.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Descrição (Opcional)</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          {...field} \n                          placeholder=\"Descreva as responsabilidades deste nível...\"\n                          rows={3}\n                          data-testid=\"input-edit-role-description\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <DialogFooter>\n                  <Button \n                    type=\"button\"\n                    variant=\"outline\" \n                    onClick={() => setEditRoleModalOpen(false)}\n                    data-testid=\"button-cancel-edit-role\"\n                  >\n                    Cancelar\n                  </Button>\n                  <Button \n                    type=\"submit\"\n                    disabled={updateRoleMutation.isPending}\n                    data-testid=\"button-submit-edit-role\"\n                  >\n                    {updateRoleMutation.isPending ? 'Salvando...' : 'Salvar Alterações'}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </Layout>\n  );\n}","size_bytes":28487},"frontend/client/src/pages/Schedule.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Layout from \"@/components/Layout\";\nimport LessonModal from \"@/components/LessonModal\";\nimport ClassModal from \"@/components/ClassModal\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { format, startOfWeek, addDays, isSameDay, parseISO, startOfDay, endOfDay, isWithinInterval } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\n\ninterface ClassDetailModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  classData: any;\n}\n\nfunction ClassDetailModal({ isOpen, onClose, classData }: ClassDetailModalProps) {\n  if (!classData) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <div\n              className=\"w-4 h-4 rounded-full\"\n              style={{ backgroundColor: classData.bookColor }}\n            />\n            <span>{classData.title}</span>\n          </DialogTitle>\n        </DialogHeader>\n        <div className=\"space-y-6\">\n          {/* Informações da Turma */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label className=\"text-sm font-medium text-muted-foreground\">Professor</Label>\n              <p className=\"text-sm font-semibold\">{classData.teacher}</p>\n            </div>\n            <div>\n              <Label className=\"text-sm font-medium text-muted-foreground\">Horário</Label>\n              <p className=\"text-sm\">{classData.startTime} - {classData.endTime}</p>\n            </div>\n            <div>\n              <Label className=\"text-sm font-medium text-muted-foreground\">Sala</Label>\n              <p className=\"text-sm\">{classData.room}</p>\n            </div>\n            <div>\n              <Label className=\"text-sm font-medium text-muted-foreground\">Livro</Label>\n              <p className=\"text-sm\">{classData.book}</p>\n            </div>\n            <div>\n              <Label className=\"text-sm font-medium text-muted-foreground\">Progresso</Label>\n              <p className=\"text-sm\">Dia {classData.currentDay}/{classData.totalDays}</p>\n            </div>\n            <div>\n              <Label className=\"text-sm font-medium text-muted-foreground\">Alunos</Label>\n              <p className=\"text-sm\">{classData.studentsCount}/{classData.maxStudents}</p>\n            </div>\n          </div>\n\n          {/* Lista de Alunos */}\n          <div>\n            <Label className=\"text-sm font-medium text-muted-foreground mb-3 block\">Alunos Matriculados</Label>\n            <div className=\"grid grid-cols-2 gap-2 max-h-40 overflow-y-auto\">\n              {classData.students?.map((student: any, index: number) => (\n                <div key={index} className=\"flex items-center space-x-2 p-2 bg-muted rounded-lg\">\n                  <div className=\"w-6 h-6 bg-primary rounded-full flex items-center justify-center\">\n                    <span className=\"text-xs text-white font-medium\">\n                      {student.name.split(' ').map((n: string) => n[0]).join('').substring(0, 2)}\n                    </span>\n                  </div>\n                  <span className=\"text-sm\">{student.name}</span>\n                </div>\n              )) || [\n                  { name: 'Ana Silva' },\n                  { name: 'João Santos' },\n                  { name: 'Maria Costa' },\n                  { name: 'Pedro Lima' },\n                  { name: 'Carla Oliveira' },\n                ].map((student, index) => (\n                  <div key={index} className=\"flex items-center space-x-2 p-2 bg-muted rounded-lg\">\n                    <div className=\"w-6 h-6 bg-primary rounded-full flex items-center justify-center\">\n                      <span className=\"text-xs text-white font-medium\">\n                        {student.name.split(' ').map((n: string) => n[0]).join('').substring(0, 2)}\n                      </span>\n                    </div>\n                    <span className=\"text-sm\">{student.name}</span>\n                  </div>\n                ))}\n            </div>\n          </div>\n\n          {/* Ações */}\n          <div className=\"flex justify-end space-x-2 pt-4 border-t\">\n            <Button variant=\"outline\" onClick={onClose}>\n              Fechar\n            </Button>\n            <Button>\n              Editar Turma\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nexport default function Schedule() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading: authLoading, user } = useAuth();\n  const [selectedDate, setSelectedDate] = useState<Date>(new Date());\n  const [isLessonModalOpen, setIsLessonModalOpen] = useState(false);\n  const [editingLesson, setEditingLesson] = useState<any>(null);\n  const [isClassModalOpen, setIsClassModalOpen] = useState(false);\n  const [editingClass, setEditingClass] = useState<any>(null);\n  const [selectedTeacherFilter, setSelectedTeacherFilter] = useState<string>(\"all\");\n  const [selectedUnitFilter, setSelectedUnitFilter] = useState<string>(\"all\");\n  const [currentWeekStart, setCurrentWeekStart] = useState<Date>(startOfWeek(new Date(), { locale: ptBR }));\n  const [selectedClassDetail, setSelectedClassDetail] = useState<any>(null);\n  const [showClassDetail, setShowClassDetail] = useState(false);\n\n  // Fetch lessons based on user role\n  const { data: lessons, isLoading } = useQuery<any[]>({\n    queryKey: user?.role === 'teacher'\n      ? [\"/api/lessons/teacher\", user.id]\n      : [\"/api/lessons\"],\n    retry: false,\n    enabled: isAuthenticated,\n  });\n\n  // Fetch teachers for filter (only for admin/secretary)\n  const { data: teachers = [] } = useQuery<any[]>({\n    queryKey: [\"/api/staff\"],\n    enabled: isAuthenticated && (user?.role === 'admin' || user?.role === 'secretary'),\n    retry: false,\n  });\n\n  // Fetch units for filter\n  const { data: units = [] } = useQuery<any[]>({\n    queryKey: [\"/api/units\"],\n    enabled: isAuthenticated && (user?.role === 'admin' || user?.role === 'secretary'),\n    retry: false,\n  });\n\n  // Fetch admin schedule data (for administrative view)\n  const { data: adminSchedule = [] } = useQuery<any[]>({\n    queryKey: [\"/api/schedule/admin\"],\n    enabled: isAuthenticated && (user?.role === 'admin' || user?.role === 'secretary'),\n    retry: false,\n  });\n\n  // Fetch teacher schedule data\n  const { data: teacherSchedule = [] } = useQuery<any[]>({\n    queryKey: [\"/api/schedule/teacher\", user?.id],\n    enabled: isAuthenticated && user?.role === 'teacher',\n    retry: false,\n  });\n\n  const { data: todaysLessons } = useQuery<any[]>({\n    queryKey: [\"/api/lessons/today\"],\n    retry: false,\n    enabled: isAuthenticated,\n  });\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  if (authLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  const canManageSchedule = user?.role === 'admin' || user?.role === 'teacher' || user?.role === 'secretary';\n  const isAdminView = user?.role === 'admin' || user?.role === 'secretary';\n\n  const handleNewLesson = () => {\n    setEditingLesson(null);\n    setIsLessonModalOpen(true);\n  };\n\n  const handleEditLesson = (lesson: any) => {\n    setEditingLesson(lesson);\n    setIsLessonModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setIsLessonModalOpen(false);\n    setEditingLesson(null);\n  };\n\n  const handleNewClass = () => {\n    setEditingClass(null);\n    setIsClassModalOpen(true);\n  };\n\n  const handleEditClass = (classItem: any) => {\n    setEditingClass(classItem);\n    setIsClassModalOpen(true);\n  };\n\n  const handleCloseClassModal = () => {\n    setIsClassModalOpen(false);\n    setEditingClass(null);\n  };\n\n  const handleClassClick = (classItem: any) => {\n    setSelectedClassDetail(classItem);\n    setShowClassDetail(true);\n  };\n\n  const navigateWeek = (direction: 'prev' | 'next') => {\n    setCurrentWeekStart(prev => addDays(prev, direction === 'next' ? 7 : -7));\n  };\n\n  // Generate dynamic colors for courses\n  const generateCourseColors = (classes: any[]) => {\n    const uniqueCourses = [...new Set(classes.map(cls => cls.title))];\n    const colors = [\n      '#3b82f6', // Blue\n      '#10b981', // Green  \n      '#f59e0b', // Orange\n      '#8b5cf6', // Purple\n      '#ef4444', // Red\n      '#06b6d4', // Cyan\n      '#84cc16', // Lime\n      '#f97316', // Orange\n      '#ec4899', // Pink\n      '#6366f1', // Indigo\n      '#14b8a6', // Teal\n      '#eab308', // Yellow\n    ];\n\n    const courseColors: { [key: string]: string } = {};\n    uniqueCourses.forEach((course, index) => {\n      courseColors[course] = colors[index % colors.length];\n    });\n\n    return courseColors;\n  };\n\n  // Mock data will be defined within each render function to avoid scope issues\n\n  const renderAdminCalendarView = () => {\n    const weekDays = Array.from({ length: 7 }, (_, i) => addDays(currentWeekStart, i));\n    const timeSlots = Array.from({ length: 14 }, (_, i) => `${8 + i}:00`); // 8:00 to 21:00\n\n    // Dados de agenda administrativa (turmas regulares)\n    const mockAdminSchedule = [\n      {\n        id: '1',\n        title: 'Inglês A1 - Manhã',\n        teacher: 'Prof. João Silva',\n        teacherId: 'user-1',\n        book: 'English Basic - Book 1',\n        dayOfWeek: 1, // Segunda\n        startTime: '09:00',\n        endTime: '11:00',\n        room: 'Sala 101',\n        currentDay: 5,\n        totalDays: 30,\n        studentsCount: 12,\n        maxStudents: 15,\n        unitId: '1'\n      },\n      {\n        id: '2',\n        title: 'Inglês A2 - Tarde',\n        teacher: 'Prof. João Silva',\n        teacherId: 'user-1',\n        book: 'English Basic - Book 2',\n        dayOfWeek: 1, // Segunda\n        startTime: '14:00',\n        endTime: '16:00',\n        room: 'Sala 102',\n        currentDay: 8,\n        totalDays: 35,\n        studentsCount: 10,\n        maxStudents: 15,\n        unitId: '1'\n      },\n      {\n        id: '3',\n        title: 'Inglês B1 - Noite',\n        teacher: 'Prof. Maria Santos',\n        teacherId: 'user-2',\n        book: 'English Intermediate - Book 1',\n        dayOfWeek: 1, // Segunda\n        startTime: '19:00',\n        endTime: '21:00',\n        room: 'Sala 103',\n        currentDay: 3,\n        totalDays: 40,\n        studentsCount: 8,\n        maxStudents: 12,\n        unitId: '1'\n      },\n      {\n        id: '4',\n        title: 'Espanhol A1',\n        teacher: 'Prof. Maria Santos',\n        teacherId: 'user-2',\n        book: 'Español Básico - Libro 1',\n        dayOfWeek: 2, // Terça\n        startTime: '18:00',\n        endTime: '20:00',\n        room: 'Sala 201',\n        currentDay: 4,\n        totalDays: 25,\n        studentsCount: 9,\n        maxStudents: 12,\n        unitId: '1'\n      },\n      {\n        id: '5',\n        title: 'Inglês B2 - Manhã',\n        teacher: 'Prof. Ana Costa',\n        teacherId: 'user-7',\n        book: 'English Intermediate - Book 2',\n        dayOfWeek: 2, // Terça\n        startTime: '10:00',\n        endTime: '12:00',\n        room: 'Sala 104',\n        currentDay: 12,\n        totalDays: 42,\n        studentsCount: 13,\n        maxStudents: 15,\n        unitId: '1'\n      },\n      {\n        id: '6',\n        title: 'Inglês A3 - Tarde',\n        teacher: 'Prof. Ana Costa',\n        teacherId: 'user-7',\n        book: 'English Basic - Book 3',\n        dayOfWeek: 3, // Quarta\n        startTime: '15:00',\n        endTime: '17:00',\n        room: 'Sala 105',\n        currentDay: 18,\n        totalDays: 40,\n        studentsCount: 11,\n        maxStudents: 15,\n        unitId: '1'\n      },\n      {\n        id: '7',\n        title: 'Inglês Avançado',\n        teacher: 'Prof. Felipe Rodrigues',\n        teacherId: 'user-8',\n        book: 'English Advanced - Book 1',\n        dayOfWeek: 4, // Quinta\n        startTime: '19:00',\n        endTime: '21:00',\n        room: 'Sala 301',\n        currentDay: 22,\n        totalDays: 45,\n        studentsCount: 7,\n        maxStudents: 10,\n        unitId: '2'\n      },\n      {\n        id: '8',\n        title: 'Espanhol A2',\n        teacher: 'Prof. Patricia Lima',\n        teacherId: 'user-9',\n        book: 'Español Básico - Libro 2',\n        dayOfWeek: 5, // Sexta\n        startTime: '16:00',\n        endTime: '18:00',\n        room: 'Sala 202',\n        currentDay: 15,\n        totalDays: 28,\n        studentsCount: 10,\n        maxStudents: 12,\n        unitId: '1'\n      },\n      // Aulas sobrepostas no mesmo horário para demonstrar\n      {\n        id: '9',\n        title: 'Inglês A1 - Tarde',\n        teacher: 'Prof. Patricia Lima',\n        teacherId: 'user-9',\n        book: 'English Basic - Book 1',\n        dayOfWeek: 2, // Terça\n        startTime: '14:00',\n        endTime: '16:00',\n        room: 'Sala 203',\n        currentDay: 7,\n        totalDays: 30,\n        studentsCount: 14,\n        maxStudents: 15,\n        unitId: '1'\n      }\n    ];\n\n    // Filter classes by selected teacher and unit\n    const filteredClasses = mockAdminSchedule.filter(classItem => {\n      if (selectedTeacherFilter !== 'all' && classItem.teacherId !== selectedTeacherFilter) return false;\n      if (selectedUnitFilter !== 'all' && classItem.unitId !== selectedUnitFilter) return false;\n      return true;\n    });\n\n    // Generate colors for admin schedule\n    const adminCourseColors = generateCourseColors(mockAdminSchedule);\n\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Button variant=\"outline\" onClick={() => navigateWeek('prev')}>\n              ← Semana Anterior\n            </Button>\n            <h3 className=\"text-lg font-semibold\">\n              {format(currentWeekStart, \"dd MMM\", { locale: ptBR })} - {format(addDays(currentWeekStart, 6), \"dd MMM yyyy\", { locale: ptBR })}\n            </h3>\n            <Button variant=\"outline\" onClick={() => navigateWeek('next')}>\n              Próxima Semana →\n            </Button>\n          </div>\n\n          <div className=\"flex items-center space-x-4\">\n            <Select value={selectedUnitFilter} onValueChange={setSelectedUnitFilter}>\n              <SelectTrigger className=\"w-48\">\n                <SelectValue placeholder=\"Filtrar por unidade\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Todas as unidades</SelectItem>\n                <SelectItem value=\"1\">Unidade Centro</SelectItem>\n                <SelectItem value=\"2\">Unidade Vila Nova</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={selectedTeacherFilter} onValueChange={setSelectedTeacherFilter}>\n              <SelectTrigger className=\"w-48\">\n                <SelectValue placeholder=\"Filtrar por professor\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Todos os professores</SelectItem>\n                <SelectItem value=\"user-1\">João Silva</SelectItem>\n                <SelectItem value=\"user-2\">Maria Santos</SelectItem>\n                <SelectItem value=\"user-7\">Ana Costa</SelectItem>\n                <SelectItem value=\"user-8\">Felipe Rodrigues</SelectItem>\n                <SelectItem value=\"user-9\">Patricia Lima</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        <div className=\"overflow-x-auto bg-card rounded-lg border shadow-sm\">\n          <div className=\"grid grid-cols-8 gap-0 min-w-[900px]\">\n            {/* Header row */}\n            <div className=\"p-3 font-medium text-center bg-muted border-b border-r border-border text-sm\">Horário</div>\n            {weekDays.map((day) => (\n              <div key={day.toISOString()} className=\"p-3 font-medium text-center bg-muted border-b border-r border-border text-sm\">\n                <div className=\"font-semibold\">{format(day, \"EEE\", { locale: ptBR })}</div>\n                <div className=\"text-xs text-muted-foreground mt-1\">\n                  {format(day, \"dd/MM\", { locale: ptBR })}\n                </div>\n              </div>\n            ))}\n\n            {/* Time slots */}\n            {timeSlots.map((timeSlot) => {\n              const [hour] = timeSlot.split(':');\n              return (\n                <>\n                  {/* Time label */}\n                  <div key={`time-${timeSlot}`} className=\"p-3 text-xs font-medium text-center bg-muted border-b border-r border-border text-muted-foreground\">\n                    {timeSlot}\n                  </div>\n\n                  {/* Day cells */}\n                  {weekDays.map((day) => {\n                    const dayClasses = filteredClasses.filter(classItem => {\n                      if (classItem.dayOfWeek !== day.getDay()) return false;\n                      const classHour = parseInt(classItem.startTime.split(':')[0]);\n                      return classHour === parseInt(hour);\n                    });\n\n                    return (\n                      <div key={`${day.toISOString()}-${timeSlot}`} className=\"min-h-[80px] p-1 border-b border-r border-border relative\">\n                        <div className=\"space-y-1\">\n                          {dayClasses.map((classItem, index) => (\n                            <div\n                              key={classItem.id}\n                              className=\"p-3 rounded-lg text-sm cursor-pointer transition-all hover:shadow-md border border-opacity-30 h-full flex items-center justify-center\"\n                              style={{\n                                backgroundColor: adminCourseColors[classItem.title] + '20',\n                                borderColor: adminCourseColors[classItem.title],\n                                color: 'var(--foreground)'\n                              }}\n                              onClick={() => handleClassClick({\n                                ...classItem,\n                                bookColor: adminCourseColors[classItem.title]\n                              })}\n                              data-testid={`admin-class-${classItem.id}`}\n                            >\n                              <div className=\"font-semibold text-center leading-tight\">{classItem.title}</div>\n                            </div>\n                          ))}\n                        </div>\n\n                        {/* Add class button for empty slots or when admin */}\n                        {dayClasses.length === 0 && isAdminView && (\n                          <div\n                            className=\"absolute inset-0 flex items-center justify-center opacity-0 hover:opacity-100 transition-opacity cursor-pointer bg-muted bg-opacity-50\"\n                            onClick={() => handleNewClass()}\n                          >\n                            <Button size=\"sm\" variant=\"outline\" className=\"text-xs\">\n                              + Adicionar\n                            </Button>\n                          </div>\n                        )}\n                      </div>\n                    );\n                  })}\n                </>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Legend */}\n        <div className=\"bg-muted p-4 rounded-lg\">\n          <h4 className=\"font-medium mb-3\">Legenda dos Cursos</h4>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n            {Object.entries(adminCourseColors).map(([courseName, color]) => (\n              <div key={courseName} className=\"flex items-center space-x-2\">\n                <div className=\"w-4 h-4 rounded-full\" style={{ backgroundColor: color }}></div>\n                <span className=\"text-sm\">{courseName}</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderTeacherCalendarView = () => {\n    const weekDays = Array.from({ length: 7 }, (_, i) => addDays(currentWeekStart, i));\n    const timeSlots = Array.from({ length: 14 }, (_, i) => `${8 + i}:00`);\n\n    // Dados específicos do professor\n    const mockTeacherSchedule = [\n      {\n        id: '1',\n        title: 'Inglês A1 - Manhã',\n        book: 'English Basic - Book 1',\n        dayOfWeek: 1, // Segunda\n        startTime: '09:00',\n        endTime: '11:00',\n        room: 'Sala 101',\n        currentDay: 5,\n        totalDays: 30,\n        studentsCount: 12,\n        maxStudents: 15\n      },\n      {\n        id: '2',\n        title: 'Inglês A2 - Tarde',\n        book: 'English Basic - Book 2',\n        dayOfWeek: 1, // Segunda\n        startTime: '14:00',\n        endTime: '16:00',\n        room: 'Sala 102',\n        currentDay: 8,\n        totalDays: 35,\n        studentsCount: 10,\n        maxStudents: 15\n      },\n      {\n        id: '3',\n        title: 'Inglês A1 - Manhã',\n        book: 'English Basic - Book 1',\n        dayOfWeek: 3, // Quarta\n        startTime: '09:00',\n        endTime: '11:00',\n        room: 'Sala 101',\n        currentDay: 6,\n        totalDays: 30,\n        studentsCount: 12,\n        maxStudents: 15\n      },\n      {\n        id: '4',\n        title: 'Inglês A2 - Tarde',\n        book: 'English Basic - Book 2',\n        dayOfWeek: 3, // Quarta\n        startTime: '14:00',\n        endTime: '16:00',\n        room: 'Sala 102',\n        currentDay: 9,\n        totalDays: 35,\n        studentsCount: 10,\n        maxStudents: 15\n      }\n    ];\n\n    // Generate colors for teacher schedule\n    const teacherCourseColors = generateCourseColors(mockTeacherSchedule);\n\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Button variant=\"outline\" onClick={() => navigateWeek('prev')}>\n              ← Semana Anterior\n            </Button>\n            <h3 className=\"text-lg font-semibold\">\n              {format(currentWeekStart, \"dd MMM\", { locale: ptBR })} - {format(addDays(currentWeekStart, 6), \"dd MMM yyyy\", { locale: ptBR })}\n            </h3>\n            <Button variant=\"outline\" onClick={() => navigateWeek('next')}>\n              Próxima Semana →\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"overflow-x-auto bg-card rounded-lg border shadow-sm\">\n          <div className=\"grid grid-cols-8 gap-0 min-w-[900px]\">\n            {/* Header */}\n            <div className=\"p-3 font-medium text-center bg-muted border-b border-r border-border text-sm\">Horário</div>\n            {weekDays.map((day) => (\n              <div key={day.toISOString()} className=\"p-3 font-medium text-center bg-muted border-b border-r border-border text-sm\">\n                <div className=\"font-semibold\">{format(day, \"EEE\", { locale: ptBR })}</div>\n                <div className=\"text-xs text-muted-foreground mt-1\">\n                  {format(day, \"dd/MM\", { locale: ptBR })}\n                </div>\n              </div>\n            ))}\n\n            {/* Time slots */}\n            {timeSlots.map((timeSlot) => {\n              const [hour] = timeSlot.split(':');\n              return (\n                <>\n                  <div key={`time-${timeSlot}`} className=\"p-3 text-xs font-medium text-center bg-muted border-b border-r border-border text-muted-foreground\">\n                    {timeSlot}\n                  </div>\n\n                  {weekDays.map((day) => {\n                    const dayClasses = mockTeacherSchedule.filter(classItem => {\n                      if (classItem.dayOfWeek !== day.getDay()) return false;\n                      const classHour = parseInt(classItem.startTime.split(':')[0]);\n                      return classHour === parseInt(hour);\n                    });\n\n                    return (\n                      <div key={`${day.toISOString()}-${timeSlot}`} className=\"min-h-[80px] p-1 border-b border-r border-gray-100\">\n                        {dayClasses.map((classItem) => (\n                          <div\n                            key={classItem.id}\n                            className=\"p-3 rounded-lg text-sm cursor-pointer transition-all hover:shadow-md border border-opacity-30 h-full flex items-center justify-center\"\n                            style={{\n                              backgroundColor: teacherCourseColors[classItem.title] + '20',\n                              borderColor: teacherCourseColors[classItem.title],\n                              color: '#000'\n                            }}\n                            onClick={() => handleClassClick({\n                              ...classItem,\n                              bookColor: teacherCourseColors[classItem.title],\n                              teacher: 'Prof. Ivan Silva'\n                            })}\n                            data-testid={`teacher-class-${classItem.id}`}\n                          >\n                            <div className=\"font-semibold text-center leading-tight\">{classItem.title}</div>\n                          </div>\n                        ))}\n                      </div>\n                    );\n                  })}\n                </>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Legenda de cores dos cursos */}\n        <div className=\"bg-muted p-4 rounded-lg\">\n          <h4 className=\"font-medium mb-3\">Legenda dos Cursos</h4>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n            {Object.entries(teacherCourseColors).map(([courseName, color]) => (\n              <div key={courseName} className=\"flex items-center space-x-2\">\n                <div className=\"w-4 h-4 rounded-full\" style={{ backgroundColor: color }}></div>\n                <span className=\"text-sm\">{courseName}</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <Layout>\n      <div className=\"p-6 space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-semibold text-foreground\">Agenda</h2>\n            <p className=\"text-sm text-muted-foreground\">\n              {user?.role === 'teacher'\n                ? \"Gerencie sua agenda de aulas\"\n                : \"Visualize e gerencie a agenda da escola\"}\n            </p>\n          </div>\n\n          {canManageSchedule && (\n            <div className=\"flex items-center space-x-2\">\n              <Button onClick={handleNewLesson} data-testid=\"button-new-lesson\">\n                <i className=\"fas fa-plus mr-2\"></i>\n                Nova Aula\n              </Button>\n              {isAdminView && (\n                <Button onClick={handleNewClass} data-testid=\"button-new-class\">\n                  <i className=\"fas fa-users mr-2\"></i>\n                  Nova Turma\n                </Button>\n              )}\n            </div>\n          )}\n        </div>\n\n        <Tabs defaultValue={isAdminView ? \"admin\" : \"teacher\"} className=\"space-y-6\">\n          <TabsList>\n            <TabsTrigger value=\"today\">Hoje</TabsTrigger>\n            {isAdminView && <TabsTrigger value=\"admin\">Agenda Administrativa</TabsTrigger>}\n            {user?.role === 'teacher' && <TabsTrigger value=\"teacher\">Minhas Aulas</TabsTrigger>}\n          </TabsList>\n\n          <TabsContent value=\"today\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-calendar-day text-primary\"></i>\n                  <span>Aulas de Hoje</span>\n                  <Badge variant=\"secondary\">\n                    {new Date().toLocaleDateString('pt-BR', {\n                      weekday: 'long',\n                      year: 'numeric',\n                      month: 'long',\n                      day: 'numeric'\n                    })}\n                  </Badge>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {!todaysLessons || todaysLessons.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <i className=\"fas fa-calendar-times text-muted-foreground text-4xl mb-4\"></i>\n                    <h3 className=\"text-lg font-semibold text-foreground mb-2\">Nenhuma aula agendada</h3>\n                    <p className=\"text-muted-foreground mb-4\">\n                      Não há aulas programadas para hoje.\n                    </p>\n                    {canManageSchedule && (\n                      <Button onClick={handleNewLesson} data-testid=\"button-schedule-first-lesson\">\n                        <i className=\"fas fa-plus mr-2\"></i>\n                        Agendar primeira aula\n                      </Button>\n                    )}\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\" data-testid=\"todays-lessons\">\n                    {todaysLessons.map((lesson: any) => (\n                      <div key={lesson.id} className=\"flex items-center space-x-4 p-4 rounded-lg bg-muted/50 border border-border/50 card-hover transition-smooth\">\n                        <div className=\"w-12 h-12 bg-primary rounded-lg flex items-center justify-center flex-shrink-0\">\n                          <i className=\"fas fa-clock text-primary-foreground\"></i>\n                        </div>\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium text-foreground\">{lesson.title}</h4>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {lesson.startTime} - {lesson.endTime}\n                            {lesson.room && ` • Sala ${lesson.room}`}\n                          </p>\n                          {lesson.notes && (\n                            <p className=\"text-xs text-muted-foreground mt-1\">{lesson.notes}</p>\n                          )}\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          {canManageSchedule && (\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleEditLesson(lesson)}\n                              data-testid={`button-edit-lesson-${lesson.id}`}\n                            >\n                              <i className=\"fas fa-edit mr-2\"></i>\n                              Editar\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {isAdminView && (\n            <TabsContent value=\"admin\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <i className=\"fas fa-users-cog text-primary\"></i>\n                    <span>Agenda Administrativa</span>\n                    <Badge variant=\"secondary\">\n                      Todas as turmas e professores\n                    </Badge>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {renderAdminCalendarView()}\n                </CardContent>\n              </Card>\n            </TabsContent>\n          )}\n\n          {user?.role === 'teacher' && (\n            <TabsContent value=\"teacher\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <i className=\"fas fa-chalkboard-teacher text-primary\"></i>\n                    <span>Minhas Aulas</span>\n                    <Badge variant=\"secondary\">\n                      Prof. Ivan Silva\n                    </Badge>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {renderTeacherCalendarView()}\n                </CardContent>\n              </Card>\n            </TabsContent>\n          )}\n        </Tabs>\n      </div>\n\n      {/* Lesson Modal */}\n      <LessonModal\n        isOpen={isLessonModalOpen}\n        onClose={handleCloseModal}\n        lessonToEdit={editingLesson}\n      />\n\n      {/* Class Modal */}\n      <ClassModal\n        isOpen={isClassModalOpen}\n        onClose={handleCloseClassModal}\n        classToEdit={editingClass}\n      />\n\n      {/* Class Detail Modal */}\n      <ClassDetailModal\n        isOpen={showClassDetail}\n        onClose={() => setShowClassDetail(false)}\n        classData={selectedClassDetail}\n      />\n    </Layout>\n  );\n}","size_bytes":33635},"frontend/client/src/pages/Settings.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useTheme } from \"@/contexts/ThemeContext\";\nimport Layout from \"@/components/Layout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ThemeToggle } from \"@/components/ThemeToggle\";\nimport {\n  Settings as SettingsIcon,\n  User,\n  Bell,\n  Shield,\n  Palette,\n  Globe,\n  Database,\n  Zap,\n  Save,\n  RotateCcw,\n  Download,\n  Upload,\n  Trash2,\n  AlertTriangle\n} from \"lucide-react\";\n\nexport default function Settings() {\n  const { user } = useAuth();\n  const { theme } = useTheme();\n  const { toast } = useToast();\n  \n  // Estado para configurações\n  const [notifications, setNotifications] = useState({\n    emailNotifications: true,\n    pushNotifications: false,\n    systemAlerts: true,\n    lessonReminders: true,\n    weeklyReports: false,\n  });\n\n  const [systemSettings, setSystemSettings] = useState({\n    language: \"pt-BR\",\n    timezone: \"America/Sao_Paulo\",\n    dateFormat: \"DD/MM/YYYY\",\n    currency: \"BRL\",\n    autoSave: true,\n    debugMode: false,\n  });\n\n  const [profileSettings, setProfileSettings] = useState({\n    firstName: user?.firstName || \"\",\n    lastName: user?.lastName || \"\",\n    email: user?.email || \"\",\n    phone: \"\",\n    department: \"\",\n  });\n\n  const [securitySettings, setSecuritySettings] = useState({\n    twoFactorEnabled: false,\n    sessionTimeout: 30,\n    loginAlerts: true,\n    passwordChangeRequired: false,\n  });\n\n  const isAdmin = user?.role === 'admin';\n\n  const handleSaveSettings = (section: string) => {\n    toast({\n      title: \"Configurações salvas\",\n      description: `As configurações de ${section} foram salvas com sucesso.`,\n    });\n  };\n\n  const handleResetSettings = (section: string) => {\n    toast({\n      title: \"Configurações resetadas\",\n      description: `As configurações de ${section} foram resetadas para o padrão.`,\n      variant: \"destructive\",\n    });\n  };\n\n  const handleExportData = () => {\n    toast({\n      title: \"Exportação iniciada\",\n      description: \"Seus dados estão sendo preparados para download.\",\n    });\n  };\n\n  const handleImportData = () => {\n    toast({\n      title: \"Importação de dados\",\n      description: \"Recurso disponível em breve.\",\n    });\n  };\n\n  if (!user) {\n    return (\n      <Layout>\n        <div className=\"p-6\">\n          <div className=\"text-center\">\n            <h2 className=\"text-2xl font-bold text-destructive mb-4\">Acesso Negado</h2>\n            <p className=\"text-muted-foreground\">\n              Você precisa estar logado para acessar as configurações.\n            </p>\n          </div>\n        </div>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout>\n      <div className=\"p-6 space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n              <SettingsIcon className=\"h-6 w-6 text-primary-foreground\" />\n            </div>\n            <div>\n              <h1 className=\"text-2xl font-semibold text-foreground\" data-testid=\"text-settings-title\">\n                Configurações\n              </h1>\n              <p className=\"text-sm text-muted-foreground\">\n                Gerencie suas preferências e configurações do sistema\n              </p>\n            </div>\n          </div>\n          <Badge variant=\"secondary\">\n            {user.role === 'admin' && 'Administrador'}\n            {user.role === 'teacher' && 'Professor'}\n            {user.role === 'secretary' && 'Secretário'}\n            {user.role === 'student' && 'Estudante'}\n          </Badge>\n        </div>\n\n        <Tabs defaultValue=\"appearance\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-2 md:grid-cols-4 lg:grid-cols-6\">\n            <TabsTrigger value=\"appearance\" className=\"flex items-center space-x-1\">\n              <Palette className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Aparência</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"account\" className=\"flex items-center space-x-1\">\n              <User className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Conta</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"notifications\" className=\"flex items-center space-x-1\">\n              <Bell className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Notificações</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"security\" className=\"flex items-center space-x-1\">\n              <Shield className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Segurança</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"system\" className=\"flex items-center space-x-1\">\n              <Globe className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Sistema</span>\n            </TabsTrigger>\n            {isAdmin && (\n              <TabsTrigger value=\"advanced\" className=\"flex items-center space-x-1\">\n                <Database className=\"h-4 w-4\" />\n                <span className=\"hidden sm:inline\">Avançado</span>\n              </TabsTrigger>\n            )}\n          </TabsList>\n\n          {/* Aparência */}\n          <TabsContent value=\"appearance\" className=\"space-y-6\">\n            <Card data-testid=\"card-appearance-settings\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Palette className=\"h-5 w-5\" />\n                  <span>Configurações de Aparência</span>\n                </CardTitle>\n                <CardDescription>\n                  Personalize a aparência da interface do sistema\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label className=\"text-base\">Tema</Label>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Escolha entre tema claro ou escuro\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-sm text-muted-foreground\">\n                      {theme === 'light' ? 'Claro' : 'Escuro'}\n                    </span>\n                    <ThemeToggle />\n                  </div>\n                </div>\n\n                <Separator />\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"fontsize\">Tamanho da Fonte</Label>\n                    <Select defaultValue=\"medium\">\n                      <SelectTrigger id=\"fontsize\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"small\">Pequena</SelectItem>\n                        <SelectItem value=\"medium\">Média</SelectItem>\n                        <SelectItem value=\"large\">Grande</SelectItem>\n                        <SelectItem value=\"xlarge\">Extra Grande</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"density\">Densidade da Interface</Label>\n                    <Select defaultValue=\"comfortable\">\n                      <SelectTrigger id=\"density\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"compact\">Compacta</SelectItem>\n                        <SelectItem value=\"comfortable\">Confortável</SelectItem>\n                        <SelectItem value=\"spacious\">Espaçosa</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label className=\"text-base\">Animações</Label>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Habilitar animações e transições\n                    </div>\n                  </div>\n                  <Switch defaultChecked />\n                </div>\n\n                <div className=\"flex space-x-2 pt-4\">\n                  <Button onClick={() => handleSaveSettings('aparência')} data-testid=\"button-save-appearance\">\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    Salvar\n                  </Button>\n                  <Button variant=\"outline\" onClick={() => handleResetSettings('aparência')}>\n                    <RotateCcw className=\"h-4 w-4 mr-2\" />\n                    Resetar\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Conta */}\n          <TabsContent value=\"account\" className=\"space-y-6\">\n            <Card data-testid=\"card-account-settings\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <User className=\"h-5 w-5\" />\n                  <span>Informações da Conta</span>\n                </CardTitle>\n                <CardDescription>\n                  Gerencie suas informações pessoais e de perfil\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"firstName\">Nome</Label>\n                    <Input\n                      id=\"firstName\"\n                      value={profileSettings.firstName}\n                      onChange={(e) => setProfileSettings(prev => ({ ...prev, firstName: e.target.value }))}\n                      data-testid=\"input-first-name\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"lastName\">Sobrenome</Label>\n                    <Input\n                      id=\"lastName\"\n                      value={profileSettings.lastName}\n                      onChange={(e) => setProfileSettings(prev => ({ ...prev, lastName: e.target.value }))}\n                      data-testid=\"input-last-name\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={profileSettings.email}\n                    onChange={(e) => setProfileSettings(prev => ({ ...prev, email: e.target.value }))}\n                    data-testid=\"input-email\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"phone\">Telefone</Label>\n                    <Input\n                      id=\"phone\"\n                      type=\"tel\"\n                      value={profileSettings.phone}\n                      onChange={(e) => setProfileSettings(prev => ({ ...prev, phone: e.target.value }))}\n                      data-testid=\"input-phone\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"department\">Departamento</Label>\n                    <Input\n                      id=\"department\"\n                      value={profileSettings.department}\n                      onChange={(e) => setProfileSettings(prev => ({ ...prev, department: e.target.value }))}\n                      data-testid=\"input-department\"\n                    />\n                  </div>\n                </div>\n\n                <Separator />\n\n                <div className=\"bg-muted p-4 rounded-lg\">\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"w-6 h-6 bg-primary rounded-full flex items-center justify-center flex-shrink-0 mt-0.5\">\n                      <User className=\"h-3 w-3 text-primary-foreground\" />\n                    </div>\n                    <div className=\"space-y-1\">\n                      <h3 className=\"font-medium text-sm\">Função Atual</h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Você está logado como <strong>{user.role}</strong>. \n                        {user.role !== 'admin' && \n                          ' Para alterar permissões, entre em contato com o administrador.'\n                        }\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex space-x-2 pt-4\">\n                  <Button onClick={() => handleSaveSettings('conta')} data-testid=\"button-save-account\">\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    Salvar Alterações\n                  </Button>\n                  <Button variant=\"outline\" onClick={() => handleResetSettings('conta')}>\n                    <RotateCcw className=\"h-4 w-4 mr-2\" />\n                    Resetar\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Notificações */}\n          <TabsContent value=\"notifications\" className=\"space-y-6\">\n            <Card data-testid=\"card-notification-settings\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Bell className=\"h-5 w-5\" />\n                  <span>Configurações de Notificação</span>\n                </CardTitle>\n                <CardDescription>\n                  Controle como e quando você recebe notificações\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label className=\"text-base\">Notificações por Email</Label>\n                      <div className=\"text-sm text-muted-foreground\">\n                        Receba notificações importantes por email\n                      </div>\n                    </div>\n                    <Switch\n                      checked={notifications.emailNotifications}\n                      onCheckedChange={(checked) => \n                        setNotifications(prev => ({ ...prev, emailNotifications: checked }))\n                      }\n                      data-testid=\"switch-email-notifications\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label className=\"text-base\">Notificações Push</Label>\n                      <div className=\"text-sm text-muted-foreground\">\n                        Receba notificações push no navegador\n                      </div>\n                    </div>\n                    <Switch\n                      checked={notifications.pushNotifications}\n                      onCheckedChange={(checked) => \n                        setNotifications(prev => ({ ...prev, pushNotifications: checked }))\n                      }\n                      data-testid=\"switch-push-notifications\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label className=\"text-base\">Alertas do Sistema</Label>\n                      <div className=\"text-sm text-muted-foreground\">\n                        Alertas sobre atualizações e manutenção\n                      </div>\n                    </div>\n                    <Switch\n                      checked={notifications.systemAlerts}\n                      onCheckedChange={(checked) => \n                        setNotifications(prev => ({ ...prev, systemAlerts: checked }))\n                      }\n                      data-testid=\"switch-system-alerts\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label className=\"text-base\">Lembretes de Aula</Label>\n                      <div className=\"text-sm text-muted-foreground\">\n                        Receba lembretes sobre aulas agendadas\n                      </div>\n                    </div>\n                    <Switch\n                      checked={notifications.lessonReminders}\n                      onCheckedChange={(checked) => \n                        setNotifications(prev => ({ ...prev, lessonReminders: checked }))\n                      }\n                      data-testid=\"switch-lesson-reminders\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label className=\"text-base\">Relatórios Semanais</Label>\n                      <div className=\"text-sm text-muted-foreground\">\n                        Receba resumos semanais de atividades\n                      </div>\n                    </div>\n                    <Switch\n                      checked={notifications.weeklyReports}\n                      onCheckedChange={(checked) => \n                        setNotifications(prev => ({ ...prev, weeklyReports: checked }))\n                      }\n                      data-testid=\"switch-weekly-reports\"\n                    />\n                  </div>\n                </div>\n\n                <Separator />\n\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-base font-medium\">Horários de Notificação</h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"quietHoursStart\">Início do Silêncio</Label>\n                      <Input\n                        id=\"quietHoursStart\"\n                        type=\"time\"\n                        defaultValue=\"22:00\"\n                        data-testid=\"input-quiet-hours-start\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"quietHoursEnd\">Fim do Silêncio</Label>\n                      <Input\n                        id=\"quietHoursEnd\"\n                        type=\"time\"\n                        defaultValue=\"07:00\"\n                        data-testid=\"input-quiet-hours-end\"\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex space-x-2 pt-4\">\n                  <Button onClick={() => handleSaveSettings('notificações')} data-testid=\"button-save-notifications\">\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    Salvar\n                  </Button>\n                  <Button variant=\"outline\" onClick={() => handleResetSettings('notificações')}>\n                    <RotateCcw className=\"h-4 w-4 mr-2\" />\n                    Resetar\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Segurança */}\n          <TabsContent value=\"security\" className=\"space-y-6\">\n            <Card data-testid=\"card-security-settings\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Shield className=\"h-5 w-5\" />\n                  <span>Configurações de Segurança</span>\n                </CardTitle>\n                <CardDescription>\n                  Gerencie a segurança da sua conta e dados\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label className=\"text-base\">Autenticação de Dois Fatores</Label>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Adicione uma camada extra de segurança à sua conta\n                    </div>\n                  </div>\n                  <Switch\n                    checked={securitySettings.twoFactorEnabled}\n                    onCheckedChange={(checked) => \n                      setSecuritySettings(prev => ({ ...prev, twoFactorEnabled: checked }))\n                    }\n                    data-testid=\"switch-two-factor\"\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label className=\"text-base\">Alertas de Login</Label>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Receba alertas sobre novos logins na sua conta\n                    </div>\n                  </div>\n                  <Switch\n                    checked={securitySettings.loginAlerts}\n                    onCheckedChange={(checked) => \n                      setSecuritySettings(prev => ({ ...prev, loginAlerts: checked }))\n                    }\n                    data-testid=\"switch-login-alerts\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"sessionTimeout\">Tempo Limite da Sessão (minutos)</Label>\n                  <Select\n                    value={securitySettings.sessionTimeout.toString()}\n                    onValueChange={(value) => \n                      setSecuritySettings(prev => ({ ...prev, sessionTimeout: parseInt(value) }))\n                    }\n                  >\n                    <SelectTrigger id=\"sessionTimeout\" data-testid=\"select-session-timeout\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"15\">15 minutos</SelectItem>\n                      <SelectItem value=\"30\">30 minutos</SelectItem>\n                      <SelectItem value=\"60\">1 hora</SelectItem>\n                      <SelectItem value=\"120\">2 horas</SelectItem>\n                      <SelectItem value=\"480\">8 horas</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <Separator />\n\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-base font-medium\">Gerenciamento de Senha</h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <Button variant=\"outline\" className=\"h-auto p-4\" data-testid=\"button-change-password\">\n                      <div className=\"text-left\">\n                        <div className=\"font-medium\">Alterar Senha</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Atualize sua senha de acesso\n                        </div>\n                      </div>\n                    </Button>\n                    <Button variant=\"outline\" className=\"h-auto p-4\" data-testid=\"button-download-data\">\n                      <div className=\"text-left\">\n                        <div className=\"font-medium\">Baixar Dados</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Exporte seus dados pessoais\n                        </div>\n                      </div>\n                    </Button>\n                  </div>\n                </div>\n\n                <div className=\"flex space-x-2 pt-4\">\n                  <Button onClick={() => handleSaveSettings('segurança')} data-testid=\"button-save-security\">\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    Salvar\n                  </Button>\n                  <Button variant=\"outline\" onClick={() => handleResetSettings('segurança')}>\n                    <RotateCcw className=\"h-4 w-4 mr-2\" />\n                    Resetar\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Sistema */}\n          <TabsContent value=\"system\" className=\"space-y-6\">\n            <Card data-testid=\"card-system-settings\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Globe className=\"h-5 w-5\" />\n                  <span>Configurações do Sistema</span>\n                </CardTitle>\n                <CardDescription>\n                  Configure preferências gerais do sistema\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"language\">Idioma</Label>\n                    <Select\n                      value={systemSettings.language}\n                      onValueChange={(value) => \n                        setSystemSettings(prev => ({ ...prev, language: value }))\n                      }\n                    >\n                      <SelectTrigger id=\"language\" data-testid=\"select-language\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"pt-BR\">Português (Brasil)</SelectItem>\n                        <SelectItem value=\"en-US\">English (US)</SelectItem>\n                        <SelectItem value=\"es-ES\">Español (España)</SelectItem>\n                        <SelectItem value=\"fr-FR\">Français (France)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"timezone\">Fuso Horário</Label>\n                    <Select\n                      value={systemSettings.timezone}\n                      onValueChange={(value) => \n                        setSystemSettings(prev => ({ ...prev, timezone: value }))\n                      }\n                    >\n                      <SelectTrigger id=\"timezone\" data-testid=\"select-timezone\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"America/Sao_Paulo\">São Paulo (GMT-3)</SelectItem>\n                        <SelectItem value=\"America/New_York\">New York (GMT-5)</SelectItem>\n                        <SelectItem value=\"Europe/London\">London (GMT+0)</SelectItem>\n                        <SelectItem value=\"Asia/Tokyo\">Tokyo (GMT+9)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"dateFormat\">Formato de Data</Label>\n                    <Select\n                      value={systemSettings.dateFormat}\n                      onValueChange={(value) => \n                        setSystemSettings(prev => ({ ...prev, dateFormat: value }))\n                      }\n                    >\n                      <SelectTrigger id=\"dateFormat\" data-testid=\"select-date-format\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"DD/MM/YYYY\">DD/MM/YYYY</SelectItem>\n                        <SelectItem value=\"MM/DD/YYYY\">MM/DD/YYYY</SelectItem>\n                        <SelectItem value=\"YYYY-MM-DD\">YYYY-MM-DD</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"currency\">Moeda</Label>\n                    <Select\n                      value={systemSettings.currency}\n                      onValueChange={(value) => \n                        setSystemSettings(prev => ({ ...prev, currency: value }))\n                      }\n                    >\n                      <SelectTrigger id=\"currency\" data-testid=\"select-currency\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"BRL\">Real (R$)</SelectItem>\n                        <SelectItem value=\"USD\">Dólar ($)</SelectItem>\n                        <SelectItem value=\"EUR\">Euro (€)</SelectItem>\n                        <SelectItem value=\"GBP\">Libra (£)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label className=\"text-base\">Salvamento Automático</Label>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Salve automaticamente as alterações\n                    </div>\n                  </div>\n                  <Switch\n                    checked={systemSettings.autoSave}\n                    onCheckedChange={(checked) => \n                      setSystemSettings(prev => ({ ...prev, autoSave: checked }))\n                    }\n                    data-testid=\"switch-auto-save\"\n                  />\n                </div>\n\n                {isAdmin && (\n                  <>\n                    <Separator />\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-0.5\">\n                        <Label className=\"text-base\">Modo Debug</Label>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Habilitar logs detalhados para depuração\n                        </div>\n                      </div>\n                      <Switch\n                        checked={systemSettings.debugMode}\n                        onCheckedChange={(checked) => \n                          setSystemSettings(prev => ({ ...prev, debugMode: checked }))\n                        }\n                        data-testid=\"switch-debug-mode\"\n                      />\n                    </div>\n                  </>\n                )}\n\n                <div className=\"flex space-x-2 pt-4\">\n                  <Button onClick={() => handleSaveSettings('sistema')} data-testid=\"button-save-system\">\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    Salvar\n                  </Button>\n                  <Button variant=\"outline\" onClick={() => handleResetSettings('sistema')}>\n                    <RotateCcw className=\"h-4 w-4 mr-2\" />\n                    Resetar\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Avançado (apenas admins) */}\n          {isAdmin && (\n            <TabsContent value=\"advanced\" className=\"space-y-6\">\n              <Card data-testid=\"card-advanced-settings\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Database className=\"h-5 w-5\" />\n                    <span>Configurações Avançadas</span>\n                  </CardTitle>\n                  <CardDescription>\n                    Configurações avançadas do sistema (apenas administradores)\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <AlertTriangle className=\"h-5 w-5 text-yellow-600 dark:text-yellow-400\" />\n                      <span className=\"font-medium text-yellow-800 dark:text-yellow-200\">\n                        Atenção\n                      </span>\n                    </div>\n                    <p className=\"text-yellow-700 dark:text-yellow-300 mt-2\">\n                      As configurações avançadas podem afetar o funcionamento do sistema. \n                      Proceda com cuidado e faça backup antes de fazer alterações importantes.\n                    </p>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <Button variant=\"outline\" className=\"h-auto p-4\" onClick={handleExportData} data-testid=\"button-export-data\">\n                      <Download className=\"h-5 w-5 mr-3\" />\n                      <div className=\"text-left\">\n                        <div className=\"font-medium\">Exportar Dados</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Exportar todos os dados do sistema\n                        </div>\n                      </div>\n                    </Button>\n\n                    <Button variant=\"outline\" className=\"h-auto p-4\" onClick={handleImportData} data-testid=\"button-import-data\">\n                      <Upload className=\"h-5 w-5 mr-3\" />\n                      <div className=\"text-left\">\n                        <div className=\"font-medium\">Importar Dados</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Importar dados de backup\n                        </div>\n                      </div>\n                    </Button>\n\n                    <Button variant=\"outline\" className=\"h-auto p-4\" data-testid=\"button-clear-cache\">\n                      <Zap className=\"h-5 w-5 mr-3\" />\n                      <div className=\"text-left\">\n                        <div className=\"font-medium\">Limpar Cache</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Limpar cache do sistema\n                        </div>\n                      </div>\n                    </Button>\n\n                    <Button variant=\"destructive\" className=\"h-auto p-4\" data-testid=\"button-factory-reset\">\n                      <Trash2 className=\"h-5 w-5 mr-3\" />\n                      <div className=\"text-left\">\n                        <div className=\"font-medium\">Reset de Fábrica</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Restaurar configurações padrão\n                        </div>\n                      </div>\n                    </Button>\n                  </div>\n\n                  <Separator />\n\n                  <div className=\"space-y-4\">\n                    <h3 className=\"text-base font-medium\">Informações do Sistema</h3>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div className=\"space-y-1\">\n                        <Label className=\"text-sm text-muted-foreground\">Versão</Label>\n                        <p className=\"text-sm font-mono\">v1.0.0</p>\n                      </div>\n                      <div className=\"space-y-1\">\n                        <Label className=\"text-sm text-muted-foreground\">Banco de Dados</Label>\n                        <p className=\"text-sm font-mono\">PostgreSQL 14</p>\n                      </div>\n                      <div className=\"space-y-1\">\n                        <Label className=\"text-sm text-muted-foreground\">Última Atualização</Label>\n                        <p className=\"text-sm\">{new Date().toLocaleDateString('pt-BR')}</p>\n                      </div>\n                      <div className=\"space-y-1\">\n                        <Label className=\"text-sm text-muted-foreground\">Uptime</Label>\n                        <p className=\"text-sm\">7 dias, 14h 32m</p>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          )}\n        </Tabs>\n      </div>\n    </Layout>\n  );\n}","size_bytes":36879},"frontend/client/src/pages/Staff.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Layout from \"@/components/Layout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Link } from \"wouter\";\n\nexport default function Staff() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading: authLoading, user } = useAuth();\n\n  const { data: staff, isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/staff\"],\n    retry: false,\n  });\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  if (authLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  // Check permissions - agora apenas admin pode gerenciar\n  const canManageStaff = user?.role === 'admin';\n  const canManagePermissions = user?.role === 'admin';\n\n  const getRoleIcon = (role: string) => {\n    switch (role) {\n      case 'admin': return 'fas fa-crown';\n      case 'teacher': return 'fas fa-chalkboard-teacher';\n      case 'secretary': return 'fas fa-user-tie';\n      case 'student': return 'fas fa-user-graduate';\n      default: return 'fas fa-user';\n    }\n  };\n\n  const getRoleBadgeColor = (role: string) => {\n    switch (role) {\n      case 'admin': return 'bg-red-100 text-red-700 dark:bg-red-900 dark:text-red-300';\n      case 'teacher': return 'bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300';\n      case 'secretary': return 'bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-300';\n      case 'student': return 'bg-purple-100 text-purple-700 dark:bg-purple-900 dark:text-purple-300';\n      default: return 'bg-gray-100 text-gray-700 dark:bg-gray-900 dark:text-gray-300';\n    }\n  };\n\n\n  return (\n    <Layout>\n      <div className=\"p-6 space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-semibold text-foreground\">Colaboradores</h2>\n            <p className=\"text-sm text-muted-foreground\">Gerencie a equipe da escola</p>\n          </div>\n          \n          {canManageStaff && (\n            <Button data-testid=\"button-new-staff\">\n              <i className=\"fas fa-plus mr-2\"></i>\n              Novo Colaborador\n            </Button>\n          )}\n        </div>\n\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {Array.from({ length: 6 }).map((_, index) => (\n              <Card key={index} className=\"animate-pulse\">\n                <CardHeader>\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-12 h-12 bg-muted rounded-full\"></div>\n                    <div className=\"flex-1 space-y-2\">\n                      <div className=\"h-5 bg-muted rounded w-3/4\"></div>\n                      <div className=\"h-4 bg-muted rounded w-1/2\"></div>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    <div className=\"h-4 bg-muted rounded\"></div>\n                    <div className=\"h-4 bg-muted rounded w-2/3\"></div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : !staff || staff.length === 0 ? (\n          <Card>\n            <CardContent className=\"py-12 text-center\">\n              <i className=\"fas fa-users text-muted-foreground text-6xl mb-4\"></i>\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">Nenhum colaborador encontrado</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                {canManageStaff \n                  ? \"Comece adicionando sua equipe.\" \n                  : \"Não há colaboradores cadastrados no sistema.\"}\n              </p>\n              {canManageStaff && (\n                <Button data-testid=\"button-create-first-staff\">\n                  <i className=\"fas fa-plus mr-2\"></i>\n                  Adicionar primeiro colaborador\n                </Button>\n              )}\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\" data-testid=\"staff-grid\">\n            {staff.map((member: any) => (\n              <Card key={member.id} className=\"card-hover transition-smooth\" data-testid={`card-staff-${member.id}`}>\n                <CardHeader>\n                  <div className=\"flex items-center space-x-4\">\n                    <Avatar className=\"w-12 h-12\">\n                      <AvatarImage src={member.user?.profileImageUrl} />\n                      <AvatarFallback>\n                        <i className={`${getRoleIcon(member.user?.role)} text-lg`}></i>\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-1\">\n                      <CardTitle className=\"text-lg\">\n                        {member.user?.firstName} {member.user?.lastName}\n                      </CardTitle>\n                      <CardDescription className=\"flex items-center space-x-2\">\n                        <Badge className={getRoleBadgeColor(member.user?.role)}>\n                          <i className={`${getRoleIcon(member.user?.role)} mr-1`}></i>\n                          {member.user?.role === 'admin' && 'Administrativo'}\n                          {member.user?.role === 'teacher' && 'Professor'}\n                          {member.user?.role === 'secretary' && 'Secretario'}\n                          {member.user?.role === 'student' && 'Aluno'}\n                        </Badge>\n                      </CardDescription>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    {member.user?.email && (\n                      <div className=\"flex items-center text-sm text-muted-foreground\">\n                        <i className=\"fas fa-envelope mr-2 w-4\"></i>\n                        <span className=\"truncate\">{member.user.email}</span>\n                      </div>\n                    )}\n                    {member.position && (\n                      <div className=\"flex items-center text-sm text-muted-foreground\">\n                        <i className=\"fas fa-briefcase mr-2 w-4\"></i>\n                        <span>{member.position}</span>\n                      </div>\n                    )}\n                    {member.department && (\n                      <div className=\"flex items-center text-sm text-muted-foreground\">\n                        <i className=\"fas fa-building mr-2 w-4\"></i>\n                        <span>{member.department}</span>\n                      </div>\n                    )}\n                    {member.employeeId && (\n                      <div className=\"flex items-center text-sm text-muted-foreground\">\n                        <i className=\"fas fa-id-badge mr-2 w-4\"></i>\n                        <span>ID: {member.employeeId}</span>\n                      </div>\n                    )}\n                    <div className=\"flex items-center text-sm text-muted-foreground\">\n                      <i className=\"fas fa-circle mr-2 w-4 text-green-500\"></i>\n                      <span>{member.isActive ? 'Ativo' : 'Inativo'}</span>\n                    </div>\n                  </div>\n                  {canManageStaff && (\n                    <div className=\"mt-4 flex space-x-2 flex-wrap\">\n                      <Button variant=\"outline\" size=\"sm\">\n                        <i className=\"fas fa-edit mr-2\"></i>\n                        Editar\n                      </Button>\n                      <Button variant=\"outline\" size=\"sm\">\n                        <i className=\"fas fa-eye mr-2\"></i>\n                        Ver detalhes\n                      </Button>\n                      {canManagePermissions && (\n                        <Link to=\"/permissions\">\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            data-testid={`button-permissions-${member.id}`}\n                          >\n                            <i className=\"fas fa-shield-alt mr-2\"></i>\n                            Gerenciar Permissões\n                          </Button>\n                        </Link>\n                      )}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n\n    </Layout>\n  );\n}\n","size_bytes":9287},"frontend/client/src/pages/StudentArea.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport StudentLayout from \"@/components/StudentLayout\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Link } from \"wouter\";\n\nexport default function StudentArea() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading: authLoading, user } = useAuth();\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  // Redirect if not a student\n  useEffect(() => {\n    if (!authLoading && isAuthenticated && user?.role !== 'student') {\n      window.location.href = \"/\";\n    }\n  }, [authLoading, isAuthenticated, user]);\n\n  if (authLoading || !isAuthenticated || user?.role !== 'student') {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <StudentLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent mb-2\">\n            Sala do Aluno\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-300 text-lg\">\n            Bem-vindo, {user.firstName}! Continue sua jornada de aprendizado\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Left Column - Resumo Geral */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            \n            {/* Resumo do Progresso */}\n            <Card className=\"glassmorphism-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-chart-line text-blue-600\"></i>\n                  <span>Resumo do Progresso</span>\n                </CardTitle>\n                <CardDescription>Journey • Intermediário • Book 3</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-center\">\n                  <div>\n                    <p className=\"text-2xl font-bold text-blue-600\">65%</p>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">Progresso Geral</p>\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold text-purple-600\">23</p>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">Lições Concluídas</p>\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold text-green-600\">8.9</p>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">Média Geral</p>\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold text-orange-600\">1</p>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">Prova Pendente</p>\n                  </div>\n                </div>\n                <div className=\"pt-4 border-t border-gray-200 dark:border-gray-700\">\n                  <Link href=\"/aluno/progresso\" data-testid=\"link-view-full-progress\">\n                    <Button variant=\"outline\" className=\"w-full\">\n                      <i className=\"fas fa-chart-line mr-2\"></i>\n                      Ver Progresso Completo\n                    </Button>\n                  </Link>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Lição Atual Resumida */}\n            <Card className=\"glassmorphism-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-book-open text-purple-600\"></i>\n                  <span>Lição Atual: Travel Adventures</span>\n                </CardTitle>\n                <CardDescription>Passo 4 de 6 • Em progresso</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-center justify-between mb-4\">\n                  <span className=\"text-sm text-gray-600 dark:text-gray-400\">Progresso da lição</span>\n                  <span className=\"text-sm font-bold text-gray-900 dark:text-gray-100\">67%</span>\n                </div>\n                <Progress value={67} className=\"h-3 mb-4\" />\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"font-medium text-gray-900 dark:text-gray-100\">Speaking Exercise</p>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">Próximo passo disponível</p>\n                  </div>\n                  <Button size=\"sm\" className=\"bg-blue-600 hover:bg-blue-700 button-hover-effect\" data-testid=\"button-continue-lesson\">\n                    Continuar\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Próxima Aula */}\n            <Card className=\"glassmorphism-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-calendar text-green-600\"></i>\n                  <span>Próxima Aula</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-center justify-between p-4 bg-purple-50 dark:bg-purple-900/20 rounded-lg border border-purple-200 dark:border-purple-800\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-3 h-3 bg-purple-600 rounded-full\"></div>\n                    <div>\n                      <h4 className=\"font-semibold text-purple-900 dark:text-purple-100\">Lesson 9: Cultural Differences</h4>\n                      <p className=\"text-sm text-purple-600 dark:text-purple-400\">Hoje • 14:00 - 15:30 • Prof. Maria Santos</p>\n                    </div>\n                  </div>\n                  <Button size=\"sm\" className=\"bg-purple-600 hover:bg-purple-700 button-hover-effect\" data-testid=\"button-enter-aula\">\n                    Entrar na Aula\n                  </Button>\n                </div>\n                <div className=\"mt-4\">\n                  <Link href=\"/aluno/cronograma\" data-testid=\"link-view-full-schedule\">\n                    <Button variant=\"outline\" className=\"w-full\">\n                      <i className=\"fas fa-calendar mr-2\"></i>\n                      Ver Cronograma Completo\n                    </Button>\n                  </Link>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Right Column - Acessos Rápidos */}\n          <div className=\"space-y-6\">\n            \n            {/* Atividades Recentes Resumidas */}\n            <Card className=\"glassmorphism-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-clock text-blue-600\"></i>\n                  <span>Atividades Recentes</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex items-center space-x-3 p-2 hover:bg-gray-50 dark:hover:bg-gray-700/50 rounded-lg transition-colors\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">Lesson 8 concluída</p>\n                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">Há 2 horas</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-3 p-2 hover:bg-gray-50 dark:hover:bg-gray-700/50 rounded-lg transition-colors\">\n                  <div className=\"w-2 h-2 bg-red-500 rounded-full\"></div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">Prova urgente pendente</p>\n                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">Prazo: Hoje</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-3 p-2 hover:bg-gray-50 dark:hover:bg-gray-700/50 rounded-lg transition-colors\">\n                  <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">Workbook atualizado</p>\n                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">Ontem</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Áreas de Acesso Rápido */}\n            <div className=\"space-y-4\">\n              {/* Workbook */}\n              <Link href=\"/aluno/workbook\" data-testid=\"link-workbook\">\n                <Card className=\"glassmorphism-card cursor-pointer hover:shadow-lg transition-all duration-300\" data-testid=\"card-workbook\">\n                  <CardContent className=\"p-6 text-center\">\n                    <div className=\"w-12 h-12 bg-gradient-to-r from-purple-500 to-pink-500 rounded-xl flex items-center justify-center mx-auto mb-3\">\n                      <i className=\"fas fa-book text-white text-xl\"></i>\n                    </div>\n                    <h3 className=\"font-semibold text-gray-900 dark:text-gray-100 mb-1\">Workbook Digital</h3>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-3\">12 de 15 exercícios</p>\n                    <Progress value={80} className=\"h-2 mb-3\" />\n                    <Button size=\"sm\" className=\"bg-purple-600 hover:bg-purple-700 button-hover-effect\" data-testid=\"button-workbook\">\n                      Continuar\n                    </Button>\n                  </CardContent>\n                </Card>\n              </Link>\n\n              {/* Provas */}\n              <Link href=\"/aluno/provas\" data-testid=\"link-provas\">\n                <Card className=\"glassmorphism-card border-2 border-red-200 dark:border-red-800 cursor-pointer hover:shadow-lg transition-all duration-300\" data-testid=\"card-provas\">\n                  <CardContent className=\"p-6 text-center\">\n                    <div className=\"w-12 h-12 bg-gradient-to-r from-orange-500 to-red-500 rounded-xl flex items-center justify-center mx-auto mb-3\">\n                      <i className=\"fas fa-clipboard-check text-white text-xl\"></i>\n                    </div>\n                    <h3 className=\"font-semibold text-gray-900 dark:text-gray-100 mb-1\">Área de Provas</h3>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-3\">1 prova pendente</p>\n                    <Badge className=\"bg-red-100 text-red-700 border-red-300 mb-3\">Urgente</Badge>\n                    <br />\n                    <Button size=\"sm\" className=\"bg-red-600 hover:bg-red-700 button-hover-effect\" data-testid=\"button-provas\">\n                      Ver Provas\n                    </Button>\n                  </CardContent>\n                </Card>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    </StudentLayout>\n  );\n}","size_bytes":11843},"frontend/client/src/pages/StudentExams.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport StudentLayout from \"@/components/StudentLayout\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport default function StudentExams() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading: authLoading, user } = useAuth();\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  // Redirect if not a student\n  useEffect(() => {\n    if (!authLoading && isAuthenticated && user?.role !== 'student') {\n      window.location.href = \"/\";\n    }\n  }, [authLoading, isAuthenticated, user]);\n\n  if (authLoading || !isAuthenticated || user?.role !== 'student') {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <StudentLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-orange-600 to-red-600 bg-clip-text text-transparent mb-2\">\n            Área de Provas\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-300 text-lg\">\n            Gerencie suas avaliações e acompanhe seu desempenho\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Left Column - Provas */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            \n            {/* Provas Pendentes - URGENTE */}\n            <Card className=\"glassmorphism-card border-2 border-red-200 dark:border-red-800\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-exclamation-triangle text-red-600\"></i>\n                  <span>Provas Urgentes</span>\n                </CardTitle>\n                <CardDescription className=\"text-red-600 dark:text-red-400\">Atenção: Prazo próximo do vencimento</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Prova 1 - Urgente */}\n                <Card className=\"bg-red-50 dark:bg-red-900/20 border-2 border-red-300 dark:border-red-700\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <Badge className=\"bg-red-100 text-red-700 border-red-300\">Urgente</Badge>\n                      <span className=\"text-sm font-medium text-red-700 dark:text-red-300\">Unit 2 Test</span>\n                    </div>\n                    <h4 className=\"font-semibold text-red-900 dark:text-red-100 mb-2\">Prova: Travel & Culture</h4>\n                    <p className=\"text-sm text-red-600 dark:text-red-400 mb-3\">Avaliação sobre vocabulário e gramática das lições 8-12</p>\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <span className=\"text-xs text-red-600 dark:text-red-400\">Prazo: Hoje até 23:59</span>\n                      <span className=\"text-xs text-red-600 dark:text-red-400\">Duração: 45 minutos</span>\n                    </div>\n                    <Button className=\"w-full bg-red-600 hover:bg-red-700\" data-testid=\"button-start-urgent-exam\">\n                      <i className=\"fas fa-play mr-2\"></i>\n                      Iniciar Prova Agora\n                    </Button>\n                  </CardContent>\n                </Card>\n              </CardContent>\n            </Card>\n\n            {/* Próximas Provas */}\n            <Card className=\"glassmorphism-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-calendar-alt text-blue-600\"></i>\n                  <span>Próximas Provas</span>\n                </CardTitle>\n                <CardDescription>Suas avaliações programadas</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                \n                <Card className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <Badge className=\"bg-blue-100 text-blue-700 border-blue-300\">Agendada</Badge>\n                      <span className=\"text-sm font-medium text-blue-700 dark:text-blue-300\">Mid-term Test</span>\n                    </div>\n                    <h4 className=\"font-semibold text-blue-900 dark:text-blue-100 mb-2\">Prova de Meio de Período</h4>\n                    <p className=\"text-sm text-blue-600 dark:text-blue-400 mb-3\">Avaliação abrangente do conteúdo estudado até agora</p>\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <span className=\"text-xs text-blue-600 dark:text-blue-400\">Data: 25/09 às 14:00</span>\n                      <span className=\"text-xs text-blue-600 dark:text-blue-400\">Duração: 90 minutos</span>\n                    </div>\n                    <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-prepare-exam\">\n                      <i className=\"fas fa-book-reader mr-2\"></i>\n                      Preparar-se\n                    </Button>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"bg-gray-50 dark:bg-gray-700/50 border border-gray-200 dark:border-gray-600\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <Badge variant=\"outline\">Futura</Badge>\n                      <span className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Unit 3 Test</span>\n                    </div>\n                    <h4 className=\"font-semibold text-gray-700 dark:text-gray-300 mb-2\">Prova: Business English</h4>\n                    <p className=\"text-sm text-gray-500 dark:text-gray-400 mb-3\">Avaliação sobre vocabulário empresarial e comunicação</p>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-xs text-gray-500 dark:text-gray-400\">Data: A definir</span>\n                      <span className=\"text-xs text-gray-500 dark:text-gray-400\">Duração: 60 minutos</span>\n                    </div>\n                  </CardContent>\n                </Card>\n\n              </CardContent>\n            </Card>\n\n            {/* Provas Realizadas */}\n            <Card className=\"glassmorphism-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-check-circle text-green-600\"></i>\n                  <span>Provas Realizadas</span>\n                </CardTitle>\n                <CardDescription>Histórico de suas avaliações</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                \n                <div className=\"flex items-center justify-between p-4 bg-green-50 dark:bg-green-900/20 rounded-lg border border-green-200 dark:border-green-800\">\n                  <div className=\"flex items-center space-x-3\">\n                    <i className=\"fas fa-check-circle text-green-600 text-xl\"></i>\n                    <div>\n                      <h4 className=\"font-semibold text-green-900 dark:text-green-100\">Unit 1 Test</h4>\n                      <p className=\"text-sm text-green-600 dark:text-green-400\">Realizada em 10/09 • Foundations & Greetings</p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-xl font-bold text-green-600\">9.2</p>\n                    <p className=\"text-xs text-green-600 dark:text-green-400\">Excelente</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center justify-between p-4 bg-green-50 dark:bg-green-900/20 rounded-lg border border-green-200 dark:border-green-800\">\n                  <div className=\"flex items-center space-x-3\">\n                    <i className=\"fas fa-check-circle text-green-600 text-xl\"></i>\n                    <div>\n                      <h4 className=\"font-semibold text-green-900 dark:text-green-100\">Diagnostic Test</h4>\n                      <p className=\"text-sm text-green-600 dark:text-green-400\">Realizada em 01/09 • Avaliação de Nivelamento</p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-xl font-bold text-green-600\">8.5</p>\n                    <p className=\"text-xs text-green-600 dark:text-green-400\">Muito Bom</p>\n                  </div>\n                </div>\n\n              </CardContent>\n            </Card>\n\n          </div>\n\n          {/* Right Column - Estatísticas e Recursos */}\n          <div className=\"space-y-6\">\n            \n            {/* Performance Geral */}\n            <Card className=\"glassmorphism-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-chart-line text-purple-600\"></i>\n                  <span>Performance</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"text-center border-b border-gray-200 dark:border-gray-700 pb-4\">\n                  <p className=\"text-3xl font-bold text-purple-600\">8.9</p>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">Média Geral</p>\n                </div>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-600 dark:text-gray-400\">Provas Realizadas:</span>\n                    <span className=\"font-medium text-gray-900 dark:text-gray-100\">2</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-600 dark:text-gray-400\">Melhor Nota:</span>\n                    <span className=\"font-medium text-green-600\">9.2</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-600 dark:text-gray-400\">Taxa de Aprovação:</span>\n                    <span className=\"font-medium text-blue-600\">100%</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            \n\n            {/* Lembretes */}\n            <Card className=\"glassmorphism-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-bell text-yellow-600\"></i>\n                  <span>Lembretes</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4 text-center\">\n                  <i className=\"fas fa-clock text-yellow-600 text-2xl mb-2\"></i>\n                  <p className=\"text-sm text-yellow-700 dark:text-yellow-300 font-medium mb-1\">\n                    Prova Urgente!\n                  </p>\n                  <p className=\"text-xs text-yellow-600 dark:text-yellow-400\">\n                    Você tem 1 prova para fazer ainda hoje.\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n\n          </div>\n        </div>\n      </div>\n    </StudentLayout>\n  );\n}","size_bytes":12218},"frontend/client/src/pages/StudentProgress.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport StudentLayout from \"@/components/StudentLayout\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport default function StudentProgress() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading: authLoading, user } = useAuth();\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  // Redirect if not a student\n  useEffect(() => {\n    if (!authLoading && isAuthenticated && user?.role !== 'student') {\n      window.location.href = \"/\";\n    }\n  }, [authLoading, isAuthenticated, user]);\n\n  if (authLoading || !isAuthenticated || user?.role !== 'student') {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <StudentLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent mb-2\">\n            Meu Progresso\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-300 text-lg\">\n            Acompanhe sua evolução e conquistas no aprendizado\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Left Column - Progresso Principal */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            \n            {/* Progresso Geral */}\n            <Card className=\"glassmorphism-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-chart-line text-blue-600\"></i>\n                  <span>Progresso Geral</span>\n                </CardTitle>\n                <CardDescription>Journey • Intermediário • Book 3</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Progresso Geral */}\n                <div>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Progresso Geral</span>\n                    <span className=\"text-sm font-bold text-gray-900 dark:text-gray-100\">65%</span>\n                  </div>\n                  <Progress value={65} className=\"h-3 bg-gray-200 dark:bg-gray-700\" />\n                </div>\n\n                {/* Livro Atual */}\n                <div>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Livro Atual</span>\n                    <span className=\"text-sm font-bold text-gray-900 dark:text-gray-100\">40%</span>\n                  </div>\n                  <Progress value={40} className=\"h-3 bg-gray-200 dark:bg-gray-700\" />\n                  <div className=\"flex items-center justify-between mt-2 text-xs text-gray-500 dark:text-gray-400\">\n                    <span>23 de 36 lições concluídas</span>\n                    <span>Lesson 8: Travel Adventures</span>\n                  </div>\n                </div>\n\n                {/* Estatísticas */}\n                <div className=\"grid grid-cols-2 gap-4 pt-4 border-t border-gray-200 dark:border-gray-700\">\n                  <div className=\"text-center\">\n                    <p className=\"text-2xl font-bold text-blue-600\">23</p>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">Lições Concluídas</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-2xl font-bold text-green-600\">15h 42m</p>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">Tempo de Estudo</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Lição Atual Detalhada */}\n            <Card className=\"glassmorphism-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-book-open text-purple-600\"></i>\n                  <span>Lição Atual: Travel Adventures</span>\n                </CardTitle>\n                <CardDescription>Complete os 6 passos para finalizar esta lição</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  {/* Passo 1 - Concluído */}\n                  <Card className=\"bg-purple-50 dark:bg-purple-900/20 border border-purple-200 dark:border-purple-800\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"text-sm font-medium text-purple-700 dark:text-purple-300\">Passo 1</span>\n                        <i className=\"fas fa-check-circle text-purple-600\"></i>\n                      </div>\n                      <h4 className=\"font-semibold text-purple-900 dark:text-purple-100 mb-1\">Vocabulary</h4>\n                      <p className=\"text-xs text-purple-600 dark:text-purple-400\">video</p>\n                    </CardContent>\n                  </Card>\n\n                  {/* Passo 2 - Concluído */}\n                  <Card className=\"bg-purple-50 dark:bg-purple-900/20 border border-purple-200 dark:border-purple-800\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"text-sm font-medium text-purple-700 dark:text-purple-300\">Passo 2</span>\n                        <i className=\"fas fa-check-circle text-purple-600\"></i>\n                      </div>\n                      <h4 className=\"font-semibold text-purple-900 dark:text-purple-100 mb-1\">Grammar Focus</h4>\n                      <p className=\"text-xs text-purple-600 dark:text-purple-400\">activity</p>\n                    </CardContent>\n                  </Card>\n\n                  {/* Passo 3 - Concluído */}\n                  <Card className=\"bg-purple-50 dark:bg-purple-900/20 border border-purple-200 dark:border-purple-800\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"text-sm font-medium text-purple-700 dark:text-purple-300\">Passo 3</span>\n                        <i className=\"fas fa-check-circle text-purple-600\"></i>\n                      </div>\n                      <h4 className=\"font-semibold text-purple-900 dark:text-purple-100 mb-1\">Listening Practice</h4>\n                      <p className=\"text-xs text-purple-600 dark:text-purple-400\">audio</p>\n                    </CardContent>\n                  </Card>\n\n                  {/* Passo 4 - Em Progresso */}\n                  <Card className=\"bg-blue-50 dark:bg-blue-900/20 border-2 border-blue-300 dark:border-blue-700\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"text-sm font-medium text-blue-700 dark:text-blue-300\">Passo 4</span>\n                        <i className=\"fas fa-play text-blue-600\"></i>\n                      </div>\n                      <h4 className=\"font-semibold text-blue-900 dark:text-blue-100 mb-1\">Speaking Exercise</h4>\n                      <p className=\"text-xs text-blue-600 dark:text-blue-400\">speaking</p>\n                    </CardContent>\n                  </Card>\n\n                  {/* Passo 5 - Próximo */}\n                  <Card className=\"bg-gray-50 dark:bg-gray-700/50 border border-gray-200 dark:border-gray-600\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Passo 5</span>\n                        <i className=\"fas fa-play text-gray-400\"></i>\n                      </div>\n                      <h4 className=\"font-semibold text-gray-700 dark:text-gray-300 mb-1\">Writing Challenge</h4>\n                      <p className=\"text-xs text-gray-500 dark:text-gray-400\">writing</p>\n                    </CardContent>\n                  </Card>\n\n                  {/* Passo 6 - Próximo */}\n                  <Card className=\"bg-gray-50 dark:bg-gray-700/50 border border-gray-200 dark:border-gray-600\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Passo 6</span>\n                        <i className=\"fas fa-play text-gray-400\"></i>\n                      </div>\n                      <h4 className=\"font-semibold text-gray-700 dark:text-gray-300 mb-1\">Final Quiz</h4>\n                      <p className=\"text-xs text-gray-500 dark:text-gray-400\">quiz</p>\n                    </CardContent>\n                  </Card>\n                </div>\n              </CardContent>\n            </Card>\n\n          </div>\n\n          {/* Right Column - Conquistas e Histórico */}\n          <div className=\"space-y-6\">\n            \n            {/* Conquistas */}\n            <Card className=\"glassmorphism-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-trophy text-yellow-600\"></i>\n                  <span>Conquistas</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Conquista 1 */}\n                <div className=\"flex items-center space-x-3 p-3 bg-pink-50 dark:bg-pink-900/20 rounded-lg border border-pink-200 dark:border-pink-800\">\n                  <div className=\"w-8 h-8 bg-pink-500 rounded-full flex items-center justify-center\">\n                    <i className=\"fas fa-star text-white text-sm\"></i>\n                  </div>\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-semibold text-pink-900 dark:text-pink-100 text-sm\">Primeira Semana</h4>\n                    <p className=\"text-xs text-pink-600 dark:text-pink-400\">Complete sua primeira semana de estudos</p>\n                  </div>\n                  <i className=\"fas fa-check-circle text-pink-600\"></i>\n                </div>\n\n                {/* Conquista 2 */}\n                <div className=\"flex items-center space-x-3 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800\">\n                  <div className=\"w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center\">\n                    <i className=\"fas fa-medal text-white text-sm\"></i>\n                  </div>\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-semibold text-blue-900 dark:text-blue-100 text-sm\">Frequência Exemplar</h4>\n                    <p className=\"text-xs text-blue-600 dark:text-blue-400\">Participe de 10 aulas consecutivas</p>\n                  </div>\n                  <i className=\"fas fa-check-circle text-blue-600\"></i>\n                </div>\n\n                {/* Conquista 3 - Em progresso */}\n                <div className=\"flex items-center space-x-3 p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg border border-gray-200 dark:border-gray-600\">\n                  <div className=\"w-8 h-8 bg-gray-400 rounded-full flex items-center justify-center\">\n                    <i className=\"fas fa-graduation-cap text-white text-sm\"></i>\n                  </div>\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-semibold text-gray-700 dark:text-gray-300 text-sm\">Estudante Dedicado</h4>\n                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">Complete 50 lições (23/50)</p>\n                  </div>\n                  <Progress value={46} className=\"h-2 mt-2\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Histórico de Atividades */}\n            <Card className=\"glassmorphism-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-clock text-blue-600\"></i>\n                  <span>Atividades Recentes</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex items-center space-x-3 p-2 hover:bg-gray-50 dark:hover:bg-gray-700/50 rounded-lg transition-colors\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">Lesson 8 concluída</p>\n                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">Há 2 horas</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-3 p-2 hover:bg-gray-50 dark:hover:bg-gray-700/50 rounded-lg transition-colors\">\n                  <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">Quiz realizado</p>\n                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">Ontem</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-3 p-2 hover:bg-gray-50 dark:hover:bg-gray-700/50 rounded-lg transition-colors\">\n                  <div className=\"w-2 h-2 bg-purple-500 rounded-full\"></div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">Nova conquista desbloqueada</p>\n                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">2 dias atrás</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-3 p-2 hover:bg-gray-50 dark:hover:bg-gray-700/50 rounded-lg transition-colors\">\n                  <div className=\"w-2 h-2 bg-yellow-500 rounded-full\"></div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">Lesson 7 concluída</p>\n                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">3 dias atrás</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n          </div>\n        </div>\n      </div>\n    </StudentLayout>\n  );\n}","size_bytes":15304},"frontend/client/src/pages/StudentSchedule.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport StudentLayout from \"@/components/StudentLayout\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport default function StudentSchedule() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading: authLoading, user } = useAuth();\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  // Redirect if not a student\n  useEffect(() => {\n    if (!authLoading && isAuthenticated && user?.role !== 'student') {\n      window.location.href = \"/\";\n    }\n  }, [authLoading, isAuthenticated, user]);\n\n  if (authLoading || !isAuthenticated || user?.role !== 'student') {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <StudentLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-green-600 to-blue-600 bg-clip-text text-transparent mb-2\">\n            Cronograma de Aulas\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-300 text-lg\">\n            Visualize e gerencie suas aulas agendadas\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Left Column - Próximas Aulas */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            \n            {/* Aulas de Hoje */}\n            <Card className=\"glassmorphism-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-calendar-day text-green-600\"></i>\n                  <span>Aulas de Hoje</span>\n                </CardTitle>\n                <CardDescription>Suas aulas agendadas para hoje</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Aula 1 - Hoje */}\n                <div className=\"flex items-center justify-between p-4 bg-purple-50 dark:bg-purple-900/20 rounded-lg border border-purple-200 dark:border-purple-800\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-3 h-3 bg-purple-600 rounded-full\"></div>\n                    <div>\n                      <h4 className=\"font-semibold text-purple-900 dark:text-purple-100\">Lesson 9: Cultural Differences</h4>\n                      <p className=\"text-sm text-purple-600 dark:text-purple-400\">14:00 - 15:30 • Prof. Maria Santos</p>\n                      <Badge className=\"bg-green-100 text-green-700 border-green-300 mt-1\">Em 30 minutos</Badge>\n                    </div>\n                  </div>\n                  <Button size=\"sm\" className=\"bg-purple-600 hover:bg-purple-700\" data-testid=\"button-enter-aula\">\n                    Entrar na Aula\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Próximas Aulas */}\n            <Card className=\"glassmorphism-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-calendar text-blue-600\"></i>\n                  <span>Próximas Aulas</span>\n                </CardTitle>\n                <CardDescription>Suas aulas programadas para os próximos dias</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Aula 2 - Amanhã */}\n                <div className=\"flex items-center justify-between p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-3 h-3 bg-blue-600 rounded-full\"></div>\n                    <div>\n                      <h4 className=\"font-semibold text-blue-900 dark:text-blue-100\">Lesson 10: Business English</h4>\n                      <p className=\"text-sm text-blue-600 dark:text-blue-400\">Amanhã • 14:00 - 15:30 • Prof. Maria Santos</p>\n                    </div>\n                  </div>\n                  <Badge variant=\"outline\">Agendada</Badge>\n                </div>\n\n                {/* Aula 3 */}\n                <div className=\"flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700/50 rounded-lg border border-gray-200 dark:border-gray-600\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-3 h-3 bg-gray-400 rounded-full\"></div>\n                    <div>\n                      <h4 className=\"font-semibold text-gray-700 dark:text-gray-300\">Lesson 11: Technology Today</h4>\n                      <p className=\"text-sm text-gray-500 dark:text-gray-400\">22/09 • 14:00 - 15:30 • Prof. João Silva</p>\n                    </div>\n                  </div>\n                  <Badge variant=\"outline\">Agendada</Badge>\n                </div>\n\n                {/* Aula 4 */}\n                <div className=\"flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700/50 rounded-lg border border-gray-200 dark:border-gray-600\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-3 h-3 bg-gray-400 rounded-full\"></div>\n                    <div>\n                      <h4 className=\"font-semibold text-gray-700 dark:text-gray-300\">Lesson 12: Health and Wellness</h4>\n                      <p className=\"text-sm text-gray-500 dark:text-gray-400\">24/09 • 14:00 - 15:30 • Prof. Ana Costa</p>\n                    </div>\n                  </div>\n                  <Badge variant=\"outline\">Agendada</Badge>\n                </div>\n\n                {/* Aula 5 */}\n                <div className=\"flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700/50 rounded-lg border border-gray-200 dark:border-gray-600\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-3 h-3 bg-gray-400 rounded-full\"></div>\n                    <div>\n                      <h4 className=\"font-semibold text-gray-700 dark:text-gray-300\">Lesson 13: Environmental Issues</h4>\n                      <p className=\"text-sm text-gray-500 dark:text-gray-400\">26/09 • 14:00 - 15:30 • Prof. Maria Santos</p>\n                    </div>\n                  </div>\n                  <Badge variant=\"outline\">Agendada</Badge>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Aulas Passadas */}\n            <Card className=\"glassmorphism-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-history text-gray-600\"></i>\n                  <span>Aulas Anteriores</span>\n                </CardTitle>\n                <CardDescription>Suas últimas aulas realizadas</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between p-4 bg-green-50 dark:bg-green-900/20 rounded-lg border border-green-200 dark:border-green-800\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-3 h-3 bg-green-600 rounded-full\"></div>\n                    <div>\n                      <h4 className=\"font-semibold text-green-900 dark:text-green-100\">Lesson 8: Travel Adventures</h4>\n                      <p className=\"text-sm text-green-600 dark:text-green-400\">Ontem • 14:00 - 15:30 • Prof. Maria Santos</p>\n                    </div>\n                  </div>\n                  <Badge className=\"bg-green-100 text-green-700 border-green-300\">Concluída</Badge>\n                </div>\n\n                <div className=\"flex items-center justify-between p-4 bg-green-50 dark:bg-green-900/20 rounded-lg border border-green-200 dark:border-green-800\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-3 h-3 bg-green-600 rounded-full\"></div>\n                    <div>\n                      <h4 className=\"font-semibold text-green-900 dark:text-green-100\">Lesson 7: Food and Culture</h4>\n                      <p className=\"text-sm text-green-600 dark:text-green-400\">17/09 • 14:00 - 15:30 • Prof. João Silva</p>\n                    </div>\n                  </div>\n                  <Badge className=\"bg-green-100 text-green-700 border-green-300\">Concluída</Badge>\n                </div>\n              </CardContent>\n            </Card>\n\n          </div>\n\n          {/* Right Column - Informações e Links Úteis */}\n          <div className=\"space-y-6\">\n            \n            {/* Resumo da Semana */}\n            <Card className=\"glassmorphism-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-chart-bar text-purple-600\"></i>\n                  <span>Esta Semana</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"text-center\">\n                  <p className=\"text-2xl font-bold text-purple-600\">4</p>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">Aulas Agendadas</p>\n                </div>\n                <div className=\"text-center\">\n                  <p className=\"text-2xl font-bold text-green-600\">2</p>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">Aulas Concluídas</p>\n                </div>\n                <div className=\"text-center\">\n                  <p className=\"text-2xl font-bold text-blue-600\">6h</p>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">Tempo Total</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Informações da Turma */}\n            <Card className=\"glassmorphism-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-users text-blue-600\"></i>\n                  <span>Minha Turma</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"border-b border-gray-200 dark:border-gray-700 pb-2\">\n                  <p className=\"font-semibold text-gray-900 dark:text-gray-100\">Journey - Intermediário</p>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">Book 3, Unit 2</p>\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-600 dark:text-gray-400\">Professora Principal:</span>\n                    <span className=\"font-medium text-gray-900 dark:text-gray-100\">Maria Santos</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-600 dark:text-gray-400\">Horário:</span>\n                    <span className=\"font-medium text-gray-900 dark:text-gray-100\">Ter/Qui 14:00-15:30</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-600 dark:text-gray-400\">Alunos:</span>\n                    <span className=\"font-medium text-gray-900 dark:text-gray-100\">12 estudantes</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Links Úteis */}\n            <Card className=\"glassmorphism-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-link text-orange-600\"></i>\n                  <span>Links Úteis</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-classroom\">\n                  <i className=\"fas fa-chalkboard-teacher mr-2\"></i>\n                  Sala Virtual\n                </Button>\n                <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-materials\">\n                  <i className=\"fas fa-file-pdf mr-2\"></i>\n                  Materiais da Aula\n                </Button>\n                <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-homework\">\n                  <i className=\"fas fa-tasks mr-2\"></i>\n                  Tarefas Pendentes\n                </Button>\n                <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-contact\">\n                  <i className=\"fas fa-envelope mr-2\"></i>\n                  Contatar Professor\n                </Button>\n              </CardContent>\n            </Card>\n\n          </div>\n        </div>\n      </div>\n    </StudentLayout>\n  );\n}","size_bytes":13559},"frontend/client/src/pages/StudentWorkbook.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport StudentLayout from \"@/components/StudentLayout\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport default function StudentWorkbook() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading: authLoading, user } = useAuth();\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  // Redirect if not a student\n  useEffect(() => {\n    if (!authLoading && isAuthenticated && user?.role !== 'student') {\n      window.location.href = \"/\";\n    }\n  }, [authLoading, isAuthenticated, user]);\n\n  if (authLoading || !isAuthenticated || user?.role !== 'student') {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <StudentLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent mb-2\">\n            Workbook Digital\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-300 text-lg\">\n            Complete seus exercícios e atividades práticas\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Left Column - Exercícios */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            \n            {/* Progresso Atual */}\n            <Card className=\"glassmorphism-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-chart-line text-purple-600\"></i>\n                  <span>Progresso do Workbook</span>\n                </CardTitle>\n                <CardDescription>Journey • Book 3 • Unit 2</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Exercícios Concluídos</span>\n                    <span className=\"text-sm font-bold text-gray-900 dark:text-gray-100\">12 de 15 (80%)</span>\n                  </div>\n                  <Progress value={80} className=\"h-3 bg-gray-200 dark:bg-gray-700\" />\n                </div>\n                <div className=\"grid grid-cols-3 gap-4 pt-4 border-t border-gray-200 dark:border-gray-700\">\n                  <div className=\"text-center\">\n                    <p className=\"text-lg font-bold text-green-600\">12</p>\n                    <p className=\"text-xs text-gray-600 dark:text-gray-400\">Concluídos</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-lg font-bold text-blue-600\">1</p>\n                    <p className=\"text-xs text-gray-600 dark:text-gray-400\">Em Progresso</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-lg font-bold text-gray-600\">2</p>\n                    <p className=\"text-xs text-gray-600 dark:text-gray-400\">Pendentes</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Exercícios Atuais */}\n            <Card className=\"glassmorphism-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-pencil-alt text-blue-600\"></i>\n                  <span>Exercícios Disponíveis</span>\n                </CardTitle>\n                <CardDescription>Continue de onde parou</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                \n                {/* Exercício Em Progresso */}\n                <Card className=\"bg-blue-50 dark:bg-blue-900/20 border-2 border-blue-300 dark:border-blue-700\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <Badge className=\"bg-blue-100 text-blue-700 border-blue-300\">Em Progresso</Badge>\n                      <span className=\"text-sm font-medium text-blue-700 dark:text-blue-300\">Exercício 13</span>\n                    </div>\n                    <h4 className=\"font-semibold text-blue-900 dark:text-blue-100 mb-2\">Grammar: Past Perfect Continuous</h4>\n                    <p className=\"text-sm text-blue-600 dark:text-blue-400 mb-3\">Complete as frases usando o tempo verbal correto</p>\n                    <Progress value={60} className=\"h-2 mb-3\" />\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-xs text-blue-600 dark:text-blue-400\">3 de 5 questões</span>\n                      <Button size=\"sm\" className=\"bg-blue-600 hover:bg-blue-700\" data-testid=\"button-continue-exercise\">\n                        Continuar\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Exercícios Pendentes */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <Card className=\"bg-gray-50 dark:bg-gray-700/50 border border-gray-200 dark:border-gray-600\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <Badge variant=\"outline\">Pendente</Badge>\n                        <span className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Exercício 14</span>\n                      </div>\n                      <h4 className=\"font-semibold text-gray-700 dark:text-gray-300 mb-2\">Vocabulary: Travel & Tourism</h4>\n                      <p className=\"text-sm text-gray-500 dark:text-gray-400 mb-3\">Aprenda palavras relacionadas a viagens</p>\n                      <Button size=\"sm\" variant=\"outline\" className=\"w-full\" data-testid=\"button-start-exercise\">\n                        Começar\n                      </Button>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-gray-50 dark:bg-gray-700/50 border border-gray-200 dark:border-gray-600\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <Badge variant=\"outline\">Pendente</Badge>\n                        <span className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Exercício 15</span>\n                      </div>\n                      <h4 className=\"font-semibold text-gray-700 dark:text-gray-300 mb-2\">Listening: Airport Announcements</h4>\n                      <p className=\"text-sm text-gray-500 dark:text-gray-400 mb-3\">Pratique a compreensão auditiva</p>\n                      <Button size=\"sm\" variant=\"outline\" className=\"w-full\" disabled data-testid=\"button-start-exercise-locked\">\n                        <i className=\"fas fa-lock mr-2\"></i>\n                        Bloqueado\n                      </Button>\n                    </CardContent>\n                  </Card>\n                </div>\n\n              </CardContent>\n            </Card>\n\n            {/* Exercícios Concluídos Recentes */}\n            <Card className=\"glassmorphism-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-check-circle text-green-600\"></i>\n                  <span>Exercícios Concluídos</span>\n                </CardTitle>\n                <CardDescription>Suas atividades finalizadas recentemente</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex items-center justify-between p-3 bg-green-50 dark:bg-green-900/20 rounded-lg border border-green-200 dark:border-green-800\">\n                  <div className=\"flex items-center space-x-3\">\n                    <i className=\"fas fa-check-circle text-green-600\"></i>\n                    <div>\n                      <h4 className=\"font-semibold text-green-900 dark:text-green-100 text-sm\">Exercício 12: Reading Comprehension</h4>\n                      <p className=\"text-xs text-green-600 dark:text-green-400\">Concluído há 2 horas • Nota: 9.5/10</p>\n                    </div>\n                  </div>\n                  <Button size=\"sm\" variant=\"outline\" data-testid=\"button-review-exercise\">\n                    Revisar\n                  </Button>\n                </div>\n\n                <div className=\"flex items-center justify-between p-3 bg-green-50 dark:bg-green-900/20 rounded-lg border border-green-200 dark:border-green-800\">\n                  <div className=\"flex items-center space-x-3\">\n                    <i className=\"fas fa-check-circle text-green-600\"></i>\n                    <div>\n                      <h4 className=\"font-semibold text-green-900 dark:text-green-100 text-sm\">Exercício 11: Writing Practice</h4>\n                      <p className=\"text-xs text-green-600 dark:text-green-400\">Concluído ontem • Nota: 8.0/10</p>\n                    </div>\n                  </div>\n                  <Button size=\"sm\" variant=\"outline\" data-testid=\"button-review-exercise\">\n                    Revisar\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n          </div>\n\n          {/* Right Column - Estatísticas e Recursos */}\n          <div className=\"space-y-6\">\n            \n            {/* Estatísticas */}\n            <Card className=\"glassmorphism-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-chart-bar text-orange-600\"></i>\n                  <span>Estatísticas</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"text-center border-b border-gray-200 dark:border-gray-700 pb-3\">\n                  <p className=\"text-2xl font-bold text-purple-600\">8.7</p>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">Média Geral</p>\n                </div>\n                <div className=\"grid grid-cols-2 gap-4 text-center\">\n                  <div>\n                    <p className=\"text-lg font-bold text-green-600\">95%</p>\n                    <p className=\"text-xs text-gray-600 dark:text-gray-400\">Taxa de Acertos</p>\n                  </div>\n                  <div>\n                    <p className=\"text-lg font-bold text-blue-600\">4h 20m</p>\n                    <p className=\"text-xs text-gray-600 dark:text-gray-400\">Tempo Estudado</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            \n\n          </div>\n        </div>\n      </div>\n    </StudentLayout>\n  );\n}","size_bytes":11608},"frontend/client/src/pages/Students.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport Layout from \"@/components/Layout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Input } from \"@/components/ui/input\";\n\nexport default function Students() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading: authLoading, user } = useAuth();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const { data: students, isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/students\"],\n    retry: false,\n  });\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  if (authLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  // Check permissions\n  const canManageStudents = user?.role === 'admin' || user?.role === 'secretary' || user?.role === 'teacher';\n\n  // Filter students based on search term\n  const filteredStudents = students?.filter((student: any) => {\n    if (!searchTerm) return true;\n    const fullName = `${student.user?.firstName} ${student.user?.lastName}`.toLowerCase();\n    const email = student.user?.email?.toLowerCase() || \"\";\n    const studentId = student.studentId?.toLowerCase() || \"\";\n    return fullName.includes(searchTerm.toLowerCase()) || \n           email.includes(searchTerm.toLowerCase()) ||\n           studentId.includes(searchTerm.toLowerCase());\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'bg-green-100 text-green-700';\n      case 'inactive': return 'bg-gray-100 text-gray-700';\n      case 'graduated': return 'bg-blue-100 text-blue-700';\n      default: return 'bg-gray-100 text-gray-700';\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'active': return 'Ativo';\n      case 'inactive': return 'Inativo';\n      case 'graduated': return 'Formado';\n      default: return status;\n    }\n  };\n\n  return (\n    <Layout>\n      <div className=\"p-6 space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-semibold text-foreground\">Alunos</h2>\n            <p className=\"text-sm text-muted-foreground\">Gerencie os estudantes da escola</p>\n          </div>\n          \n          {canManageStudents && (\n            <Button data-testid=\"button-new-student\">\n              <i className=\"fas fa-plus mr-2\"></i>\n              Novo Aluno\n            </Button>\n          )}\n        </div>\n\n        {/* Search */}\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"relative flex-1 max-w-sm\">\n            <i className=\"fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground text-sm\"></i>\n            <Input\n              placeholder=\"Buscar alunos...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-search-students\"\n            />\n          </div>\n          <Button variant=\"outline\">\n            <i className=\"fas fa-filter mr-2\"></i>\n            Filtros\n          </Button>\n        </div>\n\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {Array.from({ length: 6 }).map((_, index) => (\n              <Card key={index} className=\"animate-pulse\">\n                <CardHeader>\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-12 h-12 bg-muted rounded-full\"></div>\n                    <div className=\"flex-1 space-y-2\">\n                      <div className=\"h-5 bg-muted rounded w-3/4\"></div>\n                      <div className=\"h-4 bg-muted rounded w-1/2\"></div>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    <div className=\"h-4 bg-muted rounded\"></div>\n                    <div className=\"h-4 bg-muted rounded w-2/3\"></div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : !filteredStudents || filteredStudents.length === 0 ? (\n          <Card>\n            <CardContent className=\"py-12 text-center\">\n              <i className=\"fas fa-user-graduate text-muted-foreground text-6xl mb-4\"></i>\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n                {searchTerm ? \"Nenhum aluno encontrado\" : \"Nenhum aluno cadastrado\"}\n              </h3>\n              <p className=\"text-muted-foreground mb-4\">\n                {searchTerm \n                  ? \"Tente ajustar os termos de busca.\" \n                  : canManageStudents \n                  ? \"Comece cadastrando seus primeiros alunos.\" \n                  : \"Não há alunos cadastrados no sistema.\"}\n              </p>\n              {canManageStudents && !searchTerm && (\n                <Button data-testid=\"button-create-first-student\">\n                  <i className=\"fas fa-plus mr-2\"></i>\n                  Cadastrar primeiro aluno\n                </Button>\n              )}\n            </CardContent>\n          </Card>\n        ) : (\n          <>\n            <div className=\"flex items-center justify-between\">\n              <p className=\"text-sm text-muted-foreground\">\n                {filteredStudents.length} {filteredStudents.length === 1 ? 'aluno encontrado' : 'alunos encontrados'}\n              </p>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\" data-testid=\"students-grid\">\n              {filteredStudents.map((student: any) => (\n                <Card key={student.id} className=\"card-hover transition-smooth\" data-testid={`card-student-${student.id}`}>\n                  <CardHeader>\n                    <div className=\"flex items-center space-x-4\">\n                      <Avatar className=\"w-12 h-12\">\n                        <AvatarImage src={student.user?.profileImageUrl} />\n                        <AvatarFallback>\n                          <i className=\"fas fa-user-graduate text-lg\"></i>\n                        </AvatarFallback>\n                      </Avatar>\n                      <div className=\"flex-1\">\n                        <CardTitle className=\"text-lg\">\n                          {student.user?.firstName} {student.user?.lastName}\n                        </CardTitle>\n                        <CardDescription className=\"flex items-center space-x-2\">\n                          <Badge className={getStatusColor(student.status)}>\n                            {getStatusText(student.status)}\n                          </Badge>\n                          {student.studentId && (\n                            <span className=\"text-xs text-muted-foreground\">\n                              ID: {student.studentId}\n                            </span>\n                          )}\n                        </CardDescription>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-2\">\n                      {student.user?.email && (\n                        <div className=\"flex items-center text-sm text-muted-foreground\">\n                          <i className=\"fas fa-envelope mr-2 w-4\"></i>\n                          <span className=\"truncate\">{student.user.email}</span>\n                        </div>\n                      )}\n                      {student.enrollmentDate && (\n                        <div className=\"flex items-center text-sm text-muted-foreground\">\n                          <i className=\"fas fa-calendar mr-2 w-4\"></i>\n                          <span>Matrícula: {new Date(student.enrollmentDate).toLocaleDateString('pt-BR')}</span>\n                        </div>\n                      )}\n                      <div className=\"flex items-center text-sm text-muted-foreground\">\n                        <i className=\"fas fa-book mr-2 w-4\"></i>\n                        <span>0 cursos ativos</span>\n                      </div>\n                    </div>\n                    {canManageStudents && (\n                      <div className=\"mt-4 flex space-x-2\">\n                        <Button variant=\"outline\" size=\"sm\">\n                          <i className=\"fas fa-edit mr-2\"></i>\n                          Editar\n                        </Button>\n                        <Button variant=\"outline\" size=\"sm\">\n                          <i className=\"fas fa-eye mr-2\"></i>\n                          Ver perfil\n                        </Button>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":9765},"frontend/client/src/pages/Support.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport Layout from \"@/components/Layout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport {\n  HelpCircle,\n  Send,\n  MessageCircle,\n  Phone,\n  Mail,\n  Book,\n  AlertCircle,\n  Clock,\n  CheckCircle,\n  XCircle,\n  Bug,\n  Lightbulb,\n  Users,\n  Search,\n  ExternalLink\n} from \"lucide-react\";\n\ninterface SupportTicket {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  status: 'open' | 'in_progress' | 'resolved' | 'closed';\n  createdAt: Date;\n  updatedAt: Date;\n  userId: string;\n  assignedTo?: string;\n  responses?: SupportResponse[];\n}\n\ninterface SupportResponse {\n  id: string;\n  message: string;\n  isFromSupport: boolean;\n  createdAt: Date;\n  userId: string;\n}\n\n// Form schema\nconst ticketFormSchema = z.object({\n  title: z.string().min(1, \"Título é obrigatório\").min(10, \"Título deve ter pelo menos 10 caracteres\"),\n  description: z.string().min(1, \"Descrição é obrigatória\").min(20, \"Descrição deve ter pelo menos 20 caracteres\"),\n  category: z.string().min(1, \"Categoria é obrigatória\"),\n  priority: z.enum([\"low\", \"medium\", \"high\", \"urgent\"]),\n});\n\ntype TicketFormValues = z.infer<typeof ticketFormSchema>;\n\nexport default function Support() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  \n  // Form setup\n  const ticketForm = useForm<TicketFormValues>({\n    resolver: zodResolver(ticketFormSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      category: \"\",\n      priority: \"medium\",\n    },\n  });\n\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  // FAQ mock data\n  const faqData = [\n    {\n      id: \"1\",\n      category: \"Geral\",\n      question: \"Como faço para redefinir minha senha?\",\n      answer: \"Para redefinir sua senha, acesse as Configurações > Segurança > Alterar Senha. Você também pode solicitar uma redefinição na tela de login clicando em 'Esqueci minha senha'.\"\n    },\n    {\n      id: \"2\", \n      category: \"Agenda\",\n      question: \"Como adicionar uma nova aula na agenda?\",\n      answer: \"Na página Agenda, clique em 'Nova Aula' e preencha as informações necessárias. Certifique-se de selecionar o professor, horário e sala corretos.\"\n    },\n    {\n      id: \"3\",\n      category: \"Alunos\",\n      question: \"Como matricular um novo aluno?\",\n      answer: \"Vá para a seção Alunos e clique em 'Novo Aluno'. Preencha todos os dados obrigatórios e selecione o curso desejado. O aluno será adicionado automaticamente ao sistema.\"\n    },\n    {\n      id: \"4\",\n      category: \"Sistema\",\n      question: \"Por que não consigo acessar certas páginas?\",\n      answer: \"O acesso às páginas é controlado por permissões baseadas no seu perfil (admin, professor, secretário, etc.). Entre em contato com o administrador se precisar de permissões adicionais.\"\n    },\n    {\n      id: \"5\",\n      category: \"Relatórios\",\n      question: \"Como gerar relatórios de frequência?\",\n      answer: \"Os relatórios de frequência podem ser gerados na seção Relatórios. Selecione o período, turma ou aluno específico e clique em 'Gerar Relatório'.\"\n    },\n    {\n      id: \"6\",\n      category: \"Backup\",\n      question: \"Como fazer backup dos dados?\",\n      answer: \"Apenas administradores podem fazer backup dos dados. Acesse Configurações > Avançado > Exportar Dados. Recomendamos fazer backups semanais.\"\n    }\n  ];\n\n  // Filtrar FAQ baseado na busca\n  const filteredFaq = faqData.filter(item => \n    item.question.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    item.answer.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    item.category.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  // Query para buscar tickets\n  const { data: userTickets, isLoading: ticketsLoading, error: ticketsError } = useQuery({\n    queryKey: ['/api/support/tickets'],\n    enabled: !!user,\n  });\n\n  // Mutation para criar ticket\n  const createTicketMutation = useMutation({\n    mutationFn: async (ticketData: TicketFormValues) => {\n      const response = await apiRequest('/api/support/tickets', {\n        method: 'POST',\n        body: JSON.stringify(ticketData)\n      });\n      return response;\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Ticket criado com sucesso\",\n        description: `Seu ticket #${data.id} foi criado. Entraremos em contato em breve.`,\n      });\n      ticketForm.reset();\n      // Invalidate tickets cache\n      queryClient.invalidateQueries({ queryKey: ['/api/support/tickets'] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erro ao criar ticket\",\n        description: error.message || \"Tente novamente mais tarde.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmitTicket = (data: TicketFormValues) => {\n    createTicketMutation.mutate(data);\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'urgent': return 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400';\n      case 'high': return 'bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-400';\n      case 'medium': return 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400';\n      case 'low': return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'open': return 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400';\n      case 'in_progress': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400';\n      case 'resolved': return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400';\n      case 'closed': return 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'open': return <Clock className=\"h-4 w-4\" />;\n      case 'in_progress': return <AlertCircle className=\"h-4 w-4\" />;\n      case 'resolved': return <CheckCircle className=\"h-4 w-4\" />;\n      case 'closed': return <XCircle className=\"h-4 w-4\" />;\n      default: return <Clock className=\"h-4 w-4\" />;\n    }\n  };\n\n  if (!user) {\n    return (\n      <Layout>\n        <div className=\"p-6\">\n          <div className=\"text-center\">\n            <h2 className=\"text-2xl font-bold text-destructive mb-4\">Acesso Negado</h2>\n            <p className=\"text-muted-foreground\">\n              Você precisa estar logado para acessar o suporte.\n            </p>\n          </div>\n        </div>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout>\n      <div className=\"p-6 space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n              <HelpCircle className=\"h-6 w-6 text-primary-foreground\" />\n            </div>\n            <div>\n              <h1 className=\"text-2xl font-semibold text-foreground\" data-testid=\"text-support-title\">\n                Central de Ajuda\n              </h1>\n              <p className=\"text-sm text-muted-foreground\">\n                Encontre respostas ou entre em contato conosco\n              </p>\n            </div>\n          </div>\n          <Badge variant=\"secondary\">\n            OpenLife Suporte\n          </Badge>\n        </div>\n\n        <Tabs defaultValue=\"faq\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-2 md:grid-cols-4\">\n            <TabsTrigger value=\"faq\" className=\"flex items-center space-x-1\">\n              <Book className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">FAQ</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"new-ticket\" className=\"flex items-center space-x-1\">\n              <MessageCircle className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Novo Ticket</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"my-tickets\" className=\"flex items-center space-x-1\">\n              <Users className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Meus Tickets</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"contact\" className=\"flex items-center space-x-1\">\n              <Phone className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Contato</span>\n            </TabsTrigger>\n          </TabsList>\n\n          {/* FAQ */}\n          <TabsContent value=\"faq\" className=\"space-y-6\">\n            <Card data-testid=\"card-faq\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Book className=\"h-5 w-5\" />\n                  <span>Perguntas Frequentes</span>\n                </CardTitle>\n                <CardDescription>\n                  Encontre respostas para as dúvidas mais comuns\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Barra de pesquisa */}\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    placeholder=\"Pesquisar na FAQ...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-10\"\n                    data-testid=\"input-faq-search\"\n                  />\n                </div>\n\n                {/* FAQ Accordion */}\n                <Accordion type=\"single\" collapsible className=\"w-full\">\n                  {filteredFaq.map((faq) => (\n                    <AccordionItem key={faq.id} value={faq.id} data-testid={`faq-item-${faq.id}`}>\n                      <AccordionTrigger className=\"text-left\" data-testid={`faq-question-${faq.id}`}>\n                        <div className=\"flex items-start space-x-3\">\n                          <Badge variant=\"outline\" className=\"text-xs\" data-testid={`faq-category-${faq.id}`}>\n                            {faq.category}\n                          </Badge>\n                          <span>{faq.question}</span>\n                        </div>\n                      </AccordionTrigger>\n                      <AccordionContent data-testid={`faq-answer-${faq.id}`}>\n                        <div className=\"pt-2 pl-16\">\n                          <p className=\"text-muted-foreground\">{faq.answer}</p>\n                        </div>\n                      </AccordionContent>\n                    </AccordionItem>\n                  ))}\n                </Accordion>\n\n                {filteredFaq.length === 0 && (\n                  <div className=\"text-center py-8\">\n                    <p className=\"text-muted-foreground\">\n                      Nenhum resultado encontrado para \"{searchQuery}\"\n                    </p>\n                  </div>\n                )}\n\n                <Separator />\n\n                <div className=\"bg-muted p-4 rounded-lg\">\n                  <div className=\"flex items-start space-x-3\">\n                    <Lightbulb className=\"h-5 w-5 text-primary mt-0.5\" />\n                    <div>\n                      <h3 className=\"font-medium text-sm\">Não encontrou sua resposta?</h3>\n                      <p className=\"text-sm text-muted-foreground mt-1\">\n                        Crie um ticket de suporte e nossa equipe entrará em contato com você.\n                      </p>\n                      <Button size=\"sm\" className=\"mt-2\" onClick={() => {\n                        // Switch to new ticket tab\n                        const ticketTab = document.querySelector('[value=\"new-ticket\"]') as HTMLElement;\n                        ticketTab?.click();\n                      }} data-testid=\"button-create-ticket-from-faq\">\n                        Criar Ticket\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Novo Ticket */}\n          <TabsContent value=\"new-ticket\" className=\"space-y-6\">\n            <Card data-testid=\"card-new-ticket\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <MessageCircle className=\"h-5 w-5\" />\n                  <span>Criar Novo Ticket</span>\n                </CardTitle>\n                <CardDescription>\n                  Descreva seu problema ou sugestão detalhadamente\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Form {...ticketForm}>\n                  <form onSubmit={ticketForm.handleSubmit(onSubmitTicket)} className=\"space-y-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <FormField\n                      control={ticketForm.control}\n                      name=\"category\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Categoria *</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-ticket-category\">\n                                <SelectValue placeholder=\"Selecione a categoria\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"tecnico\">\n                                <div className=\"flex items-center space-x-2\">\n                                  <Bug className=\"h-4 w-4\" />\n                                  <span>Problema Técnico</span>\n                                </div>\n                              </SelectItem>\n                              <SelectItem value=\"sugestao\">\n                                <div className=\"flex items-center space-x-2\">\n                                  <Lightbulb className=\"h-4 w-4\" />\n                                  <span>Sugestão de Melhoria</span>\n                                </div>\n                              </SelectItem>\n                              <SelectItem value=\"duvida\">\n                                <div className=\"flex items-center space-x-2\">\n                                  <HelpCircle className=\"h-4 w-4\" />\n                                  <span>Dúvida Geral</span>\n                                </div>\n                              </SelectItem>\n                              <SelectItem value=\"permissao\">\n                                <div className=\"flex items-center space-x-2\">\n                                  <Users className=\"h-4 w-4\" />\n                                  <span>Solicitação de Acesso</span>\n                                </div>\n                              </SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={ticketForm.control}\n                      name=\"priority\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Prioridade</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-ticket-priority\">\n                                <SelectValue />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"low\">Baixa</SelectItem>\n                              <SelectItem value=\"medium\">Média</SelectItem>\n                              <SelectItem value=\"high\">Alta</SelectItem>\n                              <SelectItem value=\"urgent\">Urgente</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={ticketForm.control}\n                    name=\"title\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Título *</FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder=\"Descreva brevemente o problema ou solicitação\"\n                            data-testid=\"input-ticket-title\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={ticketForm.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Descrição Detalhada *</FormLabel>\n                        <FormControl>\n                          <Textarea\n                            placeholder=\"Forneça o máximo de detalhes possível sobre o problema, incluindo passos para reproduzi-lo, mensagens de erro, etc.\"\n                            rows={6}\n                            data-testid=\"textarea-ticket-description\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4\">\n                    <div className=\"flex items-start space-x-3\">\n                      <AlertCircle className=\"h-5 w-5 text-blue-600 dark:text-blue-400 mt-0.5\" />\n                      <div className=\"text-sm\">\n                        <h3 className=\"font-medium text-blue-800 dark:text-blue-200 mb-1\">\n                          Dicas para um ticket eficaz:\n                        </h3>\n                        <ul className=\"text-blue-700 dark:text-blue-300 space-y-1 list-disc list-inside\">\n                          <li>Seja específico sobre o problema encontrado</li>\n                          <li>Inclua passos detalhados para reproduzir o erro</li>\n                          <li>Mencione qual navegador e sistema operacional está usando</li>\n                          <li>Anexe prints de tela se relevante</li>\n                        </ul>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex justify-end space-x-2\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => ticketForm.reset()}\n                      data-testid=\"button-clear-ticket\"\n                    >\n                      Limpar\n                    </Button>\n                    <Button\n                      type=\"submit\"\n                      disabled={createTicketMutation.isPending}\n                      data-testid=\"button-submit-ticket\"\n                    >\n                      <Send className=\"h-4 w-4 mr-2\" />\n                      {createTicketMutation.isPending ? 'Enviando...' : 'Enviar Ticket'}\n                    </Button>\n                  </div>\n                </form>\n                </Form>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Meus Tickets */}\n          <TabsContent value=\"my-tickets\" className=\"space-y-6\">\n            <Card data-testid=\"card-my-tickets\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Users className=\"h-5 w-5\" />\n                  <span>Meus Tickets</span>\n                </CardTitle>\n                <CardDescription>\n                  Acompanhe o status dos seus tickets de suporte\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {ticketsLoading ? (\n                  <div className=\"text-center py-8\" data-testid=\"tickets-loading\">\n                    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n                    <p className=\"text-muted-foreground\">Carregando tickets...</p>\n                  </div>\n                ) : ticketsError ? (\n                  <div className=\"text-center py-8\" data-testid=\"tickets-error\">\n                    <p className=\"text-destructive mb-2\">Erro ao carregar tickets</p>\n                    <p className=\"text-sm text-muted-foreground\">Tente recarregar a página</p>\n                  </div>\n                ) : userTickets && userTickets.length > 0 ? (\n                  userTickets.map((ticket) => (\n                    <Card key={ticket.id} className=\"border-l-4 border-l-primary\" data-testid={`ticket-card-${ticket.id}`}>\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-start justify-between mb-3\">\n                          <div className=\"space-y-1\">\n                            <h3 className=\"font-medium\" data-testid={`ticket-title-${ticket.id}`}>{ticket.title}</h3>\n                            <p className=\"text-sm text-muted-foreground line-clamp-2\" data-testid={`ticket-description-${ticket.id}`}>\n                              {ticket.description}\n                            </p>\n                          </div>\n                          <div className=\"flex flex-col items-end space-y-2\">\n                            <Badge className={getStatusColor(ticket.status)} data-testid={`ticket-status-${ticket.id}`}>\n                              {getStatusIcon(ticket.status)}\n                              <span className=\"ml-1 capitalize\">{ticket.status.replace('_', ' ')}</span>\n                            </Badge>\n                            <Badge variant=\"outline\" className={getPriorityColor(ticket.priority)} data-testid={`ticket-priority-${ticket.id}`}>\n                              {ticket.priority === 'urgent' && 'Urgente'}\n                              {ticket.priority === 'high' && 'Alta'}\n                              {ticket.priority === 'medium' && 'Média'}\n                              {ticket.priority === 'low' && 'Baixa'}\n                            </Badge>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n                          <span data-testid={`ticket-id-${ticket.id}`}>Ticket #{ticket.id}</span>\n                          <span data-testid={`ticket-date-${ticket.id}`}>{ticket.createdAt.toLocaleDateString('pt-BR')}</span>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <MessageCircle className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                    <p className=\"text-muted-foreground mb-2\">\n                      Você ainda não possui tickets de suporte\n                    </p>\n                    <Button variant=\"outline\" onClick={() => {\n                      const ticketTab = document.querySelector('[value=\"new-ticket\"]') as HTMLElement;\n                      ticketTab?.click();\n                    }} data-testid=\"button-create-first-ticket\">\n                      Criar Primeiro Ticket\n                    </Button>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Contato */}\n          <TabsContent value=\"contact\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <Card data-testid=\"card-contact-info\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Phone className=\"h-5 w-5\" />\n                    <span>Informações de Contato</span>\n                  </CardTitle>\n                  <CardDescription>\n                    Entre em contato através dos canais abaixo\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-10 h-10 bg-blue-100 dark:bg-blue-900/20 rounded-lg flex items-center justify-center\">\n                      <Mail className=\"h-5 w-5 text-blue-600 dark:text-blue-400\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-medium\">Email</h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        suporte@openlife.com\n                        {/* COMENTADO: Email configurável via .env */}\n                        {/* {process.env.SUPPORT_EMAIL || 'suporte@openlife.com'} */}\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-10 h-10 bg-green-100 dark:bg-green-900/20 rounded-lg flex items-center justify-center\">\n                      <Phone className=\"h-5 w-5 text-green-600 dark:text-green-400\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-medium\">Telefone</h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        (11) 9999-9999\n                        {/* COMENTADO: Telefone configurável via .env */}\n                        {/* {process.env.SUPPORT_PHONE || '(11) 9999-9999'} */}\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-10 h-10 bg-purple-100 dark:bg-purple-900/20 rounded-lg flex items-center justify-center\">\n                      <MessageCircle className=\"h-5 w-5 text-purple-600 dark:text-purple-400\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-medium\">WhatsApp</h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        (11) 99999-9999\n                        {/* COMENTADO: WhatsApp configurável via .env */}\n                        {/* {process.env.SUPPORT_WHATSAPP || '(11) 99999-9999'} */}\n                      </p>\n                    </div>\n                  </div>\n\n                  <Separator />\n\n                  <div className=\"space-y-2\">\n                    <h3 className=\"font-medium\">Horário de Atendimento</h3>\n                    <div className=\"text-sm text-muted-foreground space-y-1\">\n                      <p>Segunda a Sexta: 8h às 18h</p>\n                      <p>Sábados: 8h às 12h</p>\n                      <p>Domingos: Fechado</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card data-testid=\"card-help-resources\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Book className=\"h-5 w-5\" />\n                    <span>Recursos de Ajuda</span>\n                  </CardTitle>\n                  <CardDescription>\n                    Links úteis e documentação\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <Button variant=\"outline\" className=\"w-full justify-start h-auto p-4\" data-testid=\"button-manual\">\n                    <div className=\"flex items-center space-x-3\">\n                      <Book className=\"h-5 w-5 text-blue-600\" />\n                      <div className=\"text-left\">\n                        <div className=\"font-medium\">Manual do Usuário</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Guia completo de uso do sistema\n                        </div>\n                      </div>\n                      <ExternalLink className=\"h-4 w-4 ml-auto\" />\n                    </div>\n                  </Button>\n\n                  <Button variant=\"outline\" className=\"w-full justify-start h-auto p-4\" data-testid=\"button-tutorial\">\n                    <div className=\"flex items-center space-x-3\">\n                      <Users className=\"h-5 w-5 text-green-600\" />\n                      <div className=\"text-left\">\n                        <div className=\"font-medium\">Tutoriais em Vídeo</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Aprenda através de vídeos práticos\n                        </div>\n                      </div>\n                      <ExternalLink className=\"h-4 w-4 ml-auto\" />\n                    </div>\n                  </Button>\n\n                  <Button variant=\"outline\" className=\"w-full justify-start h-auto p-4\" data-testid=\"button-community\">\n                    <div className=\"flex items-center space-x-3\">\n                      <MessageCircle className=\"h-5 w-5 text-purple-600\" />\n                      <div className=\"text-left\">\n                        <div className=\"font-medium\">Comunidade</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Fórum da comunidade de usuários\n                        </div>\n                      </div>\n                      <ExternalLink className=\"h-4 w-4 ml-auto\" />\n                    </div>\n                  </Button>\n\n                  <Separator />\n\n                  <div className=\"bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4\">\n                    <div className=\"flex items-start space-x-3\">\n                      <AlertCircle className=\"h-5 w-5 text-yellow-600 dark:text-yellow-400 mt-0.5\" />\n                      <div className=\"text-sm\">\n                        <h3 className=\"font-medium text-yellow-800 dark:text-yellow-200 mb-1\">\n                          Suporte de Emergência\n                        </h3>\n                        <p className=\"text-yellow-700 dark:text-yellow-300\">\n                          Para problemas críticos fora do horário comercial, \n                          envie um email marcando como \"URGENTE\" no assunto.\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </Layout>\n  );\n}","size_bytes":32323},"frontend/client/src/pages/TeacherArea.tsx":{"content":"\nimport React, { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Layout from \"@/components/Layout\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { format, startOfWeek, addDays, isSameDay } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\n\nexport default function TeacherArea() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading: authLoading, user } = useAuth();\n  const [selectedClassId, setSelectedClassId] = useState<string>(\"\");\n  const [currentWeekStart, setCurrentWeekStart] = useState<Date>(startOfWeek(new Date(), { locale: ptBR }));\n  const [selectedClassDetail, setSelectedClassDetail] = useState<any>(null);\n  const [showClassDetail, setShowClassDetail] = useState(false);\n\n  // Fetch teacher's classes\n  const { data: teacherClasses = [], isLoading: classesLoading } = useQuery<any[]>({\n    queryKey: [\"/api/classes/teacher\", user?.id],\n    enabled: isAuthenticated && user?.role === 'teacher',\n    retry: false,\n  });\n\n  // Fetch teacher's schedule\n  const { data: teacherSchedule = [], isLoading: scheduleLoading } = useQuery<any[]>({\n    queryKey: [\"/api/schedule/teacher\", user?.id],\n    enabled: isAuthenticated && user?.role === 'teacher',\n    retry: false,\n  });\n\n  // Mock data for students and grades (would come from API)\n  const mockStudents = [\n    {\n      id: '1',\n      name: 'Ana Silva',\n      email: 'ana.silva@email.com',\n      workbookProgress: 75,\n      currentUnit: 8,\n      totalUnits: 12,\n      averageGrade: 8.5,\n      attendance: 95,\n      avatar: null\n    },\n    {\n      id: '2', \n      name: 'Carlos Santos',\n      email: 'carlos.santos@email.com',\n      workbookProgress: 60,\n      currentUnit: 6,\n      totalUnits: 12,\n      averageGrade: 7.2,\n      attendance: 88,\n      avatar: null\n    },\n    {\n      id: '3',\n      name: 'Beatriz Costa',\n      email: 'beatriz.costa@email.com', \n      workbookProgress: 90,\n      currentUnit: 10,\n      totalUnits: 12,\n      averageGrade: 9.1,\n      attendance: 98,\n      avatar: null\n    }\n  ];\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Não autorizado\",\n        description: \"Você foi desconectado. Fazendo login novamente...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  if (authLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  // Check if user is teacher\n  if (user?.role !== 'teacher') {\n    return (\n      <Layout>\n        <div className=\"p-6\">\n          <Card>\n            <CardContent className=\"py-12 text-center\">\n              <i className=\"fas fa-user-slash text-muted-foreground text-6xl mb-4\"></i>\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">Acesso Negado</h3>\n              <p className=\"text-muted-foreground\">Esta área é exclusiva para professores.</p>\n            </CardContent>\n          </Card>\n        </div>\n      </Layout>\n    );\n  }\n\n  const navigateWeek = (direction: 'prev' | 'next') => {\n    setCurrentWeekStart(prev => addDays(prev, direction === 'next' ? 7 : -7));\n  };\n\n  // Sistema de cores por livro - utilizando cores OpenLife\n  const bookColors: { [key: string]: string } = {\n    'English Basic - Book 1': '#b130ff',\n    'English Basic - Book 2': '#ff6506',\n    'English Basic - Book 3': '#3b82f6',\n    'English Intermediate - Book 1': '#10b981',\n    'English Intermediate - Book 2': '#059669',\n    'English Advanced - Book 1': '#8b5cf6',\n    'Español Básico - Libro 1': '#f59e0b',\n    'Español Básico - Libro 2': '#d97706'\n  };\n\n  const handleClassClick = (classItem: any) => {\n    setSelectedClassDetail(classItem);\n    setShowClassDetail(true);\n  };\n\n  const renderWeeklySchedule = () => {\n    const weekDays = Array.from({ length: 7 }, (_, i) => addDays(currentWeekStart, i));\n    const timeSlots = Array.from({ length: 14 }, (_, i) => `${8 + i}:00`);\n\n    // Dados exemplares das turmas do professor\n    const mockTeacherSchedule = [\n      {\n        id: '1',\n        title: 'Inglês A1 - Manhã',\n        book: 'English Basic - Book 1',\n        dayOfWeek: 1, // Segunda\n        startTime: '09:00',\n        endTime: '11:00',\n        room: 'Sala 101',\n        currentDay: 5,\n        totalDays: 30,\n        studentsCount: 12,\n        maxStudents: 15\n      },\n      {\n        id: '2',\n        title: 'Inglês A2 - Tarde',\n        book: 'English Basic - Book 2',\n        dayOfWeek: 1, // Segunda\n        startTime: '14:00',\n        endTime: '16:00',\n        room: 'Sala 102',\n        currentDay: 8,\n        totalDays: 35,\n        studentsCount: 10,\n        maxStudents: 15\n      },\n      {\n        id: '3',\n        title: 'Inglês A1 - Manhã',\n        book: 'English Basic - Book 1',\n        dayOfWeek: 3, // Quarta\n        startTime: '09:00',\n        endTime: '11:00',\n        room: 'Sala 101',\n        currentDay: 6,\n        totalDays: 30,\n        studentsCount: 12,\n        maxStudents: 15\n      },\n      {\n        id: '4',\n        title: 'Inglês A2 - Tarde',\n        book: 'English Basic - Book 2',\n        dayOfWeek: 3, // Quarta\n        startTime: '14:00',\n        endTime: '16:00',\n        room: 'Sala 102',\n        currentDay: 9,\n        totalDays: 35,\n        studentsCount: 10,\n        maxStudents: 15\n      }\n    ];\n\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Button variant=\"outline\" onClick={() => navigateWeek('prev')}>\n              ← Semana Anterior\n            </Button>\n            <h3 className=\"text-lg font-semibold\">\n              {format(currentWeekStart, \"dd MMM\", { locale: ptBR })} - {format(addDays(currentWeekStart, 6), \"dd MMM yyyy\", { locale: ptBR })}\n            </h3>\n            <Button variant=\"outline\" onClick={() => navigateWeek('next')}>\n              Próxima Semana →\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"overflow-x-auto bg-white rounded-lg border shadow-sm\">\n          <div className=\"grid grid-cols-8 gap-0 min-w-[900px]\">\n            {/* Header */}\n            <div className=\"p-3 font-medium text-center bg-gray-50 border-b border-r text-sm\">Horário</div>\n            {weekDays.map((day) => (\n              <div key={day.toISOString()} className=\"p-3 font-medium text-center bg-gray-50 border-b border-r text-sm\">\n                <div className=\"font-semibold\">{format(day, \"EEE\", { locale: ptBR })}</div>\n                <div className=\"text-xs text-gray-500 mt-1\">\n                  {format(day, \"dd/MM\", { locale: ptBR })}\n                </div>\n              </div>\n            ))}\n\n            {/* Time slots */}\n            {timeSlots.map((timeSlot) => {\n              const [hour] = timeSlot.split(':');\n              return (\n                <React.Fragment key={timeSlot}>\n                  <div className=\"p-3 text-xs font-medium text-center bg-gray-50 border-b border-r text-gray-600\">\n                    {timeSlot}\n                  </div>\n                  \n                  {weekDays.map((day) => {\n                    const dayClasses = mockTeacherSchedule.filter(classItem => {\n                      if (classItem.dayOfWeek !== day.getDay()) return false;\n                      const classHour = parseInt(classItem.startTime.split(':')[0]);\n                      return classHour === parseInt(hour);\n                    });\n\n                    return (\n                      <div key={`${day.toISOString()}-${timeSlot}`} className=\"min-h-[80px] p-1 border-b border-r border-gray-100\">\n                        {dayClasses.map((classItem) => (\n                          <div\n                            key={classItem.id}\n                            className=\"p-2 rounded-lg text-xs cursor-pointer transition-all hover:shadow-md border border-opacity-30 h-full flex items-center justify-center\"\n                            style={{\n                              backgroundColor: bookColors[classItem.book] + '20',\n                              borderColor: bookColors[classItem.book],\n                              color: '#000'\n                            }}\n                            onClick={() => handleClassClick(classItem)}\n                            data-testid={`schedule-class-${classItem.id}`}\n                          >\n                            <div className=\"font-semibold text-sm text-center\">{classItem.title}</div>\n                          </div>\n                        ))}\n                      </div>\n                    );\n                  })}\n                </React.Fragment>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Legenda dos meus livros */}\n        <div className=\"bg-gray-50 p-4 rounded-lg\">\n          <h4 className=\"font-medium mb-3\">Meus Livros</h4>\n          <div className=\"flex flex-wrap gap-3\">\n            {Object.entries(bookColors).map(([bookName, color]) => (\n              <div key={bookName} className=\"flex items-center space-x-2\">\n                <div className=\"w-4 h-4 rounded-full\" style={{ backgroundColor: color }}></div>\n                <span className=\"text-sm\">{bookName}</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <Layout>\n      <div className=\"p-6 space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-semibold text-foreground\">Área do Professor</h2>\n            <p className=\"text-sm text-muted-foreground\">\n              Bem-vindo, Prof. Ivan Silva - Gerencie suas turmas e acompanhe o progresso dos alunos\n            </p>\n          </div>\n        </div>\n\n        <Tabs defaultValue=\"turmas\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"turmas\">Minhas Turmas</TabsTrigger>\n            <TabsTrigger value=\"alunos\">Alunos & Notas</TabsTrigger>\n            <TabsTrigger value=\"avaliacoes\">Avaliações</TabsTrigger>\n            <TabsTrigger value=\"agenda\">Minha Agenda</TabsTrigger>\n          </TabsList>\n\n          {/* Minhas Turmas */}\n          <TabsContent value=\"turmas\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-users text-primary\"></i>\n                  <span>Minhas Turmas</span>\n                  <Badge variant=\"secondary\">{teacherClasses.length} turmas ativas</Badge>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {classesLoading ? (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                    {Array.from({ length: 3 }).map((_, index) => (\n                      <Card key={index} className=\"animate-pulse\">\n                        <CardHeader>\n                          <div className=\"h-5 bg-muted rounded w-3/4 mb-2\"></div>\n                          <div className=\"h-4 bg-muted rounded w-1/2\"></div>\n                        </CardHeader>\n                        <CardContent>\n                          <div className=\"space-y-2\">\n                            <div className=\"h-4 bg-muted rounded\"></div>\n                            <div className=\"h-4 bg-muted rounded w-2/3\"></div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                ) : teacherClasses.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <i className=\"fas fa-chalkboard-teacher text-muted-foreground text-6xl mb-4\"></i>\n                    <h3 className=\"text-lg font-semibold text-foreground mb-2\">Nenhuma turma atribuída</h3>\n                    <p className=\"text-muted-foreground\">Você ainda não tem turmas atribuídas.</p>\n                  </div>\n                ) : (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                    {teacherClasses.map((classItem: any) => (\n                      <Card key={classItem.id} className=\"border-l-4 transition-all hover:shadow-lg\" \n                            style={{ borderLeftColor: classItem.book?.color || '#3b82f6' }}>\n                        <CardHeader>\n                          <CardTitle className=\"text-lg\">{classItem.name}</CardTitle>\n                          <CardDescription className=\"flex items-center space-x-2\">\n                            <span style={{ color: classItem.book?.color || '#3b82f6' }}>\n                              📚 {classItem.book?.name}\n                            </span>\n                          </CardDescription>\n                        </CardHeader>\n                        <CardContent>\n                          <div className=\"space-y-3\">\n                            <div className=\"flex items-center justify-between text-sm\">\n                              <span className=\"text-muted-foreground\">📅 Horário:</span>\n                              <span>{classItem.schedule}</span>\n                            </div>\n                            <div className=\"flex items-center justify-between text-sm\">\n                              <span className=\"text-muted-foreground\">🏢 Sala:</span>\n                              <span>{classItem.room}</span>\n                            </div>\n                            <div className=\"flex items-center justify-between text-sm\">\n                              <span className=\"text-muted-foreground\">👥 Alunos:</span>\n                              <span>{classItem.currentStudents}/{classItem.maxStudents}</span>\n                            </div>\n                            <div className=\"space-y-1\">\n                              <div className=\"flex items-center justify-between text-sm\">\n                                <span className=\"text-muted-foreground\">📖 Progresso:</span>\n                                <span>Dia {classItem.currentDay}/{classItem.book?.totalDays || 30}</span>\n                              </div>\n                              <Progress \n                                value={(classItem.currentDay / (classItem.book?.totalDays || 30)) * 100} \n                                className=\"h-2\" \n                              />\n                            </div>\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\" \n                              className=\"w-full\"\n                              onClick={() => setSelectedClassId(classItem.id)}\n                            >\n                              <i className=\"fas fa-eye mr-2\"></i>\n                              Ver Detalhes\n                            </Button>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Alunos & Notas */}\n          <TabsContent value=\"alunos\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-user-graduate text-primary\"></i>\n                  <span>Progresso dos Alunos</span>\n                </CardTitle>\n                <div className=\"flex items-center space-x-4\">\n                  <Select value={selectedClassId} onValueChange={setSelectedClassId}>\n                    <SelectTrigger className=\"w-64\">\n                      <SelectValue placeholder=\"Selecione uma turma\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {teacherClasses.map((classItem: any) => (\n                        <SelectItem key={classItem.id} value={classItem.id}>\n                          {classItem.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {selectedClassId ? (\n                  <div className=\"space-y-4\">\n                    {mockStudents.map((student) => (\n                      <Card key={student.id} className=\"p-4\">\n                        <div className=\"flex items-center space-x-4\">\n                          <Avatar className=\"w-12 h-12\">\n                            <AvatarImage src={student.avatar || undefined} />\n                            <AvatarFallback>\n                              <i className=\"fas fa-user\"></i>\n                            </AvatarFallback>\n                          </Avatar>\n                          <div className=\"flex-1 space-y-2\">\n                            <div className=\"flex items-center justify-between\">\n                              <div>\n                                <h4 className=\"font-semibold\">{student.name}</h4>\n                                <p className=\"text-sm text-muted-foreground\">{student.email}</p>\n                              </div>\n                              <div className=\"text-right\">\n                                <div className=\"text-lg font-bold text-green-600\">{student.averageGrade}</div>\n                                <div className=\"text-sm text-muted-foreground\">Média Geral</div>\n                              </div>\n                            </div>\n                            \n                            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                              <div className=\"space-y-1\">\n                                <div className=\"flex items-center justify-between text-sm\">\n                                  <span>📚 Workbook</span>\n                                  <span>{student.workbookProgress}%</span>\n                                </div>\n                                <Progress value={student.workbookProgress} className=\"h-2\" />\n                              </div>\n                              \n                              <div className=\"space-y-1\">\n                                <div className=\"flex items-center justify-between text-sm\">\n                                  <span>📖 Unidade</span>\n                                  <span>{student.currentUnit}/{student.totalUnits}</span>\n                                </div>\n                                <Progress value={(student.currentUnit / student.totalUnits) * 100} className=\"h-2\" />\n                              </div>\n                              \n                              <div className=\"space-y-1\">\n                                <div className=\"flex items-center justify-between text-sm\">\n                                  <span>📅 Presença</span>\n                                  <span>{student.attendance}%</span>\n                                </div>\n                                <Progress value={student.attendance} className=\"h-2\" />\n                              </div>\n                            </div>\n\n                            <div className=\"flex space-x-2 mt-3\">\n                              <Button variant=\"outline\" size=\"sm\">\n                                <i className=\"fas fa-edit mr-2\"></i>\n                                Editar Notas\n                              </Button>\n                              <Button variant=\"outline\" size=\"sm\">\n                                <i className=\"fas fa-eye mr-2\"></i>\n                                Ver Histórico\n                              </Button>\n                              <Button variant=\"outline\" size=\"sm\">\n                                <i className=\"fas fa-chart-line mr-2\"></i>\n                                Relatório\n                              </Button>\n                            </div>\n                          </div>\n                        </div>\n                      </Card>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <i className=\"fas fa-users text-muted-foreground text-6xl mb-4\"></i>\n                    <h3 className=\"text-lg font-semibold text-foreground mb-2\">Selecione uma turma</h3>\n                    <p className=\"text-muted-foreground\">Escolha uma turma acima para ver o progresso dos alunos.</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Avaliações */}\n          <TabsContent value=\"avaliacoes\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-clipboard-check text-primary\"></i>\n                  <span>Área de Avaliações</span>\n                </CardTitle>\n                <div className=\"flex justify-between items-center\">\n                  <p className=\"text-sm text-muted-foreground\">Gerencie provas e avaliações das suas turmas</p>\n                  <Button>\n                    <i className=\"fas fa-plus mr-2\"></i>\n                    Nova Avaliação\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {/* Mock assessment data */}\n                  <Card className=\"border-l-4 border-l-blue-500\">\n                    <CardHeader>\n                      <CardTitle className=\"text-sm\">Prova Unit 8 - Inglês A1</CardTitle>\n                      <CardDescription>Agendada para 15/03/2024</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span>Status:</span>\n                          <Badge className=\"bg-blue-100 text-blue-700\">Agendada</Badge>\n                        </div>\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span>Turma:</span>\n                          <span>Inglês A1</span>\n                        </div>\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span>Alunos:</span>\n                          <span>12 alunos</span>\n                        </div>\n                        <Button variant=\"outline\" size=\"sm\" className=\"w-full mt-2\">\n                          <i className=\"fas fa-edit mr-2\"></i>\n                          Gerenciar\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"border-l-4 border-l-green-500\">\n                    <CardHeader>\n                      <CardTitle className=\"text-sm\">Avaliação Workbook - Inglês A1</CardTitle>\n                      <CardDescription>Concluída em 10/03/2024</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span>Status:</span>\n                          <Badge className=\"bg-green-100 text-green-700\">Concluída</Badge>\n                        </div>\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span>Média:</span>\n                          <span className=\"font-semibold text-green-600\">8.4</span>\n                        </div>\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span>Participaram:</span>\n                          <span>11/12 alunos</span>\n                        </div>\n                        <Button variant=\"outline\" size=\"sm\" className=\"w-full mt-2\">\n                          <i className=\"fas fa-chart-bar mr-2\"></i>\n                          Ver Resultados\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"border-l-4 border-l-yellow-500\">\n                    <CardHeader>\n                      <CardTitle className=\"text-sm\">Prova Oral - Inglês A1</CardTitle>\n                      <CardDescription>Em andamento</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span>Status:</span>\n                          <Badge className=\"bg-yellow-100 text-yellow-700\">Em Andamento</Badge>\n                        </div>\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span>Progresso:</span>\n                          <span>7/12 alunos</span>\n                        </div>\n                        <div className=\"space-y-1\">\n                          <Progress value={58} className=\"h-2\" />\n                        </div>\n                        <Button variant=\"outline\" size=\"sm\" className=\"w-full mt-2\">\n                          <i className=\"fas fa-microphone mr-2\"></i>\n                          Continuar\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Minha Agenda */}\n          <TabsContent value=\"agenda\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-calendar-week text-primary\"></i>\n                  <span>Minha Agenda Semanal</span>\n                </CardTitle>\n                <CardDescription>\n                  Visualize suas turmas organizadas por horário com informações detalhadas\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {scheduleLoading ? (\n                  <div className=\"flex items-center justify-center py-12\">\n                    <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n                  </div>\n                ) : (\n                  renderWeeklySchedule()\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      {/* Modal de Detalhes da Aula */}\n      <Dialog open={showClassDetail} onOpenChange={setShowClassDetail}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center space-x-2\">\n              <div\n                className=\"w-4 h-4 rounded-full\"\n                style={{ backgroundColor: selectedClassDetail?.book && bookColors[selectedClassDetail.book] }}\n              />\n              <span>{selectedClassDetail?.title}</span>\n            </DialogTitle>\n          </DialogHeader>\n          {selectedClassDetail && (\n            <div className=\"space-y-6\">\n              {/* Informações da Turma */}\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-500\">Horário</Label>\n                  <p className=\"text-sm\">{selectedClassDetail.startTime} - {selectedClassDetail.endTime}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-500\">Sala</Label>\n                  <p className=\"text-sm\">{selectedClassDetail.room}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-500\">Livro</Label>\n                  <p className=\"text-sm\">{selectedClassDetail.book}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-500\">Progresso</Label>\n                  <p className=\"text-sm\">Dia {selectedClassDetail.currentDay}/{selectedClassDetail.totalDays}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-500\">Alunos</Label>\n                  <p className=\"text-sm\">{selectedClassDetail.studentsCount}/{selectedClassDetail.maxStudents}</p>\n                </div>\n              </div>\n\n              {/* Ações */}\n              <div className=\"flex justify-end space-x-2 pt-4 border-t\">\n                <Button variant=\"outline\" onClick={() => setShowClassDetail(false)}>\n                  Fechar\n                </Button>\n                <Button>\n                  Gerenciar Turma\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </Layout>\n  );\n}\n","size_bytes":29985},"frontend/client/src/pages/Units.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport Layout from \"@/components/Layout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertUnitSchema } from \"@shared/schema\";\nimport type { z } from \"zod\";\nimport { PageLoader, FadeIn, StaggeredFadeIn } from \"@/components/PageLoader\";\n\ntype UnitFormData = z.infer<typeof insertUnitSchema>;\n\nexport default function Units() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading: authLoading, user } = useAuth();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n\n  const { data: units, isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/units\"],\n    retry: false,\n  });\n\n  const form = useForm<UnitFormData>({\n    resolver: zodResolver(insertUnitSchema),\n    defaultValues: {\n      name: \"\",\n      address: \"\",\n      phone: \"\",\n      email: \"\",\n    },\n  });\n\n  const createUnitMutation = useMutation({\n    mutationFn: async (data: UnitFormData) => {\n      await apiRequest(\"POST\", \"/api/units\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/units\"] });\n      toast({\n        title: \"Sucesso!\",\n        description: \"Unidade criada com sucesso.\",\n      });\n      setIsDialogOpen(false);\n      form.reset();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Erro\",\n        description: \"Falha ao criar unidade. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  const onSubmit = (data: UnitFormData) => {\n    createUnitMutation.mutate(data);\n  };\n\n  if (authLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  // Check permissions\n  const canManageUnits = user?.role === 'admin';\n\n  return (\n    <Layout>\n      <PageLoader>\n        <div className=\"p-6 space-y-6\">\n          <FadeIn delay={200}>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h2 className=\"text-2xl font-semibold text-foreground\">Unidades</h2>\n                <p className=\"text-sm text-muted-foreground\">Gerencie as unidades da escola</p>\n              </div>\n\n              {canManageUnits && (\n                <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n                  <DialogTrigger asChild>\n                    <Button data-testid=\"button-new-unit\">\n                      <i className=\"fas fa-plus mr-2\"></i>\n                      Nova Unidade\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle>Nova Unidade</DialogTitle>\n                    </DialogHeader>\n                    <Form {...form}>\n                      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"name\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Nome da Unidade</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"Ex: Unidade Centro\" {...field} data-testid=\"input-unit-name\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={form.control}\n                          name=\"address\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Endereço</FormLabel>\n                              <FormControl>\n                                <Textarea placeholder=\"Endereço completo da unidade\" {...field} value={field.value ?? \"\"} data-testid=\"input-unit-address\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={form.control}\n                          name=\"phone\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Telefone</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"(11) 99999-9999\" {...field} value={field.value ?? \"\"} data-testid=\"input-unit-phone\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={form.control}\n                          name=\"email\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>E-mail</FormLabel>\n                              <FormControl>\n                                <Input type=\"email\" placeholder=\"contato@unidade.com\" {...field} value={field.value ?? \"\"} data-testid=\"input-unit-email\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <div className=\"flex justify-end space-x-2\">\n                          <Button type=\"button\" variant=\"outline\" onClick={() => setIsDialogOpen(false)}>\n                            Cancelar\n                          </Button>\n                          <Button\n                            type=\"submit\"\n                            disabled={createUnitMutation.isPending}\n                            data-testid=\"button-save-unit\"\n                          >\n                            {createUnitMutation.isPending ? \"Salvando...\" : \"Salvar\"}\n                          </Button>\n                        </div>\n                      </form>\n                    </Form>\n                  </DialogContent>\n                </Dialog>\n              )}\n            </div>\n          </FadeIn>\n\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {Array.from({ length: 3 }).map((_, index) => (\n                <Card key={index} className=\"animate-pulse\">\n                  <CardHeader>\n                    <div className=\"h-6 bg-muted rounded w-3/4\"></div>\n                    <div className=\"h-4 bg-muted rounded w-1/2\"></div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-2\">\n                      <div className=\"h-4 bg-muted rounded\"></div>\n                      <div className=\"h-4 bg-muted rounded w-2/3\"></div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : !units || units.length === 0 ? (\n            <Card>\n              <CardContent className=\"py-12 text-center\">\n                <i className=\"fas fa-building text-muted-foreground text-6xl mb-4\"></i>\n                <h3 className=\"text-lg font-semibold text-foreground mb-2\">Nenhuma unidade encontrada</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  {canManageUnits\n                    ? \"Comece criando sua primeira unidade.\"\n                    : \"Não há unidades cadastradas no sistema.\"}\n                </p>\n                {canManageUnits && (\n                  <Button onClick={() => setIsDialogOpen(true)} data-testid=\"button-create-first-unit\">\n                    <i className=\"fas fa-plus mr-2\"></i>\n                    Criar primeira unidade\n                  </Button>\n                )}\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\" data-testid=\"units-grid\">\n              <StaggeredFadeIn stagger={150} className=\"contents\">\n                {units.map((unit: any) => (\n                  <Card key={unit.id} className=\"card-hover transition-smooth\" data-testid={`card-unit-${unit.id}`}>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center space-x-2\">\n                        <i className=\"fas fa-building text-primary\"></i>\n                        <span>{unit.name}</span>\n                      </CardTitle>\n                      <CardDescription>\n                        {unit.address && (\n                          <span className=\"flex items-center text-sm text-muted-foreground\">\n                            <i className=\"fas fa-map-marker-alt mr-2\"></i>\n                            {unit.address}\n                          </span>\n                        )}\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2\">\n                        {unit.phone && (\n                          <div className=\"flex items-center text-sm text-muted-foreground\">\n                            <i className=\"fas fa-phone mr-2\"></i>\n                            <span>{unit.phone}</span>\n                          </div>\n                        )}\n                        {unit.email && (\n                          <div className=\"flex items-center text-sm text-muted-foreground\">\n                            <i className=\"fas fa-envelope mr-2\"></i>\n                            <span>{unit.email}</span>\n                          </div>\n                        )}\n                      </div>\n                      {canManageUnits && (\n                        <div className=\"mt-4 flex space-x-2\">\n                          <Button variant=\"outline\" size=\"sm\">\n                            <i className=\"fas fa-edit mr-2\"></i>\n                            Editar\n                          </Button>\n                          <Button variant=\"outline\" size=\"sm\">\n                            <i className=\"fas fa-trash mr-2\"></i>\n                            Excluir\n                          </Button>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                )) || []}\n              </StaggeredFadeIn>\n            </div>\n          )}\n        </div>\n      </PageLoader>\n    </Layout>\n  );\n}","size_bytes":12064},"frontend/client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"frontend/client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"frontend/client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"frontend/client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"frontend/client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"frontend/client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"frontend/client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"frontend/client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"frontend/client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"frontend/client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"frontend/client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"frontend/client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"frontend/client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"frontend/client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"frontend/client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"frontend/client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"frontend/client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"frontend/client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"frontend/client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"frontend/client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"frontend/client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"frontend/client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"frontend/client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"frontend/client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"frontend/client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"frontend/client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"frontend/client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"frontend/client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"frontend/client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"frontend/client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"frontend/client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"frontend/client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"frontend/client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"frontend/client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"frontend/client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"frontend/client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"frontend/client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"frontend/client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"frontend/client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"frontend/client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"frontend/client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"frontend/client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"frontend/client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"frontend/client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"frontend/client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"frontend/client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"frontend/client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"frontend/client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}