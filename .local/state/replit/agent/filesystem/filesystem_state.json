{"file_contents":{"backend/server/db.js":{"content":"import { Pool } from 'pg';\nimport { drizzle } from 'drizzle-orm/node-postgres';\nimport dotenv from 'dotenv';\nimport * as schema from \"../shared/schema.js\";\n// Load .env file, overriding empty environment variables\nconst envConfig = dotenv.config();\nif (envConfig.parsed) {\n    Object.keys(envConfig.parsed).forEach((key) => {\n        if (!process.env[key] || process.env[key]?.trim() === '') {\n            process.env[key] = envConfig.parsed[key];\n        }\n    });\n}\n// Check if DATABASE_URL is set and not empty\nconst databaseUrl = process.env.DATABASE_URL?.trim();\nif (!databaseUrl) {\n    throw new Error(\"DATABASE_URL must be set. Did you forget to provision a database?\");\n}\nexport const pool = new Pool({\n    connectionString: databaseUrl,\n});\nexport const db = drizzle(pool, { schema });\n","size_bytes":795},"frontend/client/src/components/ConfirmationModal.tsx":{"content":"import {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { Loader2 } from \"lucide-react\";\n\ninterface ConfirmationModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  title: string;\n  description: string;\n  confirmText?: string;\n  cancelText?: string;\n  onConfirm: () => void;\n  isLoading?: boolean;\n  variant?: \"default\" | \"destructive\";\n}\n\nexport function ConfirmationModal({\n  open,\n  onOpenChange,\n  title,\n  description,\n  confirmText = \"Confirmar\",\n  cancelText = \"Cancelar\",\n  onConfirm,\n  isLoading = false,\n  variant = \"default\",\n}: ConfirmationModalProps) {\n  return (\n    <AlertDialog open={open} onOpenChange={onOpenChange}>\n      <AlertDialogContent data-testid=\"confirmation-modal\">\n        <AlertDialogHeader>\n          <AlertDialogTitle>{title}</AlertDialogTitle>\n          <AlertDialogDescription>{description}</AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <AlertDialogCancel \n            data-testid=\"button-cancel\" \n            disabled={isLoading}\n          >\n            {cancelText}\n          </AlertDialogCancel>\n          <AlertDialogAction\n            onClick={onConfirm}\n            disabled={isLoading}\n            className={\n              variant === \"destructive\"\n                ? \"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                : \"\"\n            }\n            data-testid=\"button-confirm\"\n          >\n            {isLoading ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Processando...\n              </>\n            ) : (\n              confirmText\n            )}\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n}","size_bytes":1930},"frontend/client/src/pages/ScheduleManagement.tsx":{"content":"import React from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Layout from \"@/components/Layout\";\nimport TeacherScheduleManager from \"@/components/TeacherScheduleManager\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nexport default function ScheduleManagement() {\n  const { user } = useAuth();\n\n  // Verificar se o usu√°rio tem permiss√£o (admin ou secretary)\n  const canManageSchedules = user?.role === 'admin' || user?.role === 'secretary';\n\n  if (!canManageSchedules) {\n    return (\n      <Layout>\n        <div className=\"p-6\">\n          <Card>\n            <CardContent className=\"py-12 text-center\">\n              <i className=\"fas fa-user-slash text-muted-foreground text-6xl mb-4\"></i>\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">Acesso Negado</h3>\n              <p className=\"text-muted-foreground\">\n                Esta √°rea √© exclusiva para administradores e secret√°rios.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout>\n      <div className=\"p-6\">\n        <div className=\"mb-6\">\n          <h1 className=\"text-3xl font-bold\">Gerenciamento de Hor√°rios</h1>\n          <p className=\"text-muted-foreground mt-2\">\n            Gerencie os hor√°rios dos professores e cadastre novas aulas\n          </p>\n        </div>\n        \n        <TeacherScheduleManager />\n      </div>\n    </Layout>\n  );\n}","size_bytes":1441},"backend/server/index.ts":{"content":"import dotenv from \"dotenv\";\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport cors from \"cors\";\nimport { registerRoutes } from \"./routes.js\";\n\n// Load .env file, overriding empty environment variables\nconst envConfig = dotenv.config();\nif (envConfig.parsed) {\n  Object.keys(envConfig.parsed).forEach((key) => {\n    if (!process.env[key] || process.env[key]?.trim() === '') {\n      process.env[key] = envConfig.parsed![key];\n    }\n  });\n}\n\nconst app = express();\napp.set('trust proxy', 1);\n\n\n// CORS configuration for separated frontend/backend\nconst allowedOrigins = [\n  'https://erp.vision.dev.br',\n  'http://erp.vision.dev.br',\n  'https://erp.vision.dev.br:5051',\n  'http://erp.vision.dev.br:5051',\n  'https://erpapi.vision.dev.br',\n  'http://erpapi.vision.dev.br',\n  'https://erpapi.vision.dev.br:5052',\n  'http://erpapi.vision.dev.br:5052',\n  'http://localhost:5051',\n  'http://localhost:5052',\n  'http://127.0.0.1:5051',\n  'http://127.0.0.1:5052',\n  process.env.FRONTEND_URL,\n  process.env.REPL_SLUG ? `https://${process.env.REPL_SLUG}.${process.env.REPL_OWNER}.repl.co` : null,\n  process.env.REPLIT_DEV_DOMAIN ? `https://${process.env.REPLIT_DEV_DOMAIN}` : null\n].filter(Boolean);\n\nconsole.log('üîß CORS Origins permitidas:', allowedOrigins);\n\n// Function to check if origin is allowed\nfunction isOriginAllowed(origin: string): boolean {\n  // Check exact match\n  if (allowedOrigins.includes(origin)) {\n    return true;\n  }\n  \n  // Check if it's a Replit dev domain (with any port)\n  if (origin.includes('.replit.dev')) {\n    return true;\n  }\n  \n  // Check localhost with any port\n  if (origin.match(/^https?:\\/\\/(localhost|127\\.0\\.0\\.1)(:\\d+)?$/)) {\n    return true;\n  }\n  \n  return false;\n}\n\n// OPTIONS preflight handler ANTES do CORS (prioridade m√°xima)\napp.options('*', (req, res) => {\n  const origin = req.headers.origin || '';\n  const ok = isOriginAllowed(origin);\n  res.header('Vary', 'Origin');\n  res.header('Access-Control-Allow-Origin', ok ? origin : 'https://erp.vision.dev.br');\n  res.header('Access-Control-Allow-Credentials', 'true');\n  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, PATCH, DELETE, OPTIONS');\n  res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With');\n  res.header('Access-Control-Max-Age', '86400');\n\n  return res.sendStatus(204);\n});\n\n\napp.use(cors({\n  origin: (origin: string | undefined, callback: (err: Error | null, allow?: boolean) => void) => {\n    console.log('üåê Requisi√ß√£o de origin:', origin);\n\n    // Permitir requisi√ß√µes sem origin (mobile apps, postman, etc)\n    if (!origin) {\n      console.log('‚úÖ Origin undefined - permitindo');\n      return callback(null, true);\n    }\n\n    // Verificar se a origin est√° permitida\n    if (isOriginAllowed(origin)) {\n      console.log('‚úÖ Origin permitida:', origin);\n      return callback(null, true);\n    }\n\n    console.log('‚ùå Origin rejeitada:', origin);\n    callback(new Error(`CORS: Origin ${origin} not allowed`));\n  },\n  credentials: true,\n  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n  allowedHeaders: ['Content-Type', 'Authorization', 'Cookie', 'X-Requested-With'],\n  optionsSuccessStatus: 200\n}));\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\nfunction log(message: string) {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour12: false,\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n  });\n\n  console.log(`${formattedTime} [express] ${message}`);\n}\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  const port = parseInt(process.env.BACKEND_PORT || process.env.PORT || \"5052\");\n  server.listen(port, \"0.0.0.0\", () => {\n    log(`Backend API serving on port ${port}`);\n  });\n})();","size_bytes":4795},"frontend/backend/schema.js":{"content":"import { sql } from 'drizzle-orm';\nimport { relations } from 'drizzle-orm';\nimport { index, jsonb, pgTable, timestamp, varchar, text, integer, boolean, pgEnum, } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n// ============================================================================\n// ENUMS\n// ============================================================================\n// User roles - 4 roles fixos do sistema\nexport const userRoleEnum = pgEnum('user_role', [\n    'admin', // Administrativo - acesso total\n    'secretary', // Secret√°rio - acesso quase total\n    'teacher', // Professor - acesso limitado focado em ensino\n    'student' // Aluno - apenas √°rea do aluno\n]);\n// Gender enum - unificado para staff e students\nexport const genderEnum = pgEnum('gender', ['masculino', 'feminino', 'outro']);\n// Billing type enum\nexport const billingTypeEnum = pgEnum('billing_type', [\n    'mensalidade',\n    'trimestral',\n    'semestral',\n    'anual',\n    'avulso'\n]);\n// Support ticket enums\nexport const ticketPriorityEnum = pgEnum('ticket_priority', ['low', 'medium', 'high', 'urgent']);\nexport const ticketStatusEnum = pgEnum('ticket_status', ['open', 'in_progress', 'resolved', 'closed']);\n// ============================================================================\n// CORE TABLES\n// ============================================================================\n// Session storage table (mandatory for Replit Auth)\nexport const sessions = pgTable(\"sessions\", {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n}, (table) => [index(\"IDX_session_expire\").on(table.expire)]);\n// Users table - base para todos os usu√°rios do sistema\nexport const users = pgTable(\"users\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    email: varchar(\"email\").notNull().unique(),\n    password: varchar(\"password\"), // hashed password\n    firstName: varchar(\"first_name\").notNull(),\n    lastName: varchar(\"last_name\").notNull(),\n    profileImageUrl: varchar(\"profile_image_url\"),\n    roleId: varchar(\"role_id\").references(() => roles.id).notNull(),\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// Roles table - 4 roles fixos do sistema\nexport const roles = pgTable(\"roles\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    // Permite pap√©is din√¢micos: trocar enum por varchar\n    name: varchar(\"name\").notNull().unique(),\n    displayName: varchar(\"display_name\").notNull(),\n    description: text(\"description\"),\n    isSystemRole: boolean(\"is_system_role\").default(true).notNull(),\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    isDeletable: boolean(\"is_deletable\").default(true).notNull(), // Controla se o cargo pode ser exclu√≠do\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// Permission categories table\nexport const permissionCategories = pgTable(\"permission_categories\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    name: varchar(\"name\").notNull().unique(),\n    displayName: varchar(\"display_name\").notNull(),\n    description: text(\"description\"),\n    isSystemCategory: boolean(\"is_system_category\").default(false).notNull(),\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// Permissions table\nexport const permissions = pgTable(\"permissions\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    name: varchar(\"name\").notNull().unique(),\n    displayName: varchar(\"display_name\").notNull(),\n    description: text(\"description\"),\n    categoryId: varchar(\"category_id\").references(() => permissionCategories.id, { onDelete: 'cascade' }).notNull(),\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// Role permissions relationship\nexport const rolePermissions = pgTable(\"role_permissions\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    roleId: varchar(\"role_id\").references(() => roles.id, { onDelete: 'cascade' }).notNull(),\n    permissionId: varchar(\"permission_id\").references(() => permissions.id, { onDelete: 'cascade' }).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n}, (table) => [\n    index(\"UQ_role_permission\").on(table.roleId, table.permissionId),\n]);\n// Tabela de p√°ginas do sistema para controle de acesso\nexport const pages = pgTable(\"pages\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    name: varchar(\"name\").notNull().unique(), // ex: 'units', 'staff', 'students'\n    displayName: varchar(\"display_name\").notNull(), // ex: 'Unidades', 'Colaboradores', 'Alunos'\n    description: text(\"description\"),\n    route: varchar(\"route\").notNull(), // ex: '/units', '/staff', '/students'\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// Tabela de permiss√µes de p√°ginas por cargo\nexport const rolePagePermissions = pgTable(\"role_page_permissions\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    roleId: varchar(\"role_id\").references(() => roles.id, { onDelete: 'cascade' }).notNull(),\n    pageId: varchar(\"page_id\").references(() => pages.id, { onDelete: 'cascade' }).notNull(),\n    canAccess: boolean(\"can_access\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n}, (table) => [\n    index(\"UQ_role_page_permission\").on(table.roleId, table.pageId),\n]);\n// User permissions table - override de permiss√µes por usu√°rio\nexport const userPermissions = pgTable(\"user_permissions\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }).notNull(),\n    permissionId: varchar(\"permission_id\").references(() => permissions.id, { onDelete: 'cascade' }).notNull(),\n    isGranted: boolean(\"is_granted\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n}, (table) => [\n    index(\"UQ_user_permission\").on(table.userId, table.permissionId),\n]);\n// ============================================================================\n// ORGANIZATIONAL TABLES\n// ============================================================================\n// Units table - unidades/filiais\nexport const units = pgTable(\"units\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    name: varchar(\"name\").notNull(),\n    address: text(\"address\"),\n    phone: varchar(\"phone\"),\n    email: varchar(\"email\"),\n    managerId: varchar(\"manager_id\").references(() => users.id),\n    // Dados do Franqueado\n    franchiseeName: varchar(\"franchisee_name\"),\n    franchiseeCpf: varchar(\"franchisee_cpf\"),\n    franchiseeCpfDoc: varchar(\"franchisee_cpf_doc\"),\n    franchiseeRg: varchar(\"franchisee_rg\"),\n    franchiseeRgDoc: varchar(\"franchisee_rg_doc\"),\n    franchiseeResidenceAddress: text(\"franchisee_residence_address\"),\n    franchiseeResidenceDoc: varchar(\"franchisee_residence_doc\"),\n    franchiseeMaritalStatus: varchar(\"franchisee_marital_status\"),\n    franchiseeMaritalStatusDoc: varchar(\"franchisee_marital_status_doc\"),\n    franchiseeCurriculumDoc: varchar(\"franchisee_curriculum_doc\"),\n    franchiseeAssetsDoc: varchar(\"franchisee_assets_doc\"),\n    franchiseeIncomeDoc: varchar(\"franchisee_income_doc\"),\n    // Dados PJ\n    franchiseeSocialContractDoc: varchar(\"franchisee_social_contract_doc\"),\n    franchiseeCnpj: varchar(\"franchisee_cnpj\"),\n    franchiseeCnpjDoc: varchar(\"franchisee_cnpj_doc\"),\n    franchiseeStateRegistration: varchar(\"franchisee_state_registration\"),\n    franchiseeStateRegistrationDoc: varchar(\"franchisee_state_registration_doc\"),\n    franchiseePartnersDocsDoc: varchar(\"franchisee_partners_docs_doc\"),\n    franchiseeCertificatesDoc: varchar(\"franchisee_certificates_doc\"),\n    // Dados Financeiros\n    financialCapitalDoc: varchar(\"financial_capital_doc\"),\n    financialCashFlowDoc: varchar(\"financial_cash_flow_doc\"),\n    financialTaxReturnsDoc: varchar(\"financial_tax_returns_doc\"),\n    financialBankReferences: text(\"financial_bank_references\"),\n    financialBankReferencesDoc: varchar(\"financial_bank_references_doc\"),\n    // Dados Imobili√°rios\n    realEstateLocation: text(\"real_estate_location\"),\n    realEstatePropertyDoc: varchar(\"real_estate_property_doc\"),\n    realEstateLeaseDoc: varchar(\"real_estate_lease_doc\"),\n    realEstateFloorPlanDoc: varchar(\"real_estate_floor_plan_doc\"),\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// Staff table - funcion√°rios\nexport const staff = pgTable(\"staff\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }).notNull(),\n    unitId: varchar(\"unit_id\").references(() => units.id),\n    // Informa√ß√µes pessoais\n    cpf: varchar(\"cpf\", { length: 14 }),\n    birthDate: timestamp(\"birth_date\"),\n    gender: genderEnum(\"gender\"),\n    // Contatos\n    phone: varchar(\"phone\"),\n    whatsapp: varchar(\"whatsapp\"),\n    // Endere√ßo\n    cep: varchar(\"cep\", { length: 9 }),\n    address: text(\"address\"),\n    number: varchar(\"number\"),\n    complement: varchar(\"complement\"),\n    neighborhood: varchar(\"neighborhood\"),\n    city: varchar(\"city\"),\n    state: varchar(\"state\"),\n    // Informa√ß√µes profissionais - position agora √© varchar livre\n    position: varchar(\"position\"), // ex: \"Professor de Ingl√™s\", \"Coordenador\", etc\n    department: varchar(\"department\"),\n    salary: integer(\"salary\"),\n    hireDate: timestamp(\"hire_date\"),\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// Guardians table - respons√°veis legais\nexport const guardians = pgTable(\"guardians\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    // Informa√ß√µes pessoais\n    firstName: varchar(\"first_name\").notNull(),\n    lastName: varchar(\"last_name\").notNull(),\n    cpf: varchar(\"cpf\", { length: 14 }),\n    birthDate: timestamp(\"birth_date\"),\n    gender: genderEnum(\"gender\"),\n    // Contatos\n    email: varchar(\"email\"),\n    phone: varchar(\"phone\"),\n    whatsapp: varchar(\"whatsapp\"),\n    // Endere√ßo\n    cep: varchar(\"cep\", { length: 9 }),\n    address: text(\"address\"),\n    number: varchar(\"number\"),\n    complement: varchar(\"complement\"),\n    neighborhood: varchar(\"neighborhood\"),\n    city: varchar(\"city\"),\n    state: varchar(\"state\"),\n    // Rela√ß√£o com o aluno\n    relationship: varchar(\"relationship\"),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// Financial Responsibles table\nexport const financialResponsibles = pgTable(\"financial_responsibles\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    guardianId: varchar(\"guardian_id\").references(() => guardians.id, { onDelete: 'cascade' }).notNull(),\n    // Informa√ß√µes pessoais\n    firstName: varchar(\"first_name\").notNull(),\n    lastName: varchar(\"last_name\").notNull(),\n    cpf: varchar(\"cpf\", { length: 14 }),\n    birthDate: timestamp(\"birth_date\"),\n    gender: genderEnum(\"gender\"),\n    // Contatos\n    email: varchar(\"email\"),\n    phone: varchar(\"phone\"),\n    whatsapp: varchar(\"whatsapp\"),\n    // Endere√ßo\n    cep: varchar(\"cep\", { length: 9 }),\n    address: text(\"address\"),\n    number: varchar(\"number\"),\n    complement: varchar(\"complement\"),\n    neighborhood: varchar(\"neighborhood\"),\n    city: varchar(\"city\"),\n    state: varchar(\"state\"),\n    // Rela√ß√£o com o respons√°vel legal\n    relationship: varchar(\"relationship\"),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// Students table\nexport const students = pgTable(\"students\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }).notNull(),\n    studentId: varchar(\"student_id\").unique(),\n    unitId: varchar(\"unit_id\").references(() => units.id),\n    // Informa√ß√µes pessoais\n    cpf: varchar(\"cpf\", { length: 14 }),\n    birthDate: timestamp(\"birth_date\"),\n    gender: genderEnum(\"gender\"),\n    // Contatos\n    phone: varchar(\"phone\"),\n    whatsapp: varchar(\"whatsapp\"),\n    // Endere√ßo\n    cep: varchar(\"cep\", { length: 9 }),\n    address: text(\"address\"),\n    number: varchar(\"number\"),\n    complement: varchar(\"complement\"),\n    neighborhood: varchar(\"neighborhood\"),\n    city: varchar(\"city\"),\n    state: varchar(\"state\"),\n    // Informa√ß√µes de cobran√ßa\n    billingType: billingTypeEnum(\"billing_type\"),\n    // Respons√°vel (se menor de idade)\n    guardianId: varchar(\"guardian_id\").references(() => guardians.id),\n    enrollmentDate: timestamp(\"enrollment_date\"),\n    status: varchar(\"status\").default('active').notNull(),\n    emergencyContact: text(\"emergency_contact\"),\n    notes: text(\"notes\"),\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// ============================================================================\n// ACADEMIC TABLES\n// ============================================================================\n// Courses table\nexport const courses = pgTable(\"courses\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    name: varchar(\"name\").notNull(),\n    description: text(\"description\"),\n    language: varchar(\"language\").notNull(),\n    level: varchar(\"level\").notNull(),\n    duration: integer(\"duration\"),\n    price: integer(\"price\"),\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// Books table - livros dentro de cada curso\nexport const books = pgTable(\"books\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    courseId: varchar(\"course_id\").references(() => courses.id, { onDelete: 'cascade' }).notNull(),\n    name: varchar(\"name\").notNull(),\n    description: text(\"description\"),\n    pdfUrl: varchar(\"pdf_url\"),\n    color: varchar(\"color\").notNull().default('#3b82f6'),\n    displayOrder: integer(\"display_order\").default(1).notNull(),\n    totalDays: integer(\"total_days\").default(30).notNull(),\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// Classes table (turmas)\nexport const classes = pgTable(\"classes\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    bookId: varchar(\"book_id\").references(() => books.id, { onDelete: 'cascade' }).notNull(),\n    teacherId: varchar(\"teacher_id\").references(() => users.id).notNull(),\n    unitId: varchar(\"unit_id\").references(() => units.id).notNull(),\n    name: varchar(\"name\").notNull(),\n    schedule: text(\"schedule\"),\n    dayOfWeek: integer(\"day_of_week\"),\n    startTime: varchar(\"start_time\"),\n    endTime: varchar(\"end_time\"),\n    room: varchar(\"room\"),\n    maxStudents: integer(\"max_students\").default(15).notNull(),\n    currentStudents: integer(\"current_students\").default(0).notNull(),\n    startDate: timestamp(\"start_date\"),\n    endDate: timestamp(\"end_date\"),\n    currentDay: integer(\"current_day\").default(1).notNull(),\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// Class enrollments\nexport const classEnrollments = pgTable(\"class_enrollments\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    classId: varchar(\"class_id\").references(() => classes.id, { onDelete: 'cascade' }).notNull(),\n    studentId: varchar(\"student_id\").references(() => students.id, { onDelete: 'cascade' }).notNull(),\n    enrollmentDate: timestamp(\"enrollment_date\").defaultNow().notNull(),\n    status: varchar(\"status\").default('active').notNull(),\n    finalGrade: varchar(\"final_grade\"),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// Lessons table\nexport const lessons = pgTable(\"lessons\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    classId: varchar(\"class_id\").references(() => classes.id, { onDelete: 'cascade' }).notNull(),\n    title: varchar(\"title\").notNull(),\n    bookDay: integer(\"book_day\").notNull(),\n    date: timestamp(\"date\").notNull(),\n    startTime: varchar(\"start_time\").notNull(),\n    endTime: varchar(\"end_time\").notNull(),\n    room: varchar(\"room\"),\n    status: varchar(\"status\").default('scheduled').notNull(),\n    notes: text(\"notes\"),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// Course Units table\nexport const courseUnits = pgTable(\"course_units\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    bookId: varchar(\"book_id\").references(() => books.id, { onDelete: 'cascade' }).notNull(),\n    name: varchar(\"name\").notNull(),\n    description: text(\"description\"),\n    displayOrder: integer(\"display_order\").notNull(),\n    unitType: varchar(\"unit_type\").default('lesson').notNull(),\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// Course Videos table\nexport const courseVideos = pgTable(\"course_videos\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    unitId: varchar(\"unit_id\").references(() => courseUnits.id, { onDelete: 'cascade' }).notNull(),\n    dayNumber: integer(\"day_number\").notNull(),\n    title: varchar(\"title\").notNull(),\n    description: text(\"description\"),\n    videoUrl: varchar(\"video_url\").notNull(),\n    thumbnailUrl: varchar(\"thumbnail_url\"),\n    duration: integer(\"duration\"),\n    hasSubtitles: boolean(\"has_subtitles\").default(false).notNull(),\n    subtitlesUrl: varchar(\"subtitles_url\"),\n    displayOrder: integer(\"display_order\").notNull(),\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// Course Activities table\nexport const courseActivities = pgTable(\"course_activities\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    videoId: varchar(\"video_id\").references(() => courseVideos.id, { onDelete: 'cascade' }).notNull(),\n    activityType: varchar(\"activity_type\").notNull(),\n    title: varchar(\"title\").notNull(),\n    description: text(\"description\"),\n    instruction: text(\"instruction\"),\n    content: text(\"content\").notNull(),\n    correctAnswer: text(\"correct_answer\"),\n    points: integer(\"points\").default(10).notNull(),\n    displayOrder: integer(\"display_order\").notNull(),\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// Course Workbooks table\nexport const courseWorkbooks = pgTable(\"course_workbooks\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    bookId: varchar(\"book_id\").references(() => books.id, { onDelete: 'cascade' }).notNull(),\n    title: varchar(\"title\").notNull(),\n    description: text(\"description\"),\n    pdfUrl: varchar(\"pdf_url\"),\n    content: text(\"content\"),\n    displayOrder: integer(\"display_order\").notNull(),\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// Course Exams table\nexport const courseExams = pgTable(\"course_exams\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    bookId: varchar(\"book_id\").references(() => books.id, { onDelete: 'cascade' }).notNull(),\n    unitId: varchar(\"unit_id\").references(() => courseUnits.id),\n    title: varchar(\"title\").notNull(),\n    description: text(\"description\"),\n    examType: varchar(\"exam_type\").notNull(),\n    content: text(\"content\").notNull(),\n    totalPoints: integer(\"total_points\").default(100).notNull(),\n    passingScore: integer(\"passing_score\").default(70).notNull(),\n    timeLimit: integer(\"time_limit\"),\n    displayOrder: integer(\"display_order\").notNull(),\n    requiresTeacherReview: boolean(\"requires_teacher_review\").default(false).notNull(),\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// Student Progress table\nexport const studentProgress = pgTable(\"student_progress\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    studentId: varchar(\"student_id\").references(() => students.id, { onDelete: 'cascade' }).notNull(),\n    videoId: varchar(\"video_id\").references(() => courseVideos.id),\n    activityId: varchar(\"activity_id\").references(() => courseActivities.id),\n    examId: varchar(\"exam_id\").references(() => courseExams.id),\n    isCompleted: boolean(\"is_completed\").default(false).notNull(),\n    completedAt: timestamp(\"completed_at\"),\n    score: integer(\"score\"),\n    attempts: integer(\"attempts\").default(0).notNull(),\n    studentAnswer: text(\"student_answer\"),\n    teacherFeedback: text(\"teacher_feedback\"),\n    watchedDuration: integer(\"watched_duration\"),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// Student Course Enrollments\nexport const studentCourseEnrollments = pgTable(\"student_course_enrollments\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    studentId: varchar(\"student_id\").references(() => students.id, { onDelete: 'cascade' }).notNull(),\n    courseId: varchar(\"course_id\").references(() => courses.id, { onDelete: 'cascade' }).notNull(),\n    enrollmentDate: timestamp(\"enrollment_date\").defaultNow().notNull(),\n    currentBookId: varchar(\"current_book_id\").references(() => books.id),\n    currentUnitId: varchar(\"current_unit_id\").references(() => courseUnits.id),\n    status: varchar(\"status\").default('active').notNull(),\n    overallProgress: integer(\"overall_progress\").default(0).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// ============================================================================\n// SUPPORT & SETTINGS TABLES\n// ============================================================================\n// User Settings table\nexport const userSettings = pgTable(\"user_settings\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }).notNull().unique(),\n    theme: varchar(\"theme\").default('light').notNull(),\n    language: varchar(\"language\").default('pt-BR').notNull(),\n    timezone: varchar(\"timezone\").default('America/Sao_Paulo').notNull(),\n    dateFormat: varchar(\"date_format\").default('DD/MM/YYYY').notNull(),\n    currency: varchar(\"currency\").default('BRL').notNull(),\n    emailNotifications: boolean(\"email_notifications\").default(true).notNull(),\n    pushNotifications: boolean(\"push_notifications\").default(false).notNull(),\n    systemAlerts: boolean(\"system_alerts\").default(true).notNull(),\n    lessonReminders: boolean(\"lesson_reminders\").default(true).notNull(),\n    weeklyReports: boolean(\"weekly_reports\").default(false).notNull(),\n    autoSave: boolean(\"auto_save\").default(true).notNull(),\n    twoFactorEnabled: boolean(\"two_factor_enabled\").default(false).notNull(),\n    sessionTimeout: integer(\"session_timeout\").default(30).notNull(),\n    loginAlerts: boolean(\"login_alerts\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// Support Tickets table\nexport const supportTickets = pgTable(\"support_tickets\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    title: varchar(\"title\").notNull(),\n    description: text(\"description\").notNull(),\n    category: varchar(\"category\").notNull(),\n    priority: ticketPriorityEnum(\"priority\").default('medium').notNull(),\n    status: ticketStatusEnum(\"status\").default('open').notNull(),\n    userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }).notNull(),\n    assignedTo: varchar(\"assigned_to\").references(() => users.id),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// Support ticket responses table\nexport const supportTicketResponses = pgTable(\"support_ticket_responses\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    ticketId: varchar(\"ticket_id\").references(() => supportTickets.id, { onDelete: 'cascade' }).notNull(),\n    message: text(\"message\").notNull(),\n    isFromSupport: boolean(\"is_from_support\").default(false).notNull(),\n    userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n// Franchise Units Registration table - simplificado\nexport const franchiseUnits = pgTable(\"franchise_units\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    entityType: varchar(\"entity_type\").notNull(),\n    // Dados b√°sicos\n    fullName: text(\"full_name\"),\n    cpf: varchar(\"cpf\"),\n    cnpj: varchar(\"cnpj\"),\n    // Documentos (JSON com URLs)\n    documents: text(\"documents\"), // JSON com todos os documentos\n    // Status\n    status: varchar(\"status\").default('pending').notNull(),\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// ============================================================================\n// RELATIONS\n// ============================================================================\nexport const usersRelations = relations(users, ({ one, many }) => ({\n    role: one(roles, {\n        fields: [users.roleId],\n        references: [roles.id],\n    }),\n    staff: one(staff, {\n        fields: [users.id],\n        references: [staff.userId],\n    }),\n    student: one(students, {\n        fields: [users.id],\n        references: [students.userId],\n    }),\n    userPermissions: many(userPermissions),\n    userSettings: one(userSettings, {\n        fields: [users.id],\n        references: [userSettings.userId],\n    }),\n}));\nexport const rolesRelations = relations(roles, ({ many }) => ({\n    users: many(users),\n    rolePermissions: many(rolePermissions),\n}));\nexport const permissionCategoriesRelations = relations(permissionCategories, ({ many }) => ({\n    permissions: many(permissions),\n}));\nexport const permissionsRelations = relations(permissions, ({ one, many }) => ({\n    category: one(permissionCategories, {\n        fields: [permissions.categoryId],\n        references: [permissionCategories.id],\n    }),\n    rolePermissions: many(rolePermissions),\n    userPermissions: many(userPermissions),\n}));\nexport const rolePermissionsRelations = relations(rolePermissions, ({ one }) => ({\n    role: one(roles, {\n        fields: [rolePermissions.roleId],\n        references: [roles.id],\n    }),\n    permission: one(permissions, {\n        fields: [rolePermissions.permissionId],\n        references: [permissions.id],\n    }),\n}));\nexport const userPermissionsRelations = relations(userPermissions, ({ one }) => ({\n    user: one(users, {\n        fields: [userPermissions.userId],\n        references: [users.id],\n    }),\n    permission: one(permissions, {\n        fields: [userPermissions.permissionId],\n        references: [permissions.id],\n    }),\n}));\nexport const staffRelations = relations(staff, ({ one }) => ({\n    user: one(users, {\n        fields: [staff.userId],\n        references: [users.id],\n    }),\n    unit: one(units, {\n        fields: [staff.unitId],\n        references: [units.id],\n    }),\n}));\nexport const studentsRelations = relations(students, ({ one, many }) => ({\n    user: one(users, {\n        fields: [students.userId],\n        references: [users.id],\n    }),\n    unit: one(units, {\n        fields: [students.unitId],\n        references: [units.id],\n    }),\n    guardian: one(guardians, {\n        fields: [students.guardianId],\n        references: [guardians.id],\n    }),\n    classEnrollments: many(classEnrollments),\n    courseEnrollments: many(studentCourseEnrollments),\n    progress: many(studentProgress),\n}));\nexport const guardiansRelations = relations(guardians, ({ one, many }) => ({\n    students: many(students),\n    financialResponsible: one(financialResponsibles, {\n        fields: [guardians.id],\n        references: [financialResponsibles.guardianId],\n    }),\n}));\nexport const financialResponsiblesRelations = relations(financialResponsibles, ({ one }) => ({\n    guardian: one(guardians, {\n        fields: [financialResponsibles.guardianId],\n        references: [guardians.id],\n    }),\n}));\nexport const coursesRelations = relations(courses, ({ many }) => ({\n    books: many(books),\n    studentEnrollments: many(studentCourseEnrollments),\n}));\nexport const booksRelations = relations(books, ({ one, many }) => ({\n    course: one(courses, {\n        fields: [books.courseId],\n        references: [courses.id],\n    }),\n    classes: many(classes),\n    units: many(courseUnits),\n    workbooks: many(courseWorkbooks),\n    exams: many(courseExams),\n}));\nexport const classesRelations = relations(classes, ({ one, many }) => ({\n    book: one(books, {\n        fields: [classes.bookId],\n        references: [books.id],\n    }),\n    teacher: one(users, {\n        fields: [classes.teacherId],\n        references: [users.id],\n    }),\n    unit: one(units, {\n        fields: [classes.unitId],\n        references: [units.id],\n    }),\n    enrollments: many(classEnrollments),\n    lessons: many(lessons),\n}));\nexport const classEnrollmentsRelations = relations(classEnrollments, ({ one }) => ({\n    class: one(classes, {\n        fields: [classEnrollments.classId],\n        references: [classes.id],\n    }),\n    student: one(students, {\n        fields: [classEnrollments.studentId],\n        references: [students.id],\n    }),\n}));\nexport const lessonsRelations = relations(lessons, ({ one }) => ({\n    class: one(classes, {\n        fields: [lessons.classId],\n        references: [classes.id],\n    }),\n}));\nexport const courseUnitsRelations = relations(courseUnits, ({ one, many }) => ({\n    book: one(books, {\n        fields: [courseUnits.bookId],\n        references: [books.id],\n    }),\n    videos: many(courseVideos),\n    exams: many(courseExams),\n}));\nexport const courseVideosRelations = relations(courseVideos, ({ one, many }) => ({\n    unit: one(courseUnits, {\n        fields: [courseVideos.unitId],\n        references: [courseUnits.id],\n    }),\n    activities: many(courseActivities),\n    progress: many(studentProgress),\n}));\nexport const courseActivitiesRelations = relations(courseActivities, ({ one, many }) => ({\n    video: one(courseVideos, {\n        fields: [courseActivities.videoId],\n        references: [courseVideos.id],\n    }),\n    progress: many(studentProgress),\n}));\nexport const studentProgressRelations = relations(studentProgress, ({ one }) => ({\n    student: one(students, {\n        fields: [studentProgress.studentId],\n        references: [students.id],\n    }),\n    video: one(courseVideos, {\n        fields: [studentProgress.videoId],\n        references: [courseVideos.id],\n    }),\n    activity: one(courseActivities, {\n        fields: [studentProgress.activityId],\n        references: [courseActivities.id],\n    }),\n    exam: one(courseExams, {\n        fields: [studentProgress.examId],\n        references: [courseExams.id],\n    }),\n}));\nexport const studentCourseEnrollmentsRelations = relations(studentCourseEnrollments, ({ one }) => ({\n    student: one(students, {\n        fields: [studentCourseEnrollments.studentId],\n        references: [students.id],\n    }),\n    course: one(courses, {\n        fields: [studentCourseEnrollments.courseId],\n        references: [courses.id],\n    }),\n    currentBook: one(books, {\n        fields: [studentCourseEnrollments.currentBookId],\n        references: [books.id],\n    }),\n    currentUnit: one(courseUnits, {\n        fields: [studentCourseEnrollments.currentUnitId],\n        references: [courseUnits.id],\n    }),\n}));\n// ============================================================================\n// SCHEMAS\n// ============================================================================\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertRoleSchema = createInsertSchema(roles).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertPermissionCategorySchema = createInsertSchema(permissionCategories).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertPermissionSchema = createInsertSchema(permissions).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertRolePermissionSchema = createInsertSchema(rolePermissions).omit({\n    id: true,\n    createdAt: true,\n});\nexport const insertUserPermissionSchema = createInsertSchema(userPermissions).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertPageSchema = createInsertSchema(pages).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertRolePagePermissionSchema = createInsertSchema(rolePagePermissions).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertUnitSchema = createInsertSchema(units).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertStaffSchema = createInsertSchema(staff).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertGuardianSchema = createInsertSchema(guardians).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n}).extend({\n    // Permite que birthDate seja uma string ISO que ser√° convertida para Date\n    birthDate: z.string().datetime().optional().transform((val) => val ? new Date(val) : undefined),\n});\nexport const insertFinancialResponsibleSchema = createInsertSchema(financialResponsibles).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n}).extend({\n    // Permite que birthDate seja uma string ISO que ser√° convertida para Date\n    birthDate: z.string().datetime().optional().transform((val) => val ? new Date(val) : undefined),\n});\nexport const insertStudentSchema = createInsertSchema(students).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n}).extend({\n    // Permite que birthDate seja uma string ISO que ser√° convertida para Date\n    birthDate: z.string().datetime().optional().transform((val) => val ? new Date(val) : undefined),\n});\nexport const insertCourseSchema = createInsertSchema(courses).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertBookSchema = createInsertSchema(books).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertClassSchema = createInsertSchema(classes).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertClassEnrollmentSchema = createInsertSchema(classEnrollments).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertLessonSchema = createInsertSchema(lessons).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertCourseUnitSchema = createInsertSchema(courseUnits).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertCourseVideoSchema = createInsertSchema(courseVideos).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertCourseActivitySchema = createInsertSchema(courseActivities).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertCourseWorkbookSchema = createInsertSchema(courseWorkbooks).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertCourseExamSchema = createInsertSchema(courseExams).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertStudentProgressSchema = createInsertSchema(studentProgress).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertStudentCourseEnrollmentSchema = createInsertSchema(studentCourseEnrollments).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertUserSettingsSchema = createInsertSchema(userSettings).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertSupportTicketSchema = createInsertSchema(supportTickets).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertSupportTicketResponseSchema = createInsertSchema(supportTicketResponses).omit({\n    id: true,\n    createdAt: true,\n});\nexport const insertFranchiseUnitSchema = createInsertSchema(franchiseUnits).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\n","size_bytes":38382},"frontend/client/src/pages/Landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { ThemeToggle } from \"@/components/ThemeToggle\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { useState, useEffect } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { API_BASE } from \"@/lib/api\";\nimport { Eye, EyeOff } from \"lucide-react\";\n\n// Demo users for display\nconst demoUsers = [\n  { email: 'admin@sistema.com', password: 'admin123', role: 'Administrador', disabled: false },\n  { email: 'admin@demo.com', password: 'demo123', role: 'Administrador', disabled: false },\n  { email: 'teacher@demo.com', password: 'demo123', role: 'Professor', disabled: false },\n  { email: 'secretary@demo.com', password: 'demo123', role: 'Secret√°rio', disabled: false },\n  { email: 'student@demo.com', password: 'demo123', role: 'Aluno', disabled: false },\n];\n\nexport default function Landing() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [errorModal, setErrorModal] = useState({ open: false, message: \"\" });\n  const [stars, setStars] = useState<Array<{ id: number; x: number; y: number; size: number; animationDelay: number }>>([]);\n\n  useEffect(() => {\n    // Generate random stars for the background\n    const generateStars = () => {\n      const newStars = [];\n      for (let i = 0; i < 100; i++) {\n        newStars.push({\n          id: i,\n          x: Math.random() * 100,\n          y: Math.random() * 100,\n          size: Math.random() * 3 + 1,\n          animationDelay: Math.random() * 3\n        });\n      }\n      setStars(newStars);\n    };\n\n    generateStars();\n  }, []);\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: { email: string; password: string }) => {\n      const response = await fetch(`${API_BASE}/api/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(credentials),\n        credentials: 'include',\n      });\n\n      if (!response.ok) {\n        const error = await response.json().catch(() => ({ message: 'Erro ao fazer login' }));\n        throw new Error(error.message || 'Credenciais inv√°lidas');\n      }\n\n      return response.json();\n    },\n    onSuccess: (data) => {\n      // Store token and user data\n      localStorage.setItem('authToken', data.token);\n      localStorage.setItem('user', JSON.stringify(data.user));\n      \n      // Redirect to main app\n      window.location.href = '/';\n    },\n    onError: (error: Error) => {\n      setErrorModal({ open: true, message: error.message || 'Erro ao fazer login' });\n    },\n  });\n\n  const handleLogin = () => {\n    loginMutation.mutate({ email, password });\n  };\n\n  const setDemoUser = (user: { email: string; password: string }) => {\n    setEmail(user.email);\n    setPassword(user.password);\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col lg:flex-row relative\">\n      {/* Theme Toggle - Fixed top right */}\n      <div className=\"fixed top-4 right-4 z-50\">\n        <ThemeToggle />\n      </div>\n      \n      {/* Left Column - Welcome Section with Stars */}\n      <div className=\"hidden lg:flex lg:w-1/2 relative bg-gradient-to-br from-purple-900 via-purple-700 to-purple-800 overflow-hidden\">\n        {/* Stars Animation */}\n        <div className=\"absolute inset-0\">\n          {stars.map((star) => (\n            <div\n              key={star.id}\n              className=\"absolute bg-white rounded-full animate-twinkle\"\n              style={{\n                left: `${star.x}%`,\n                top: `${star.y}%`,\n                width: `${star.size}px`,\n                height: `${star.size}px`,\n                animationDelay: `${star.animationDelay}s`,\n                animationDuration: '3s'\n              }}\n            />\n          ))}\n        </div>\n\n        {/* Overlay gradient */}\n        <div className=\"absolute inset-0 bg-gradient-to-t from-black/30 to-transparent\" />\n\n        {/* Content */}\n        <div className=\"relative z-10 flex flex-col justify-center items-center text-center px-8 lg:px-12 text-white w-full\">\n          <div className=\"w-20 h-20 bg-white/20 backdrop-blur-sm rounded-3xl flex items-center justify-center mb-8 border border-white/30\">\n            <i className=\"fas fa-graduation-cap text-white text-3xl\"></i>\n          </div>\n\n          <h1 className=\"text-5xl font-bold mb-4 bg-gradient-to-r from-white to-orange-200 bg-clip-text text-transparent\">\n            Bem-vindo ao Portal\n          </h1>\n\n          <h2 className=\"text-3xl font-semibold mb-6 text-orange-100\">\n            OpenLife\n          </h2>\n\n          <p className=\"text-xl text-orange-200 mb-8 max-w-md leading-relaxed\">\n            Sistema completo de gest√£o escolar para escolas de idiomas. \n            Gerencie alunos, professores, hor√°rios e muito mais.\n          </p>\n\n          <div className=\"grid grid-cols-2 gap-4 lg:gap-6 mt-8 w-full max-w-sm mx-auto\">\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 lg:w-16 lg:h-16 bg-white/20 backdrop-blur-sm rounded-2xl flex items-center justify-center mx-auto mb-3 border border-white/30\">\n                <i className=\"fas fa-users text-white text-lg lg:text-2xl\"></i>\n              </div>\n              <p className=\"text-xs lg:text-sm text-orange-200\">Gest√£o de Alunos</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 lg:w-16 lg:h-16 bg-white/20 backdrop-blur-sm rounded-2xl flex items-center justify-center mx-auto mb-3 border border-white/30\">\n                <i className=\"fas fa-calendar-alt text-white text-lg lg:text-2xl\"></i>\n              </div>\n              <p className=\"text-xs lg:text-sm text-orange-200\">Agenda Inteligente</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Right Column - Login Form */}\n      <div className=\"w-full lg:w-1/2 flex items-center justify-center p-4 sm:p-6 lg:p-8 bg-gradient-to-br from-purple-100 via-purple-50 to-indigo-100 dark:from-gray-900 dark:via-gray-800 dark:to-black theme-transition min-h-screen lg:min-h-auto\">\n        <div className=\"w-full max-w-md mx-auto\">\n          {/* Mobile Logo */}\n          <div className=\"lg:hidden text-center mb-8\">\n            <div className=\"w-16 h-16 bg-primary rounded-2xl flex items-center justify-center mx-auto mb-4\">\n              <i className=\"fas fa-graduation-cap text-primary-foreground text-2xl\"></i>\n            </div>\n            <h1 className=\"text-2xl font-bold text-foreground\">OpenLife</h1>\n            <p className=\"text-muted-foreground\">Sistema de Gest√£o Escolar</p>\n          </div>\n\n\n          <Card className=\"shadow-2xl glassmorphism-card mb-6 theme-transition\">\n            <CardHeader className=\"space-y-4 pb-6\">\n              <div className=\"text-center\">\n                <CardTitle className=\"text-2xl font-bold text-foreground\">\n                  Acesso ao Sistema\n                </CardTitle>\n                <CardDescription className=\"text-muted-foreground mt-2\">\n                  Digite suas credenciais de acesso\n                </CardDescription>\n              </div>\n            </CardHeader>\n\n            <CardContent className=\"space-y-6\">\n              {/* Demo Users */}\n              {true && (\n                <div className=\"space-y-3\">\n                  <Label className=\"text-sm font-medium\">Usu√°rios Demo:</Label>\n                  <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-2\">\n                    {demoUsers.map((user, index) => (\n                      <Button\n                        key={index}\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => !user.disabled && setDemoUser(user)}\n                        disabled={user.disabled}\n                        className={`h-auto p-3 flex flex-col items-start border-gray-200 dark:border-gray-600 text-left transition-all duration-200 ${\n                          user.disabled \n                            ? 'bg-gray-100 dark:bg-gray-800 opacity-50 cursor-not-allowed' \n                            : 'bg-white/30 dark:bg-white/10 hover:bg-blue-50 dark:hover:bg-white/20'\n                        }`}\n                      >\n                        <span className=\"font-medium text-xs\">{user.role}</span>\n                        <span className=\"text-xs text-muted-foreground truncate w-full\">\n                          {user.email}\n                        </span>\n                        {user.disabled && (\n                          <span className=\"text-xs text-red-500 mt-1\">Em breve</span>\n                        )}\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              <div className=\"relative\">\n                <div className=\"absolute inset-0 flex items-center\">\n                  <span className=\"w-full border-t border-gray-200\" />\n                </div>\n                <div className=\"relative flex justify-center text-xs uppercase\">\n                  <span className=\"bg-white dark:bg-gray-800 px-2 text-muted-foreground\">\n                    Ou digite manualmente\n                  </span>\n                </div>\n              </div>\n\n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\" className=\"text-sm font-medium\">\n                    Email\n                  </Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"seu@email.com\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                    className=\"h-10 sm:h-12 bg-white/30 dark:bg-white/10 border-gray-200 dark:border-gray-600 focus:border-primary dark:focus:border-primary\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password\" className=\"text-sm font-medium\">\n                    Senha\n                  </Label>\n                  <div className=\"relative\">\n                    <Input\n                      id=\"password\"\n                      type={showPassword ? \"text\" : \"password\"}\n                      placeholder=\"‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢\"\n                      value={password}\n                      onChange={(e) => setPassword(e.target.value)}\n                      className=\"h-10 sm:h-12 bg-white/30 dark:bg-white/10 border-gray-200 dark:border-gray-600 focus:border-primary dark:focus:border-primary pr-10\"\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"absolute right-0 top-0 h-10 sm:h-12 px-3 py-2 hover:bg-transparent\"\n                      onClick={() => setShowPassword(!showPassword)}\n                    >\n                      {showPassword ? (\n                        <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                      ) : (\n                        <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                      )}\n                    </Button>\n                  </div>\n                </div>\n              </div>\n\n              <Button \n                onClick={handleLogin}\n                disabled={loginMutation.isPending}\n                className=\"w-full h-10 sm:h-12 bg-gradient-to-r from-primary to-blue-600 hover:from-primary/90 hover:to-blue-600/90 text-white font-medium text-sm sm:text-base shadow-lg hover:shadow-xl transition-all duration-200 button-hover-effect\"\n                data-testid=\"button-login\"\n              >\n                <i className=\"fas fa-sign-in-alt mr-2\"></i>\n                {loginMutation.isPending ? 'Entrando...' : 'Entrar no Sistema'}\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Demo Info removed */}\n          {false && (\n            <Card className=\"border-border bg-muted/50 theme-transition\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-6 h-6 bg-primary rounded-full flex items-center justify-center flex-shrink-0 mt-0.5\">\n                    <i className=\"fas fa-info text-primary-foreground text-xs\"></i>\n                  </div>\n                  <div>\n                    <h3 className=\"font-medium text-foreground mb-1\">Sistema Demonstrativo</h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Este √© um ambiente de demonstra√ß√£o. Todos os dados s√£o fict√≠cios e \n                      ser√£o redefinidos periodicamente.\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          <div className=\"mt-8 text-center\">\n            <p className=\"text-xs text-muted-foreground\">\n              ¬© 2024 OpenLife. Todos os direitos reservados.\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Error Modal */}\n      <Dialog open={errorModal.open} onOpenChange={(open) => setErrorModal({ ...errorModal, open })}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2 text-red-600\">\n              <i className=\"fas fa-exclamation-circle\"></i>\n              Erro no Login\n            </DialogTitle>\n            <DialogDescription className=\"text-base pt-2\">\n              {errorModal.message}\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"flex justify-end pt-4\">\n            <Button \n              onClick={() => setErrorModal({ open: false, message: \"\" })}\n              className=\"bg-red-600 hover:bg-red-700 text-white\"\n            >\n              Entendi\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":14239},"frontend/client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"backend/setup.js":{"content":"/**\n * Setup do PostgreSQL (VPS/Local)\n * - Conecta como superuser (postgres/admin)\n * - Cria usu√°rio da app (school_admin/forte)\n * - Cria DB (school_system) + extens√µes\n * - Cria schema completo + seeds b√°sicos\n * - Aplica GRANTs e Default Privileges\n * \n * Uso:\n *   node setup.js\n *   node setup.js --reset   (drop + recria)\n *   node setup.js --delete  (apenas drop)\n */\n\nimport dotenv from \"dotenv\";\ndotenv.config();\n\nimport os from \"os\";\nimport pkg from \"pg\";\nconst { Pool } = pkg;\nimport bcrypt from \"bcryptjs\";\n\n// ===================== ENV ALVO =====================\nconst TARGET_DB       = process.env.DB_NAME_TARGET  || \"school_system\";\nconst TARGET_USER     = process.env.DB_USER_TARGET  || \"school_admin\";\nconst TARGET_PASSWORD = process.env.DB_PASS_TARGET  || \"SchoolSys2024!@#\";\n\n// ===================== ENV ADMIN ====================\nconst ADMIN_CONFIG = {\n  host: process.env.DB_HOST || \"localhost\",\n  port: parseInt(process.env.DB_PORT || \"5432\", 10),\n  user: process.env.DB_USER || \"postgres\",\n  password: process.env.DB_PASSWORD || \"admin\", // ‚Üê superuser: **admin**\n  database: process.env.DB_NAME || \"postgres\",\n  connectionTimeoutMillis: 10000,\n  idleTimeoutMillis: 30000,\n  max: 3,\n};\n\n// ===================== HELPERS ======================\nconst isWin   = os.platform() === \"win32\";\nconst isLinux = os.platform() === \"linux\";\n\nconst poolAdmin = (database = \"postgres\") =>\n  new Pool({ ...ADMIN_CONFIG, database });\n\nconst poolTarget = () =>\n  new Pool({\n    host: ADMIN_CONFIG.host,\n    port: ADMIN_CONFIG.port,\n    user: TARGET_USER,\n    password: TARGET_PASSWORD,\n    database: TARGET_DB,\n    connectionTimeoutMillis: 10000,\n    idleTimeoutMillis: 30000,\n    max: 5,\n  });\n\nasync function exec(pool, sql, title) {\n  try {\n    console.log(`‚Üí ${title}`);\n    await pool.query(sql);\n    console.log(`‚úÖ ${title}`);\n  } catch (e) {\n    console.error(`‚ùå ${title}: ${e.message}`);\n    if (e.code === \"ECONNREFUSED\") {\n      console.log(\"üí° Verifique o servi√ßo PostgreSQL:\");\n      if (isWin) console.log(\"   - services.msc / pgAdmin / porta 5432\");\n      if (isLinux) {\n        console.log(\"   - sudo systemctl status postgresql\");\n        console.log(\"   - sudo systemctl start postgresql\");\n      }\n    }\n    throw e;\n  }\n}\n\n// ===================== SQL (SCHEMA) =================\nconst SQL_ENUMS = `\nDO $$ BEGIN\n  CREATE TYPE user_role AS ENUM ('admin','secretary','teacher','student');\nEXCEPTION WHEN duplicate_object THEN NULL; END $$;\n\nDO $$ BEGIN\n  CREATE TYPE ticket_priority AS ENUM ('low','medium','high','urgent');\nEXCEPTION WHEN duplicate_object THEN NULL; END $$;\n\nDO $$ BEGIN\n  CREATE TYPE ticket_status AS ENUM ('open','in_progress','resolved','closed');\nEXCEPTION WHEN duplicate_object THEN NULL; END $$;\n`;\n\nconst SQL_TABLES = `\nCREATE TABLE IF NOT EXISTS sessions (\n  sid VARCHAR PRIMARY KEY,\n  sess JSONB NOT NULL,\n  expire TIMESTAMP NOT NULL\n);\nCREATE INDEX IF NOT EXISTS idx_session_expire ON sessions(expire);\n\nCREATE TABLE IF NOT EXISTS permission_categories (\n  id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n  name VARCHAR UNIQUE NOT NULL,\n  display_name VARCHAR NOT NULL,\n  description TEXT,\n  is_system_category BOOLEAN DEFAULT false,\n  is_active BOOLEAN DEFAULT true,\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW()\n);\n\nCREATE TABLE IF NOT EXISTS permissions (\n  id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n  name VARCHAR UNIQUE NOT NULL,\n  display_name VARCHAR NOT NULL,\n  description TEXT,\n  category_id VARCHAR REFERENCES permission_categories(id) ON DELETE CASCADE NOT NULL,\n  is_active BOOLEAN DEFAULT true NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW() NOT NULL,\n  updated_at TIMESTAMP DEFAULT NOW() NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS roles (\n  id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n  name VARCHAR UNIQUE NOT NULL,\n  display_name VARCHAR NOT NULL,\n  description TEXT,\n  is_system_role BOOLEAN DEFAULT true,\n  is_active BOOLEAN DEFAULT true,\n  is_deletable BOOLEAN DEFAULT true NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW()\n);\n\nCREATE TABLE IF NOT EXISTS users (\n  id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n  email VARCHAR UNIQUE NOT NULL,\n  -- campo de senha para autentica√ß√£o (hash bcrypt)\n  password VARCHAR,\n  first_name VARCHAR NOT NULL,\n  last_name VARCHAR NOT NULL,\n  profile_image_url VARCHAR,\n  role_id VARCHAR NOT NULL REFERENCES roles(id) ON DELETE SET NULL,\n  is_active BOOLEAN DEFAULT true NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW() NOT NULL,\n  updated_at TIMESTAMP DEFAULT NOW() NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS units (\n  id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n  name VARCHAR NOT NULL,\n  address TEXT,\n  phone VARCHAR,\n  email VARCHAR,\n  manager_id VARCHAR REFERENCES users(id),\n  \n  -- Dados do Franqueado\n  franchisee_name VARCHAR,\n  franchisee_cpf VARCHAR,\n  franchisee_cpf_doc VARCHAR,\n  franchisee_rg VARCHAR,\n  franchisee_rg_doc VARCHAR,\n  franchisee_residence_address TEXT,\n  franchisee_residence_doc VARCHAR,\n  franchisee_marital_status VARCHAR,\n  franchisee_marital_status_doc VARCHAR,\n  franchisee_curriculum_doc VARCHAR,\n  franchisee_assets_doc VARCHAR,\n  franchisee_income_doc VARCHAR,\n  \n  -- Dados de Pessoa Jur√≠dica\n  franchisee_social_contract_doc VARCHAR,\n  franchisee_cnpj VARCHAR,\n  franchisee_cnpj_doc VARCHAR,\n  franchisee_state_registration VARCHAR,\n  franchisee_state_registration_doc VARCHAR,\n  franchisee_partners_docs_doc VARCHAR,\n  franchisee_certificates_doc VARCHAR,\n  \n  -- Dados Financeiros\n  financial_capital_doc VARCHAR,\n  financial_cash_flow_doc VARCHAR,\n  financial_tax_returns_doc VARCHAR,\n  financial_bank_references TEXT,\n  financial_bank_references_doc VARCHAR,\n  \n  -- Dados Imobili√°rios\n  real_estate_location TEXT,\n  real_estate_property_doc VARCHAR,\n  real_estate_lease_doc VARCHAR,\n  real_estate_floor_plan_doc VARCHAR,\n  \n  is_active BOOLEAN DEFAULT true,\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW()\n);\n\nCREATE TABLE IF NOT EXISTS staff (\n  id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n  user_id VARCHAR REFERENCES users(id) NOT NULL,\n  unit_id VARCHAR REFERENCES units(id),\n  employee_id VARCHAR UNIQUE,\n  position VARCHAR,\n  department VARCHAR,\n  salary INTEGER,\n  hire_date TIMESTAMP,\n  is_active BOOLEAN DEFAULT true,\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW()\n);\n\nCREATE TABLE IF NOT EXISTS students (\n  id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n  user_id VARCHAR REFERENCES users(id) NOT NULL,\n  student_id VARCHAR UNIQUE,\n  unit_id VARCHAR REFERENCES units(id),\n  enrollment_date TIMESTAMP,\n  status VARCHAR DEFAULT 'active',\n  emergency_contact JSONB,\n  notes TEXT,\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW()\n);\n\nCREATE TABLE IF NOT EXISTS courses (\n  id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n  name VARCHAR NOT NULL,\n  description TEXT,\n  language VARCHAR NOT NULL,\n  level VARCHAR NOT NULL,\n  duration INTEGER,\n  price INTEGER,\n  is_active BOOLEAN DEFAULT true,\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW()\n);\n\nCREATE TABLE IF NOT EXISTS books (\n  id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n  course_id VARCHAR REFERENCES courses(id) NOT NULL,\n  name VARCHAR NOT NULL,\n  description TEXT,\n  pdf_url VARCHAR,\n  color VARCHAR NOT NULL DEFAULT '#3b82f6',\n  display_order INTEGER DEFAULT 1,\n  total_days INTEGER DEFAULT 30,\n  is_active BOOLEAN DEFAULT true,\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW()\n);\n\nCREATE TABLE IF NOT EXISTS classes (\n  id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n  book_id VARCHAR REFERENCES books(id) NOT NULL,\n  teacher_id VARCHAR REFERENCES users(id) NOT NULL,\n  unit_id VARCHAR REFERENCES units(id) NOT NULL,\n  name VARCHAR NOT NULL,\n  schedule TEXT,\n  day_of_week INTEGER,\n  start_time VARCHAR,\n  end_time VARCHAR,\n  room VARCHAR,\n  max_students INTEGER DEFAULT 15,\n  current_students INTEGER DEFAULT 0,\n  start_date TIMESTAMP,\n  end_date TIMESTAMP,\n  current_day INTEGER DEFAULT 1,\n  is_active BOOLEAN DEFAULT true,\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW()\n);\n\nCREATE TABLE IF NOT EXISTS class_enrollments (\n  id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n  class_id VARCHAR REFERENCES classes(id) NOT NULL,\n  student_id VARCHAR REFERENCES students(id) NOT NULL,\n  enrollment_date TIMESTAMP DEFAULT NOW(),\n  status VARCHAR DEFAULT 'active',\n  final_grade VARCHAR,\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW()\n);\n\nCREATE TABLE IF NOT EXISTS lessons (\n  id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n  class_id VARCHAR REFERENCES classes(id) NOT NULL,\n  title VARCHAR NOT NULL,\n  book_day INTEGER NOT NULL,\n  date TIMESTAMP NOT NULL,\n  start_time VARCHAR NOT NULL,\n  end_time VARCHAR NOT NULL,\n  room VARCHAR,\n  status VARCHAR DEFAULT 'scheduled',\n  notes TEXT,\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW()\n);\n\nCREATE TABLE IF NOT EXISTS role_permissions (\n  id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n  role_id VARCHAR REFERENCES roles(id) ON DELETE CASCADE NOT NULL,\n  permission_id VARCHAR REFERENCES permissions(id) ON DELETE CASCADE NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n);\nCREATE UNIQUE INDEX IF NOT EXISTS uq_role_permission ON role_permissions(role_id, permission_id);\n\nCREATE TABLE IF NOT EXISTS user_permissions (\n  id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n  user_id VARCHAR REFERENCES users(id) ON DELETE CASCADE NOT NULL,\n  permission_id VARCHAR REFERENCES permissions(id) ON DELETE CASCADE NOT NULL,\n  is_granted BOOLEAN DEFAULT true NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW()\n);\nCREATE UNIQUE INDEX IF NOT EXISTS uq_user_permission ON user_permissions(user_id, permission_id);\n\nCREATE TABLE IF NOT EXISTS user_settings (\n  id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n  user_id VARCHAR REFERENCES users(id) ON DELETE CASCADE NOT NULL,\n  theme VARCHAR DEFAULT 'light',\n  language VARCHAR DEFAULT 'pt-BR',\n  timezone VARCHAR DEFAULT 'America/Sao_Paulo',\n  date_format VARCHAR DEFAULT 'DD/MM/YYYY',\n  currency VARCHAR DEFAULT 'BRL',\n  email_notifications BOOLEAN DEFAULT true,\n  push_notifications BOOLEAN DEFAULT false,\n  system_alerts BOOLEAN DEFAULT true,\n  lesson_reminders BOOLEAN DEFAULT true,\n  weekly_reports BOOLEAN DEFAULT false,\n  auto_save BOOLEAN DEFAULT true,\n  two_factor_enabled BOOLEAN DEFAULT false,\n  session_timeout INTEGER DEFAULT 30,\n  login_alerts BOOLEAN DEFAULT true,\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW()\n);\n\nCREATE TABLE IF NOT EXISTS support_tickets (\n  id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n  title VARCHAR NOT NULL,\n  description TEXT NOT NULL,\n  category VARCHAR NOT NULL,\n  priority ticket_priority DEFAULT 'medium',\n  status ticket_status DEFAULT 'open',\n  user_id VARCHAR REFERENCES users(id) ON DELETE CASCADE NOT NULL,\n  assigned_to VARCHAR REFERENCES users(id),\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW()\n);\n\nCREATE TABLE IF NOT EXISTS support_ticket_responses (\n  id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n  ticket_id VARCHAR REFERENCES support_tickets(id) ON DELETE CASCADE NOT NULL,\n  message TEXT NOT NULL,\n  is_from_support BOOLEAN DEFAULT false,\n  user_id VARCHAR REFERENCES users(id) ON DELETE CASCADE NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n);\n`;\n\n// Ajustes de schema idempotentes para bases j√° criadas anteriormente\nconst SQL_ALTER = `\nDO $$ BEGIN\n  -- adiciona coluna password se n√£o existir\n  BEGIN\n    ALTER TABLE IF EXISTS users ADD COLUMN IF NOT EXISTS password VARCHAR;\n  EXCEPTION WHEN undefined_table THEN NULL; WHEN duplicate_column THEN NULL; END;\nEND $$;\n\nDO $$ BEGIN\n  -- garante coluna is_active em students para compatibilidade com o dashboard\n  BEGIN\n    ALTER TABLE IF EXISTS students ADD COLUMN IF NOT EXISTS is_active BOOLEAN DEFAULT true;\n  EXCEPTION WHEN undefined_table THEN NULL; WHEN duplicate_column THEN NULL; END;\nEND $$;\n\nDO $$ BEGIN\n  -- garante coluna role em users para compatibilidade com seeds legados\n  BEGIN\n    ALTER TABLE IF EXISTS users ADD COLUMN IF NOT EXISTS role user_role DEFAULT 'student';\n  EXCEPTION WHEN undefined_table THEN NULL; WHEN duplicate_column THEN NULL; END;\nEND $$;\n\nDO $$ BEGIN\n  -- migra roles.name de enum para VARCHAR permitindo pap√©is din√¢micos\n  BEGIN\n    ALTER TABLE IF EXISTS roles ALTER COLUMN name TYPE VARCHAR USING name::text;\n  EXCEPTION WHEN undefined_table THEN NULL; WHEN undefined_column THEN NULL; END;\nEND $$;\n`;\n\nconst SQL_SEEDS_MIN = `\n\n-- Categorias\nINSERT INTO permission_categories (id,name,display_name,description,is_system_category) VALUES\n('cat-1','dashboard','Dashboard','Acesso ao painel principal',true),\n('cat-2','units','Unidades','Gerenciamento de unidades',true),\n('cat-3','staff','Funcion√°rios','Gerenciamento de funcion√°rios',true),\n('cat-4','students','Estudantes','Gerenciamento de estudantes',true),\n('cat-5','courses','Cursos','Gerenciamento de cursos e livros',true),\n('cat-6','classes','Turmas','Gerenciamento de turmas',true),\n('cat-7','schedule','Agenda','Gerenciamento de hor√°rios e aulas',true),\n('cat-8','financial','Financeiro','M√≥dulo financeiro',true),\n('cat-9','support','Suporte','Sistema de suporte',true),\n('cat-10','settings','Configura√ß√µes','Configura√ß√µes do sistema',true),\n('cat-11','permissions','Permiss√µes','Gerenciamento de permiss√µes',true)\nON CONFLICT (name) DO NOTHING;\n\n-- Roles\nINSERT INTO roles (id,name,display_name,description,is_system_role) VALUES\n('role-1','admin','Administrativo','Acesso total ao sistema',true),\n('role-2','secretary','Secret√°rio','Acesso amplo',true),\n('role-3','teacher','Professor','Acesso focado',true),\n('role-4','student','Aluno','Acesso limitado',true)\nON CONFLICT (name) DO NOTHING;\n\n-- Usu√°rio admin da app (exemplo)\nINSERT INTO users (id,email,first_name,last_name,role,role_id)\nVALUES ('admin-1','admin@escola.com','Carlos','Silva','admin','role-1')\nON CONFLICT (email) DO NOTHING;\n\n-- Unidade exemplo\nINSERT INTO units (id,name,address,phone,email,manager_id)\nVALUES ('unit-1','Unidade Centro','Av. Paulista, 1578 - S√£o Paulo - SP','(11) 3251-8900','centro@visionidiomas.com.br','admin-1')\nON CONFLICT (id) DO NOTHING;\n`;\n\nconst SQL_GRANTS = `\nGRANT ALL PRIVILEGES ON DATABASE ${TARGET_DB} TO ${TARGET_USER};\nGRANT ALL PRIVILEGES ON ALL TABLES    IN SCHEMA public TO ${TARGET_USER};\nGRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO ${TARGET_USER};\nGRANT ALL PRIVILEGES ON ALL FUNCTIONS IN SCHEMA public TO ${TARGET_USER};\nALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES    TO ${TARGET_USER};\nALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO ${TARGET_USER};\nALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON FUNCTIONS TO ${TARGET_USER};\n`;\n\n// ===================== A√á√ïES ========================\nasync function dropAll() {\n  const admin = poolAdmin();\n  try {\n    await exec(\n      admin,\n      `\n      SELECT pg_terminate_backend(pid)\n      FROM pg_stat_activity\n      WHERE datname='${TARGET_DB}' AND pid <> pg_backend_pid();\n      `,\n      \"Encerrando conex√µes do banco alvo\"\n    );\n    await exec(admin, `DROP DATABASE IF EXISTS ${TARGET_DB};`, \"Droppando database\");\n    await exec(admin, `DROP ROLE IF EXISTS ${TARGET_USER};`, \"Droppando usu√°rio alvo\");\n  } finally {\n    await admin.end();\n  }\n}\n\nasync function ensureRoleAndDb() {\n  const admin = poolAdmin();\n  try {\n    await exec(\n      admin,\n      `\n      DO $$\n      BEGIN\n        IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname='${TARGET_USER}') THEN\n          CREATE ROLE ${TARGET_USER} LOGIN PASSWORD '${TARGET_PASSWORD}';\n        END IF;\n      END$$;\n      `,\n      `Criando usu√°rio '${TARGET_USER}' (senha forte) se necess√°rio`\n    );\n\n    const r = await admin.query(`SELECT 1 FROM pg_database WHERE datname=$1`, [TARGET_DB]);\n    if (r.rowCount === 0) {\n      await exec(admin, `CREATE DATABASE ${TARGET_DB} OWNER ${TARGET_USER};`, `Criando banco '${TARGET_DB}'`);\n    } else {\n      console.log(`‚ÑπÔ∏è Banco '${TARGET_DB}' j√° existe`);\n    }\n  } finally {\n    await admin.end();\n  }\n}\n\nasync function enableExtensions() {\n  const adminOnTarget = poolAdmin(TARGET_DB);\n  try {\n    await exec(adminOnTarget, `CREATE EXTENSION IF NOT EXISTS pgcrypto;`, \"Habilitando extens√£o pgcrypto (UUID)\");\n  } finally {\n    await adminOnTarget.end();\n  }\n}\n\nasync function testAdmin() {\n  const admin = poolAdmin();\n  try {\n    await admin.query(\"SELECT NOW()\");\n    console.log(\"‚úÖ Conex√£o com PostgreSQL (superuser) OK\");\n  } finally {\n    await admin.end();\n  }\n}\n\n// ===================== HELPERS (SEED USERS) ======================\nasync function getRoleIdByName(cli, name) {\n  const r = await cli.query(`SELECT id FROM roles WHERE name = $1`, [name]);\n  return r.rows[0]?.id || null;\n}\n\nasync function upsertUser(cli, { email, firstName, lastName, roleName, password }) {\n  const roleId = await getRoleIdByName(cli, roleName);\n  if (!roleId) throw new Error(`Role n√£o encontrada: ${roleName}`);\n  const hashed = await bcrypt.hash(password, 10);\n  const sql = `\n    INSERT INTO users (id,email,password,first_name,last_name,role,role_id,is_active,created_at,updated_at)\n    VALUES (gen_random_uuid(), $1, $2, $3, $4, $5, $6, true, NOW(), NOW())\n    ON CONFLICT (email) DO UPDATE\n      SET first_name = EXCLUDED.first_name,\n          last_name  = EXCLUDED.last_name,\n          role       = EXCLUDED.role,\n          role_id    = EXCLUDED.role_id,\n          password   = COALESCE(users.password, EXCLUDED.password),\n          updated_at = NOW()\n    RETURNING id,email;\n  `;\n  const r = await cli.query(sql, [email, hashed, firstName, lastName, roleName, roleId]);\n  console.log(`‚úÖ usu√°rio: ${r.rows[0].email}`);\n  return r.rows[0];\n}\n\nasync function seedUsers(cli) {\n  console.log(\"üå± Inserindo/atualizando usu√°rios padr√£o...\");\n  await upsertUser(cli, { email: \"admin@sistema.com\", firstName: \"Admin\", lastName: \"Sistema\", roleName: \"admin\", password: \"admin123\" });\n  await upsertUser(cli, { email: \"admin@demo.com\", firstName: \"Admin\", lastName: \"Demo\", roleName: \"admin\", password: \"demo123\" });\n  await upsertUser(cli, { email: \"teacher@demo.com\", firstName: \"Professor\", lastName: \"Demo\", roleName: \"teacher\", password: \"demo123\" });\n  await upsertUser(cli, { email: \"secretary@demo.com\", firstName: \"Secret√°ria\", lastName: \"Demo\", roleName: \"secretary\", password: \"demo123\" });\n  await upsertUser(cli, { email: \"student@demo.com\", firstName: \"Jo√£o\", lastName: \"Silva\", roleName: \"student\", password: \"demo123\" });\n  console.log(\"‚úÖ Usu√°rios padr√£o atualizados\");\n}\n\nasync function setup(isReset = false) {\n  console.log(\"üöÄ Iniciando setup do banco PostgreSQL...\");\n  console.log(`üíª Sistema: ${os.platform()} ${os.arch()}`);\n  console.log(`üåê Host: ${ADMIN_CONFIG.host}:${ADMIN_CONFIG.port}`);\n  console.log(`üëë Superuser: ${ADMIN_CONFIG.user}`);\n  console.log(`üéØ DB alvo: ${TARGET_DB}`);\n  console.log(`üë§ Usu√°rio alvo: ${TARGET_USER}\\n`);\n\n  if (isReset) await dropAll();\n\n  await testAdmin();\n  await ensureRoleAndDb();\n  await enableExtensions();\n\n  const appPool = poolTarget();\n  try {\n    await exec(appPool, SQL_ENUMS,   \"Criando ENUMs\");\n    await exec(appPool, SQL_TABLES,  \"Criando tabelas/estruturas\");\n    await exec(appPool, SQL_ALTER,   \"Ajustando colunas ausentes\");\n    await exec(appPool, SQL_SEEDS_MIN, \"Inserindo dados iniciais\");\n    await seedUsers(appPool);\n  } finally {\n    await appPool.end();\n  }\n\n  const grantPool = poolAdmin(TARGET_DB);\n  try {\n    await exec(grantPool, SQL_GRANTS, \"Aplicando GRANTs e Default Privileges\");\n  } finally {\n    await grantPool.end();\n  }\n\n  // Seed externo opcional\n  try {\n    const { seedDatabase } = await import(\"./seed-demo-users.js\");\n    if (typeof seedDatabase === \"function\") {\n      console.log(\"üå± Executando seed-demo-users.js...\");\n      await seedDatabase();\n      console.log(\"‚úÖ Seed externo conclu√≠do\");\n    }\n  } catch { /* silencioso se n√£o existir */ }\n\n  console.log(\"\\n‚úÖ Setup conclu√≠do!\");\n  console.log(`üîå DATABASE_URL (app): ${process.env.DATABASE_URL || \"(defina no .env)\"}`);\n}\n\n// ===================== CLI ==========================\nconst args = process.argv.slice(2);\nconst isDelete = args.includes(\"--delete\");\nconst isReset  = args.includes(\"--reset\");\n\nconst run = isDelete ? dropAll : () => setup(isReset);\nrun()\n  .then(() => process.exit(0))\n  .catch((e) => {\n    console.error(\"üí• Erro no setup:\", e?.stack || e);\n    process.exit(1);\n  });\n","size_bytes":20599},"backend/server/seed.js":{"content":"import { storage } from './storage.js';\nimport { auth } from './auth.js';\nasync function seed() {\n    console.log('üå± Iniciando seed do banco de dados...');\n    try {\n        // Criar roles fixos do sistema (idempotente - verifica se j√° existem)\n        console.log('üìù Criando roles...');\n        let adminRole = await storage.getRoleByName('admin');\n        if (!adminRole) {\n            adminRole = await storage.createRole({\n                name: 'admin',\n                displayName: 'Administrativo',\n                description: 'Acesso total ao sistema',\n                isSystemRole: true,\n                isActive: true,\n                isDeletable: false, // Cargo fixo, n√£o pode ser exclu√≠do\n            });\n            console.log('‚úÖ Role admin criado');\n        }\n        else {\n            console.log('‚úÖ Role admin j√° existe');\n        }\n        let secretaryRole = await storage.getRoleByName('secretary');\n        if (!secretaryRole) {\n            secretaryRole = await storage.createRole({\n                name: 'secretary',\n                displayName: 'Secret√°rio',\n                description: 'Gest√£o de alunos e unidades',\n                isSystemRole: true,\n                isActive: true,\n                isDeletable: false, // Cargo fixo, n√£o pode ser exclu√≠do\n            });\n            console.log('‚úÖ Role secretary criado');\n        }\n        else {\n            console.log('‚úÖ Role secretary j√° existe');\n        }\n        let teacherRole = await storage.getRoleByName('teacher');\n        if (!teacherRole) {\n            teacherRole = await storage.createRole({\n                name: 'teacher',\n                displayName: 'Professor',\n                description: 'Acesso a turmas e agenda',\n                isSystemRole: true,\n                isActive: true,\n                isDeletable: false, // Cargo fixo, n√£o pode ser exclu√≠do\n            });\n            console.log('‚úÖ Role teacher criado');\n        }\n        else {\n            console.log('‚úÖ Role teacher j√° existe');\n        }\n        let studentRole = await storage.getRoleByName('student');\n        if (!studentRole) {\n            studentRole = await storage.createRole({\n                name: 'student',\n                displayName: 'Aluno',\n                description: 'Acesso √† √°rea do aluno',\n                isSystemRole: true,\n                isActive: true,\n                isDeletable: false, // Cargo fixo, n√£o pode ser exclu√≠do\n            });\n            console.log('‚úÖ Role student criado');\n        }\n        else {\n            console.log('‚úÖ Role student j√° existe');\n        }\n        console.log('‚úÖ Roles verificados/criados com sucesso');\n        // Criar usu√°rio admin padr√£o (se n√£o existir)\n        console.log('üë§ Criando usu√°rio admin...');\n        // Criar permiss√µes e categorias padr√£o\n        console.log('üîê Criando categorias e permiss√µes padr√£o...');\n        // Helper para obter/ criar categoria por nome\n        const allCategories = await storage.getPermissionCategories();\n        async function ensureCategory(name, displayName, description) {\n            const found = allCategories.find(c => c.name === name);\n            return found || await storage.createPermissionCategory({ name, displayName, description, isSystemCategory: true, isActive: true });\n        }\n        const catModules = await ensureCategory('modules', 'M√≥dulos', 'Permiss√µes por m√≥dulo');\n        const catAdmin = await ensureCategory('admin', 'Administra√ß√£o', 'Permiss√µes administrativas');\n        // Helper para obter/ criar permiss√£o por nome\n        const allPerms = await storage.getPermissions();\n        async function ensurePermission(name, displayName, description, categoryId) {\n            const found = allPerms.find(p => p.name === name);\n            return found || await storage.createPermission({ name, displayName, description, categoryId, isActive: true });\n        }\n        const pUnitsRead = await ensurePermission('units:read', 'Ler Unidades', 'Visualizar unidades', catModules.id);\n        const pUnitsWrite = await ensurePermission('units:write', 'Gerir Unidades', 'Criar/editar/excluir unidades', catModules.id);\n        const pStaffRead = await ensurePermission('staff:read', 'Ler Colaboradores', 'Visualizar colaboradores', catModules.id);\n        const pStaffWrite = await ensurePermission('staff:write', 'Gerir Colaboradores', 'Criar/editar/excluir colaboradores', catModules.id);\n        const pStudentsRead = await ensurePermission('students:read', 'Ler Alunos', 'Visualizar alunos', catModules.id);\n        const pStudentsWrite = await ensurePermission('students:write', 'Gerir Alunos', 'Criar/editar/excluir alunos', catModules.id);\n        const pCoursesRead = await ensurePermission('courses:read', 'Ler Cursos', 'Visualizar cursos', catModules.id);\n        const pCoursesWrite = await ensurePermission('courses:write', 'Gerir Cursos', 'Criar/editar/excluir cursos', catModules.id);\n        const pBooksRead = await ensurePermission('books:read', 'Ler Livros', 'Visualizar livros', catModules.id);\n        const pBooksWrite = await ensurePermission('books:write', 'Gerir Livros', 'Criar/editar/excluir livros', catModules.id);\n        const pClassesRead = await ensurePermission('classes:read', 'Ler Turmas', 'Visualizar turmas', catModules.id);\n        const pClassesWrite = await ensurePermission('classes:write', 'Gerir Turmas', 'Criar/editar/excluir turmas', catModules.id);\n        const pLessonsRead = await ensurePermission('lessons:read', 'Ler Aulas', 'Visualizar aulas', catModules.id);\n        const pLessonsWrite = await ensurePermission('lessons:write', 'Gerir Aulas', 'Criar/editar/excluir aulas', catModules.id);\n        const pFinanceRead = await ensurePermission('finance:read', 'Ler Financeiro', 'Visualizar √°rea financeira', catModules.id);\n        const pFinanceWrite = await ensurePermission('finance:write', 'Gerir Financeiro', 'Opera√ß√µes no financeiro', catModules.id);\n        const pDashboardRead = await ensurePermission('dashboard:read', 'Ler Dashboard', 'Visualizar dashboard', catModules.id);\n        const pSettingsRead = await ensurePermission('settings:read', 'Ler Configura√ß√µes', 'Visualizar configura√ß√µes', catAdmin.id);\n        const pSupportRead = await ensurePermission('support:read', 'Ler Suporte', 'Visualizar suporte', catModules.id);\n        const pPermissionsManage = await ensurePermission('permissions:manage', 'Gerir Permiss√µes', 'Gerenciar roles e permiss√µes', catAdmin.id);\n        // Atribuir permiss√µes por role\n        console.log('üß© Atribuindo permiss√µes √†s roles...');\n        if (adminRole?.id) {\n            await storage.updateRolePermissions(adminRole.id, [\n                pDashboardRead.id,\n                pUnitsRead.id, pUnitsWrite.id,\n                pStaffRead.id, pStaffWrite.id,\n                pStudentsRead.id, pStudentsWrite.id,\n                pCoursesRead.id, pCoursesWrite.id,\n                pBooksRead.id, pBooksWrite.id,\n                pClassesRead.id, pClassesWrite.id,\n                pLessonsRead.id, pLessonsWrite.id,\n                pFinanceRead.id, pFinanceWrite.id,\n                pSettingsRead.id,\n                pSupportRead.id,\n                pPermissionsManage.id,\n            ]);\n        }\n        if (secretaryRole?.id) {\n            await storage.updateRolePermissions(secretaryRole.id, [\n                pDashboardRead.id,\n                pStaffRead.id, pStaffWrite.id,\n                pStudentsRead.id, pStudentsWrite.id,\n                pCoursesRead.id, pCoursesWrite.id,\n                pBooksRead.id,\n                pClassesRead.id, pClassesWrite.id,\n                pLessonsRead.id, pLessonsWrite.id,\n                pFinanceRead.id, pFinanceWrite.id,\n                pSupportRead.id,\n            ]);\n        }\n        if (teacherRole?.id) {\n            await storage.updateRolePermissions(teacherRole.id, [\n                pDashboardRead.id,\n                pClassesRead.id,\n                pLessonsRead.id,\n                pSupportRead.id,\n            ]);\n        }\n        if (studentRole?.id) {\n            await storage.updateRolePermissions(studentRole.id, [\n                pLessonsRead.id,\n                pSupportRead.id,\n            ]);\n        }\n        console.log('‚úÖ Permiss√µes padr√£o criadas/atribu√≠das');\n        const existingAdmin = await storage.getUserByEmail('admin@sistema.com');\n        if (!existingAdmin) {\n            const hashedPassword = await auth.hashPassword('admin123');\n            await storage.createUser({\n                email: 'admin@sistema.com',\n                password: hashedPassword,\n                firstName: 'Admin',\n                lastName: 'Sistema',\n                roleId: adminRole.id,\n                isActive: true,\n            });\n            console.log('‚úÖ Usu√°rio admin criado com sucesso');\n            console.log('üìß Email: admin@sistema.com');\n            console.log('üîë Senha: admin123');\n        }\n        else {\n            console.log('‚úÖ Usu√°rio admin j√° existe');\n        }\n        // Criar p√°ginas do sistema\n        console.log('üìÑ Criando p√°ginas do sistema...');\n        const pages = [\n            { name: 'dashboard', displayName: 'Dashboard', description: 'P√°gina inicial do sistema', route: '/dashboard' },\n            { name: 'units', displayName: 'Unidades', description: 'Gest√£o de unidades/filiais', route: '/units' },\n            { name: 'staff', displayName: 'Colaboradores', description: 'Gest√£o de colaboradores', route: '/staff' },\n            { name: 'students', displayName: 'Alunos', description: 'Gest√£o de alunos', route: '/students' },\n            { name: 'courses', displayName: 'Cursos', description: 'Gest√£o de cursos', route: '/courses' },\n            { name: 'classes', displayName: 'Turmas', description: 'Gest√£o de turmas', route: '/classes' },\n            { name: 'schedule', displayName: 'Agenda', description: 'Agenda de aulas', route: '/schedule' },\n            { name: 'financial', displayName: 'Financeiro', description: 'Gest√£o financeira', route: '/financial' },\n            { name: 'support', displayName: 'Suporte', description: 'Central de suporte', route: '/support' },\n            { name: 'settings', displayName: 'Configura√ß√µes', description: 'Configura√ß√µes do sistema', route: '/settings' },\n            { name: 'permissions', displayName: 'Permiss√µes', description: 'Gest√£o de permiss√µes', route: '/permissions' },\n        ];\n        for (const pageData of pages) {\n            let page = await storage.getPageByName(pageData.name);\n            if (!page) {\n                page = await storage.createPage(pageData);\n                console.log(`‚úÖ P√°gina ${pageData.name} criada`);\n            }\n            else {\n                console.log(`‚úÖ P√°gina ${pageData.name} j√° existe`);\n            }\n        }\n        // Criar permiss√µes padr√£o para admin (acesso a todas as p√°ginas)\n        console.log('üîê Configurando permiss√µes padr√£o...');\n        const allPages = await storage.getPages();\n        for (const page of allPages) {\n            const existingPermission = await storage.getRolePagePermission(adminRole.id, page.id);\n            if (!existingPermission) {\n                await storage.createRolePagePermission({\n                    roleId: adminRole.id,\n                    pageId: page.id,\n                    canAccess: true,\n                });\n                console.log(`‚úÖ Permiss√£o admin para ${page.name} criada`);\n            }\n        }\n        console.log('\\nüéâ Seed conclu√≠do com sucesso!');\n    }\n    catch (error) {\n        console.error('‚ùå Erro durante o seed:', error);\n        throw error;\n    }\n}\n// Executar seed se for chamado diretamente\nif (import.meta.url === `file://${process.argv[1]}`) {\n    seed()\n        .then(() => process.exit(0))\n        .catch((error) => {\n        console.error(error);\n        process.exit(1);\n    });\n}\nexport { seed };\n","size_bytes":11967},"frontend/client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"backend/seed-demo-users.js":{"content":"#!/usr/bin/env node\n// seed-demo-users.js ‚Äî cria usu√°rios/unidades demo usando pg (ESM)\n\nimport 'dotenv/config';\nimport pkg from 'pg';\nimport bcrypt from 'bcryptjs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst { Pool } = pkg;\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname  = path.dirname(__filename);\n\n/* ========================= CONEX√ÉO PG ========================= */\n// Usa as mesmas vari√°veis do setup.js\nconst TARGET_DB       = process.env.DB_NAME_TARGET  || \"school_system\";\nconst TARGET_USER     = process.env.DB_USER_TARGET  || \"school_admin\";\nconst TARGET_PASSWORD = process.env.DB_PASS_TARGET  || \"SchoolSys2024!@#\";\nconst DB_HOST         = process.env.DB_HOST || \"127.0.0.1\";\nconst DB_PORT         = parseInt(process.env.DB_PORT || \"5432\", 10);\n\nconst pool = new Pool({\n  host: DB_HOST,\n  port: DB_PORT,\n  user: TARGET_USER,\n  password: TARGET_PASSWORD,\n  database: TARGET_DB,\n  connectionTimeoutMillis: 10000,\n  idleTimeoutMillis: 30000,\n  max: 5,\n});\n\n// log alvo (sem senha)\nconsole.log(\n  'üîå PG alvo:',\n  `${TARGET_USER}@${DB_HOST}:${DB_PORT}/${TARGET_DB}`.replace(/:(.*?)@/, '://****@')\n);\n\n/* ====================== DADOS DE EXEMPLO ====================== */\nconst usuariosDemo = [\n  { email: 'admin@demo.com',     first_name: 'Admin',      last_name: 'Sistema',  role: 'admin',     password: 'demo123' },\n  { email: 'teacher@demo.com',   first_name: 'Professor',  last_name: 'Demo',     role: 'teacher',   password: 'demo123' },\n  { email: 'secretary@demo.com', first_name: 'Secret√°ria', last_name: 'Demo',     role: 'secretary', password: 'demo123' },\n  { email: 'student@demo.com',   first_name: 'Jo√£o',       last_name: 'Silva',    role: 'student',   password: 'demo123' },\n];\n\nconst unidadesDemo = [\n  { name: 'Unidade Centro',    address: 'Rua das Flores, 123 - Centro',       phone: '(11) 3456-7890', email: 'centro@vision.dev.br' },\n];\n\n/* ======================= FUN√á√ïES AUXILIARES ======================= */\nasync function obterRoleIdPorNome(cli, nome) {\n  const r = await cli.query(`SELECT id FROM roles WHERE name = $1`, [nome]);\n  if (r.rowCount === 0) throw new Error(`Role n√£o encontrada: ${nome}`);\n  return r.rows[0].id;\n}\n\nasync function upsertUsuario(cli, u) {\n  const roleId = await obterRoleIdPorNome(cli, u.role);\n  const hashed = await bcrypt.hash(u.password, 10);\n  const sql = `\n    INSERT INTO users (id, email, password, first_name, last_name, role, role_id, is_active, created_at, updated_at)\n    VALUES (gen_random_uuid(), $1, $2, $3, $4, $5, $6, true, NOW(), NOW())\n    ON CONFLICT (email) DO UPDATE\n      SET first_name = EXCLUDED.first_name,\n          last_name  = EXCLUDED.last_name,\n          role       = EXCLUDED.role,\n          role_id    = EXCLUDED.role_id,\n          -- s√≥ define a senha se ainda estiver nula\n          password   = COALESCE(users.password, EXCLUDED.password),\n          updated_at = NOW()\n    RETURNING id, email;\n  `;\n  const r = await cli.query(sql, [u.email, hashed, u.first_name, u.last_name, u.role, roleId]);\n  return r.rows[0];\n}\n\nasync function upsertUnidade(cli, un) {\n  const existe = await cli.query(`SELECT id, name FROM units WHERE name = $1`, [un.name]);\n  if (existe.rowCount) return existe.rows[0];\n\n  const sql = `\n    INSERT INTO units (id, name, address, phone, email, is_active, created_at, updated_at)\n    VALUES (gen_random_uuid(), $1, $2, $3, $4, true, NOW(), NOW())\n    RETURNING id, name;\n  `;\n  const r = await cli.query(sql, [un.name, un.address, un.phone, un.email]);\n  return r.rows[0];\n}\n\nasync function upsertStaffPorEmail(cli, emailUsuario, unidadeId, cargo, depto, salario) {\n  const u = await cli.query(`SELECT id FROM users WHERE email = $1`, [emailUsuario]);\n  if (!u.rowCount) throw new Error(`Usu√°rio n√£o encontrado: ${emailUsuario}`);\n  const userId = u.rows[0].id;\n\n  const existe = await cli.query(`SELECT id FROM staff WHERE user_id = $1`, [userId]);\n  if (existe.rowCount) {\n    await cli.query(\n      `UPDATE staff SET unit_id=$2, position=$3, department=$4, salary=$5, updated_at=NOW() WHERE user_id=$1`,\n      [userId, unidadeId, cargo, depto, salario]\n    );\n  } else {\n    await cli.query(\n      `INSERT INTO staff (id, user_id, unit_id, position, department, salary, hire_date, is_active, created_at, updated_at)\n       VALUES (gen_random_uuid(), $1, $2, $3, $4, $5, NOW(), true, NOW(), NOW())`,\n      [userId, unidadeId, cargo, depto, salario]\n    );\n  }\n}\n\nasync function upsertAlunoPorEmail(cli, emailUsuario, studentId, unidadeId) {\n  const u = await cli.query(`SELECT id FROM users WHERE email = $1`, [emailUsuario]);\n  if (!u.rowCount) throw new Error(`Usu√°rio n√£o encontrado: ${emailUsuario}`);\n  const userId = u.rows[0].id;\n\n  const existe = await cli.query(`SELECT id FROM students WHERE user_id = $1`, [userId]);\n  if (existe.rowCount) {\n    await cli.query(\n      `UPDATE students SET student_id=$2, unit_id=$3, updated_at=NOW() WHERE user_id=$1`,\n      [userId, studentId, unidadeId]\n    );\n  } else {\n    await cli.query(\n      `INSERT INTO students (id, user_id, student_id, unit_id, enrollment_date, status, created_at, updated_at)\n       VALUES (gen_random_uuid(), $1, $2, $3, NOW(), 'active', NOW(), NOW())`,\n      [userId, studentId, unidadeId]\n    );\n  }\n}\n\n/* =========================== EXPORTS =========================== */\nexport async function verificarTabelas() {\n  const cli = await pool.connect();\n  try {\n    const r = await cli.query(`\n      SELECT table_name\n      FROM information_schema.tables\n      WHERE table_schema='public'\n        AND table_name IN ('users','units','staff','students')\n      ORDER BY table_name\n    `);\n    return r.rows.length === 4;\n  } finally {\n    cli.release();\n  }\n}\n\nexport async function seedDatabase() {\n  const cli = await pool.connect();\n  try {\n    await cli.query('BEGIN');\n\n    // usu√°rios\n    for (const u of usuariosDemo) {\n      const criado = await upsertUsuario(cli, u);\n      console.log(`‚úÖ usu√°rio: ${criado.email}`);\n    }\n\n    // unidades\n    const unidadesCriadas = [];\n    for (const un of unidadesDemo) {\n      const c = await upsertUnidade(cli, un);\n      unidadesCriadas.push(c);\n      console.log(`‚úÖ unidade: ${c.name}`);\n    }\n\n    const unidadePrincipalId = unidadesCriadas[0]?.id;\n    if (!unidadePrincipalId) throw new Error('Unidade principal n√£o encontrada para staff');\n\n    // staff\n    await upsertStaffPorEmail(cli, 'admin@demo.com',     unidadePrincipalId, 'diretor',      'Administra√ß√£o', 10000);\n    await upsertStaffPorEmail(cli, 'teacher@demo.com',   unidadePrincipalId, 'instrutor',    'Ensino',         5000);\n    await upsertStaffPorEmail(cli, 'secretary@demo.com', unidadePrincipalId, 'recepcionista','Administrativo', 3000);\n    console.log('‚úÖ staff atualizado');\n\n    // aluno demo\n    await upsertAlunoPorEmail(cli, 'student@demo.com', 'STD001', unidadePrincipalId);\n    console.log('‚úÖ aluno demo criado');\n\n    // (opcional) matr√≠cula no curso \"Journey - English for Life\"\n    const studentData = await cli.query(`\n      SELECT s.id FROM students s\n      JOIN users u ON u.id = s.user_id\n      WHERE u.email = $1\n    `, ['student@demo.com']);\n\n    const courseData = await cli.query(`\n      SELECT id FROM courses WHERE name = $1\n    `, ['Journey - English for Life']);\n\n    if (studentData.rows.length && courseData.rows.length) {\n      const studentId = studentData.rows[0].id;\n      const courseId  = courseData.rows[0].id;\n\n      const bookData = await cli.query(`\n        SELECT id FROM books WHERE course_id = $1 ORDER BY display_order LIMIT 1\n      `, [courseId]);\n\n      const unitData = await cli.query(`\n        SELECT id FROM course_units WHERE book_id = $1 ORDER BY display_order LIMIT 1\n      `, [bookData.rows[0]?.id]);\n\n      await cli.query(`\n        INSERT INTO student_course_enrollments\n          (id, student_id, course_id, current_book_id, current_unit_id, enrollment_date, status, overall_progress, created_at, updated_at)\n        VALUES (gen_random_uuid(), $1, $2, $3, $4, NOW(), 'active', 0, NOW(), NOW())\n        ON CONFLICT DO NOTHING\n      `, [studentId, courseId, bookData.rows[0]?.id, unitData.rows[0]?.id]);\n\n      console.log('‚úÖ aluno matriculado no curso Journey');\n    }\n\n    await cli.query('COMMIT');\n    console.log('üéâ Seed conclu√≠do com sucesso!');\n  } catch (e) {\n    await cli.query('ROLLBACK');\n    console.error('‚ùå Erro no seed:', e.message);\n    throw e;\n  } finally {\n    cli.release();\n  }\n}\n\n/* ============================ CLI ============================ */\nasync function main() {\n  console.log('üöÄ Iniciando seed dos usu√°rios demo...');\n  const ok = await verificarTabelas();\n  if (!ok) {\n    console.log('‚ö†Ô∏è  Rode primeiro: node setup.js');\n    process.exit(1);\n  }\n  await seedDatabase();\n  await pool.end();\n\n  console.log('\\nüìã Logins demo:');\n  console.log('üë§ admin@demo.com / demo123 (Admin)');\n  console.log('üë§ teacher@demo.com / demo123 (Professor)');\n  console.log('üë§ secretary@demo.com / demo123 (Secret√°ria)');\n  console.log('üéì student@demo.com / demo123 (Aluno - Curso Journey)');\n}\n\nif (import.meta.url === `file://${process.argv[1]}`) {\n  main().catch(async (e) => {\n    console.error('üí• Erro fatal:', e.message);\n    await pool.end();\n    process.exit(1);\n  });\n}\n","size_bytes":9272},"frontend/client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"backend/shared/schema.js":{"content":"import { sql } from 'drizzle-orm';\nimport { relations } from 'drizzle-orm';\nimport { index, jsonb, pgTable, timestamp, varchar, text, integer, boolean, pgEnum, } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n// ============================================================================\n// ENUMS\n// ============================================================================\n// User roles - 4 roles fixos do sistema\nexport const userRoleEnum = pgEnum('user_role', [\n    'admin', // Administrativo - acesso total\n    'secretary', // Secret√°rio - acesso quase total\n    'teacher', // Professor - acesso limitado focado em ensino\n    'student' // Aluno - apenas √°rea do aluno\n]);\n// Gender enum - unificado para staff e students\nexport const genderEnum = pgEnum('gender', ['masculino', 'feminino', 'outro']);\n// Billing type enum\nexport const billingTypeEnum = pgEnum('billing_type', [\n    'mensalidade',\n    'trimestral',\n    'semestral',\n    'anual',\n    'avulso'\n]);\n// Support ticket enums\nexport const ticketPriorityEnum = pgEnum('ticket_priority', ['low', 'medium', 'high', 'urgent']);\nexport const ticketStatusEnum = pgEnum('ticket_status', ['open', 'in_progress', 'resolved', 'closed']);\n// ============================================================================\n// CORE TABLES\n// ============================================================================\n// Session storage table (mandatory for Replit Auth)\nexport const sessions = pgTable(\"sessions\", {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n}, (table) => [index(\"IDX_session_expire\").on(table.expire)]);\n// Users table - base para todos os usu√°rios do sistema\nexport const users = pgTable(\"users\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    email: varchar(\"email\").notNull().unique(),\n    password: varchar(\"password\"), // hashed password\n    firstName: varchar(\"first_name\").notNull(),\n    lastName: varchar(\"last_name\").notNull(),\n    profileImageUrl: varchar(\"profile_image_url\"),\n    roleId: varchar(\"role_id\").references(() => roles.id).notNull(),\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// Roles table - 4 roles fixos do sistema\nexport const roles = pgTable(\"roles\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    // Permite pap√©is din√¢micos: trocar enum por varchar\n    name: varchar(\"name\").notNull().unique(),\n    displayName: varchar(\"display_name\").notNull(),\n    description: text(\"description\"),\n    isSystemRole: boolean(\"is_system_role\").default(true).notNull(),\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    isDeletable: boolean(\"is_deletable\").default(true).notNull(), // Controla se o cargo pode ser exclu√≠do\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// Permission categories table\nexport const permissionCategories = pgTable(\"permission_categories\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    name: varchar(\"name\").notNull().unique(),\n    displayName: varchar(\"display_name\").notNull(),\n    description: text(\"description\"),\n    isSystemCategory: boolean(\"is_system_category\").default(false).notNull(),\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// Permissions table\nexport const permissions = pgTable(\"permissions\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    name: varchar(\"name\").notNull().unique(),\n    displayName: varchar(\"display_name\").notNull(),\n    description: text(\"description\"),\n    categoryId: varchar(\"category_id\").references(() => permissionCategories.id, { onDelete: 'cascade' }).notNull(),\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// Role permissions relationship\nexport const rolePermissions = pgTable(\"role_permissions\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    roleId: varchar(\"role_id\").references(() => roles.id, { onDelete: 'cascade' }).notNull(),\n    permissionId: varchar(\"permission_id\").references(() => permissions.id, { onDelete: 'cascade' }).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n}, (table) => [\n    index(\"UQ_role_permission\").on(table.roleId, table.permissionId),\n]);\n// Tabela de p√°ginas do sistema para controle de acesso\nexport const pages = pgTable(\"pages\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    name: varchar(\"name\").notNull().unique(), // ex: 'units', 'staff', 'students'\n    displayName: varchar(\"display_name\").notNull(), // ex: 'Unidades', 'Colaboradores', 'Alunos'\n    description: text(\"description\"),\n    route: varchar(\"route\").notNull(), // ex: '/units', '/staff', '/students'\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// Tabela de permiss√µes de p√°ginas por cargo\nexport const rolePagePermissions = pgTable(\"role_page_permissions\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    roleId: varchar(\"role_id\").references(() => roles.id, { onDelete: 'cascade' }).notNull(),\n    pageId: varchar(\"page_id\").references(() => pages.id, { onDelete: 'cascade' }).notNull(),\n    canAccess: boolean(\"can_access\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n}, (table) => [\n    index(\"UQ_role_page_permission\").on(table.roleId, table.pageId),\n]);\n// User permissions table - override de permiss√µes por usu√°rio\nexport const userPermissions = pgTable(\"user_permissions\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }).notNull(),\n    permissionId: varchar(\"permission_id\").references(() => permissions.id, { onDelete: 'cascade' }).notNull(),\n    isGranted: boolean(\"is_granted\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n}, (table) => [\n    index(\"UQ_user_permission\").on(table.userId, table.permissionId),\n]);\n// ============================================================================\n// ORGANIZATIONAL TABLES\n// ============================================================================\n// Units table - unidades/filiais\nexport const units = pgTable(\"units\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    name: varchar(\"name\").notNull(),\n    address: text(\"address\"),\n    phone: varchar(\"phone\"),\n    email: varchar(\"email\"),\n    managerId: varchar(\"manager_id\").references(() => users.id),\n    // Dados do Franqueado\n    franchiseeName: varchar(\"franchisee_name\"),\n    franchiseeCpf: varchar(\"franchisee_cpf\"),\n    franchiseeCpfDoc: varchar(\"franchisee_cpf_doc\"),\n    franchiseeRg: varchar(\"franchisee_rg\"),\n    franchiseeRgDoc: varchar(\"franchisee_rg_doc\"),\n    franchiseeResidenceAddress: text(\"franchisee_residence_address\"),\n    franchiseeResidenceDoc: varchar(\"franchisee_residence_doc\"),\n    franchiseeMaritalStatus: varchar(\"franchisee_marital_status\"),\n    franchiseeMaritalStatusDoc: varchar(\"franchisee_marital_status_doc\"),\n    franchiseeCurriculumDoc: varchar(\"franchisee_curriculum_doc\"),\n    franchiseeAssetsDoc: varchar(\"franchisee_assets_doc\"),\n    franchiseeIncomeDoc: varchar(\"franchisee_income_doc\"),\n    // Dados PJ\n    franchiseeSocialContractDoc: varchar(\"franchisee_social_contract_doc\"),\n    franchiseeCnpj: varchar(\"franchisee_cnpj\"),\n    franchiseeCnpjDoc: varchar(\"franchisee_cnpj_doc\"),\n    franchiseeStateRegistration: varchar(\"franchisee_state_registration\"),\n    franchiseeStateRegistrationDoc: varchar(\"franchisee_state_registration_doc\"),\n    franchiseePartnersDocsDoc: varchar(\"franchisee_partners_docs_doc\"),\n    franchiseeCertificatesDoc: varchar(\"franchisee_certificates_doc\"),\n    // Dados Financeiros\n    financialCapitalDoc: varchar(\"financial_capital_doc\"),\n    financialCashFlowDoc: varchar(\"financial_cash_flow_doc\"),\n    financialTaxReturnsDoc: varchar(\"financial_tax_returns_doc\"),\n    financialBankReferences: text(\"financial_bank_references\"),\n    financialBankReferencesDoc: varchar(\"financial_bank_references_doc\"),\n    // Dados Imobili√°rios\n    realEstateLocation: text(\"real_estate_location\"),\n    realEstatePropertyDoc: varchar(\"real_estate_property_doc\"),\n    realEstateLeaseDoc: varchar(\"real_estate_lease_doc\"),\n    realEstateFloorPlanDoc: varchar(\"real_estate_floor_plan_doc\"),\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// Staff table - funcion√°rios\nexport const staff = pgTable(\"staff\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }).notNull(),\n    unitId: varchar(\"unit_id\").references(() => units.id),\n    // Informa√ß√µes pessoais\n    cpf: varchar(\"cpf\", { length: 14 }),\n    birthDate: timestamp(\"birth_date\"),\n    gender: genderEnum(\"gender\"),\n    // Contatos\n    phone: varchar(\"phone\"),\n    whatsapp: varchar(\"whatsapp\"),\n    // Endere√ßo\n    cep: varchar(\"cep\", { length: 9 }),\n    address: text(\"address\"),\n    number: varchar(\"number\"),\n    complement: varchar(\"complement\"),\n    neighborhood: varchar(\"neighborhood\"),\n    city: varchar(\"city\"),\n    state: varchar(\"state\"),\n    // Informa√ß√µes profissionais - position agora √© varchar livre\n    position: varchar(\"position\"), // ex: \"Professor de Ingl√™s\", \"Coordenador\", etc\n    department: varchar(\"department\"),\n    salary: integer(\"salary\"),\n    hireDate: timestamp(\"hire_date\"),\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// Guardians table - respons√°veis legais\nexport const guardians = pgTable(\"guardians\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    // Informa√ß√µes pessoais\n    firstName: varchar(\"first_name\").notNull(),\n    lastName: varchar(\"last_name\").notNull(),\n    cpf: varchar(\"cpf\", { length: 14 }),\n    birthDate: timestamp(\"birth_date\"),\n    gender: genderEnum(\"gender\"),\n    // Contatos\n    email: varchar(\"email\"),\n    phone: varchar(\"phone\"),\n    whatsapp: varchar(\"whatsapp\"),\n    // Endere√ßo\n    cep: varchar(\"cep\", { length: 9 }),\n    address: text(\"address\"),\n    number: varchar(\"number\"),\n    complement: varchar(\"complement\"),\n    neighborhood: varchar(\"neighborhood\"),\n    city: varchar(\"city\"),\n    state: varchar(\"state\"),\n    // Rela√ß√£o com o aluno\n    relationship: varchar(\"relationship\"),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// Financial Responsibles table\nexport const financialResponsibles = pgTable(\"financial_responsibles\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    guardianId: varchar(\"guardian_id\").references(() => guardians.id, { onDelete: 'cascade' }).notNull(),\n    // Informa√ß√µes pessoais\n    firstName: varchar(\"first_name\").notNull(),\n    lastName: varchar(\"last_name\").notNull(),\n    cpf: varchar(\"cpf\", { length: 14 }),\n    birthDate: timestamp(\"birth_date\"),\n    gender: genderEnum(\"gender\"),\n    // Contatos\n    email: varchar(\"email\"),\n    phone: varchar(\"phone\"),\n    whatsapp: varchar(\"whatsapp\"),\n    // Endere√ßo\n    cep: varchar(\"cep\", { length: 9 }),\n    address: text(\"address\"),\n    number: varchar(\"number\"),\n    complement: varchar(\"complement\"),\n    neighborhood: varchar(\"neighborhood\"),\n    city: varchar(\"city\"),\n    state: varchar(\"state\"),\n    // Rela√ß√£o com o respons√°vel legal\n    relationship: varchar(\"relationship\"),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// Students table\nexport const students = pgTable(\"students\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }).notNull(),\n    studentId: varchar(\"student_id\").unique(),\n    unitId: varchar(\"unit_id\").references(() => units.id),\n    // Informa√ß√µes pessoais\n    cpf: varchar(\"cpf\", { length: 14 }),\n    birthDate: timestamp(\"birth_date\"),\n    gender: genderEnum(\"gender\"),\n    // Contatos\n    phone: varchar(\"phone\"),\n    whatsapp: varchar(\"whatsapp\"),\n    // Endere√ßo\n    cep: varchar(\"cep\", { length: 9 }),\n    address: text(\"address\"),\n    number: varchar(\"number\"),\n    complement: varchar(\"complement\"),\n    neighborhood: varchar(\"neighborhood\"),\n    city: varchar(\"city\"),\n    state: varchar(\"state\"),\n    // Informa√ß√µes de cobran√ßa\n    billingType: billingTypeEnum(\"billing_type\"),\n    // Respons√°vel (se menor de idade)\n    guardianId: varchar(\"guardian_id\").references(() => guardians.id),\n    enrollmentDate: timestamp(\"enrollment_date\"),\n    status: varchar(\"status\").default('active').notNull(),\n    emergencyContact: text(\"emergency_contact\"),\n    notes: text(\"notes\"),\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// ============================================================================\n// ACADEMIC TABLES\n// ============================================================================\n// Courses table\nexport const courses = pgTable(\"courses\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    name: varchar(\"name\").notNull(),\n    description: text(\"description\"),\n    language: varchar(\"language\").notNull(),\n    level: varchar(\"level\").notNull(),\n    duration: integer(\"duration\"),\n    price: integer(\"price\"),\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// Books table - livros dentro de cada curso\nexport const books = pgTable(\"books\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    courseId: varchar(\"course_id\").references(() => courses.id, { onDelete: 'cascade' }).notNull(),\n    name: varchar(\"name\").notNull(),\n    description: text(\"description\"),\n    pdfUrl: varchar(\"pdf_url\"),\n    color: varchar(\"color\").notNull().default('#3b82f6'),\n    displayOrder: integer(\"display_order\").default(1).notNull(),\n    totalDays: integer(\"total_days\").default(30).notNull(),\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// Classes table (turmas)\nexport const classes = pgTable(\"classes\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    bookId: varchar(\"book_id\").references(() => books.id, { onDelete: 'cascade' }).notNull(),\n    teacherId: varchar(\"teacher_id\").references(() => users.id).notNull(),\n    unitId: varchar(\"unit_id\").references(() => units.id).notNull(),\n    name: varchar(\"name\").notNull(),\n    schedule: text(\"schedule\"),\n    dayOfWeek: integer(\"day_of_week\"),\n    startTime: varchar(\"start_time\"),\n    endTime: varchar(\"end_time\"),\n    room: varchar(\"room\"),\n    maxStudents: integer(\"max_students\").default(15).notNull(),\n    currentStudents: integer(\"current_students\").default(0).notNull(),\n    startDate: timestamp(\"start_date\"),\n    endDate: timestamp(\"end_date\"),\n    currentDay: integer(\"current_day\").default(1).notNull(),\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// Class enrollments\nexport const classEnrollments = pgTable(\"class_enrollments\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    classId: varchar(\"class_id\").references(() => classes.id, { onDelete: 'cascade' }).notNull(),\n    studentId: varchar(\"student_id\").references(() => students.id, { onDelete: 'cascade' }).notNull(),\n    enrollmentDate: timestamp(\"enrollment_date\").defaultNow().notNull(),\n    status: varchar(\"status\").default('active').notNull(),\n    finalGrade: varchar(\"final_grade\"),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// Lessons table\nexport const lessons = pgTable(\"lessons\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    classId: varchar(\"class_id\").references(() => classes.id, { onDelete: 'cascade' }).notNull(),\n    title: varchar(\"title\").notNull(),\n    bookDay: integer(\"book_day\").notNull(),\n    date: timestamp(\"date\").notNull(),\n    startTime: varchar(\"start_time\").notNull(),\n    endTime: varchar(\"end_time\").notNull(),\n    room: varchar(\"room\"),\n    status: varchar(\"status\").default('scheduled').notNull(),\n    notes: text(\"notes\"),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// Course Units table\nexport const courseUnits = pgTable(\"course_units\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    bookId: varchar(\"book_id\").references(() => books.id, { onDelete: 'cascade' }).notNull(),\n    name: varchar(\"name\").notNull(),\n    description: text(\"description\"),\n    displayOrder: integer(\"display_order\").notNull(),\n    unitType: varchar(\"unit_type\").default('lesson').notNull(),\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// Course Videos table\nexport const courseVideos = pgTable(\"course_videos\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    unitId: varchar(\"unit_id\").references(() => courseUnits.id, { onDelete: 'cascade' }).notNull(),\n    dayNumber: integer(\"day_number\").notNull(),\n    title: varchar(\"title\").notNull(),\n    description: text(\"description\"),\n    videoUrl: varchar(\"video_url\").notNull(),\n    thumbnailUrl: varchar(\"thumbnail_url\"),\n    duration: integer(\"duration\"),\n    hasSubtitles: boolean(\"has_subtitles\").default(false).notNull(),\n    subtitlesUrl: varchar(\"subtitles_url\"),\n    displayOrder: integer(\"display_order\").notNull(),\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// Course Activities table\nexport const courseActivities = pgTable(\"course_activities\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    videoId: varchar(\"video_id\").references(() => courseVideos.id, { onDelete: 'cascade' }).notNull(),\n    activityType: varchar(\"activity_type\").notNull(),\n    title: varchar(\"title\").notNull(),\n    description: text(\"description\"),\n    instruction: text(\"instruction\"),\n    content: text(\"content\").notNull(),\n    correctAnswer: text(\"correct_answer\"),\n    points: integer(\"points\").default(10).notNull(),\n    displayOrder: integer(\"display_order\").notNull(),\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// Course Workbooks table\nexport const courseWorkbooks = pgTable(\"course_workbooks\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    bookId: varchar(\"book_id\").references(() => books.id, { onDelete: 'cascade' }).notNull(),\n    title: varchar(\"title\").notNull(),\n    description: text(\"description\"),\n    pdfUrl: varchar(\"pdf_url\"),\n    content: text(\"content\"),\n    displayOrder: integer(\"display_order\").notNull(),\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// Course Exams table\nexport const courseExams = pgTable(\"course_exams\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    bookId: varchar(\"book_id\").references(() => books.id, { onDelete: 'cascade' }).notNull(),\n    unitId: varchar(\"unit_id\").references(() => courseUnits.id),\n    title: varchar(\"title\").notNull(),\n    description: text(\"description\"),\n    examType: varchar(\"exam_type\").notNull(),\n    content: text(\"content\").notNull(),\n    totalPoints: integer(\"total_points\").default(100).notNull(),\n    passingScore: integer(\"passing_score\").default(70).notNull(),\n    timeLimit: integer(\"time_limit\"),\n    displayOrder: integer(\"display_order\").notNull(),\n    requiresTeacherReview: boolean(\"requires_teacher_review\").default(false).notNull(),\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// Student Progress table\nexport const studentProgress = pgTable(\"student_progress\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    studentId: varchar(\"student_id\").references(() => students.id, { onDelete: 'cascade' }).notNull(),\n    videoId: varchar(\"video_id\").references(() => courseVideos.id),\n    activityId: varchar(\"activity_id\").references(() => courseActivities.id),\n    examId: varchar(\"exam_id\").references(() => courseExams.id),\n    isCompleted: boolean(\"is_completed\").default(false).notNull(),\n    completedAt: timestamp(\"completed_at\"),\n    score: integer(\"score\"),\n    attempts: integer(\"attempts\").default(0).notNull(),\n    studentAnswer: text(\"student_answer\"),\n    teacherFeedback: text(\"teacher_feedback\"),\n    watchedDuration: integer(\"watched_duration\"),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// Student Course Enrollments\nexport const studentCourseEnrollments = pgTable(\"student_course_enrollments\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    studentId: varchar(\"student_id\").references(() => students.id, { onDelete: 'cascade' }).notNull(),\n    courseId: varchar(\"course_id\").references(() => courses.id, { onDelete: 'cascade' }).notNull(),\n    enrollmentDate: timestamp(\"enrollment_date\").defaultNow().notNull(),\n    currentBookId: varchar(\"current_book_id\").references(() => books.id),\n    currentUnitId: varchar(\"current_unit_id\").references(() => courseUnits.id),\n    status: varchar(\"status\").default('active').notNull(),\n    overallProgress: integer(\"overall_progress\").default(0).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// ============================================================================\n// SUPPORT & SETTINGS TABLES\n// ============================================================================\n// User Settings table\nexport const userSettings = pgTable(\"user_settings\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }).notNull().unique(),\n    theme: varchar(\"theme\").default('light').notNull(),\n    language: varchar(\"language\").default('pt-BR').notNull(),\n    timezone: varchar(\"timezone\").default('America/Sao_Paulo').notNull(),\n    dateFormat: varchar(\"date_format\").default('DD/MM/YYYY').notNull(),\n    currency: varchar(\"currency\").default('BRL').notNull(),\n    emailNotifications: boolean(\"email_notifications\").default(true).notNull(),\n    pushNotifications: boolean(\"push_notifications\").default(false).notNull(),\n    systemAlerts: boolean(\"system_alerts\").default(true).notNull(),\n    lessonReminders: boolean(\"lesson_reminders\").default(true).notNull(),\n    weeklyReports: boolean(\"weekly_reports\").default(false).notNull(),\n    autoSave: boolean(\"auto_save\").default(true).notNull(),\n    twoFactorEnabled: boolean(\"two_factor_enabled\").default(false).notNull(),\n    sessionTimeout: integer(\"session_timeout\").default(30).notNull(),\n    loginAlerts: boolean(\"login_alerts\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// Support Tickets table\nexport const supportTickets = pgTable(\"support_tickets\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    title: varchar(\"title\").notNull(),\n    description: text(\"description\").notNull(),\n    category: varchar(\"category\").notNull(),\n    priority: ticketPriorityEnum(\"priority\").default('medium').notNull(),\n    status: ticketStatusEnum(\"status\").default('open').notNull(),\n    userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }).notNull(),\n    assignedTo: varchar(\"assigned_to\").references(() => users.id),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// Support ticket responses table\nexport const supportTicketResponses = pgTable(\"support_ticket_responses\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    ticketId: varchar(\"ticket_id\").references(() => supportTickets.id, { onDelete: 'cascade' }).notNull(),\n    message: text(\"message\").notNull(),\n    isFromSupport: boolean(\"is_from_support\").default(false).notNull(),\n    userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n// Franchise Units Registration table - simplificado\nexport const franchiseUnits = pgTable(\"franchise_units\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    entityType: varchar(\"entity_type\").notNull(),\n    // Dados b√°sicos\n    fullName: text(\"full_name\"),\n    cpf: varchar(\"cpf\"),\n    cnpj: varchar(\"cnpj\"),\n    // Documentos (JSON com URLs)\n    documents: text(\"documents\"), // JSON com todos os documentos\n    // Status\n    status: varchar(\"status\").default('pending').notNull(),\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n// ============================================================================\n// RELATIONS\n// ============================================================================\nexport const usersRelations = relations(users, ({ one, many }) => ({\n    role: one(roles, {\n        fields: [users.roleId],\n        references: [roles.id],\n    }),\n    staff: one(staff, {\n        fields: [users.id],\n        references: [staff.userId],\n    }),\n    student: one(students, {\n        fields: [users.id],\n        references: [students.userId],\n    }),\n    userPermissions: many(userPermissions),\n    userSettings: one(userSettings, {\n        fields: [users.id],\n        references: [userSettings.userId],\n    }),\n}));\nexport const rolesRelations = relations(roles, ({ many }) => ({\n    users: many(users),\n    rolePermissions: many(rolePermissions),\n}));\nexport const permissionCategoriesRelations = relations(permissionCategories, ({ many }) => ({\n    permissions: many(permissions),\n}));\nexport const permissionsRelations = relations(permissions, ({ one, many }) => ({\n    category: one(permissionCategories, {\n        fields: [permissions.categoryId],\n        references: [permissionCategories.id],\n    }),\n    rolePermissions: many(rolePermissions),\n    userPermissions: many(userPermissions),\n}));\nexport const rolePermissionsRelations = relations(rolePermissions, ({ one }) => ({\n    role: one(roles, {\n        fields: [rolePermissions.roleId],\n        references: [roles.id],\n    }),\n    permission: one(permissions, {\n        fields: [rolePermissions.permissionId],\n        references: [permissions.id],\n    }),\n}));\nexport const userPermissionsRelations = relations(userPermissions, ({ one }) => ({\n    user: one(users, {\n        fields: [userPermissions.userId],\n        references: [users.id],\n    }),\n    permission: one(permissions, {\n        fields: [userPermissions.permissionId],\n        references: [permissions.id],\n    }),\n}));\nexport const staffRelations = relations(staff, ({ one }) => ({\n    user: one(users, {\n        fields: [staff.userId],\n        references: [users.id],\n    }),\n    unit: one(units, {\n        fields: [staff.unitId],\n        references: [units.id],\n    }),\n}));\nexport const studentsRelations = relations(students, ({ one, many }) => ({\n    user: one(users, {\n        fields: [students.userId],\n        references: [users.id],\n    }),\n    unit: one(units, {\n        fields: [students.unitId],\n        references: [units.id],\n    }),\n    guardian: one(guardians, {\n        fields: [students.guardianId],\n        references: [guardians.id],\n    }),\n    classEnrollments: many(classEnrollments),\n    courseEnrollments: many(studentCourseEnrollments),\n    progress: many(studentProgress),\n}));\nexport const guardiansRelations = relations(guardians, ({ one, many }) => ({\n    students: many(students),\n    financialResponsible: one(financialResponsibles, {\n        fields: [guardians.id],\n        references: [financialResponsibles.guardianId],\n    }),\n}));\nexport const financialResponsiblesRelations = relations(financialResponsibles, ({ one }) => ({\n    guardian: one(guardians, {\n        fields: [financialResponsibles.guardianId],\n        references: [guardians.id],\n    }),\n}));\nexport const coursesRelations = relations(courses, ({ many }) => ({\n    books: many(books),\n    studentEnrollments: many(studentCourseEnrollments),\n}));\nexport const booksRelations = relations(books, ({ one, many }) => ({\n    course: one(courses, {\n        fields: [books.courseId],\n        references: [courses.id],\n    }),\n    classes: many(classes),\n    units: many(courseUnits),\n    workbooks: many(courseWorkbooks),\n    exams: many(courseExams),\n}));\nexport const classesRelations = relations(classes, ({ one, many }) => ({\n    book: one(books, {\n        fields: [classes.bookId],\n        references: [books.id],\n    }),\n    teacher: one(users, {\n        fields: [classes.teacherId],\n        references: [users.id],\n    }),\n    unit: one(units, {\n        fields: [classes.unitId],\n        references: [units.id],\n    }),\n    enrollments: many(classEnrollments),\n    lessons: many(lessons),\n}));\nexport const classEnrollmentsRelations = relations(classEnrollments, ({ one }) => ({\n    class: one(classes, {\n        fields: [classEnrollments.classId],\n        references: [classes.id],\n    }),\n    student: one(students, {\n        fields: [classEnrollments.studentId],\n        references: [students.id],\n    }),\n}));\nexport const lessonsRelations = relations(lessons, ({ one }) => ({\n    class: one(classes, {\n        fields: [lessons.classId],\n        references: [classes.id],\n    }),\n}));\nexport const courseUnitsRelations = relations(courseUnits, ({ one, many }) => ({\n    book: one(books, {\n        fields: [courseUnits.bookId],\n        references: [books.id],\n    }),\n    videos: many(courseVideos),\n    exams: many(courseExams),\n}));\nexport const courseVideosRelations = relations(courseVideos, ({ one, many }) => ({\n    unit: one(courseUnits, {\n        fields: [courseVideos.unitId],\n        references: [courseUnits.id],\n    }),\n    activities: many(courseActivities),\n    progress: many(studentProgress),\n}));\nexport const courseActivitiesRelations = relations(courseActivities, ({ one, many }) => ({\n    video: one(courseVideos, {\n        fields: [courseActivities.videoId],\n        references: [courseVideos.id],\n    }),\n    progress: many(studentProgress),\n}));\nexport const studentProgressRelations = relations(studentProgress, ({ one }) => ({\n    student: one(students, {\n        fields: [studentProgress.studentId],\n        references: [students.id],\n    }),\n    video: one(courseVideos, {\n        fields: [studentProgress.videoId],\n        references: [courseVideos.id],\n    }),\n    activity: one(courseActivities, {\n        fields: [studentProgress.activityId],\n        references: [courseActivities.id],\n    }),\n    exam: one(courseExams, {\n        fields: [studentProgress.examId],\n        references: [courseExams.id],\n    }),\n}));\nexport const studentCourseEnrollmentsRelations = relations(studentCourseEnrollments, ({ one }) => ({\n    student: one(students, {\n        fields: [studentCourseEnrollments.studentId],\n        references: [students.id],\n    }),\n    course: one(courses, {\n        fields: [studentCourseEnrollments.courseId],\n        references: [courses.id],\n    }),\n    currentBook: one(books, {\n        fields: [studentCourseEnrollments.currentBookId],\n        references: [books.id],\n    }),\n    currentUnit: one(courseUnits, {\n        fields: [studentCourseEnrollments.currentUnitId],\n        references: [courseUnits.id],\n    }),\n}));\n// ============================================================================\n// SCHEMAS\n// ============================================================================\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertRoleSchema = createInsertSchema(roles).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertPermissionCategorySchema = createInsertSchema(permissionCategories).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertPermissionSchema = createInsertSchema(permissions).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertRolePermissionSchema = createInsertSchema(rolePermissions).omit({\n    id: true,\n    createdAt: true,\n});\nexport const insertUserPermissionSchema = createInsertSchema(userPermissions).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertPageSchema = createInsertSchema(pages).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertRolePagePermissionSchema = createInsertSchema(rolePagePermissions).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertUnitSchema = createInsertSchema(units).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertStaffSchema = createInsertSchema(staff).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertGuardianSchema = createInsertSchema(guardians).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n}).extend({\n    // Permite que birthDate seja uma string ISO que ser√° convertida para Date\n    birthDate: z.string().datetime().optional().transform((val) => val ? new Date(val) : undefined),\n});\nexport const insertFinancialResponsibleSchema = createInsertSchema(financialResponsibles).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n}).extend({\n    // Permite que birthDate seja uma string ISO que ser√° convertida para Date\n    birthDate: z.string().datetime().optional().transform((val) => val ? new Date(val) : undefined),\n});\nexport const insertStudentSchema = createInsertSchema(students).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n}).extend({\n    // Permite que birthDate seja uma string ISO que ser√° convertida para Date\n    birthDate: z.string().datetime().optional().transform((val) => val ? new Date(val) : undefined),\n});\nexport const insertCourseSchema = createInsertSchema(courses).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertBookSchema = createInsertSchema(books).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertClassSchema = createInsertSchema(classes).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertClassEnrollmentSchema = createInsertSchema(classEnrollments).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertLessonSchema = createInsertSchema(lessons).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertCourseUnitSchema = createInsertSchema(courseUnits).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertCourseVideoSchema = createInsertSchema(courseVideos).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertCourseActivitySchema = createInsertSchema(courseActivities).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertCourseWorkbookSchema = createInsertSchema(courseWorkbooks).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertCourseExamSchema = createInsertSchema(courseExams).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertStudentProgressSchema = createInsertSchema(studentProgress).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertStudentCourseEnrollmentSchema = createInsertSchema(studentCourseEnrollments).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertUserSettingsSchema = createInsertSchema(userSettings).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertSupportTicketSchema = createInsertSchema(supportTickets).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertSupportTicketResponseSchema = createInsertSchema(supportTicketResponses).omit({\n    id: true,\n    createdAt: true,\n});\nexport const insertFranchiseUnitSchema = createInsertSchema(franchiseUnits).omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n});\n","size_bytes":38382},"frontend/client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"frontend/client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"frontend/client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"backend/start-backend.js":{"content":"\n#!/usr/bin/env node\n\nimport { execSync } from 'child_process';\n\nconsole.log('üöÄ Starting backend server...');\n\n// Build do backend\nconsole.log('Building backend...');\nexecSync('npm run build', { stdio: 'inherit' });\n\n// Iniciar apenas o backend\nconsole.log('Starting backend on port 5052...');\nexecSync('NODE_ENV=production PORT=5052 node dist/index.js', { stdio: 'inherit' });\n","size_bytes":381},"README-FIX-DATABASE.md":{"content":"# üîß Script de Corre√ß√£o do Banco de Dados\n\nEste script resolve todos os problemas de schema no banco de dados, incluindo colunas faltantes como `is_deletable` e `franchisee_type`.\n\n## üìã O que o script faz:\n\n1. **Backup dos dados importantes** (users, roles)\n2. **Para a aplica√ß√£o** (pm2 stop all)\n3. **Recria o banco de dados** completamente\n4. **Aplica todas as migra√ß√µes** do Drizzle\n5. **Executa o seed** para recriar dados b√°sicos\n6. **Compila o TypeScript**\n7. **Reinicia a aplica√ß√£o**\n8. **Verifica se tudo est√° funcionando**\n\n## üöÄ Como executar:\n\n### No Linux/Mac (VPS):\n```bash\nchmod +x fix-database.sh\n./fix-database.sh\n```\n\n### No Windows:\n```powershell\n.\\fix-database.ps1\n```\n\n## ‚ö†Ô∏è IMPORTANTE:\n\n- **Este script apaga todos os dados do banco atual**\n- **Faz backup dos usu√°rios e roles antes**\n- **Recria usu√°rios padr√£o via seed**\n\n## üîë Usu√°rios que ser√£o criados:\n\n- `admin@escola.com` (senha: `admin123`)\n- `admin@demo.com` (senha: `demo123`)\n- Outros usu√°rios conforme definido no seed\n\n## üìä Ap√≥s executar:\n\n1. **Verificar logs**: `pm2 logs --lines 20`\n2. **Testar login** na aplica√ß√£o\n3. **Verificar se as colunas existem**:\n   ```sql\n   \\d roles    -- deve mostrar is_deletable\n   \\d units    -- deve mostrar franchisee_type\n   ```\n\n## üîÑ Se algo der errado:\n\n1. Verificar se PostgreSQL est√° rodando\n2. Verificar se as credenciais est√£o corretas\n3. Verificar logs do PM2: `pm2 logs`\n4. Reexecutar o script se necess√°rio\n\n## üìÅ Backup:\n\nOs dados antigos ficam salvos em `./backup/`:\n- `users_backup.csv`\n- `roles_backup.csv`\n\n## üéØ Resultado esperado:\n\n- ‚úÖ Banco com schema correto\n- ‚úÖ Todas as colunas presentes\n- ‚úÖ Login funcionando\n- ‚úÖ Sem erros de \"column does not exist\"","size_bytes":1745},"frontend/client/src/pages/FranchiseUnits.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { API_BASE } from \"@/lib/api\";\nimport Layout from \"@/components/Layout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertFranchiseUnitSchema } from \"@shared/schema\";\nimport { Paperclip, Upload, FileText, Trash2, Edit, Building2 } from \"lucide-react\";\nimport type { z } from \"zod\";\nimport { PageLoader, FadeIn, StaggeredFadeIn } from \"@/components/PageLoader\";\n\ntype FranchiseUnitFormData = z.infer<typeof insertFranchiseUnitSchema>;\n\nexport default function FranchiseUnits() {\n  const { toast } = useToast();\n  const { isAuthenticated, user } = useAuth();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [deleteId, setDeleteId] = useState<string | null>(null);\n  const [saveConfirmOpen, setSaveConfirmOpen] = useState(false);\n  const [pendingFormData, setPendingFormData] = useState<FranchiseUnitFormData | null>(null);\n  const [uploadedFiles, setUploadedFiles] = useState<Record<string, File>>({});\n  const [pendingFiles, setPendingFiles] = useState<Record<string, File>>({});\n\n  const { data: franchiseUnits, isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/franchise-units\"],\n    retry: false,\n  });\n\n  const form = useForm<FranchiseUnitFormData>({\n    resolver: zodResolver(insertFranchiseUnitSchema),\n    defaultValues: {\n      entityType: \"pessoa_fisica\",\n      fullName: \"\",\n      cpfNumber: \"\",\n      cpfDocument: \"\",\n      rgNumber: \"\",\n      rgDocument: \"\",\n      addressProof: \"\",\n      addressProofDocument: \"\",\n      maritalStatus: \"\",\n      maritalStatusDocument: \"\",\n      resumeDocument: \"\",\n      assetDeclarationDocument: \"\",\n      incomeProofDocument: \"\",\n      socialContractDocument: \"\",\n      cnpjNumber: \"\",\n      cnpjDocument: \"\",\n      stateRegistrationNumber: \"\",\n      stateRegistrationDocument: \"\",\n      partnersDocuments: \"\",\n      partnersDocumentsNumber: \"\",\n      negativeCertificatesDocument: \"\",\n      initialCapitalDocument: \"\",\n      cashFlowProofDocument: \"\",\n      taxReturnDocument: \"\",\n      bankReferencesContacts: \"\",\n      bankReferencesDocument: \"\",\n      desiredLocation: \"\",\n      propertyDocuments: \"\",\n      leaseContractDocument: \"\",\n      floorPlanDocument: \"\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: { formData: FranchiseUnitFormData; files: Record<string, File> }) => {\n      const formData = new FormData();\n      \n      // Add all text fields (including empty ones to satisfy Zod validation)\n      Object.entries(data.formData).forEach(([key, value]) => {\n        formData.append(key, String(value || \"\"));\n      });\n      \n      // Add all uploaded files\n      Object.entries(data.files).forEach(([fieldName, file]) => {\n        formData.append(fieldName, file);\n      });\n      \n      const response = await fetch(`${API_BASE}/api/franchise-units`, {\n        method: \"POST\",\n        headers: {\n          ...(localStorage.getItem(\"authToken\") ? { \"Authorization\": `Bearer ${localStorage.getItem(\"authToken\")}` } : {}),\n        },\n        body: formData,\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to create franchise unit\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/franchise-units\"] });\n      toast({\n        title: \"Sucesso!\",\n        description: \"Unidade franqueada cadastrada com sucesso.\",\n      });\n      setIsDialogOpen(false);\n      setUploadedFiles({});\n      setPendingFiles({});\n      form.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Falha ao cadastrar unidade. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/franchise-units/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/franchise-units\"] });\n      toast({\n        title: \"Sucesso!\",\n        description: \"Unidade exclu√≠da com sucesso.\",\n      });\n      setDeleteId(null);\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Falha ao excluir unidade. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileUpload = (fieldName: any) => {\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.accept = '.pdf';\n    input.onchange = (e: any) => {\n      const file = e.target.files?.[0];\n      if (file) {\n        setUploadedFiles(prev => ({ ...prev, [fieldName]: file }));\n        form.setValue(fieldName, file.name);\n      }\n    };\n    input.click();\n  };\n\n  const onSubmit = (data: FranchiseUnitFormData) => {\n    setPendingFormData(data);\n    setPendingFiles(uploadedFiles);\n    setSaveConfirmOpen(true);\n  };\n\n  const confirmSave = () => {\n    if (pendingFormData) {\n      createMutation.mutate({ formData: pendingFormData, files: pendingFiles });\n    }\n    setSaveConfirmOpen(false);\n    setPendingFormData(null);\n    setPendingFiles({});\n  };\n\n  const confirmDelete = () => {\n    if (deleteId) {\n      deleteMutation.mutate(deleteId);\n    }\n  };\n\n  const canManageUnits = user?.role === 'admin';\n\n  return (\n    <Layout>\n      <PageLoader>\n        <div className=\"p-6 space-y-6\">\n          <FadeIn delay={200}>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h2 className=\"text-2xl font-semibold text-foreground\">Cadastro de Unidades Franqueadas</h2>\n                <p className=\"text-sm text-muted-foreground\">Gerencie o cadastro de franqueados</p>\n              </div>\n\n              {canManageUnits && (\n                <Button onClick={() => setIsDialogOpen(true)} data-testid=\"button-new-franchise\">\n                  <Building2 className=\"mr-2 h-4 w-4\" />\n                  Nova Unidade\n                </Button>\n              )}\n            </div>\n          </FadeIn>\n\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {Array.from({ length: 3 }).map((_, index) => (\n                <Card key={index} className=\"animate-pulse\">\n                  <CardHeader>\n                    <div className=\"h-6 bg-muted rounded w-3/4\"></div>\n                    <div className=\"h-4 bg-muted rounded w-1/2\"></div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-2\">\n                      <div className=\"h-4 bg-muted rounded\"></div>\n                      <div className=\"h-4 bg-muted rounded w-2/3\"></div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : !franchiseUnits || franchiseUnits.length === 0 ? (\n            <Card>\n              <CardContent className=\"py-12 text-center\">\n                <Building2 className=\"mx-auto h-16 w-16 text-muted-foreground mb-4\" />\n                <h3 className=\"text-lg font-semibold text-foreground mb-2\">Nenhuma unidade encontrada</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  {canManageUnits\n                    ? \"Comece criando o primeiro cadastro de unidade franqueada.\"\n                    : \"N√£o h√° unidades cadastradas no sistema.\"}\n                </p>\n                {canManageUnits && (\n                  <Button onClick={() => setIsDialogOpen(true)} data-testid=\"button-create-first-franchise\">\n                    <Building2 className=\"mr-2 h-4 w-4\" />\n                    Criar primeiro cadastro\n                  </Button>\n                )}\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\" data-testid=\"franchise-units-grid\">\n              <StaggeredFadeIn stagger={150} className=\"contents\">\n                {franchiseUnits.map((unit: any) => (\n                  <Card key={unit.id} className=\"card-hover transition-smooth\" data-testid={`card-franchise-${unit.id}`}>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center space-x-2\">\n                        <Building2 className=\"text-primary h-5 w-5\" />\n                        <span>{unit.entityType === \"pessoa_fisica\" ? unit.fullName : unit.cnpjNumber}</span>\n                      </CardTitle>\n                      <CardDescription>\n                        {unit.entityType === \"pessoa_fisica\" ? \"Pessoa F√≠sica\" : \"Pessoa Jur√≠dica\"}\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2 text-sm\">\n                        {unit.entityType === \"pessoa_fisica\" && unit.cpfNumber && (\n                          <div className=\"flex items-center text-muted-foreground\">\n                            <FileText className=\"mr-2 h-4 w-4\" />\n                            <span>CPF: {unit.cpfNumber}</span>\n                          </div>\n                        )}\n                        {unit.entityType === \"pessoa_juridica\" && unit.cnpjNumber && (\n                          <div className=\"flex items-center text-muted-foreground\">\n                            <FileText className=\"mr-2 h-4 w-4\" />\n                            <span>CNPJ: {unit.cnpjNumber}</span>\n                          </div>\n                        )}\n                        {unit.desiredLocation && (\n                          <div className=\"flex items-center text-muted-foreground\">\n                            <Building2 className=\"mr-2 h-4 w-4\" />\n                            <span className=\"truncate\">{unit.desiredLocation}</span>\n                          </div>\n                        )}\n                      </div>\n                      {canManageUnits && (\n                        <div className=\"mt-4 flex space-x-2\">\n                          <Button variant=\"outline\" size=\"sm\" data-testid={`button-edit-${unit.id}`}>\n                            <Edit className=\"mr-2 h-4 w-4\" />\n                            Editar\n                          </Button>\n                          <Button variant=\"outline\" size=\"sm\" onClick={() => setDeleteId(unit.id)} data-testid={`button-delete-${unit.id}`}>\n                            <Trash2 className=\"mr-2 h-4 w-4\" />\n                            Excluir\n                          </Button>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                ))}\n              </StaggeredFadeIn>\n            </div>\n          )}\n        </div>\n\n        {/* Dialog para cadastro */}\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Cadastro de Unidade Franqueada</DialogTitle>\n              <DialogDescription>\n                Preencha os dados do franqueado conforme o tipo de cadastro\n              </DialogDescription>\n            </DialogHeader>\n\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <FormField\n                  control={form.control}\n                  name=\"entityType\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Tipo de Cadastro</FormLabel>\n                      <FormControl>\n                        <RadioGroup\n                          onValueChange={field.onChange}\n                          defaultValue={field.value}\n                          className=\"flex space-x-4\"\n                          data-testid=\"radio-entity-type\"\n                        >\n                          <div className=\"flex items-center space-x-2\">\n                            <RadioGroupItem value=\"pessoa_fisica\" id=\"pessoa_fisica\" />\n                            <label htmlFor=\"pessoa_fisica\" className=\"cursor-pointer\">Pessoa F√≠sica</label>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <RadioGroupItem value=\"pessoa_juridica\" id=\"pessoa_juridica\" />\n                            <label htmlFor=\"pessoa_juridica\" className=\"cursor-pointer\">Pessoa Jur√≠dica</label>\n                          </div>\n                        </RadioGroup>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Tabs defaultValue=\"dados_pessoa\" className=\"w-full\">\n                  <TabsList className=\"grid w-full grid-cols-4\">\n                    <TabsTrigger value=\"dados_pessoa\">Dados do Franqueado</TabsTrigger>\n                    <TabsTrigger value=\"dados_financeiros\">Dados Financeiros</TabsTrigger>\n                    <TabsTrigger value=\"dados_imobiliarios\">Dados Imobili√°rios</TabsTrigger>\n                  </TabsList>\n\n                  <TabsContent value=\"dados_pessoa\" className=\"space-y-4 mt-4\">\n                    {form.watch(\"entityType\") === \"pessoa_fisica\" ? (\n                      <>\n                        <FormField\n                          control={form.control}\n                          name=\"fullName\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Nome Completo</FormLabel>\n                              <FormControl>\n                                <Input {...field} value={field.value || \"\"} data-testid=\"input-full-name\" onKeyDown={(e) => e.stopPropagation()} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <FormField\n                            control={form.control}\n                            name=\"cpfNumber\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>CPF</FormLabel>\n                                <FormControl>\n                                  <Input {...field} value={field.value || \"\"} placeholder=\"000.000.000-00\" data-testid=\"input-cpf-number\" onKeyDown={(e) => e.stopPropagation()} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={form.control}\n                            name=\"cpfDocument\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Anexar PDF do CPF</FormLabel>\n                                <FormControl>\n                                  <div className=\"flex gap-2\">\n                                    <Input {...field} value={field.value || \"\"} readOnly placeholder=\"Nenhum arquivo selecionado\" data-testid=\"input-cpf-document\" onKeyDown={(e) => e.stopPropagation()} />\n                                    <Button type=\"button\" size=\"sm\" variant=\"outline\" onClick={() => handleFileUpload(\"cpfDocument\")} data-testid=\"button-upload-cpf\">\n                                      <Paperclip className=\"h-4 w-4\" />\n                                    </Button>\n                                  </div>\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <FormField\n                            control={form.control}\n                            name=\"rgNumber\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>RG</FormLabel>\n                                <FormControl>\n                                  <Input {...field} value={field.value || \"\"} data-testid=\"input-rg-number\" onKeyDown={(e) => e.stopPropagation()} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={form.control}\n                            name=\"rgDocument\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Anexar PDF do RG</FormLabel>\n                                <FormControl>\n                                  <div className=\"flex gap-2\">\n                                    <Input {...field} value={field.value || \"\"} readOnly placeholder=\"Nenhum arquivo selecionado\" data-testid=\"input-rg-document\" onKeyDown={(e) => e.stopPropagation()} />\n                                    <Button type=\"button\" size=\"sm\" variant=\"outline\" onClick={() => handleFileUpload(\"rgDocument\")} data-testid=\"button-upload-rg\">\n                                      <Paperclip className=\"h-4 w-4\" />\n                                    </Button>\n                                  </div>\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <FormField\n                            control={form.control}\n                            name=\"addressProof\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Comprovante de Resid√™ncia (Endere√ßo)</FormLabel>\n                                <FormControl>\n                                  <Input {...field} value={field.value || \"\"} data-testid=\"input-address-proof\" onKeyDown={(e) => e.stopPropagation()} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={form.control}\n                            name=\"addressProofDocument\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Anexar PDF</FormLabel>\n                                <FormControl>\n                                  <div className=\"flex gap-2\">\n                                    <Input {...field} value={field.value || \"\"} readOnly placeholder=\"Nenhum arquivo selecionado\" data-testid=\"input-address-proof-document\" onKeyDown={(e) => e.stopPropagation()} />\n                                    <Button type=\"button\" size=\"sm\" variant=\"outline\" onClick={() => handleFileUpload(\"addressProofDocument\")} data-testid=\"button-upload-address-proof\">\n                                      <Paperclip className=\"h-4 w-4\" />\n                                    </Button>\n                                  </div>\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <FormField\n                            control={form.control}\n                            name=\"maritalStatus\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Estado Civil e Regime de Bens</FormLabel>\n                                <FormControl>\n                                  <Input {...field} value={field.value || \"\"} data-testid=\"input-marital-status\" onKeyDown={(e) => e.stopPropagation()} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={form.control}\n                            name=\"maritalStatusDocument\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Anexar PDF</FormLabel>\n                                <FormControl>\n                                  <div className=\"flex gap-2\">\n                                    <Input {...field} value={field.value || \"\"} readOnly placeholder=\"Nenhum arquivo selecionado\" data-testid=\"input-marital-status-document\" onKeyDown={(e) => e.stopPropagation()} />\n                                    <Button type=\"button\" size=\"sm\" variant=\"outline\" onClick={() => handleFileUpload(\"maritalStatusDocument\")} data-testid=\"button-upload-marital-status\">\n                                      <Paperclip className=\"h-4 w-4\" />\n                                    </Button>\n                                  </div>\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        <FormField\n                          control={form.control}\n                          name=\"resumeDocument\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Curr√≠culo ou Hist√≥rico Profissional/Empresarial</FormLabel>\n                              <FormControl>\n                                <div className=\"flex gap-2\">\n                                  <Input {...field} value={field.value || \"\"} readOnly placeholder=\"Nenhum arquivo selecionado\" data-testid=\"input-resume-document\" onKeyDown={(e) => e.stopPropagation()} />\n                                  <Button type=\"button\" size=\"sm\" variant=\"outline\" onClick={() => handleFileUpload(\"resumeDocument\")} data-testid=\"button-upload-resume\">\n                                    <Paperclip className=\"h-4 w-4\" />\n                                  </Button>\n                                </div>\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"assetDeclarationDocument\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Declara√ß√£o de Bens e Situa√ß√£o Patrimonial</FormLabel>\n                              <FormControl>\n                                <div className=\"flex gap-2\">\n                                  <Input {...field} value={field.value || \"\"} readOnly placeholder=\"Nenhum arquivo selecionado\" data-testid=\"input-asset-declaration-document\" onKeyDown={(e) => e.stopPropagation()} />\n                                  <Button type=\"button\" size=\"sm\" variant=\"outline\" onClick={() => handleFileUpload(\"assetDeclarationDocument\")} data-testid=\"button-upload-asset-declaration\">\n                                    <Paperclip className=\"h-4 w-4\" />\n                                  </Button>\n                                </div>\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"incomeProofDocument\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Comprovante de Renda/Capacidade Financeira</FormLabel>\n                              <FormControl>\n                                <div className=\"flex gap-2\">\n                                  <Input {...field} value={field.value || \"\"} readOnly placeholder=\"Nenhum arquivo selecionado\" data-testid=\"input-income-proof-document\" onKeyDown={(e) => e.stopPropagation()} />\n                                  <Button type=\"button\" size=\"sm\" variant=\"outline\" onClick={() => handleFileUpload(\"incomeProofDocument\")} data-testid=\"button-upload-income-proof\">\n                                    <Paperclip className=\"h-4 w-4\" />\n                                  </Button>\n                                </div>\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </>\n                    ) : (\n                      <>\n                        <FormField\n                          control={form.control}\n                          name=\"socialContractDocument\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Contrato Social/Estatuto</FormLabel>\n                              <FormControl>\n                                <div className=\"flex gap-2\">\n                                  <Input {...field} value={field.value || \"\"} readOnly placeholder=\"Nenhum arquivo selecionado\" data-testid=\"input-social-contract-document\" onKeyDown={(e) => e.stopPropagation()} />\n                                  <Button type=\"button\" size=\"sm\" variant=\"outline\" onClick={() => handleFileUpload(\"socialContractDocument\")} data-testid=\"button-upload-social-contract\">\n                                    <Paperclip className=\"h-4 w-4\" />\n                                  </Button>\n                                </div>\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <FormField\n                            control={form.control}\n                            name=\"cnpjNumber\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>CNPJ</FormLabel>\n                                <FormControl>\n                                  <Input {...field} value={field.value || \"\"} placeholder=\"00.000.000/0000-00\" data-testid=\"input-cnpj-number\" onKeyDown={(e) => e.stopPropagation()} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={form.control}\n                            name=\"cnpjDocument\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Anexar PDF do CNPJ</FormLabel>\n                                <FormControl>\n                                  <div className=\"flex gap-2\">\n                                    <Input {...field} value={field.value || \"\"} readOnly placeholder=\"Nenhum arquivo selecionado\" data-testid=\"input-cnpj-document\" onKeyDown={(e) => e.stopPropagation()} />\n                                    <Button type=\"button\" size=\"sm\" variant=\"outline\" onClick={() => handleFileUpload(\"cnpjDocument\")} data-testid=\"button-upload-cnpj\">\n                                      <Paperclip className=\"h-4 w-4\" />\n                                    </Button>\n                                  </div>\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <FormField\n                            control={form.control}\n                            name=\"stateRegistrationNumber\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Inscri√ß√£o Estadual/Municipal</FormLabel>\n                                <FormControl>\n                                  <Input {...field} value={field.value || \"\"} data-testid=\"input-state-registration-number\" onKeyDown={(e) => e.stopPropagation()} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={form.control}\n                            name=\"stateRegistrationDocument\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Anexar PDF</FormLabel>\n                                <FormControl>\n                                  <div className=\"flex gap-2\">\n                                    <Input {...field} value={field.value || \"\"} readOnly placeholder=\"Nenhum arquivo selecionado\" data-testid=\"input-state-registration-document\" onKeyDown={(e) => e.stopPropagation()} />\n                                    <Button type=\"button\" size=\"sm\" variant=\"outline\" onClick={() => handleFileUpload(\"stateRegistrationDocument\")} data-testid=\"button-upload-state-registration\">\n                                      <Paperclip className=\"h-4 w-4\" />\n                                    </Button>\n                                  </div>\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <FormField\n                            control={form.control}\n                            name=\"partnersDocumentsNumber\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Documentos dos S√≥cios (CPF, RG, etc)</FormLabel>\n                                <FormControl>\n                                  <Input {...field} value={field.value || \"\"} data-testid=\"input-partners-documents-number\" onKeyDown={(e) => e.stopPropagation()} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={form.control}\n                            name=\"partnersDocuments\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Anexar PDF</FormLabel>\n                                <FormControl>\n                                  <div className=\"flex gap-2\">\n                                    <Input {...field} value={field.value || \"\"} readOnly placeholder=\"Nenhum arquivo selecionado\" data-testid=\"input-partners-documents\" onKeyDown={(e) => e.stopPropagation()} />\n                                    <Button type=\"button\" size=\"sm\" variant=\"outline\" onClick={() => handleFileUpload(\"partnersDocuments\")} data-testid=\"button-upload-partners-documents\">\n                                      <Paperclip className=\"h-4 w-4\" />\n                                    </Button>\n                                  </div>\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        <FormField\n                          control={form.control}\n                          name=\"negativeCertificatesDocument\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Certid√µes Negativas (Tribut√°rias, Trabalhistas e C√≠veis)</FormLabel>\n                              <FormControl>\n                                <div className=\"flex gap-2\">\n                                  <Input {...field} value={field.value || \"\"} readOnly placeholder=\"Nenhum arquivo selecionado\" data-testid=\"input-negative-certificates-document\" onKeyDown={(e) => e.stopPropagation()} />\n                                  <Button type=\"button\" size=\"sm\" variant=\"outline\" onClick={() => handleFileUpload(\"negativeCertificatesDocument\")} data-testid=\"button-upload-negative-certificates\">\n                                    <Paperclip className=\"h-4 w-4\" />\n                                  </Button>\n                                </div>\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </>\n                    )}\n                  </TabsContent>\n\n                  <TabsContent value=\"dados_financeiros\" className=\"space-y-4 mt-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"initialCapitalDocument\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Capital Dispon√≠vel para Investimento Inicial</FormLabel>\n                          <FormControl>\n                            <div className=\"flex gap-2\">\n                              <Input {...field} value={field.value || \"\"} readOnly placeholder=\"Nenhum arquivo selecionado\" data-testid=\"input-initial-capital-document\" onKeyDown={(e) => e.stopPropagation()} />\n                              <Button type=\"button\" size=\"sm\" variant=\"outline\" onClick={() => handleFileUpload(\"initialCapitalDocument\")} data-testid=\"button-upload-initial-capital\">\n                                <Paperclip className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"cashFlowProofDocument\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Prova de Capacidade de Giro (recursos para os primeiros meses)</FormLabel>\n                          <FormControl>\n                            <div className=\"flex gap-2\">\n                              <Input {...field} value={field.value || \"\"} readOnly placeholder=\"Nenhum arquivo selecionado\" data-testid=\"input-cash-flow-proof-document\" onKeyDown={(e) => e.stopPropagation()} />\n                              <Button type=\"button\" size=\"sm\" variant=\"outline\" onClick={() => handleFileUpload(\"cashFlowProofDocument\")} data-testid=\"button-upload-cash-flow-proof\">\n                                <Paperclip className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"taxReturnDocument\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Declara√ß√£o de Imposto de Renda (Pessoa F√≠sica ou Jur√≠dica)</FormLabel>\n                          <FormControl>\n                            <div className=\"flex gap-2\">\n                              <Input {...field} value={field.value || \"\"} readOnly placeholder=\"Nenhum arquivo selecionado\" data-testid=\"input-tax-return-document\" onKeyDown={(e) => e.stopPropagation()} />\n                              <Button type=\"button\" size=\"sm\" variant=\"outline\" onClick={() => handleFileUpload(\"taxReturnDocument\")} data-testid=\"button-upload-tax-return\">\n                                <Paperclip className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"bankReferencesContacts\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Refer√™ncias Banc√°rias e Comerciais (Contatos)</FormLabel>\n                            <FormControl>\n                              <Input {...field} value={field.value || \"\"} data-testid=\"input-bank-references-contacts\" onKeyDown={(e) => e.stopPropagation()} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"bankReferencesDocument\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Anexar PDF</FormLabel>\n                            <FormControl>\n                              <div className=\"flex gap-2\">\n                                <Input {...field} value={field.value || \"\"} readOnly placeholder=\"Nenhum arquivo selecionado\" data-testid=\"input-bank-references-document\" onKeyDown={(e) => e.stopPropagation()} />\n                                <Button type=\"button\" size=\"sm\" variant=\"outline\" onClick={() => handleFileUpload(\"bankReferencesDocument\")} data-testid=\"button-upload-bank-references\">\n                                  <Paperclip className=\"h-4 w-4\" />\n                                </Button>\n                              </div>\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  </TabsContent>\n\n                  <TabsContent value=\"dados_imobiliarios\" className=\"space-y-4 mt-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"desiredLocation\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Localiza√ß√£o Pretendida (Link)</FormLabel>\n                          <FormControl>\n                            <Input {...field} value={field.value || \"\"} placeholder=\"https://maps.google.com/...\" data-testid=\"input-desired-location\" onKeyDown={(e) => e.stopPropagation()} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"propertyDocuments\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Documentos do Im√≥vel (se pr√≥prio ou locado)</FormLabel>\n                          <FormControl>\n                            <div className=\"flex gap-2\">\n                              <Input {...field} value={field.value || \"\"} readOnly placeholder=\"Nenhum arquivo selecionado\" data-testid=\"input-property-documents\" onKeyDown={(e) => e.stopPropagation()} />\n                              <Button type=\"button\" size=\"sm\" variant=\"outline\" onClick={() => handleFileUpload(\"propertyDocuments\")} data-testid=\"button-upload-property-documents\">\n                                <Paperclip className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"leaseContractDocument\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Contrato de Loca√ß√£o (se j√° existente)</FormLabel>\n                          <FormControl>\n                            <div className=\"flex gap-2\">\n                              <Input {...field} value={field.value || \"\"} readOnly placeholder=\"Nenhum arquivo selecionado\" data-testid=\"input-lease-contract-document\" onKeyDown={(e) => e.stopPropagation()} />\n                              <Button type=\"button\" size=\"sm\" variant=\"outline\" onClick={() => handleFileUpload(\"leaseContractDocument\")} data-testid=\"button-upload-lease-contract\">\n                                <Paperclip className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"floorPlanDocument\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Planta Baixa ou Croqui da Unidade</FormLabel>\n                          <FormControl>\n                            <div className=\"flex gap-2\">\n                              <Input {...field} value={field.value || \"\"} readOnly placeholder=\"Nenhum arquivo selecionado\" data-testid=\"input-floor-plan-document\" onKeyDown={(e) => e.stopPropagation()} />\n                              <Button type=\"button\" size=\"sm\" variant=\"outline\" onClick={() => handleFileUpload(\"floorPlanDocument\")} data-testid=\"button-upload-floor-plan\">\n                                <Paperclip className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </TabsContent>\n                </Tabs>\n\n                <DialogFooter className=\"flex justify-end space-x-2\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setIsDialogOpen(false)} data-testid=\"button-cancel\">\n                    Cancelar\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={createMutation.isPending}\n                    data-testid=\"button-save\"\n                  >\n                    {createMutation.isPending ? \"Salvando...\" : \"Cadastrar\"}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Modal de confirma√ß√£o para salvar */}\n        <AlertDialog open={saveConfirmOpen} onOpenChange={setSaveConfirmOpen}>\n          <AlertDialogContent data-testid=\"modal-save-confirm\">\n            <AlertDialogHeader>\n              <AlertDialogTitle>Confirmar Cadastro</AlertDialogTitle>\n              <AlertDialogDescription>\n                Tem certeza que deseja cadastrar esta unidade franqueada? Verifique se todos os dados est√£o corretos.\n              </AlertDialogDescription>\n            </AlertDialogHeader>\n            <AlertDialogFooter>\n              <AlertDialogCancel data-testid=\"button-cancel-save\">Cancelar</AlertDialogCancel>\n              <AlertDialogAction onClick={confirmSave} data-testid=\"button-confirm-save\">Confirmar</AlertDialogAction>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialog>\n\n        {/* Modal de confirma√ß√£o para excluir */}\n        <AlertDialog open={!!deleteId} onOpenChange={() => setDeleteId(null)}>\n          <AlertDialogContent data-testid=\"modal-delete-confirm\">\n            <AlertDialogHeader>\n              <AlertDialogTitle>Confirmar Exclus√£o</AlertDialogTitle>\n              <AlertDialogDescription>\n                Tem certeza que deseja excluir esta unidade franqueada? Esta a√ß√£o n√£o pode ser desfeita.\n              </AlertDialogDescription>\n            </AlertDialogHeader>\n            <AlertDialogFooter>\n              <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancelar</AlertDialogCancel>\n              <AlertDialogAction onClick={confirmDelete} className=\"bg-destructive text-destructive-foreground\" data-testid=\"button-confirm-delete\">\n                Excluir\n              </AlertDialogAction>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialog>\n      </PageLoader>\n    </Layout>\n  );\n}\n","size_bytes":46652},"backend/drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":351},"frontend/client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"backend/start-all.js":{"content":"\n#!/usr/bin/env node\n\nimport { execSync } from 'child_process';\nimport fs from 'fs';\n\nconsole.log('üöÄ Iniciando configura√ß√£o completa do backend...');\n\n// Verificar se o .env existe\nif (!fs.existsSync('.env')) {\n  console.log('‚ùå Arquivo .env n√£o encontrado na raiz do projeto!');\n  console.log('üìù Copie o arquivo .env.example para .env e configure as vari√°veis');\n  process.exit(1);\n}\n\ntry {\n  // 1. Instalar depend√™ncias do backend\n  console.log('üì¶ Instalando depend√™ncias do backend...');\n  execSync('npm install', { stdio: 'inherit', cwd: './backend' });\n\n  // 2. Executar setup do banco\n  console.log('üóÑÔ∏è  Configurando banco de dados PostgreSQL...');\n  execSync('node setup.js', { stdio: 'inherit', cwd: './backend' });\n\n  // 3. Executar migrations se necess√°rio\n  console.log('üîÑ Executando push do schema...');\n  execSync('npm run db:push', { stdio: 'inherit', cwd: './backend' });\n\n  console.log('‚úÖ Backend configurado com sucesso!');\n  console.log('');\n  console.log('üéØ Para iniciar o backend:');\n  console.log('   cd backend && npm run dev');\n  console.log('');\n  console.log('üåê Servidor rodar√° em: http://localhost:5052');\n\n} catch (error) {\n  console.error('‚ùå Erro durante a configura√ß√£o:', error.message);\n  process.exit(1);\n}\n","size_bytes":1276},"frontend/client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/contexts/ThemeContext\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/Landing\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport Units from \"@/pages/Units\";\nimport FranchiseUnits from \"@/pages/FranchiseUnits\";\nimport Staff from \"@/pages/Staff\";\nimport Students from \"@/pages/Students\";\nimport Courses from \"@/pages/Courses\";\nimport Schedule from \"@/pages/Schedule\";\nimport ScheduleManagement from \"@/pages/ScheduleManagement\";\nimport TeacherIndividualSchedule from \"@/pages/TeacherIndividualSchedule\";\nimport StudentArea from \"@/pages/StudentArea\";\nimport TeacherArea from \"@/pages/TeacherArea\";\nimport Financial from \"@/pages/Financial\";\nimport Permissions from \"@/pages/Permissions\";\nimport Settings from \"@/pages/Settings\";\nimport Support from \"@/pages/Support\";\nimport StudentProgress from \"@/pages/StudentProgress\";\nimport StudentSchedule from \"@/pages/StudentSchedule\";\nimport StudentWorkbook from \"@/pages/StudentWorkbook\";\nimport StudentExams from \"@/pages/StudentExams\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading, user } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {!isAuthenticated ? (\n        <>\n          <Route path=\"/\" component={Landing} />\n        </>\n      ) : user?.role === 'student' ? (\n        <>\n          <Route path=\"/\" component={StudentArea} />\n          <Route path=\"/student-area\" component={StudentArea} />\n          <Route path=\"/support\" component={Support} />\n          <Route path=\"/aluno/workbook\" component={StudentWorkbook} />\n          <Route path=\"/aluno/provas\" component={StudentExams} />\n          <Route path=\"/aluno/cronograma\" component={StudentSchedule} />\n          <Route path=\"/aluno/progresso\" component={StudentProgress} />\n        </>\n      ) : (\n        <>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/units\" component={Units} />\n          <Route path=\"/franchise-units\" component={FranchiseUnits} />\n          <Route path=\"/staff\" component={Staff} />\n          <Route path=\"/students\" component={Students} />\n          <Route path=\"/courses\" component={Courses} />\n          <Route path=\"/schedule\" component={Schedule} />\n          <Route path=\"/schedule-management\" component={ScheduleManagement} />\n          <Route path=\"/teacher-individual-schedule\" component={TeacherIndividualSchedule} />\n          <Route path=\"/professor\" component={TeacherArea} />\n          <Route path=\"/financial\" component={Financial} />\n          <Route path=\"/permissions\" component={Permissions} />\n          <Route path=\"/settings\" component={Settings} />\n          <Route path=\"/support\" component={Support} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <div className=\"theme-transition\">\n            <Toaster />\n            <Router />\n          </div>\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3610},"frontend/client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"frontend/client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"frontend/client/src/pages/Students.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { displayDateBR } from \"@/lib/cpfUtils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient, extractErrorMessage } from \"@/lib/queryClient\";\nimport Layout from \"@/components/Layout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { StudentModal } from \"@/components/StudentModal\";\nimport { StudentProfileModal } from \"@/components/StudentProfileModal\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\n\nexport default function Students() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading: authLoading, user } = useAuth();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCourse, setSelectedCourse] = useState(\"\");\n  const [viewMode, setViewMode] = useState<\"card\" | \"list\">(\"card\");\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectedStudent, setSelectedStudent] = useState<any>(null);\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n  const [studentToDelete, setStudentToDelete] = useState<any>(null);\n  const [isProfileModalOpen, setIsProfileModalOpen] = useState(false);\n  const [studentToView, setStudentToView] = useState<any>(null);\n\n  const { data: students, isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/students\"],\n    retry: false,\n  });\n\n  const { data: courses } = useQuery<any[]>({\n    queryKey: [\"/api/courses\"],\n    retry: false,\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"DELETE\", `/api/students/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/students\"] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Aluno deletado com sucesso\",\n      });\n      setIsDeleteDialogOpen(false);\n      setStudentToDelete(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: extractErrorMessage(error) || \"Erro ao deletar aluno\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreate = () => {\n    setSelectedStudent(null);\n    setIsModalOpen(true);\n  };\n\n  const handleEdit = (student: any) => {\n    setSelectedStudent(student);\n    setIsModalOpen(true);\n  };\n\n  const handleViewProfile = (student: any) => {\n    setStudentToView(student);\n    setIsProfileModalOpen(true);\n  };\n\n  const handleDelete = (student: any) => {\n    setStudentToDelete(student);\n    setIsDeleteDialogOpen(true);\n  };\n\n  const confirmDelete = () => {\n    if (studentToDelete) {\n      deleteMutation.mutate(studentToDelete.id);\n    }\n  };\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"N√£o autorizado\",\n        description: \"Voc√™ foi desconectado. Fazendo login novamente...\",\n        variant: \"destructive\"\n      });\n      setTimeout(() => {\n        window.location.href = \"/landing\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  if (authLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  // Check permissions\n  const canManageStudents = user?.role === 'admin' || user?.role === 'secretary' || user?.role === 'teacher';\n\n  // Get unique courses from student enrollments\n  const courseOptions = courses?.filter(course => course.isActive)?.map(course => ({\n    value: course.id,\n    label: `${course.name} - ${course.level}`\n  })) || [];\n\n  // Filter students based on search term and selected course\n  const filteredStudents = students?.filter((student: any) => {\n    // Filter by search term\n    if (searchTerm) {\n      const fullName = `${student.user?.firstName} ${student.user?.lastName}`.toLowerCase();\n      const email = student.user?.email?.toLowerCase() || \"\";\n      const studentId = student.studentId?.toLowerCase() || \"\";\n      const matchesSearch = fullName.includes(searchTerm.toLowerCase()) || \n                           email.includes(searchTerm.toLowerCase()) ||\n                           studentId.includes(searchTerm.toLowerCase());\n      if (!matchesSearch) return false;\n    }\n\n    // Filter by selected course\n     if (selectedCourse && selectedCourse !== \"all\") {\n       // Check if student has enrollments in the selected course\n       const hasEnrollment = student.enrollments?.some((enrollment: any) => \n         enrollment.courseId === selectedCourse\n       );\n       if (!hasEnrollment) return false;\n     }\n\n    return true;\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'bg-green-100 text-green-700';\n      case 'inactive': return 'bg-gray-100 text-gray-700';\n      case 'graduated': return 'bg-blue-100 text-blue-700';\n      default: return 'bg-gray-100 text-gray-700';\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'active': return 'Ativo';\n      case 'inactive': return 'Inativo';\n      case 'graduated': return 'Formado';\n      default: return status;\n    }\n  };\n\n  return (\n    <Layout>\n      <div className=\"p-6 space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-semibold text-foreground\">Alunos</h2>\n            <p className=\"text-sm text-muted-foreground\">Gerencie os estudantes da escola</p>\n          </div>\n          \n          {canManageStudents && (\n            <Button onClick={handleCreate} data-testid=\"button-new-student\">\n              <i className=\"fas fa-plus mr-2\"></i>\n              Novo Aluno\n            </Button>\n          )}\n        </div>\n\n        {/* Filtros e Controles */}\n        <div className=\"flex justify-between items-center\">\n          <div></div> {/* Espa√ßo vazio √† esquerda */}\n          \n          <div className=\"flex items-center gap-3\">\n            {/* Filtro por Nome */}\n            <Input\n              placeholder=\"Buscar alunos...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"w-64\"\n              data-testid=\"input-search-students\"\n            />\n            \n            {/* Filtro por Curso */}\n            <Select value={selectedCourse} onValueChange={setSelectedCourse}>\n              <SelectTrigger className=\"w-48\">\n                <SelectValue placeholder=\"Filtrar por curso\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Todos os cursos</SelectItem>\n                {courseOptions.map((course) => (\n                  <SelectItem key={course.value} value={course.value}>\n                    {course.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            \n            {/* Modo de Visualiza√ß√£o - Apenas √çcones */}\n            <div className=\"flex gap-1 border rounded-md p-1\">\n              <Button\n                variant={viewMode === \"card\" ? \"default\" : \"ghost\"}\n                size=\"sm\"\n                onClick={() => setViewMode(\"card\")}\n                data-testid=\"button-view-card\"\n                className=\"px-3\"\n              >\n                <i className=\"fas fa-th\"></i>\n              </Button>\n              <Button\n                variant={viewMode === \"list\" ? \"default\" : \"ghost\"}\n                size=\"sm\"\n                onClick={() => setViewMode(\"list\")}\n                data-testid=\"button-view-list\"\n                className=\"px-3\"\n              >\n                <i className=\"fas fa-list\"></i>\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {Array.from({ length: 6 }).map((_, index) => (\n              <Card key={index} className=\"animate-pulse\">\n                <CardHeader>\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-12 h-12 bg-muted rounded-full\"></div>\n                    <div className=\"flex-1 space-y-2\">\n                      <div className=\"h-5 bg-muted rounded w-3/4\"></div>\n                      <div className=\"h-4 bg-muted rounded w-1/2\"></div>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    <div className=\"h-4 bg-muted rounded\"></div>\n                    <div className=\"h-4 bg-muted rounded w-2/3\"></div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : !filteredStudents || filteredStudents.length === 0 ? (\n          <Card>\n            <CardContent className=\"py-12 text-center\">\n              <i className=\"fas fa-user-graduate text-muted-foreground text-6xl mb-4\"></i>\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n                {(searchTerm || (selectedCourse && selectedCourse !== \"all\")) ? \"Nenhum aluno encontrado\" : \"Nenhum aluno cadastrado\"}\n              </h3>\n              <p className=\"text-muted-foreground mb-4\">\n                {(searchTerm || (selectedCourse && selectedCourse !== \"all\"))\n                   ? \"Tente ajustar os filtros de busca.\" \n                   : canManageStudents \n                   ? \"Comece cadastrando seus primeiros alunos.\" \n                   : \"N√£o h√° alunos cadastrados no sistema.\"}\n              </p>\n              {canManageStudents && !searchTerm && !(selectedCourse && selectedCourse !== \"all\") && (\n                <Button onClick={handleCreate} data-testid=\"button-create-first-student\">\n                  <i className=\"fas fa-plus mr-2\"></i>\n                  Cadastrar primeiro aluno\n                </Button>\n              )}\n            </CardContent>\n          </Card>\n        ) : (\n          <>\n            <div className=\"flex items-center justify-between\">\n              <p className=\"text-sm text-muted-foreground\">\n                {filteredStudents.length} {filteredStudents.length === 1 ? 'aluno encontrado' : 'alunos encontrados'}\n                {(searchTerm || (selectedCourse && selectedCourse !== \"all\")) && ` (filtrado de ${students?.length || 0} total)`}\n              </p>\n            </div>\n            \n            {viewMode === \"card\" ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\" data-testid=\"students-grid\">\n                {filteredStudents.map((student: any) => (\n                  <Card key={student.id} className=\"card-hover transition-smooth\" data-testid={`card-student-${student.id}`}>\n                    <CardHeader>\n                      <div className=\"flex items-center space-x-4\">\n                        <Avatar className=\"w-12 h-12\">\n                          <AvatarImage src={student.user?.profileImageUrl} />\n                          <AvatarFallback>\n                            <i className=\"fas fa-user-graduate text-lg\"></i>\n                          </AvatarFallback>\n                        </Avatar>\n                        <div className=\"flex-1\">\n                          <CardTitle className=\"text-lg\">\n                            {student.user?.firstName} {student.user?.lastName}\n                          </CardTitle>\n                          <CardDescription className=\"flex items-center space-x-2\">\n                            <Badge className={getStatusColor(student.status)}>\n                              {getStatusText(student.status)}\n                            </Badge>\n                            {student.studentId && (\n                              <span className=\"text-xs text-muted-foreground\">\n                                ID: {student.studentId}\n                              </span>\n                            )}\n                          </CardDescription>\n                        </div>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2\">\n                        {student.user?.email && (\n                          <div className=\"flex items-center text-sm text-muted-foreground\">\n                            <i className=\"fas fa-envelope mr-2 w-4\"></i>\n                            <span className=\"truncate\">{student.user.email}</span>\n                          </div>\n                        )}\n                        {student.enrollmentDate && (\n                          <div className=\"flex items-center text-sm text-muted-foreground\">\n                            <i className=\"fas fa-calendar mr-2 w-4\"></i>\n                            <span>Matr√≠cula: {displayDateBR(student.enrollmentDate)}</span>\n                          </div>\n                        )}\n                        <div className=\"flex items-center text-sm text-muted-foreground\">\n                          <i className=\"fas fa-book mr-2 w-4\"></i>\n                          <span>0 cursos ativos</span>\n                        </div>\n                      </div>\n                      {canManageStudents && (\n                        <div className=\"mt-4 flex flex-wrap gap-2\">\n                          <Button variant=\"outline\" size=\"sm\" onClick={() => handleEdit(student)} data-testid={`button-edit-${student.id}`}>\n                            <i className=\"fas fa-edit mr-2\"></i>\n                            Editar\n                          </Button>\n                          <Button variant=\"outline\" size=\"sm\" onClick={() => handleViewProfile(student)} data-testid={`button-view-${student.id}`}>\n                            <i className=\"fas fa-eye mr-2\"></i>\n                            Ver perfil\n                          </Button>\n                          <Button variant=\"destructive\" size=\"sm\" onClick={() => handleDelete(student)} data-testid={`button-delete-${student.id}`}>\n                            <i className=\"fas fa-trash mr-2\"></i>\n                            Excluir\n                          </Button>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <div className=\"border rounded-lg\" data-testid=\"students-table\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Aluno</TableHead>\n                      <TableHead>Email</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>ID do Aluno</TableHead>\n                      <TableHead>Data de Matr√≠cula</TableHead>\n                      {canManageStudents && <TableHead className=\"text-right\">A√ß√µes</TableHead>}\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredStudents.map((student: any) => (\n                      <TableRow key={student.id} data-testid={`row-student-${student.id}`}>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-3\">\n                            <Avatar className=\"w-8 h-8\">\n                              <AvatarImage src={student.user?.profileImageUrl} />\n                              <AvatarFallback>\n                                <i className=\"fas fa-user-graduate text-sm\"></i>\n                              </AvatarFallback>\n                            </Avatar>\n                            <div>\n                              <div className=\"font-medium\">\n                                {student.user?.firstName} {student.user?.lastName}\n                              </div>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"text-muted-foreground\">\n                          {student.user?.email || \"-\"}\n                        </TableCell>\n                        <TableCell>\n                          <Badge className={getStatusColor(student.status)}>\n                            {getStatusText(student.status)}\n                          </Badge>\n                        </TableCell>\n                        <TableCell className=\"text-muted-foreground\">\n                          {student.studentId || \"-\"}\n                        </TableCell>\n                        <TableCell className=\"text-muted-foreground\">\n                          {displayDateBR(student.enrollmentDate)}\n                        </TableCell>\n                        {canManageStudents && (\n                          <TableCell className=\"text-right\">\n                            <div className=\"flex items-center justify-end space-x-2\">\n                              <Button variant=\"outline\" size=\"sm\" onClick={() => handleEdit(student)} data-testid={`button-edit-${student.id}`}>\n                                <i className=\"fas fa-edit mr-2\"></i>\n                                Editar\n                              </Button>\n                              <Button variant=\"outline\" size=\"sm\" onClick={() => handleViewProfile(student)} data-testid={`button-view-${student.id}`}>\n                                <i className=\"fas fa-eye mr-2\"></i>\n                                Ver perfil\n                              </Button>\n                              <Button variant=\"destructive\" size=\"sm\" onClick={() => handleDelete(student)} data-testid={`button-delete-${student.id}`}>\n                                <i className=\"fas fa-trash mr-2\"></i>\n                                Excluir\n                              </Button>\n                            </div>\n                          </TableCell>\n                        )}\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            )}\n          </>\n        )}\n      </div>\n\n  <StudentModal\n    open={isModalOpen}\n    onOpenChange={setIsModalOpen}\n    student={selectedStudent}\n  />\n\n  <StudentProfileModal\n    open={isProfileModalOpen}\n    onOpenChange={setIsProfileModalOpen}\n    student={studentToView}\n  />\n\n      <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>\n        <AlertDialogContent data-testid=\"dialog-delete-student\">\n          <AlertDialogHeader>\n            <AlertDialogTitle>Confirmar exclus√£o</AlertDialogTitle>\n            <AlertDialogDescription>\n              Tem certeza que deseja excluir o aluno <strong>{studentToDelete?.user?.firstName} {studentToDelete?.user?.lastName}</strong>?\n              Esta a√ß√£o n√£o pode ser desfeita.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancelar</AlertDialogCancel>\n            <AlertDialogAction \n              onClick={confirmDelete} \n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n              data-testid=\"button-confirm-delete\"\n            >\n              {deleteMutation.isPending ? \"Excluindo...\" : \"Excluir\"}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </Layout>\n  );\n}\n","size_bytes":20069},"frontend/client/src/contexts/ThemeContext.tsx":{"content":"\nimport React, { createContext, useContext, useEffect, useState } from 'react';\n\ntype Theme = 'light' | 'dark';\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n  isDark: boolean;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    // Verifica localStorage primeiro, se n√£o existir usa 'light' como padr√£o\n    const saved = localStorage.getItem('theme') as Theme;\n    if (saved) return saved;\n    \n    // Define 'light' como tema padr√£o ao inv√©s de verificar a prefer√™ncia do sistema\n    return 'light';\n  });\n\n  useEffect(() => {\n    const root = document.documentElement;\n    \n    // Remove classes anteriores\n    root.classList.remove('light', 'dark');\n    \n    // Adiciona a classe do tema atual\n    root.classList.add(theme);\n    \n    // Salva no localStorage\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prev => prev === 'light' ? 'dark' : 'light');\n  };\n\n  return (\n    <ThemeContext.Provider value={{\n      theme,\n      toggleTheme,\n      isDark: theme === 'dark'\n    }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}\n","size_bytes":1478},"backend/SCHEMA_SYNC_ISSUE.md":{"content":"# Problema de Sincroniza√ß√£o entre Migra√ß√µes e Setup.js\n\n## Problema Identificado\n\nO projeto possui dois sistemas conflitantes para gerenciamento de schema do banco de dados:\n\n1. **Drizzle Migrations** (`/migrations/0000_stormy_chameleon.sql`)\n2. **Setup Manual** (`setup.js`)\n\n## Inconsist√™ncias Encontradas\n\n### 1. Tabela `roles`\n- **Migra√ß√£o**: Inclui coluna `is_deletable BOOLEAN DEFAULT true NOT NULL`\n- **Setup.js**: Coluna `is_deletable` estava ausente (CORRIGIDO)\n\n### 2. Tabela `users`\n- **Migra√ß√£o**: N√£o possui coluna `role` legada, apenas `role_id`\n- **Setup.js**: Possu√≠a coluna `role user_role DEFAULT 'student'` desnecess√°ria (CORRIGIDO)\n\n### 3. Tabela `permissions`\n- **Migra√ß√£o**: N√£o possui coluna `category`\n- **Setup.js**: Possu√≠a coluna `category VARCHAR NOT NULL` duplicada (CORRIGIDO)\n\n## Corre√ß√µes Aplicadas\n\n### setup.js - Linha 124-135 (tabela roles)\n```sql\n-- ANTES\nCREATE TABLE IF NOT EXISTS roles (\n  -- ... outras colunas ...\n  is_active BOOLEAN DEFAULT true,\n  -- is_deletable estava ausente\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- DEPOIS\nCREATE TABLE IF NOT EXISTS roles (\n  -- ... outras colunas ...\n  is_active BOOLEAN DEFAULT true,\n  is_deletable BOOLEAN DEFAULT true NOT NULL,  -- ADICIONADO\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW()\n);\n```\n\n### setup.js - Linha 136-149 (tabela users)\n```sql\n-- ANTES\nCREATE TABLE IF NOT EXISTS users (\n  -- ... outras colunas ...\n  role user_role DEFAULT 'student',  -- REMOVIDO\n  role_id VARCHAR REFERENCES roles(id) ON DELETE SET NULL,\n  is_active BOOLEAN DEFAULT true,\n  -- ... outras colunas ...\n);\n\n-- DEPOIS\nCREATE TABLE IF NOT EXISTS users (\n  -- ... outras colunas ...\n  role_id VARCHAR NOT NULL REFERENCES roles(id) ON DELETE SET NULL,\n  is_active BOOLEAN DEFAULT true NOT NULL,\n  -- ... outras colunas ...\n);\n```\n\n### setup.js - Linha 112-121 (tabela permissions)\n```sql\n-- ANTES\nCREATE TABLE IF NOT EXISTS permissions (\n  -- ... outras colunas ...\n  category_id VARCHAR REFERENCES permission_categories(id) ON DELETE CASCADE NOT NULL,\n  category VARCHAR NOT NULL,  -- REMOVIDO\n  is_active BOOLEAN DEFAULT true,\n  -- ... outras colunas ...\n);\n\n-- DEPOIS\nCREATE TABLE IF NOT EXISTS permissions (\n  -- ... outras colunas ...\n  category_id VARCHAR REFERENCES permission_categories(id) ON DELETE CASCADE NOT NULL,\n  is_active BOOLEAN DEFAULT true NOT NULL,\n  -- ... outras colunas ...\n);\n```\n\n## Teste de Valida√ß√£o\n\nAp√≥s as corre√ß√µes:\n1. ‚úÖ Setup.js executa sem erros\n2. ‚úÖ Coluna `is_deletable` criada corretamente na tabela `roles`\n3. ‚úÖ API `/api/roles` retorna dados com `isDeletable: true`\n4. ‚úÖ Login e autentica√ß√£o funcionam normalmente\n\n## Recomenda√ß√µes para o Futuro\n\n### Op√ß√£o 1: Usar apenas Drizzle (Recomendado)\n```bash\n# Aplicar migra√ß√µes automaticamente\nnpx drizzle-kit push\n# ou\nnpx drizzle-kit migrate\n```\n\n### Op√ß√£o 2: Manter setup.js sincronizado\n- Sempre que alterar migra√ß√µes, atualizar setup.js\n- Implementar testes automatizados para verificar sincroniza√ß√£o\n- Considerar gerar setup.js automaticamente a partir das migra√ß√µes\n\n## Data da Corre√ß√£o\n22/10/2025 - Todas as inconsist√™ncias identificadas foram corrigidas e testadas.","size_bytes":3245},"frontend/client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"frontend/client/src/pages/TeacherArea.tsx":{"content":"\nimport React, { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Layout from \"@/components/Layout\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { format, startOfWeek, addDays } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\nimport TeacherScheduleView from \"@/components/TeacherScheduleView\";\n\nexport default function TeacherArea() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading: authLoading, user } = useAuth();\n  const [selectedClassId, setSelectedClassId] = useState<string>(\"\");\n  const [currentWeekStart, setCurrentWeekStart] = useState<Date>(startOfWeek(new Date(), { locale: ptBR }));\n  const [selectedClassDetail, setSelectedClassDetail] = useState<any>(null);\n  const [showClassDetail, setShowClassDetail] = useState(false);\n\n  // Fetch teacher's classes\n  const { data: teacherClasses = [], isLoading: classesLoading } = useQuery<any[]>({\n    queryKey: [\"/api/classes/teacher\", user?.id],\n    enabled: isAuthenticated && user?.role === 'teacher',\n    retry: false,\n  });\n\n  // Fetch teacher's schedule (commented out as not currently used)\n  // const { data: teacherSchedule = [], isLoading: scheduleLoading } = useQuery<any[]>({\n  //   queryKey: [\"/api/schedule/teacher\", user?.id],\n  //   enabled: isAuthenticated && user?.role === 'teacher',\n  //   retry: false,\n  // });\n\n  // Mock data for students and grades (would come from API)\n  const mockStudents = [\n    {\n      id: '1',\n      name: 'Ana Silva',\n      email: 'ana.silva@email.com',\n      workbookProgress: 75,\n      currentUnit: 8,\n      totalUnits: 12,\n      averageGrade: 8.5,\n      attendance: 95,\n      avatar: null\n    },\n    {\n      id: '2', \n      name: 'Carlos Santos',\n      email: 'carlos.santos@email.com',\n      workbookProgress: 60,\n      currentUnit: 6,\n      totalUnits: 12,\n      averageGrade: 7.2,\n      attendance: 88,\n      avatar: null\n    },\n    {\n      id: '3',\n      name: 'Beatriz Costa',\n      email: 'beatriz.costa@email.com', \n      workbookProgress: 90,\n      currentUnit: 10,\n      totalUnits: 12,\n      averageGrade: 9.1,\n      attendance: 98,\n      avatar: null\n    }\n  ];\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"N√£o autorizado\",\n        description: \"Voc√™ foi desconectado. Fazendo login novamente...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  if (authLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  // Check if user is teacher\n  if (user?.role !== 'teacher') {\n    return (\n      <Layout>\n        <div className=\"p-6\">\n          <Card>\n            <CardContent className=\"py-12 text-center\">\n              <i className=\"fas fa-user-slash text-muted-foreground text-6xl mb-4\"></i>\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">Acesso Negado</h3>\n              <p className=\"text-muted-foreground\">Esta √°rea √© exclusiva para professores.</p>\n            </CardContent>\n          </Card>\n        </div>\n      </Layout>\n    );\n  }\n\n  const navigateWeek = (direction: 'prev' | 'next') => {\n    setCurrentWeekStart(prev => addDays(prev, direction === 'next' ? 7 : -7));\n  };\n\n  // Sistema de cores por livro - utilizando cores OpenLife\n  const bookColors: { [key: string]: string } = {\n    'English Basic - Book 1': '#b130ff',\n    'English Basic - Book 2': '#ff6506',\n    'English Basic - Book 3': '#3b82f6',\n    'English Intermediate - Book 1': '#10b981',\n    'English Intermediate - Book 2': '#059669',\n    'English Advanced - Book 1': '#8b5cf6',\n    'Espa√±ol B√°sico - Libro 1': '#f59e0b',\n    'Espa√±ol B√°sico - Libro 2': '#d97706'\n  };\n\n  const handleClassClick = (classItem: any) => {\n    setSelectedClassDetail(classItem);\n    setShowClassDetail(true);\n  };\n\n  const renderWeeklySchedule = () => {\n    const weekDays = Array.from({ length: 7 }, (_, i) => addDays(currentWeekStart, i));\n    const timeSlots = Array.from({ length: 14 }, (_, i) => `${8 + i}:00`);\n\n    // Dados exemplares das turmas do professor\n    const mockTeacherSchedule = [\n      {\n        id: '1',\n        title: 'Ingl√™s A1 - Manh√£',\n        book: 'English Basic - Book 1',\n        dayOfWeek: 1, // Segunda\n        startTime: '09:00',\n        endTime: '11:00',\n        room: 'Sala 101',\n        currentDay: 5,\n        totalDays: 30,\n        studentsCount: 12,\n        maxStudents: 15\n      },\n      {\n        id: '2',\n        title: 'Ingl√™s A2 - Tarde',\n        book: 'English Basic - Book 2',\n        dayOfWeek: 1, // Segunda\n        startTime: '14:00',\n        endTime: '16:00',\n        room: 'Sala 102',\n        currentDay: 8,\n        totalDays: 35,\n        studentsCount: 10,\n        maxStudents: 15\n      },\n      {\n        id: '3',\n        title: 'Ingl√™s A1 - Manh√£',\n        book: 'English Basic - Book 1',\n        dayOfWeek: 3, // Quarta\n        startTime: '09:00',\n        endTime: '11:00',\n        room: 'Sala 101',\n        currentDay: 6,\n        totalDays: 30,\n        studentsCount: 12,\n        maxStudents: 15\n      },\n      {\n        id: '4',\n        title: 'Ingl√™s A2 - Tarde',\n        book: 'English Basic - Book 2',\n        dayOfWeek: 3, // Quarta\n        startTime: '14:00',\n        endTime: '16:00',\n        room: 'Sala 102',\n        currentDay: 9,\n        totalDays: 35,\n        studentsCount: 10,\n        maxStudents: 15\n      }\n    ];\n\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Button variant=\"outline\" onClick={() => navigateWeek('prev')}>\n              ‚Üê Semana Anterior\n            </Button>\n            <h3 className=\"text-lg font-semibold\">\n              {format(currentWeekStart, \"dd MMM\", { locale: ptBR })} - {format(addDays(currentWeekStart, 6), \"dd MMM yyyy\", { locale: ptBR })}\n            </h3>\n            <Button variant=\"outline\" onClick={() => navigateWeek('next')}>\n              Pr√≥xima Semana ‚Üí\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"overflow-x-auto bg-white rounded-lg border shadow-sm\">\n          <div className=\"grid grid-cols-8 gap-0 min-w-[900px]\">\n            {/* Header */}\n            <div className=\"p-3 font-medium text-center bg-gray-50 border-b border-r text-sm\">Hor√°rio</div>\n            {weekDays.map((day) => (\n              <div key={day.toISOString()} className=\"p-3 font-medium text-center bg-gray-50 border-b border-r text-sm\">\n                <div className=\"font-semibold\">{format(day, \"EEE\", { locale: ptBR })}</div>\n                <div className=\"text-xs text-gray-500 mt-1\">\n                  {format(day, \"dd/MM\", { locale: ptBR })}\n                </div>\n              </div>\n            ))}\n\n            {/* Time slots */}\n            {timeSlots.map((timeSlot) => {\n              const [hour] = timeSlot.split(':');\n              return (\n                <React.Fragment key={timeSlot}>\n                  <div className=\"p-3 text-xs font-medium text-center bg-gray-50 border-b border-r text-gray-600\">\n                    {timeSlot}\n                  </div>\n                  \n                  {weekDays.map((day) => {\n                    const dayClasses = mockTeacherSchedule.filter(classItem => {\n                      if (classItem.dayOfWeek !== day.getDay()) return false;\n                      const classHour = parseInt(classItem.startTime.split(':')[0]);\n                      return classHour === parseInt(hour);\n                    });\n\n                    return (\n                      <div key={`${day.toISOString()}-${timeSlot}`} className=\"min-h-[80px] p-1 border-b border-r border-gray-100\">\n                        {dayClasses.map((classItem) => (\n                          <div\n                            key={classItem.id}\n                            className=\"p-2 rounded-lg text-xs cursor-pointer transition-all hover:shadow-md border border-opacity-30 h-full flex items-center justify-center\"\n                            style={{\n                              backgroundColor: bookColors[classItem.book] + '20',\n                              borderColor: bookColors[classItem.book],\n                              color: '#000'\n                            }}\n                            onClick={() => handleClassClick(classItem)}\n                            data-testid={`schedule-class-${classItem.id}`}\n                          >\n                            <div className=\"font-semibold text-sm text-center\">{classItem.title}</div>\n                          </div>\n                        ))}\n                      </div>\n                    );\n                  })}\n                </React.Fragment>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Legenda dos meus livros */}\n        <div className=\"bg-gray-50 p-4 rounded-lg\">\n          <h4 className=\"font-medium mb-3\">Meus Livros</h4>\n          <div className=\"flex flex-wrap gap-3\">\n            {Object.entries(bookColors).map(([bookName, color]) => (\n              <div key={bookName} className=\"flex items-center space-x-2\">\n                <div className=\"w-4 h-4 rounded-full\" style={{ backgroundColor: color }}></div>\n                <span className=\"text-sm\">{bookName}</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <Layout>\n      <div className=\"p-6 space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-semibold text-foreground\">√Årea do Professor</h2>\n            <p className=\"text-sm text-muted-foreground\">\n              Bem-vindo, Prof. Ivan Silva - Gerencie suas turmas e acompanhe o progresso dos alunos\n            </p>\n          </div>\n        </div>\n\n        <Tabs defaultValue=\"turmas\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"turmas\">Minhas Turmas</TabsTrigger>\n            <TabsTrigger value=\"alunos\">Alunos & Notas</TabsTrigger>\n            <TabsTrigger value=\"avaliacoes\">Avalia√ß√µes</TabsTrigger>\n            <TabsTrigger value=\"agenda\">Minha Agenda</TabsTrigger>\n          </TabsList>\n\n          {/* Minhas Turmas */}\n          <TabsContent value=\"turmas\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-users text-primary\"></i>\n                  <span>Minhas Turmas</span>\n                  <Badge variant=\"secondary\">{teacherClasses.length} turmas ativas</Badge>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {classesLoading ? (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                    {Array.from({ length: 3 }).map((_, index) => (\n                      <Card key={index} className=\"animate-pulse\">\n                        <CardHeader>\n                          <div className=\"h-5 bg-muted rounded w-3/4 mb-2\"></div>\n                          <div className=\"h-4 bg-muted rounded w-1/2\"></div>\n                        </CardHeader>\n                        <CardContent>\n                          <div className=\"space-y-2\">\n                            <div className=\"h-4 bg-muted rounded\"></div>\n                            <div className=\"h-4 bg-muted rounded w-2/3\"></div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                ) : teacherClasses.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <i className=\"fas fa-chalkboard-teacher text-muted-foreground text-6xl mb-4\"></i>\n                    <h3 className=\"text-lg font-semibold text-foreground mb-2\">Nenhuma turma atribu√≠da</h3>\n                    <p className=\"text-muted-foreground\">Voc√™ ainda n√£o tem turmas atribu√≠das.</p>\n                  </div>\n                ) : (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                    {teacherClasses.map((classItem: any) => (\n                      <Card key={classItem.id} className=\"border-l-4 transition-all hover:shadow-lg\" \n                            style={{ borderLeftColor: classItem.book?.color || '#3b82f6' }}>\n                        <CardHeader>\n                          <CardTitle className=\"text-lg\">{classItem.name}</CardTitle>\n                          <CardDescription className=\"flex items-center space-x-2\">\n                            <span style={{ color: classItem.book?.color || '#3b82f6' }}>\n                              üìö {classItem.book?.name}\n                            </span>\n                          </CardDescription>\n                        </CardHeader>\n                        <CardContent>\n                          <div className=\"space-y-3\">\n                            <div className=\"flex items-center justify-between text-sm\">\n                              <span className=\"text-muted-foreground\">üìÖ Hor√°rio:</span>\n                              <span>{classItem.schedule}</span>\n                            </div>\n                            <div className=\"flex items-center justify-between text-sm\">\n                              <span className=\"text-muted-foreground\">üè¢ Sala:</span>\n                              <span>{classItem.room}</span>\n                            </div>\n                            <div className=\"flex items-center justify-between text-sm\">\n                              <span className=\"text-muted-foreground\">üë• Alunos:</span>\n                              <span>{classItem.currentStudents}/{classItem.maxStudents}</span>\n                            </div>\n                            <div className=\"space-y-1\">\n                              <div className=\"flex items-center justify-between text-sm\">\n                                <span className=\"text-muted-foreground\">üìñ Progresso:</span>\n                                <span>Dia {classItem.currentDay}/{classItem.book?.totalDays || 30}</span>\n                              </div>\n                              <Progress \n                                value={(classItem.currentDay / (classItem.book?.totalDays || 30)) * 100} \n                                className=\"h-2\" \n                              />\n                            </div>\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\" \n                              className=\"w-full\"\n                              onClick={() => setSelectedClassId(classItem.id)}\n                            >\n                              <i className=\"fas fa-eye mr-2\"></i>\n                              Ver Detalhes\n                            </Button>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Alunos & Notas */}\n          <TabsContent value=\"alunos\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-user-graduate text-primary\"></i>\n                  <span>Progresso dos Alunos</span>\n                </CardTitle>\n                <div className=\"flex items-center space-x-4\">\n                  <Select value={selectedClassId} onValueChange={setSelectedClassId}>\n                    <SelectTrigger className=\"w-64\">\n                      <SelectValue placeholder=\"Selecione uma turma\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {teacherClasses.map((classItem: any) => (\n                        <SelectItem key={classItem.id} value={classItem.id}>\n                          {classItem.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {selectedClassId ? (\n                  <div className=\"space-y-4\">\n                    {mockStudents.map((student) => (\n                      <Card key={student.id} className=\"p-4\">\n                        <div className=\"flex items-center space-x-4\">\n                          <Avatar className=\"w-12 h-12\">\n                            <AvatarImage src={student.avatar || undefined} />\n                            <AvatarFallback>\n                              <i className=\"fas fa-user\"></i>\n                            </AvatarFallback>\n                          </Avatar>\n                          <div className=\"flex-1 space-y-2\">\n                            <div className=\"flex items-center justify-between\">\n                              <div>\n                                <h4 className=\"font-semibold\">{student.name}</h4>\n                                <p className=\"text-sm text-muted-foreground\">{student.email}</p>\n                              </div>\n                              <div className=\"text-right\">\n                                <div className=\"text-lg font-bold text-green-600\">{student.averageGrade}</div>\n                                <div className=\"text-sm text-muted-foreground\">M√©dia Geral</div>\n                              </div>\n                            </div>\n                            \n                            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                              <div className=\"space-y-1\">\n                                <div className=\"flex items-center justify-between text-sm\">\n                                  <span>üìö Workbook</span>\n                                  <span>{student.workbookProgress}%</span>\n                                </div>\n                                <Progress value={student.workbookProgress} className=\"h-2\" />\n                              </div>\n                              \n                              <div className=\"space-y-1\">\n                                <div className=\"flex items-center justify-between text-sm\">\n                                  <span>üìñ Unidade</span>\n                                  <span>{student.currentUnit}/{student.totalUnits}</span>\n                                </div>\n                                <Progress value={(student.currentUnit / student.totalUnits) * 100} className=\"h-2\" />\n                              </div>\n                              \n                              <div className=\"space-y-1\">\n                                <div className=\"flex items-center justify-between text-sm\">\n                                  <span>üìÖ Presen√ßa</span>\n                                  <span>{student.attendance}%</span>\n                                </div>\n                                <Progress value={student.attendance} className=\"h-2\" />\n                              </div>\n                            </div>\n\n                            <div className=\"flex space-x-2 mt-3\">\n                              <Button variant=\"outline\" size=\"sm\">\n                                <i className=\"fas fa-edit mr-2\"></i>\n                                Editar Notas\n                              </Button>\n                              <Button variant=\"outline\" size=\"sm\">\n                                <i className=\"fas fa-eye mr-2\"></i>\n                                Ver Hist√≥rico\n                              </Button>\n                              <Button variant=\"outline\" size=\"sm\">\n                                <i className=\"fas fa-chart-line mr-2\"></i>\n                                Relat√≥rio\n                              </Button>\n                            </div>\n                          </div>\n                        </div>\n                      </Card>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <i className=\"fas fa-users text-muted-foreground text-6xl mb-4\"></i>\n                    <h3 className=\"text-lg font-semibold text-foreground mb-2\">Selecione uma turma</h3>\n                    <p className=\"text-muted-foreground\">Escolha uma turma acima para ver o progresso dos alunos.</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Avalia√ß√µes */}\n          <TabsContent value=\"avaliacoes\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-clipboard-check text-primary\"></i>\n                  <span>√Årea de Avalia√ß√µes</span>\n                </CardTitle>\n                <div className=\"flex justify-between items-center\">\n                  <p className=\"text-sm text-muted-foreground\">Gerencie provas e avalia√ß√µes das suas turmas</p>\n                  <Button>\n                    <i className=\"fas fa-plus mr-2\"></i>\n                    Nova Avalia√ß√£o\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {/* Mock assessment data */}\n                  <Card className=\"border-l-4 border-l-blue-500\">\n                    <CardHeader>\n                      <CardTitle className=\"text-sm\">Prova Unit 8 - Ingl√™s A1</CardTitle>\n                      <CardDescription>Agendada para 15/03/2024</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span>Status:</span>\n                          <Badge className=\"bg-blue-100 text-blue-700\">Agendada</Badge>\n                        </div>\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span>Turma:</span>\n                          <span>Ingl√™s A1</span>\n                        </div>\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span>Alunos:</span>\n                          <span>12 alunos</span>\n                        </div>\n                        <Button variant=\"outline\" size=\"sm\" className=\"w-full mt-2\">\n                          <i className=\"fas fa-edit mr-2\"></i>\n                          Gerenciar\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"border-l-4 border-l-green-500\">\n                    <CardHeader>\n                      <CardTitle className=\"text-sm\">Avalia√ß√£o Workbook - Ingl√™s A1</CardTitle>\n                      <CardDescription>Conclu√≠da em 10/03/2024</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span>Status:</span>\n                          <Badge className=\"bg-green-100 text-green-700\">Conclu√≠da</Badge>\n                        </div>\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span>M√©dia:</span>\n                          <span className=\"font-semibold text-green-600\">8.4</span>\n                        </div>\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span>Participaram:</span>\n                          <span>11/12 alunos</span>\n                        </div>\n                        <Button variant=\"outline\" size=\"sm\" className=\"w-full mt-2\">\n                          <i className=\"fas fa-chart-bar mr-2\"></i>\n                          Ver Resultados\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"border-l-4 border-l-yellow-500\">\n                    <CardHeader>\n                      <CardTitle className=\"text-sm\">Prova Oral - Ingl√™s A1</CardTitle>\n                      <CardDescription>Em andamento</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span>Status:</span>\n                          <Badge className=\"bg-yellow-100 text-yellow-700\">Em Andamento</Badge>\n                        </div>\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span>Progresso:</span>\n                          <span>7/12 alunos</span>\n                        </div>\n                        <div className=\"space-y-1\">\n                          <Progress value={58} className=\"h-2\" />\n                        </div>\n                        <Button variant=\"outline\" size=\"sm\" className=\"w-full mt-2\">\n                          <i className=\"fas fa-microphone mr-2\"></i>\n                          Continuar\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Minha Agenda */}\n          <TabsContent value=\"agenda\" className=\"space-y-4\">\n            <TeacherScheduleView />\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      {/* Modal de Detalhes da Aula */}\n      <Dialog open={showClassDetail} onOpenChange={setShowClassDetail}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center space-x-2\">\n              <div\n                className=\"w-4 h-4 rounded-full\"\n                style={{ backgroundColor: selectedClassDetail?.book && bookColors[selectedClassDetail.book] }}\n              />\n              <span>{selectedClassDetail?.title}</span>\n            </DialogTitle>\n          </DialogHeader>\n          {selectedClassDetail && (\n            <div className=\"space-y-6\">\n              {/* Informa√ß√µes da Turma */}\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-500\">Hor√°rio</Label>\n                  <p className=\"text-sm\">{selectedClassDetail.startTime} - {selectedClassDetail.endTime}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-500\">Sala</Label>\n                  <p className=\"text-sm\">{selectedClassDetail.room}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-500\">Livro</Label>\n                  <p className=\"text-sm\">{selectedClassDetail.book}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-500\">Progresso</Label>\n                  <p className=\"text-sm\">Dia {selectedClassDetail.currentDay}/{selectedClassDetail.totalDays}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-500\">Alunos</Label>\n                  <p className=\"text-sm\">{selectedClassDetail.studentsCount}/{selectedClassDetail.maxStudents}</p>\n                </div>\n              </div>\n\n              {/* A√ß√µes */}\n              <div className=\"flex justify-end space-x-2 pt-4 border-t\">\n                <Button variant=\"outline\" onClick={() => setShowClassDetail(false)}>\n                  Fechar\n                </Button>\n                <Button>\n                  Gerenciar Turma\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </Layout>\n  );\n}\n","size_bytes":29262},"backend/server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage.js\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  // Auto-registro √© SEMPRE como student (seguran√ßa)\n  const studentRole = await storage.getRoleByName('student');\n  if (!studentRole) {\n    throw new Error(\"Role de estudante n√£o configurado\");\n  }\n\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n    roleId: studentRole.id,\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4455},"frontend/client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"scripts/deploy-backend.js":{"content":"#!/usr/bin/env node\n\nconst { execSync } = require('child_process');\nconst path = require('path');\nconst fs = require('fs');\n\n// Carregar configura√ß√µes\nconst config = require('../deploy.config.js');\n\nconsole.log('üöÄ Iniciando deploy do backend...\\n');\n\nfunction runCommand(command, description) {\n  console.log(`üìã ${description}`);\n  console.log(`üíª Executando: ${command}\\n`);\n  \n  try {\n    const output = execSync(command, { \n      stdio: 'inherit',\n      cwd: process.cwd()\n    });\n    console.log('‚úÖ Sucesso!\\n');\n    return output;\n  } catch (error) {\n    console.error(`‚ùå Erro: ${error.message}\\n`);\n    process.exit(1);\n  }\n}\n\nfunction deployBackend() {\n  const { server, paths, docker } = config;\n  \n  // Comandos SSH base\n  const sshBase = `ssh -p ${server.port} ${server.username}@${server.host}`;\n  \n  console.log('üîÑ Fazendo backup do banco de dados...');\n  runCommand(\n    `${sshBase} \"cd ${paths.app} && docker-compose exec -T database pg_dump -U postgres erp_idiomas > ${paths.backup}/backup_\\$(date +%Y%m%d_%H%M%S).sql\"`,\n    'Backup do banco de dados'\n  );\n  \n  console.log('üì¶ Enviando c√≥digo do backend...');\n  runCommand(\n    `rsync -avz --delete --exclude node_modules --exclude .git ./backend/ ${server.username}@${server.host}:${paths.app}/backend/`,\n    'Sincronizando arquivos do backend'\n  );\n  \n  console.log('üê≥ Parando container do backend...');\n  runCommand(\n    `${sshBase} \"cd ${paths.app} && docker-compose stop ${docker.services.backend}\"`,\n    'Parando servi√ßo backend'\n  );\n  \n  console.log('üî® Fazendo rebuild do backend...');\n  runCommand(\n    `${sshBase} \"cd ${paths.app} && docker-compose build ${docker.services.backend}\"`,\n    'Build do container backend'\n  );\n  \n  console.log('‚ñ∂Ô∏è Iniciando container do backend...');\n  runCommand(\n    `${sshBase} \"cd ${paths.app} && docker-compose up -d ${docker.services.backend}\"`,\n    'Iniciando servi√ßo backend'\n  );\n  \n  console.log('üîç Verificando status dos containers...');\n  runCommand(\n    `${sshBase} \"cd ${paths.app} && docker-compose ps\"`,\n    'Status dos containers'\n  );\n  \n  console.log('üìã Verificando logs do backend...');\n  runCommand(\n    `${sshBase} \"cd ${paths.app} && docker-compose logs --tail=20 ${docker.services.backend}\"`,\n    'Logs do backend'\n  );\n  \n  console.log('‚úÖ Deploy do backend conclu√≠do com sucesso! üéâ\\n');\n  console.log('üîó Verifique se a aplica√ß√£o est√° funcionando corretamente.');\n}\n\n// Verificar se as configura√ß√µes est√£o corretas\nif (!config.server.host || !config.server.username) {\n  console.error('‚ùå Erro: Configure o servidor no arquivo deploy.config.js');\n  process.exit(1);\n}\n\n// Executar deploy\ndeployBackend();","size_bytes":2688},"frontend/client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"backend/server/db.ts":{"content":"import { Pool } from 'pg';\nimport { drizzle } from 'drizzle-orm/node-postgres';\nimport dotenv from 'dotenv';\nimport * as schema from \"../shared/schema.js\";\n\n// Load .env file, overriding empty environment variables\nconst envConfig = dotenv.config();\nif (envConfig.parsed) {\n  Object.keys(envConfig.parsed).forEach((key) => {\n    if (!process.env[key] || process.env[key]?.trim() === '') {\n      process.env[key] = envConfig.parsed![key];\n    }\n  });\n}\n\n// Check if DATABASE_URL is set and not empty\nconst databaseUrl = process.env.DATABASE_URL?.trim();\n\nif (!databaseUrl) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({\n  connectionString: databaseUrl,\n});\nexport const db = drizzle(pool, { schema });\n","size_bytes":787},"frontend/shared/schema.ts":{"content":"// Arquivo tempor√°rio para resolver depend√™ncias do Docker\n// Este arquivo ser√° substitu√≠do pelo schema real do backend durante o deploy\n\nexport const insertFranchiseUnitSchema = {} as any;\nexport const insertRoleSchema = {} as any;\n\nexport type Course = any;\nexport type Book = any;\nexport type CourseWithDetails = any;\nexport type BookWithDetails = any;","size_bytes":359},"backend/server/routes.js":{"content":"import express from \"express\";\nimport { createServer } from \"http\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport { storage } from \"./storage.js\";\nimport { auth } from \"./auth.js\";\nimport { setupVite, serveStatic } from \"./vite.js\";\nimport { requirePagePermission } from \"./permissions.js\";\nimport { insertUnitSchema, insertStaffSchema, insertStudentSchema, insertCourseSchema, insertClassSchema, insertLessonSchema, insertBookSchema, insertUserSettingsSchema, insertSupportTicketSchema, insertSupportTicketResponseSchema, insertGuardianSchema, insertFinancialResponsibleSchema, staff, } from \"../shared/schema.js\";\nimport { z } from \"zod\";\nimport { db } from \"./db.js\";\nimport { eq } from \"drizzle-orm\";\nconst updateRolePermissionsSchema = z.object({\n    permissionIds: z.array(z.string())\n});\n// Configure multer for file uploads\nconst bookUploads = multer({\n    storage: multer.diskStorage({\n        destination: (req, file, cb) => {\n            const uploadDir = './uploads/books';\n            if (!fs.existsSync(uploadDir)) {\n                fs.mkdirSync(uploadDir, { recursive: true });\n            }\n            cb(null, uploadDir);\n        },\n        filename: (req, file, cb) => {\n            const bookId = req.params.id;\n            const ext = path.extname(file.originalname);\n            cb(null, `book_${bookId}_${Date.now()}${ext}`);\n        }\n    }),\n    fileFilter: (req, file, cb) => {\n        if (file.mimetype === 'application/pdf') {\n            cb(null, true);\n        }\n        else {\n            cb(new Error('Only PDF files are allowed!'), false);\n        }\n    },\n    limits: {\n        fileSize: 50 * 1024 * 1024 // 50MB limit\n    }\n});\nconst franchiseUploads = multer({\n    storage: multer.diskStorage({\n        destination: (req, file, cb) => {\n            const uploadDir = './uploads/franchise-units';\n            if (!fs.existsSync(uploadDir)) {\n                fs.mkdirSync(uploadDir, { recursive: true });\n            }\n            cb(null, uploadDir);\n        },\n        filename: (req, file, cb) => {\n            const ext = path.extname(file.originalname);\n            const fieldName = file.fieldname;\n            cb(null, `${fieldName}_${Date.now()}${ext}`);\n        }\n    }),\n    fileFilter: (req, file, cb) => {\n        if (file.mimetype === 'application/pdf') {\n            cb(null, true);\n        }\n        else {\n            cb(new Error('Only PDF files are allowed!'), false);\n        }\n    },\n    limits: {\n        fileSize: 50 * 1024 * 1024 // 50MB limit\n    }\n});\nexport async function registerRoutes(app) {\n    // Serve uploaded files\n    app.use('/uploads', express.static('uploads'));\n    // ============================================================================\n    // AUTH ROUTES\n    // ============================================================================\n    // Login endpoint\n    app.post('/api/auth/login', async (req, res) => {\n        try {\n            const { email, password } = req.body;\n            console.log('üîë Tentativa de login:', { email, password: '***' });\n            const result = await auth.authenticateUser(email, password);\n            if (!result) {\n                console.log('‚ùå Credenciais inv√°lidas para:', email);\n                return res.status(401).json({ message: \"Credenciais inv√°lidas\" });\n            }\n            const { user, token } = result;\n            // Buscar role para incluir no retorno\n            const role = await storage.getRoles();\n            const userRole = role.find(r => r.id === user.roleId);\n            console.log('‚úÖ Login bem-sucedido para:', email);\n            res.json({\n                user: {\n                    id: user.id,\n                    email: user.email,\n                    firstName: user.firstName,\n                    lastName: user.lastName,\n                    role: userRole?.name || 'student',\n                },\n                token,\n                message: \"Login realizado com sucesso\"\n            });\n        }\n        catch (error) {\n            console.error('Erro no login:', error);\n            res.status(500).json({ message: \"Erro ao realizar login\" });\n        }\n    });\n    // Register endpoint - apenas para estudantes (auto-registro)\n    app.post('/api/auth/register', async (req, res) => {\n        try {\n            const { email, password, firstName, lastName } = req.body;\n            // Verificar se usu√°rio j√° existe\n            const existingUser = await storage.getUserByEmail(email);\n            if (existingUser) {\n                return res.status(400).json({ message: \"Email j√° cadastrado\" });\n            }\n            // Auto-registro √© SEMPRE como student (seguran√ßa)\n            const studentRole = await storage.getRoleByName('student');\n            if (!studentRole) {\n                return res.status(500).json({ message: \"Role de estudante n√£o configurado\" });\n            }\n            // Hash da senha\n            const hashedPassword = await auth.hashPassword(password);\n            // Criar usu√°rio\n            const user = await storage.createUser({\n                email,\n                password: hashedPassword,\n                firstName,\n                lastName,\n                roleId: studentRole.id,\n                isActive: true,\n            });\n            // Gerar token\n            const token = auth.generateToken(user);\n            res.status(201).json({\n                user: {\n                    id: user.id,\n                    email: user.email,\n                    firstName: user.firstName,\n                    lastName: user.lastName,\n                    role: 'student',\n                },\n                token,\n                message: \"Usu√°rio criado com sucesso\"\n            });\n        }\n        catch (error) {\n            console.error('Erro no registro:', error);\n            res.status(500).json({ message: \"Erro ao criar usu√°rio\" });\n        }\n    });\n    // Get current user\n    app.get('/api/auth/user', auth.isAuthenticated, async (req, res) => {\n        try {\n            const user = await storage.getUserById(req.user.id);\n            if (!user) {\n                return res.status(404).json({ message: \"Usu√°rio n√£o encontrado\" });\n            }\n            const role = await storage.getRoles();\n            const userRole = role.find(r => r.id === user.roleId);\n            res.json({\n                id: user.id,\n                email: user.email,\n                firstName: user.firstName,\n                lastName: user.lastName,\n                role: userRole?.name || 'student',\n            });\n        }\n        catch (error) {\n            console.error('Erro ao buscar usu√°rio:', error);\n            res.status(500).json({ message: \"Erro ao buscar usu√°rio\" });\n        }\n    });\n    // Get effective permissions for current user\n    app.get('/api/auth/effective-permissions', auth.isAuthenticated, async (req, res) => {\n        try {\n            const user = await storage.getUserById(req.user.id);\n            if (!user) {\n                return res.status(404).json({ message: \"UsuÔøΩrio nÔøΩo encontrado\" });\n            }\n            const roles = await storage.getRoles();\n            const userRole = roles.find(r => r.id === user.roleId);\n            let permissions = [];\n            if (userRole) {\n                const rolePermissions = await storage.getRolePermissionsByName(userRole.name);\n                permissions = rolePermissions.map(rp => rp.permission);\n            }\n            // Apply user overrides (grants/denies)\n            const overrides = await storage.getUserPermissionOverrides(user.id);\n            const permMap = new Map();\n            for (const p of permissions)\n                permMap.set(p.id, p);\n            for (const ov of overrides) {\n                if (ov.isGranted) {\n                    permMap.set(ov.permission.id, ov.permission);\n                }\n                else {\n                    permMap.delete(ov.permission.id);\n                }\n            }\n            res.json({ permissions: Array.from(permMap.values()) });\n        }\n        catch (error) {\n            console.error('Error getting effective permissions:', error);\n            res.status(500).json({ message: 'Internal server error' });\n        }\n    });\n    // ============================================================================\n    // UPLOAD ROUTES\n    // ============================================================================\n    app.post('/api/upload/unit-document', auth.isAuthenticated, franchiseUploads.single('file'), (req, res) => {\n        try {\n            if (!req.file) {\n                return res.status(400).json({ message: 'Nenhum arquivo enviado' });\n            }\n            const fileUrl = `/uploads/franchise-units/${req.file.filename}`;\n            res.json({\n                url: fileUrl,\n                filename: req.file.filename,\n                originalName: req.file.originalname,\n                size: req.file.size\n            });\n        }\n        catch (error) {\n            console.error('Error uploading file:', error);\n            res.status(500).json({ message: 'Erro ao fazer upload do arquivo' });\n        }\n    });\n    // ============================================================================\n    // DASHBOARD ROUTES\n    // ============================================================================\n    app.get(\"/api/dashboard/stats\", auth.isAuthenticated, async (req, res) => {\n        try {\n            const stats = await storage.getDashboardStats();\n            res.json(stats);\n        }\n        catch (error) {\n            console.error(\"Error fetching dashboard stats:\", error);\n            res.status(500).json({ message: \"Erro ao buscar estat√≠sticas do painel\" });\n        }\n    });\n    app.get(\"/api/units\", auth.isAuthenticated, requirePagePermission('units'), async (req, res) => {\n        try {\n            const units = await storage.getUnits();\n            res.json(units);\n        }\n        catch (error) {\n            console.error(\"Error fetching units:\", error);\n            res.status(500).json({ message: \"Erro ao buscar unidades\" });\n        }\n    });\n    app.get(\"/api/units/:id\", auth.isAuthenticated, requirePagePermission('units'), async (req, res) => {\n        try {\n            const unit = await storage.getUnit(req.params.id);\n            if (!unit) {\n                return res.status(404).json({ message: \"Unidade n√£o encontrada\" });\n            }\n            res.json(unit);\n        }\n        catch (error) {\n            console.error(\"Error fetching unit:\", error);\n            res.status(500).json({ message: \"Erro ao buscar unidade\" });\n        }\n    });\n    app.post(\"/api/units\", auth.requirePermission('units:write'), requirePagePermission('units'), async (req, res) => {\n        try {\n            const unitData = insertUnitSchema.parse(req.body);\n            const unit = await storage.createUnit(unitData);\n            res.status(201).json(unit);\n        }\n        catch (error) {\n            console.error(\"Error creating unit:\", error);\n            // Tratamento espec√≠fico para erros de valida√ß√£o\n            if (error.issues) {\n                const fieldErrors = error.issues.map((issue) => {\n                    const field = issue.path.join('.');\n                    return `${field}: ${issue.message}`;\n                }).join(', ');\n                return res.status(400).json({\n                    message: `Dados inv√°lidos: ${fieldErrors}`\n                });\n            }\n            res.status(400).json({ message: error.message || \"Erro ao criar unidade\" });\n        }\n    });\n    app.put(\"/api/units/:id\", auth.requirePermission('units:write'), async (req, res) => {\n        try {\n            const unitData = insertUnitSchema.partial().parse(req.body);\n            const unit = await storage.updateUnit(req.params.id, unitData);\n            res.json(unit);\n        }\n        catch (error) {\n            console.error(\"Error updating unit:\", error);\n            // Tratamento espec√≠fico para erros de valida√ß√£o\n            if (error.issues) {\n                const fieldErrors = error.issues.map((issue) => {\n                    const field = issue.path.join('.');\n                    return `${field}: ${issue.message}`;\n                }).join(', ');\n                return res.status(400).json({\n                    message: `Dados inv√°lidos: ${fieldErrors}`\n                });\n            }\n            res.status(400).json({ message: error.message || \"Erro ao atualizar unidade\" });\n        }\n    });\n    app.delete(\"/api/units/:id\", auth.requirePermission('units:write'), async (req, res) => {\n        try {\n            await storage.deleteUnit(req.params.id);\n            res.status(204).send();\n        }\n        catch (error) {\n            console.error(\"Error deleting unit:\", error);\n            res.status(500).json({ message: \"Erro ao excluir unidade\" });\n        }\n    });\n    // ============================================================================\n    // STAFF ROUTES\n    // ============================================================================\n    app.get(\"/api/staff\", auth.isAuthenticated, requirePagePermission('staff'), async (req, res) => {\n        try {\n            const staff = await storage.getStaff();\n            res.json(staff);\n        }\n        catch (error) {\n            console.error(\"Error fetching staff:\", error);\n            res.status(500).json({ message: \"Erro ao buscar colaboradores\" });\n        }\n    });\n    app.get(\"/api/staff/:id\", auth.isAuthenticated, requirePagePermission('staff'), async (req, res) => {\n        try {\n            const staffMember = await storage.getStaffMember(req.params.id);\n            if (!staffMember) {\n                return res.status(404).json({ message: \"Colaborador n√£o encontrado\" });\n            }\n            res.json(staffMember);\n        }\n        catch (error) {\n            console.error(\"Error fetching staff member:\", error);\n            res.status(500).json({ message: \"Erro ao buscar colaborador\" });\n        }\n    });\n    app.post(\"/api/staff\", auth.requireAdmin, requirePagePermission('staff'), async (req, res) => {\n        try {\n            const { firstName, lastName, email, password, ...staffFields } = req.body;\n            // Valida√ß√£o: verificar se j√° existe um colaborador com este CPF (apenas se CPF for fornecido)\n            if (staffFields.cpf && staffFields.cpf.trim() !== '') {\n                const existingStaffByCpf = await db\n                    .select()\n                    .from(staff)\n                    .where(eq(staff.cpf, staffFields.cpf))\n                    .limit(1);\n                if (existingStaffByCpf.length > 0) {\n                    return res.status(400).json({\n                        message: \"J√° existe um colaborador cadastrado com este CPF\"\n                    });\n                }\n            }\n            // Normalizar position para min√∫sculo\n            if (staffFields.position) {\n                staffFields.position = staffFields.position.toLowerCase();\n            }\n            // Mapear cargo para role automaticamente\n            const getRole = (position) => {\n                switch (position?.toLowerCase()) {\n                    case 'ceo':\n                    case 'diretor':\n                        return 'admin';\n                    case 'coordenador':\n                    case 'administrativo':\n                    case 'financeiro':\n                    case 'recepcionista':\n                    case 'comercial':\n                    case 'marketing':\n                        return 'secretary';\n                    case 'instrutor':\n                        return 'teacher';\n                    default:\n                        return 'teacher'; // padr√£o\n                }\n            };\n            const role = getRole(staffFields.position);\n            // Buscar role\n            const userRole = await storage.getRoleByName(role);\n            if (!userRole) {\n                return res.status(400).json({ message: \"Role inv√°lido\" });\n            }\n            // Verificar se j√° existe um usu√°rio com este email\n            const existingUser = await storage.getUserByEmail(email);\n            let user;\n            if (existingUser) {\n                // Atualizar o usu√°rio existente (REMOVIDA valida√ß√£o de staff duplicado por email)\n                user = await storage.updateUser(existingUser.id, {\n                    firstName,\n                    lastName,\n                    roleId: userRole.id,\n                });\n            }\n            else {\n                // Criar novo usu√°rio\n                const hashedPassword = await auth.hashPassword(password);\n                user = await storage.createUser({\n                    firstName,\n                    lastName,\n                    email,\n                    password: hashedPassword,\n                    roleId: userRole.id,\n                });\n            }\n            // Processar campos de data - converter strings ISO para objetos Date\n            const processedStaffFields = { ...staffFields };\n            if (processedStaffFields.birthDate && typeof processedStaffFields.birthDate === 'string') {\n                processedStaffFields.birthDate = new Date(processedStaffFields.birthDate);\n            }\n            if (processedStaffFields.hireDate && typeof processedStaffFields.hireDate === 'string') {\n                processedStaffFields.hireDate = new Date(processedStaffFields.hireDate);\n            }\n            // Criar o registro de staff\n            const staffMember = await storage.createStaff({\n                userId: user.id,\n                ...processedStaffFields,\n            });\n            res.status(201).json(staffMember);\n        }\n        catch (error) {\n            console.error(\"Error creating staff:\", error);\n            // Verificar se √© erro de valida√ß√£o do Zod\n            if (error instanceof z.ZodError) {\n                return res.status(400).json({\n                    message: \"Dados inv√°lidos\",\n                    errors: error.errors\n                });\n            }\n            res.status(500).json({ message: \"Erro ao criar colaborador\" });\n        }\n    });\n    app.put(\"/api/staff/:id\", auth.requireAdmin, async (req, res) => {\n        try {\n            const { firstName, lastName, email, userId, ...staffFields } = req.body;\n            // Atualizar usu√°rio se dados fornecidos\n            if (userId && (firstName || lastName || email)) {\n                await storage.updateUser(userId, {\n                    ...(firstName && { firstName }),\n                    ...(lastName && { lastName }),\n                    ...(email && { email }),\n                });\n            }\n            // Atualizar staff\n            const staffData = insertStaffSchema.partial().parse(staffFields);\n            const staff = await storage.updateStaff(req.params.id, staffData);\n            res.json(staff);\n        }\n        catch (error) {\n            console.error(\"Error updating staff member:\", error);\n            // Tratamento espec√≠fico para erro de email duplicado\n            if (error.message && error.message.includes('users_email_unique')) {\n                return res.status(400).json({\n                    message: \"Este e-mail j√° est√° cadastrado no sistema. Por favor, utilize um e-mail diferente.\"\n                });\n            }\n            // Outros erros de valida√ß√£o do Zod\n            if (error.issues) {\n                const fieldErrors = error.issues.map((issue) => {\n                    const field = issue.path.join('.');\n                    return `${field}: ${issue.message}`;\n                }).join(', ');\n                return res.status(400).json({\n                    message: `Dados inv√°lidos: ${fieldErrors}`\n                });\n            }\n            res.status(400).json({ message: error.message || \"Erro ao atualizar colaborador\" });\n        }\n    });\n    app.delete(\"/api/staff/:id\", auth.requireAdmin, async (req, res) => {\n        try {\n            await storage.deleteStaff(req.params.id);\n            res.status(204).send();\n        }\n        catch (error) {\n            console.error(\"Error deleting staff member:\", error);\n            res.status(500).json({ message: \"Erro ao excluir colaborador\" });\n        }\n    });\n    // ============================================================================\n    // STUDENT ROUTES\n    // ============================================================================\n    app.get(\"/api/students\", auth.isAuthenticated, requirePagePermission('students'), async (req, res) => {\n        try {\n            const students = await storage.getStudents();\n            res.json(students);\n        }\n        catch (error) {\n            console.error(\"Error fetching students:\", error);\n            res.status(500).json({ message: \"Erro ao buscar estudantes\" });\n        }\n    });\n    app.get(\"/api/students/:id\", auth.isAuthenticated, requirePagePermission('students'), async (req, res) => {\n        try {\n            const student = await storage.getStudent(req.params.id);\n            if (!student) {\n                return res.status(404).json({ message: \"Estudante n√£o encontrado\" });\n            }\n            res.json(student);\n        }\n        catch (error) {\n            console.error(\"Error fetching student:\", error);\n            res.status(500).json({ message: \"Erro ao buscar estudante\" });\n        }\n    });\n    app.post(\"/api/students\", auth.requireAdminOrSecretary, requirePagePermission('students'), async (req, res) => {\n        try {\n            const { firstName, lastName, email, password, guardian, ...studentFields } = req.body;\n            \n            // Verificar se CPF j√° existe (se fornecido)\n            if (studentFields.cpf && studentFields.cpf.trim() !== '') {\n                const existingStudent = await storage.getStudentByCpf(studentFields.cpf);\n                if (existingStudent) {\n                    return res.status(400).json({ \n                        message: \"J√° existe um aluno cadastrado com este CPF\" \n                    });\n                }\n            }\n            \n            // Buscar role student\n            const studentRole = await storage.getRoleByName('student');\n            if (!studentRole) {\n                return res.status(400).json({ message: \"Role de estudante n√£o encontrado\" });\n            }\n            // Hash da senha\n            const hashedPassword = await auth.hashPassword(password || 'senha123');\n            // Criar usu√°rio primeiro\n            const user = await storage.createUser({\n                email,\n                password: hashedPassword,\n                firstName,\n                lastName,\n                roleId: studentRole.id,\n                isActive: true,\n            });\n            let guardianId = null;\n            // Criar guardian se fornecido\n            if (guardian) {\n                const { financialResponsible, ...guardianFields } = guardian;\n                const guardianData = insertGuardianSchema.parse(guardianFields);\n                const createdGuardian = await storage.createGuardian(guardianData);\n                guardianId = createdGuardian.id;\n                // Criar respons√°vel financeiro se fornecido\n                if (financialResponsible) {\n                    const financialData = insertFinancialResponsibleSchema.parse({\n                        ...financialResponsible,\n                        guardianId: createdGuardian.id,\n                    });\n                    await storage.createFinancialResponsible(financialData);\n                }\n            }\n            // Criar student com userId e guardianId\n            const studentData = insertStudentSchema.parse({\n                ...studentFields,\n                userId: user.id,\n                guardianId,\n            });\n            const student = await storage.createStudent(studentData);\n            res.status(201).json(student);\n        }\n        catch (error) {\n            console.error(\"Error creating student:\", error);\n            // Tratamento espec√≠fico para erro de email duplicado\n            if (error.message && error.message.includes('users_email_unique')) {\n                return res.status(400).json({\n                    message: \"Este e-mail j√° est√° cadastrado no sistema. Por favor, utilize um e-mail diferente.\"\n                });\n            }\n            // Outros erros de valida√ß√£o do Zod\n            if (error.issues) {\n                const fieldErrors = error.issues.map((issue) => {\n                    const field = issue.path.join('.');\n                    return `${field}: ${issue.message}`;\n                }).join(', ');\n                return res.status(400).json({\n                    message: `Dados inv√°lidos: ${fieldErrors}`\n                });\n            }\n            res.status(400).json({ message: error.message || \"Erro ao cadastrar estudante\" });\n        }\n    });\n    app.put(\"/api/students/:id\", auth.requireAdminOrSecretary, async (req, res) => {\n        try {\n            const { firstName, lastName, email, userId, guardian, ...studentFields } = req.body;\n            \n            // Verificar se CPF j√° existe (se fornecido e diferente do atual)\n            if (studentFields.cpf && studentFields.cpf.trim() !== '') {\n                const existingStudent = await storage.getStudentByCpf(studentFields.cpf);\n                if (existingStudent && existingStudent.id !== req.params.id) {\n                    return res.status(400).json({ \n                        message: \"J√° existe um aluno cadastrado com este CPF\" \n                    });\n                }\n            }\n            \n            // Atualizar usu√°rio se dados fornecidos\n            if (userId && (firstName || lastName || email)) {\n                await storage.updateUser(userId, {\n                    ...(firstName && { firstName }),\n                    ...(lastName && { lastName }),\n                    ...(email && { email }),\n                });\n            }\n            // Tratar atualiza√ß√µes de guardian se fornecido\n            if (guardian) {\n                const { financialResponsible, ...guardianFields } = guardian;\n                // Se estudante j√° tem guardian, atualizar, sen√£o criar novo\n                const currentStudent = await storage.getStudent(req.params.id);\n                if (currentStudent?.guardianId) {\n                    await storage.updateGuardian(currentStudent.guardianId, guardianFields);\n                    // Tratar respons√°vel financeiro\n                    if (financialResponsible) {\n                        const guardianWithFinancial = await storage.getGuardianWithFinancial(currentStudent.guardianId);\n                        if (guardianWithFinancial?.financialResponsible) {\n                            await storage.updateFinancialResponsible(guardianWithFinancial.financialResponsible.id, financialResponsible);\n                        }\n                        else {\n                            const financialData = insertFinancialResponsibleSchema.parse({\n                                ...financialResponsible,\n                                guardianId: currentStudent.guardianId,\n                            });\n                            await storage.createFinancialResponsible(financialData);\n                        }\n                    }\n                }\n                else {\n                    // Criar novo guardian\n                    const guardianData = insertGuardianSchema.parse(guardianFields);\n                    const createdGuardian = await storage.createGuardian(guardianData);\n                    studentFields.guardianId = createdGuardian.id;\n                    // Criar respons√°vel financeiro se fornecido\n                    if (financialResponsible) {\n                        const financialData = insertFinancialResponsibleSchema.parse({\n                            ...financialResponsible,\n                            guardianId: createdGuardian.id,\n                        });\n                        await storage.createFinancialResponsible(financialData);\n                    }\n                }\n            }\n            // Atualizar student\n            const studentData = insertStudentSchema.partial().parse(studentFields);\n            const student = await storage.updateStudent(req.params.id, studentData);\n            res.json(student);\n        }\n        catch (error) {\n            console.error(\"Error updating student:\", error);\n            // Tratamento espec√≠fico para erro de email duplicado\n            if (error.message && error.message.includes('users_email_unique')) {\n                return res.status(400).json({\n                    message: \"Este e-mail j√° est√° cadastrado no sistema. Por favor, utilize um e-mail diferente.\"\n                });\n            }\n            // Outros erros de valida√ß√£o do Zod\n            if (error.issues) {\n                const fieldErrors = error.issues.map((issue) => {\n                    const field = issue.path.join('.');\n                    return `${field}: ${issue.message}`;\n                }).join(', ');\n                return res.status(400).json({\n                    message: `Dados inv√°lidos: ${fieldErrors}`\n                });\n            }\n            res.status(400).json({ message: error.message || \"Erro ao atualizar estudante\" });\n        }\n    });\n    app.delete(\"/api/students/:id\", auth.requireAdminOrSecretary, async (req, res) => {\n        try {\n            await storage.deleteStudent(req.params.id);\n            res.status(204).send();\n        }\n        catch (error) {\n            console.error(\"Error deleting student:\", error);\n            res.status(500).json({ message: \"Erro ao excluir estudante\" });\n        }\n    });\n    // ============================================================================\n    // STUDENT AREA - COURSE ENROLLMENTS (Netflix-style shelves)\n    // ============================================================================\n    // Get current student's course enrollments\n    app.get('/api/student/courses', auth.isAuthenticated, async (req, res) => {\n        try {\n            const enrollments = await storage.getStudentCourseEnrollmentsForUser(req.user.id);\n            res.json(enrollments);\n        }\n        catch (error) {\n            console.error('Error fetching student enrollments:', error);\n            res.status(500).json({ message: 'Erro ao buscar matr√≠culas do estudante' });\n        }\n    });\n    // Get course details with basic books for shelves\n    app.get('/api/student/courses/:id', auth.isAuthenticated, async (req, res) => {\n        try {\n            const course = await storage.getCourseWithBooksBasic(req.params.id);\n            if (!course) {\n                return res.status(404).json({ message: 'Curso n√£o encontrado' });\n            }\n            res.json({ course });\n        }\n        catch (error) {\n            console.error('Error fetching course details for student:', error);\n            res.status(500).json({ message: 'Erro ao buscar detalhes do curso' });\n        }\n    });\n    // ============================================================================\n    // COURSE ROUTES\n    // ============================================================================\n    app.get(\"/api/courses\", auth.isAuthenticated, async (req, res) => {\n        try {\n            const courses = await storage.getCourses();\n            res.json(courses);\n        }\n        catch (error) {\n            console.error(\"Error fetching courses:\", error);\n            res.status(500).json({ message: \"Failed to fetch courses\" });\n        }\n    });\n    app.get(\"/api/courses/:id\", auth.isAuthenticated, async (req, res) => {\n        try {\n            const course = await storage.getCourse(req.params.id);\n            if (!course) {\n                return res.status(404).json({ message: \"Curso n√£o encontrado\" });\n            }\n            res.json(course);\n        }\n        catch (error) {\n            console.error(\"Error fetching course:\", error);\n            res.status(500).json({ message: \"Erro ao buscar curso\" });\n        }\n    });\n    app.post(\"/api/courses\", auth.requireAdminOrSecretary, async (req, res) => {\n        try {\n            const courseData = insertCourseSchema.parse(req.body);\n            const course = await storage.createCourse(courseData);\n            res.status(201).json(course);\n        }\n        catch (error) {\n            console.error(\"Error creating course:\", error);\n            // Tratamento espec√≠fico para erros de valida√ß√£o\n            if (error.issues) {\n                const fieldErrors = error.issues.map((issue) => {\n                    const field = issue.path.join('.');\n                    return `${field}: ${issue.message}`;\n                }).join(', ');\n                return res.status(400).json({\n                    message: `Dados inv√°lidos: ${fieldErrors}`\n                });\n            }\n            res.status(400).json({ message: error.message || \"Erro ao criar curso\" });\n        }\n    });\n    app.put(\"/api/courses/:id\", auth.requireAdminOrSecretary, async (req, res) => {\n        try {\n            const courseData = insertCourseSchema.partial().parse(req.body);\n            const course = await storage.updateCourse(req.params.id, courseData);\n            res.json(course);\n        }\n        catch (error) {\n            console.error(\"Error updating course:\", error);\n            // Tratamento espec√≠fico para erros de valida√ß√£o\n            if (error.issues) {\n                const fieldErrors = error.issues.map((issue) => {\n                    const field = issue.path.join('.');\n                    return `${field}: ${issue.message}`;\n                }).join(', ');\n                return res.status(400).json({\n                    message: `Dados inv√°lidos: ${fieldErrors}`\n                });\n            }\n            res.status(400).json({ message: error.message || \"Erro ao atualizar curso\" });\n        }\n    });\n    app.delete(\"/api/courses/:id\", auth.requireAdminOrSecretary, async (req, res) => {\n        try {\n            await storage.deleteCourse(req.params.id);\n            res.status(204).send();\n        }\n        catch (error) {\n            console.error(\"Error deleting course:\", error);\n            res.status(500).json({ message: \"Failed to delete course\" });\n        }\n    });\n    // ============================================================================\n    // BOOK ROUTES\n    // ============================================================================\n    app.get(\"/api/books\", auth.isAuthenticated, async (req, res) => {\n        try {\n            const books = await storage.getBooks();\n            res.json(books);\n        }\n        catch (error) {\n            console.error(\"Error fetching books:\", error);\n            res.status(500).json({ message: \"Failed to fetch books\" });\n        }\n    });\n    app.get(\"/api/books/:id\", auth.isAuthenticated, async (req, res) => {\n        try {\n            const book = await storage.getBook(req.params.id);\n            if (!book) {\n                return res.status(404).json({ message: \"Book not found\" });\n            }\n            res.json(book);\n        }\n        catch (error) {\n            console.error(\"Error fetching book:\", error);\n            res.status(500).json({ message: \"Failed to fetch book\" });\n        }\n    });\n    app.post(\"/api/books\", auth.requireAdminOrSecretary, async (req, res) => {\n        try {\n            const bookData = insertBookSchema.parse(req.body);\n            const book = await storage.createBook(bookData);\n            res.status(201).json(book);\n        }\n        catch (error) {\n            console.error(\"Error creating book:\", error);\n            res.status(400).json({ message: \"Invalid book data\" });\n        }\n    });\n    app.put(\"/api/books/:id\", auth.requireAdminOrSecretary, async (req, res) => {\n        try {\n            const bookData = insertBookSchema.partial().parse(req.body);\n            const book = await storage.updateBook(req.params.id, bookData);\n            res.json(book);\n        }\n        catch (error) {\n            console.error(\"Error updating book:\", error);\n            res.status(400).json({ message: \"Invalid book data\" });\n        }\n    });\n    app.delete(\"/api/books/:id\", auth.requireAdminOrSecretary, async (req, res) => {\n        try {\n            await storage.deleteBook(req.params.id);\n            res.status(204).send();\n        }\n        catch (error) {\n            console.error(\"Error deleting book:\", error);\n            res.status(500).json({ message: \"Failed to delete book\" });\n        }\n    });\n    // PDF upload route for books\n    app.post(\"/api/books/:id/upload\", auth.requireAdminOrSecretary, bookUploads.single('pdf'), async (req, res) => {\n        try {\n            const bookId = req.params.id;\n            const file = req.file;\n            if (!file) {\n                return res.status(400).json({ message: \"No PDF file provided\" });\n            }\n            // Verificar se book existe\n            const book = await storage.getBook(bookId);\n            if (!book) {\n                return res.status(404).json({ message: \"Book not found\" });\n            }\n            // Atualizar book com nova URL do PDF\n            const pdfUrl = `/uploads/books/${file.filename}`;\n            const updatedBook = await storage.updateBook(bookId, { pdfUrl });\n            res.json({\n                message: \"PDF uploaded successfully\",\n                book: updatedBook,\n                fileInfo: {\n                    filename: file.filename,\n                    originalName: file.originalname,\n                    size: file.size,\n                    url: pdfUrl\n                }\n            });\n        }\n        catch (error) {\n            console.error(\"Error uploading PDF:\", error);\n            if (error.message === 'Only PDF files are allowed!') {\n                return res.status(400).json({ message: \"Only PDF files are allowed\" });\n            }\n            res.status(500).json({ message: \"Failed to upload PDF file\" });\n        }\n    });\n    // ============================================================================\n    // CLASS ROUTES\n    // ============================================================================\n    app.get(\"/api/classes\", auth.isAuthenticated, async (req, res) => {\n        try {\n            const classes = await storage.getClasses();\n            res.json(classes);\n        }\n        catch (error) {\n            console.error(\"Error fetching classes:\", error);\n            res.status(500).json({ message: \"Failed to fetch classes\" });\n        }\n    });\n    app.get(\"/api/classes/:id\", auth.isAuthenticated, async (req, res) => {\n        try {\n            const classItem = await storage.getClass(req.params.id);\n            if (!classItem) {\n                return res.status(404).json({ message: \"Class not found\" });\n            }\n            res.json(classItem);\n        }\n        catch (error) {\n            console.error(\"Error fetching class:\", error);\n            res.status(500).json({ message: \"Failed to fetch class\" });\n        }\n    });\n    app.post(\"/api/classes\", auth.requireAdminOrSecretary, async (req, res) => {\n        try {\n            const classData = insertClassSchema.parse(req.body);\n            const classItem = await storage.createClass(classData);\n            res.status(201).json(classItem);\n        }\n        catch (error) {\n            console.error(\"Error creating class:\", error);\n            res.status(400).json({ message: \"Invalid class data\" });\n        }\n    });\n    app.put(\"/api/classes/:id\", auth.requireAdminOrSecretary, async (req, res) => {\n        try {\n            const classData = insertClassSchema.partial().parse(req.body);\n            const classItem = await storage.updateClass(req.params.id, classData);\n            res.json(classItem);\n        }\n        catch (error) {\n            console.error(\"Error updating class:\", error);\n            res.status(400).json({ message: \"Invalid class data\" });\n        }\n    });\n    app.delete(\"/api/classes/:id\", auth.requireAdminOrSecretary, async (req, res) => {\n        try {\n            await storage.deleteClass(req.params.id);\n            res.status(204).send();\n        }\n        catch (error) {\n            console.error(\"Error deleting class:\", error);\n            res.status(500).json({ message: \"Failed to delete class\" });\n        }\n    });\n    // ============================================================================\n    // TEACHER SCHEDULE ROUTES\n    // ============================================================================\n    app.get(\"/api/teachers\", auth.requireAdminOrSecretary, async (req, res) => {\n        try {\n            const teachers = await storage.getTeachers();\n            res.json(teachers);\n        }\n        catch (error) {\n            console.error(\"Error fetching teachers:\", error);\n            res.status(500).json({ message: \"Erro ao buscar professores\" });\n        }\n    });\n    app.get(\"/api/teachers/:id/schedule\", auth.requireAdminOrSecretary, async (req, res) => {\n        try {\n            const schedule = await storage.getTeacherSchedule(req.params.id);\n            res.json(schedule);\n        }\n        catch (error) {\n            console.error(\"Error fetching teacher schedule:\", error);\n            res.status(500).json({ message: \"Erro ao buscar hor√°rios do professor\" });\n        }\n    });\n    // ============================================================================\n    // LESSON ROUTES\n    // ============================================================================\n    app.get(\"/api/lessons\", auth.isAuthenticated, async (req, res) => {\n        try {\n            const lessons = await storage.getLessons();\n            res.json(lessons);\n        }\n        catch (error) {\n            console.error(\"Error fetching lessons:\", error);\n            res.status(500).json({ message: \"Failed to fetch lessons\" });\n        }\n    });\n    app.get(\"/api/lessons/:id\", auth.isAuthenticated, async (req, res) => {\n        try {\n            const lesson = await storage.getLesson(req.params.id);\n            if (!lesson) {\n                return res.status(404).json({ message: \"Lesson not found\" });\n            }\n            res.json(lesson);\n        }\n        catch (error) {\n            console.error(\"Error fetching lesson:\", error);\n            res.status(500).json({ message: \"Failed to fetch lesson\" });\n        }\n    });\n    app.post(\"/api/lessons\", auth.requireAdminOrSecretary, async (req, res) => {\n        try {\n            const lessonData = insertLessonSchema.parse(req.body);\n            const lesson = await storage.createLesson(lessonData);\n            res.status(201).json(lesson);\n        }\n        catch (error) {\n            console.error(\"Error creating lesson:\", error);\n            res.status(400).json({ message: \"Invalid lesson data\" });\n        }\n    });\n    app.put(\"/api/lessons/:id\", auth.requireAdminOrSecretary, async (req, res) => {\n        try {\n            const lessonData = insertLessonSchema.partial().parse(req.body);\n            const lesson = await storage.updateLesson(req.params.id, lessonData);\n            res.json(lesson);\n        }\n        catch (error) {\n            console.error(\"Error updating lesson:\", error);\n            res.status(400).json({ message: \"Invalid lesson data\" });\n        }\n    });\n    app.delete(\"/api/lessons/:id\", auth.requireAdminOrSecretary, async (req, res) => {\n        try {\n            await storage.deleteLesson(req.params.id);\n            res.status(204).send();\n        }\n        catch (error) {\n            console.error(\"Error deleting lesson:\", error);\n            res.status(500).json({ message: \"Failed to delete lesson\" });\n        }\n    });\n    // ============================================================================\n    // PERMISSION & ROLE ROUTES\n    // ============================================================================\n    app.get(\"/api/permissions\", auth.isAuthenticated, async (req, res) => {\n        try {\n            const permissions = await storage.getPermissions();\n            res.json(permissions);\n        }\n        catch (error) {\n            console.error(\"Error fetching permissions:\", error);\n            res.status(500).json({ message: \"Failed to fetch permissions\" });\n        }\n    });\n    app.get(\"/api/permissions/by-category\", auth.isAuthenticated, async (req, res) => {\n        try {\n            const permissions = await storage.getPermissionsByCategory();\n            res.json(permissions);\n        }\n        catch (error) {\n            console.error(\"Error fetching permissions by category:\", error);\n            res.status(500).json({ message: \"Failed to fetch permissions\" });\n        }\n    });\n    app.get(\"/api/roles\", auth.isAuthenticated, async (req, res) => {\n        try {\n            const roles = await storage.getRoles();\n            res.json(roles);\n        }\n        catch (error) {\n            console.error(\"Error fetching roles:\", error);\n            res.status(500).json({ message: \"Failed to fetch roles\" });\n        }\n    });\n    // Criar novo papel (role) din√¢mico\n    const upsertRoleSchema = z.object({\n        name: z.string().min(2),\n        displayName: z.string().min(2),\n        description: z.string().optional(),\n        isSystemRole: z.boolean().optional(),\n        isActive: z.boolean().optional(),\n    });\n    app.post(\"/api/roles\", auth.requireAdmin, async (req, res) => {\n        try {\n            const data = upsertRoleSchema.parse(req.body);\n            const role = await storage.createRole({\n                name: data.name,\n                displayName: data.displayName,\n                description: data.description,\n                isSystemRole: data.isSystemRole ?? false,\n                isActive: data.isActive ?? true,\n            });\n            res.status(201).json(role);\n        }\n        catch (error) {\n            console.error(\"Error creating role:\", error);\n            res.status(400).json({ message: \"Invalid role data\" });\n        }\n    });\n    // Atualizar papel (role)\n    app.put(\"/api/roles/:id\", auth.requireAdmin, async (req, res) => {\n        try {\n            const data = upsertRoleSchema.partial().parse(req.body);\n            const role = await storage.updateRole(req.params.id, data);\n            res.json(role);\n        }\n        catch (error) {\n            console.error(\"Error updating role:\", error);\n            res.status(400).json({ message: \"Invalid role data\" });\n        }\n    });\n    // Desativar papel (role) - soft delete\n    app.delete(\"/api/roles/:id\", auth.requireAdmin, async (req, res) => {\n        try {\n            await storage.deactivateRole(req.params.id);\n            res.status(204).send();\n        }\n        catch (error) {\n            console.error(\"Error deleting role:\", error);\n            res.status(500).json({ message: \"Failed to delete role\" });\n        }\n    });\n    // User permissions (overrides)\n    app.get(\"/api/users/:id/permissions\", auth.requirePermission('permissions:manage'), async (req, res) => {\n        try {\n            const overrides = await storage.getUserPermissionOverrides(req.params.id);\n            res.json(overrides);\n        }\n        catch (error) {\n            console.error(\"Error fetching user permissions:\", error);\n            res.status(500).json({ message: \"Failed to fetch user permissions\" });\n        }\n    });\n    const updateUserPermissionsSchema = z.object({\n        overrides: z.array(z.object({\n            permissionId: z.string(),\n            isGranted: z.boolean(),\n        }))\n    });\n    app.put(\"/api/users/:id/permissions\", auth.requirePermission('permissions:manage'), async (req, res) => {\n        try {\n            const { overrides } = updateUserPermissionsSchema.parse(req.body);\n            await storage.updateUserPermissions(req.params.id, overrides);\n            res.json({ success: true });\n        }\n        catch (error) {\n            console.error(\"Error updating user permissions:\", error);\n            res.status(400).json({ message: \"Invalid input\" });\n        }\n    });\n    // Get permissions for a specific role\n    app.get(\"/api/roles/:id/permissions\", auth.isAuthenticated, async (req, res) => {\n        try {\n            const rolePermissions = await storage.getRolePermissions(req.params.id);\n            res.json(rolePermissions);\n        }\n        catch (error) {\n            console.error(\"Error fetching role permissions:\", error);\n            res.status(500).json({ message: \"Failed to fetch role permissions\" });\n        }\n    });\n    app.put(\"/api/roles/:id/permissions\", auth.requireAdmin, async (req, res) => {\n        try {\n            const { permissionIds } = updateRolePermissionsSchema.parse(req.body);\n            await storage.updateRolePermissions(req.params.id, permissionIds);\n            res.json({ message: \"Permissions updated successfully\" });\n        }\n        catch (error) {\n            console.error(\"Error updating role permissions:\", error);\n            res.status(400).json({ message: \"Invalid permission data\" });\n        }\n    });\n    // ============================================================================\n    // PAGES ROUTES\n    // ============================================================================\n    // Get all pages\n    app.get(\"/api/pages\", auth.isAuthenticated, async (req, res) => {\n        try {\n            const pages = await storage.getPages();\n            res.json(pages);\n        }\n        catch (error) {\n            console.error(\"Error fetching pages:\", error);\n            res.status(500).json({ message: \"Failed to fetch pages\" });\n        }\n    });\n    // Create new page\n    const upsertPageSchema = z.object({\n        name: z.string().min(2),\n        displayName: z.string().min(2),\n        route: z.string().min(1),\n        isActive: z.boolean().optional(),\n    });\n    app.post(\"/api/pages\", auth.requireAdmin, async (req, res) => {\n        try {\n            const data = upsertPageSchema.parse(req.body);\n            const page = await storage.createPage({\n                name: data.name,\n                displayName: data.displayName,\n                route: data.route,\n                isActive: data.isActive ?? true,\n            });\n            res.status(201).json(page);\n        }\n        catch (error) {\n            console.error(\"Error creating page:\", error);\n            res.status(400).json({ message: \"Invalid page data\" });\n        }\n    });\n    // Update page\n    app.put(\"/api/pages/:id\", auth.requireAdmin, async (req, res) => {\n        try {\n            const data = upsertPageSchema.partial().parse(req.body);\n            const page = await storage.updatePage(req.params.id, data);\n            res.json(page);\n        }\n        catch (error) {\n            console.error(\"Error updating page:\", error);\n            res.status(400).json({ message: \"Invalid page data\" });\n        }\n    });\n    // Delete page\n    app.delete(\"/api/pages/:id\", auth.requireAdmin, async (req, res) => {\n        try {\n            await storage.deletePage(req.params.id);\n            res.status(204).send();\n        }\n        catch (error) {\n            console.error(\"Error deleting page:\", error);\n            res.status(500).json({ message: \"Failed to delete page\" });\n        }\n    });\n    // ============================================================================\n    // ROLE PAGE PERMISSIONS ROUTES\n    // ============================================================================\n    // Get role page permissions\n    app.get(\"/api/roles/:id/pages\", auth.isAuthenticated, async (req, res) => {\n        try {\n            const rolePagePermissions = await storage.getRolePagePermissions(req.params.id);\n            res.json(rolePagePermissions);\n        }\n        catch (error) {\n            console.error(\"Error fetching role page permissions:\", error);\n            res.status(500).json({ message: \"Failed to fetch role page permissions\" });\n        }\n    });\n    // Get allowed pages for a role\n    app.get(\"/api/roles/:id/allowed-pages\", auth.isAuthenticated, async (req, res) => {\n        try {\n            const allowedPages = await storage.getRoleAllowedPages(req.params.id);\n            res.json(allowedPages);\n        }\n        catch (error) {\n            console.error(\"Error fetching allowed pages:\", error);\n            res.status(500).json({ message: \"Failed to fetch allowed pages\" });\n        }\n    });\n    // Update role page permissions\n    const updateRolePagePermissionsSchema = z.object({\n        pagePermissions: z.array(z.object({\n            pageId: z.string(),\n            canAccess: z.boolean(),\n        }))\n    });\n    app.put(\"/api/roles/:id/pages\", auth.requireAdmin, async (req, res) => {\n        try {\n            const { pagePermissions } = updateRolePagePermissionsSchema.parse(req.body);\n            const roleId = req.params.id;\n            // Update each page permission\n            for (const permission of pagePermissions) {\n                const existing = await storage.getRolePagePermission(roleId, permission.pageId);\n                if (existing) {\n                    await storage.updateRolePagePermission(roleId, permission.pageId, {\n                        canAccess: permission.canAccess\n                    });\n                }\n                else {\n                    await storage.createRolePagePermission({\n                        roleId,\n                        pageId: permission.pageId,\n                        canAccess: permission.canAccess\n                    });\n                }\n            }\n            res.json({ message: \"Page permissions updated successfully\" });\n        }\n        catch (error) {\n            console.error(\"Error updating role page permissions:\", error);\n            res.status(400).json({ message: \"Invalid page permission data\" });\n        }\n    });\n    // ============================================================================\n    // SUPPORT TICKET ROUTES\n    // ============================================================================\n    app.get(\"/api/support/tickets\", auth.isAuthenticated, async (req, res) => {\n        try {\n            const tickets = await storage.getSupportTickets();\n            res.json(tickets);\n        }\n        catch (error) {\n            console.error(\"Error fetching support tickets:\", error);\n            res.status(500).json({ message: \"Failed to fetch support tickets\" });\n        }\n    });\n    app.get(\"/api/support/tickets/:id\", auth.isAuthenticated, async (req, res) => {\n        try {\n            const ticket = await storage.getSupportTicket(req.params.id);\n            if (!ticket) {\n                return res.status(404).json({ message: \"Ticket not found\" });\n            }\n            res.json(ticket);\n        }\n        catch (error) {\n            console.error(\"Error fetching support ticket:\", error);\n            res.status(500).json({ message: \"Failed to fetch support ticket\" });\n        }\n    });\n    app.post(\"/api/support/tickets\", auth.isAuthenticated, async (req, res) => {\n        try {\n            const ticketData = insertSupportTicketSchema.parse(req.body);\n            const ticket = await storage.createSupportTicket({\n                ...ticketData,\n                userId: req.user.id,\n            });\n            res.status(201).json(ticket);\n        }\n        catch (error) {\n            console.error(\"Error creating support ticket:\", error);\n            res.status(400).json({ message: \"Invalid ticket data\" });\n        }\n    });\n    app.put(\"/api/support/tickets/:id\", auth.isAuthenticated, async (req, res) => {\n        try {\n            const ticketData = insertSupportTicketSchema.partial().parse(req.body);\n            const ticket = await storage.updateSupportTicket(req.params.id, ticketData);\n            res.json(ticket);\n        }\n        catch (error) {\n            console.error(\"Error updating support ticket:\", error);\n            res.status(400).json({ message: \"Invalid ticket data\" });\n        }\n    });\n    app.post(\"/api/support/tickets/:id/responses\", auth.isAuthenticated, async (req, res) => {\n        try {\n            const responseData = insertSupportTicketResponseSchema.parse(req.body);\n            const response = await storage.createSupportTicketResponse({\n                ...responseData,\n                ticketId: req.params.id,\n                userId: req.user.id,\n            });\n            res.status(201).json(response);\n        }\n        catch (error) {\n            console.error(\"Error creating support ticket response:\", error);\n            res.status(400).json({ message: \"Invalid response data\" });\n        }\n    });\n    // ============================================================================\n    // USER SETTINGS ROUTES\n    // ============================================================================\n    app.get(\"/api/user/settings\", auth.isAuthenticated, async (req, res) => {\n        try {\n            const settings = await storage.getUserSettings(req.user.id);\n            if (!settings) {\n                // Criar settings padr√£o se n√£o existir\n                const newSettings = await storage.createUserSettings({ userId: req.user.id });\n                return res.json(newSettings);\n            }\n            res.json(settings);\n        }\n        catch (error) {\n            console.error(\"Error fetching user settings:\", error);\n            res.status(500).json({ message: \"Failed to fetch user settings\" });\n        }\n    });\n    app.put(\"/api/user/settings\", auth.isAuthenticated, async (req, res) => {\n        try {\n            const settingsData = insertUserSettingsSchema.partial().parse(req.body);\n            const settings = await storage.updateUserSettings(req.user.id, settingsData);\n            res.json(settings);\n        }\n        catch (error) {\n            console.error(\"Error updating user settings:\", error);\n            res.status(400).json({ message: \"Invalid settings data\" });\n        }\n    });\n    // ============================================================================\n    // VITE SETUP\n    // ============================================================================\n    const server = createServer(app);\n    // Setup Vite or static serving\n    if (process.env.NODE_ENV === \"development\") {\n        await setupVite(app, server);\n    }\n    else {\n        serveStatic(app);\n    }\n    return server;\n}\n","size_bytes":58464},"frontend/client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"frontend/client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"frontend/client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"backend/server/permissions.ts":{"content":"// Sistema de mapeamento de cargos para permiss√µes de p√°ginas\nimport * as storage from './storage.js';\n\nexport interface PagePermission {\n  page: string;\n  allowedRoles: string[];\n}\n\n// Fun√ß√£o para verificar se um usu√°rio tem permiss√£o para acessar uma p√°gina\nexport async function hasPagePermission(userId: string, page: string): Promise<boolean> {\n  try {\n    // Buscar o usu√°rio e seu role\n    const user = await storage.getUserById(userId);\n    if (!user) {\n      return false;\n    }\n\n    const roles = await storage.getRoles();\n    const userRole = roles.find(r => r.id === user.roleId);\n    if (!userRole) {\n      return false;\n    }\n\n    // Admin sempre tem acesso global\n    if (userRole.name === 'admin') {\n      return true;\n    }\n\n    // Buscar permiss√µes de p√°ginas do banco de dados\n    const allowedPages = await storage.getRoleAllowedPages(userRole.id);\n    return allowedPages.some(p => p.name === page);\n  } catch (error) {\n    console.error('Erro ao verificar permiss√£o de p√°gina:', error);\n    return false;\n  }\n}\n\n// Fun√ß√£o para obter todas as p√°ginas que um usu√°rio pode acessar\nexport async function getUserAllowedPages(userId: string): Promise<string[]> {\n  try {\n    // Buscar o usu√°rio e seu role\n    const user = await storage.getUserById(userId);\n    if (!user) {\n      return [];\n    }\n\n    const roles = await storage.getRoles();\n    const userRole = roles.find(r => r.id === user.roleId);\n    if (!userRole) {\n      return [];\n    }\n\n    // Admin tem acesso a todas as p√°ginas\n    if (userRole.name === 'admin') {\n      const allPages = await storage.getPages();\n      return allPages.map(p => p.name);\n    }\n\n    // Buscar p√°ginas permitidas do banco de dados\n    const allowedPages = await storage.getRoleAllowedPages(userRole.id);\n    return allowedPages.map(p => p.name);\n  } catch (error) {\n    console.error('Erro ao buscar p√°ginas permitidas:', error);\n    return [];\n  }\n}\n\n// Middleware para verificar permiss√£o de p√°gina\nexport function requirePagePermission(page: string) {\n  return async (req: any, res: any, next: any) => {\n    const user = req.user;\n    \n    if (!user) {\n      return res.status(401).json({ message: 'Usu√°rio n√£o autenticado' });\n    }\n    \n    const hasPermission = await hasPagePermission(user.id, page);\n    if (!hasPermission) {\n      return res.status(403).json({ \n        message: 'Acesso negado: voc√™ n√£o tem permiss√£o para acessar esta p√°gina' \n      });\n    }\n    \n    next();\n  };\n}","size_bytes":2481},"frontend/client/src/components/UnitModal.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { API_BASE } from \"@/lib/api\";\nimport { Paperclip, Trash2 } from \"lucide-react\";\nimport { validateCPF } from \"@/lib/cpfUtils\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\n/* ===== Subcomponentes hoistados (est√°veis) ===== */\n\ntype UploadFn = (campo: keyof FormDataShape) => void;\ntype RemoverFn = (campo: keyof FormDataShape) => void;\n\ninterface FormDataShape {\n  name: string; address: string; phone: string; email: string; franchiseeType: string;\n  franchiseeName: string; franchiseeCpf: string; franchiseeCpfDoc: string; franchiseeRg: string; franchiseeRgDoc: string;\n  franchiseeResidenceAddress: string; franchiseeResidenceDoc: string; franchiseeMaritalStatus: string; franchiseeMaritalStatusDoc: string;\n  franchiseeCurriculumDoc: string; franchiseeAssetsDoc: string; franchiseeIncomeDoc: string;\n  franchiseeSocialContractDoc: string; franchiseeCnpj: string; franchiseeCnpjDoc: string; franchiseeStateRegistration: string; franchiseeStateRegistrationDoc: string;\n  franchiseePartnersDocsDoc: string; franchiseeCertificatesDoc: string;\n  financialCapitalDoc: string; financialCashFlowDoc: string; financialTaxReturnsDoc: string; financialBankReferences: string; financialBankReferencesDoc: string;\n  realEstateLocation: string; realEstatePropertyDoc: string; realEstateLeaseDoc: string; realEstateFloorPlanDoc: string;\n}\n\nexport function AttachInput({\n  id, rotulo, campo, valorCampo, enviarPdf, removerAnexo, uploadingField\n}: {\n  id: string; rotulo: string; campo: keyof FormDataShape; valorCampo: string;\n  enviarPdf: UploadFn; removerAnexo: RemoverFn; uploadingField: string | null;\n}) {\n  return (\n    <div className=\"space-y-2\">\n      <Label htmlFor={id}>{rotulo}</Label>\n      <div className=\"flex gap-2 items-center\">\n        <Button\n          type=\"button\"\n          variant={valorCampo ? \"default\" : \"secondary\"}\n          onClick={() => enviarPdf(campo)}\n          disabled={uploadingField === campo}\n          className=\"flex-1\"\n        >\n          <Paperclip className=\"h-4 w-4 mr-2\" />\n          {uploadingField === campo ? \"Enviando...\" : valorCampo ? \"PDF Anexado\" : \"Anexar PDF\"}\n        </Button>\n        {valorCampo && (\n          <Button type=\"button\" variant=\"destructive\" size=\"icon\" onClick={() => removerAnexo(campo)}>\n            <Trash2 className=\"h-4 w-4\" />\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport function InputComAnexo({\n  inputId, rotulo, campoInput, campoAnexo, valorInput, valorAnexo,\n  setValor, enviarPdf, removerAnexo, uploadingField,\n  type = \"text\", placeholder = \"\", maxLength, aoSair\n}: {\n  inputId: string; rotulo: string;\n  campoInput: keyof FormDataShape; campoAnexo: keyof FormDataShape;\n  valorInput: string; valorAnexo: string;\n  setValor: (v: string) => void;\n  enviarPdf: UploadFn; removerAnexo: RemoverFn; uploadingField: string | null;\n  type?: string; placeholder?: string; maxLength?: number; aoSair?: () => void;\n}) {\n  return (\n    <div className=\"space-y-2\">\n      <Label htmlFor={inputId}>{rotulo}</Label>\n      <div className=\"flex gap-2 items-center\">\n        <Input\n          id={inputId}\n          data-testid={`input-${String(campoInput)}`}\n          type={type}\n          placeholder={placeholder}\n          value={valorInput}\n          onChange={(e) => setValor(e.target.value)}\n          onBlur={aoSair}\n          maxLength={maxLength}\n          className=\"flex-1\"\n          autoComplete=\"off\"\n        />\n        <Button\n          type=\"button\"\n          variant={valorAnexo ? \"default\" : \"outline\"}\n          size=\"icon\"\n          onClick={() => enviarPdf(campoAnexo)}\n          disabled={uploadingField === campoAnexo}\n          data-testid={`button-attach-${String(campoAnexo)}`}\n          title={uploadingField === campoAnexo ? \"Enviando...\" : valorAnexo ? \"PDF Anexado - Clique para trocar\" : \"Anexar PDF\"}\n        >\n          {uploadingField === campoAnexo ? (\n            <div className=\"animate-spin h-4 w-4 border-2 border-current border-t-transparent rounded-full\" />\n          ) : (\n            <Paperclip className=\"h-4 w-4\" />\n          )}\n        </Button>\n        {valorAnexo && (\n          <Button\n            type=\"button\"\n            variant=\"destructive\"\n            size=\"icon\"\n            onClick={() => removerAnexo(campoAnexo)}\n            data-testid={`button-remove-${String(campoAnexo)}`}\n            title=\"Remover anexo\"\n          >\n            <Trash2 className=\"h-4 w-4\" />\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport function TextareaComAnexo({\n  textareaId, rotulo, campoTexto, campoAnexo, valorTexto, valorAnexo,\n  setValor, enviarPdf, removerAnexo, uploadingField, placeholder = \"\"\n}: {\n  textareaId: string; rotulo: string;\n  campoTexto: keyof FormDataShape; campoAnexo: keyof FormDataShape;\n  valorTexto: string; valorAnexo: string;\n  setValor: (v: string) => void;\n  enviarPdf: UploadFn; removerAnexo: RemoverFn; uploadingField: string | null;\n  placeholder?: string;\n}) {\n  return (\n    <div className=\"space-y-2\">\n      <Label htmlFor={textareaId}>{rotulo}</Label>\n      <div className=\"flex gap-2 items-start\">\n        <Textarea\n          id={textareaId}\n          data-testid={`input-${String(campoTexto)}`}\n          placeholder={placeholder}\n          value={valorTexto}\n          onChange={(e) => setValor(e.target.value)}\n          className=\"flex-1\"\n          autoComplete=\"off\"\n        />\n        <Button\n          type=\"button\"\n          variant={valorAnexo ? \"default\" : \"outline\"}\n          size=\"icon\"\n          onClick={() => enviarPdf(campoAnexo)}\n          disabled={uploadingField === campoAnexo}\n          data-testid={`button-attach-${String(campoAnexo)}`}\n          title={uploadingField === campoAnexo ? \"Enviando...\" : valorAnexo ? \"PDF Anexado - Clique para trocar\" : \"Anexar PDF\"}\n        >\n          {uploadingField === campoAnexo ? (\n            <div className=\"animate-spin h-4 w-4 border-2 border-current border-t-transparent rounded-full\" />\n          ) : (\n            <Paperclip className=\"h-4 w-4\" />\n          )}\n        </Button>\n        {valorAnexo && (\n          <Button\n            type=\"button\"\n            variant=\"destructive\"\n            size=\"icon\"\n            onClick={() => removerAnexo(campoAnexo)}\n            data-testid={`button-remove-${String(campoAnexo)}`}\n            title=\"Remover anexo\"\n          >\n            <Trash2 className=\"h-4 w-4\" />\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n}\n\n/* ===== Componente principal ===== */\n\ninterface UnitModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  unit?: any;\n}\n\nexport function UnitModal({ open, onOpenChange, unit }: UnitModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const isEditing = !!unit;\n\n  const [formData, setFormData] = useState<FormDataShape>({\n    name: \"\", address: \"\", phone: \"\", email: \"\", franchiseeType: \"\",\n    franchiseeName: \"\", franchiseeCpf: \"\", franchiseeCpfDoc: \"\", franchiseeRg: \"\", franchiseeRgDoc: \"\",\n    franchiseeResidenceAddress: \"\", franchiseeResidenceDoc: \"\", franchiseeMaritalStatus: \"\", franchiseeMaritalStatusDoc: \"\",\n    franchiseeCurriculumDoc: \"\", franchiseeAssetsDoc: \"\", franchiseeIncomeDoc: \"\",\n    franchiseeSocialContractDoc: \"\", franchiseeCnpj: \"\", franchiseeCnpjDoc: \"\", franchiseeStateRegistration: \"\", franchiseeStateRegistrationDoc: \"\",\n    franchiseePartnersDocsDoc: \"\", franchiseeCertificatesDoc: \"\",\n    financialCapitalDoc: \"\", financialCashFlowDoc: \"\", financialTaxReturnsDoc: \"\", financialBankReferences: \"\", financialBankReferencesDoc: \"\",\n    realEstateLocation: \"\", realEstatePropertyDoc: \"\", realEstateLeaseDoc: \"\", realEstateFloorPlanDoc: \"\",\n  });\n\n  const [cpfError, setCpfError] = useState(\"\");\n  const [uploadingField, setUploadingField] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (unit) {\n      setFormData({\n        name: unit.name || \"\", address: unit.address || \"\", phone: unit.phone || \"\", email: unit.email || \"\", franchiseeType: unit.franchiseeType || \"\",\n        franchiseeName: unit.franchiseeName || \"\", franchiseeCpf: unit.franchiseeCpf ? formatarCPF(unit.franchiseeCpf) : \"\", franchiseeCpfDoc: unit.franchiseeCpfDoc || \"\",\n        franchiseeRg: unit.franchiseeRg || \"\", franchiseeRgDoc: unit.franchiseeRgDoc || \"\",\n        franchiseeResidenceAddress: unit.franchiseeResidenceAddress || \"\", franchiseeResidenceDoc: unit.franchiseeResidenceDoc || \"\",\n        franchiseeMaritalStatus: unit.franchiseeMaritalStatus || \"\", franchiseeMaritalStatusDoc: unit.franchiseeMaritalStatusDoc || \"\",\n        franchiseeCurriculumDoc: unit.franchiseeCurriculumDoc || \"\", franchiseeAssetsDoc: unit.franchiseeAssetsDoc || \"\", franchiseeIncomeDoc: unit.franchiseeIncomeDoc || \"\",\n        franchiseeSocialContractDoc: unit.franchiseeSocialContractDoc || \"\", franchiseeCnpj: unit.franchiseeCnpj ? formatarCNPJ(unit.franchiseeCnpj) : \"\", franchiseeCnpjDoc: unit.franchiseeCnpjDoc || \"\",\n        franchiseeStateRegistration: unit.franchiseeStateRegistration || \"\", franchiseeStateRegistrationDoc: unit.franchiseeStateRegistrationDoc || \"\",\n        franchiseePartnersDocsDoc: unit.franchiseePartnersDocsDoc || \"\", franchiseeCertificatesDoc: unit.franchiseeCertificatesDoc || \"\",\n        financialCapitalDoc: unit.financialCapitalDoc || \"\", financialCashFlowDoc: unit.financialCashFlowDoc || \"\", financialTaxReturnsDoc: unit.financialTaxReturnsDoc || \"\",\n        financialBankReferences: unit.financialBankReferences || \"\", financialBankReferencesDoc: unit.financialBankReferencesDoc || \"\",\n        realEstateLocation: unit.realEstateLocation || \"\", realEstatePropertyDoc: unit.realEstatePropertyDoc || \"\", realEstateLeaseDoc: unit.realEstateLeaseDoc || \"\", realEstateFloorPlanDoc: unit.realEstateFloorPlanDoc || \"\",\n      });\n    } else {\n      resetForm();\n    }\n  }, [unit]);\n\n  const resetForm = () => {\n    setFormData({\n      name: \"\", address: \"\", phone: \"\", email: \"\", franchiseeType: \"\",\n      franchiseeName: \"\", franchiseeCpf: \"\", franchiseeCpfDoc: \"\", franchiseeRg: \"\", franchiseeRgDoc: \"\",\n      franchiseeResidenceAddress: \"\", franchiseeResidenceDoc: \"\", franchiseeMaritalStatus: \"\", franchiseeMaritalStatusDoc: \"\",\n      franchiseeCurriculumDoc: \"\", franchiseeAssetsDoc: \"\", franchiseeIncomeDoc: \"\",\n      franchiseeSocialContractDoc: \"\", franchiseeCnpj: \"\", franchiseeCnpjDoc: \"\", franchiseeStateRegistration: \"\", franchiseeStateRegistrationDoc: \"\",\n      franchiseePartnersDocsDoc: \"\", franchiseeCertificatesDoc: \"\",\n      financialCapitalDoc: \"\", financialCashFlowDoc: \"\", financialTaxReturnsDoc: \"\", financialBankReferences: \"\", financialBankReferencesDoc: \"\",\n      realEstateLocation: \"\", realEstatePropertyDoc: \"\", realEstateLeaseDoc: \"\", realEstateFloorPlanDoc: \"\",\n    });\n    setCpfError(\"\");\n  };\n\n  const aoSairCPF = () => {\n    const soDigitos = formData.franchiseeCpf.replace(/\\D/g, \"\");\n    if (soDigitos && !validateCPF(soDigitos)) setCpfError(\"CPF inv√°lido\");\n    else setCpfError(\"\");\n  };\n\n\n  const criarMutacao = useMutation({\n    mutationFn: async (dados: any) => apiRequest(\"POST\", \"/api/units\", dados),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/units\"] });\n      toast({ title: \"Sucesso!\", description: \"Unidade cadastrada com sucesso\" });\n      onOpenChange(false);\n      resetForm();\n    },\n    onError: (erro: any) => {\n      const detalhes = erro?.response?.data?.details || erro?.response?.data?.error || erro.message;\n      toast({ title: \"Erro\", description: `Erro ao cadastrar unidade: ${JSON.stringify(detalhes)}`, variant: \"destructive\" });\n    },\n  });\n\n  const atualizarMutacao = useMutation({\n    mutationFn: async (dados: any) => apiRequest(\"PUT\", `/api/units/${unit?.id}`, dados),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/units\"] });\n      toast({ title: \"Sucesso!\", description: \"Unidade atualizada com sucesso\" });\n      onOpenChange(false);\n    },\n    onError: (erro: any) => {\n      const detalhes = erro?.response?.data?.details || erro?.response?.data?.error || erro.message;\n      toast({ title: \"Erro\", description: `Erro ao atualizar unidade: ${JSON.stringify(detalhes)}`, variant: \"destructive\" });\n    },\n  });\n\n  const aoEnviar = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!formData.name.trim()) {\n      toast({ title: \"Erro\", description: \"Nome da unidade √© obrigat√≥rio\", variant: \"destructive\" });\n      return;\n    }\n    if (formData.franchiseeType === \"pessoa_fisica\") {\n      const cpfLimpo = formData.franchiseeCpf.replace(/\\D/g, \"\");\n      if (cpfLimpo && !validateCPF(cpfLimpo)) {\n        setCpfError(\"CPF inv√°lido\");\n        return;\n      }\n    }\n\n\n    const nuloSeVazio = (v: string) => (v === \"\" ? null : v);\n\n    const dados: any = {\n      name: formData.name.trim(),\n      address: nuloSeVazio(formData.address),\n      phone: nuloSeVazio(formData.phone),\n      email: nuloSeVazio(formData.email),\n      franchiseeType: formData.franchiseeType === \"\" ? null : formData.franchiseeType,\n\n      franchiseeName: nuloSeVazio(formData.franchiseeName),\n      franchiseeCpf: formData.franchiseeCpf ? formData.franchiseeCpf.replace(/\\D/g, \"\") : null,\n      franchiseeCnpj: formData.franchiseeCnpj ? formData.franchiseeCnpj.replace(/\\D/g, \"\") : null,\n      franchiseeCpfDoc: nuloSeVazio(formData.franchiseeCpfDoc),\n      franchiseeRg: nuloSeVazio(formData.franchiseeRg),\n      franchiseeRgDoc: nuloSeVazio(formData.franchiseeRgDoc),\n      franchiseeResidenceAddress: nuloSeVazio(formData.franchiseeResidenceAddress),\n      franchiseeResidenceDoc: nuloSeVazio(formData.franchiseeResidenceDoc),\n      franchiseeMaritalStatus: nuloSeVazio(formData.franchiseeMaritalStatus),\n      franchiseeMaritalStatusDoc: nuloSeVazio(formData.franchiseeMaritalStatusDoc),\n      franchiseeCurriculumDoc: nuloSeVazio(formData.franchiseeCurriculumDoc),\n      franchiseeAssetsDoc: nuloSeVazio(formData.franchiseeAssetsDoc),\n      franchiseeIncomeDoc: nuloSeVazio(formData.franchiseeIncomeDoc),\n\n      franchiseeSocialContractDoc: nuloSeVazio(formData.franchiseeSocialContractDoc),\n      franchiseeCnpjDoc: nuloSeVazio(formData.franchiseeCnpjDoc),\n      franchiseeStateRegistration: nuloSeVazio(formData.franchiseeStateRegistration),\n      franchiseeStateRegistrationDoc: nuloSeVazio(formData.franchiseeStateRegistrationDoc),\n      franchiseePartnersDocsDoc: nuloSeVazio(formData.franchiseePartnersDocsDoc),\n      franchiseeCertificatesDoc: nuloSeVazio(formData.franchiseeCertificatesDoc),\n\n      financialCapitalDoc: nuloSeVazio(formData.financialCapitalDoc),\n      financialCashFlowDoc: nuloSeVazio(formData.financialCashFlowDoc),\n      financialTaxReturnsDoc: nuloSeVazio(formData.financialTaxReturnsDoc),\n      financialBankReferences: nuloSeVazio(formData.financialBankReferences),\n      financialBankReferencesDoc: nuloSeVazio(formData.financialBankReferencesDoc),\n\n      realEstateLocation: nuloSeVazio(formData.realEstateLocation),\n      realEstatePropertyDoc: nuloSeVazio(formData.realEstatePropertyDoc),\n      realEstateLeaseDoc: nuloSeVazio(formData.realEstateLeaseDoc),\n      realEstateFloorPlanDoc: nuloSeVazio(formData.realEstateFloorPlanDoc),\n    };\n\n    if (isEditing) atualizarMutacao.mutate(dados);\n    else criarMutacao.mutate(dados);\n  };\n  // m√°scaras\n  const formatarCPF = (valor: string) =>\n    valor.replace(/\\D/g, \"\")\n      .replace(/(\\d{3})(\\d)/, \"$1.$2\")\n      .replace(/(\\d{3})(\\d)/, \"$1.$2\")\n      .replace(/(\\d{3})(\\d{1,2})$/, \"$1-$2\")\n      .slice(0, 14);\n\n  const formatarCNPJ = (valor: string) =>\n    valor.replace(/\\D/g, \"\")\n      .replace(/^(\\d{2})(\\d)/, \"$1.$2\")\n      .replace(/^(\\d{2})\\.(\\d{3})(\\d)/, \"$1.$2.$3\")\n      .replace(/\\.(\\d{3})(\\d)/, \".$1/$2\")\n      .replace(/(\\d{4})(\\d{1,2})$/, \"$1-$2\")\n      .slice(0, 18);\n\n\n  const enviarPdf = async (campo: keyof FormDataShape) => {\n    const input = document.createElement(\"input\");\n    input.type = \"file\";\n    input.accept = \"application/pdf,.pdf\";\n    input.onchange = async (e: any) => {\n      const file: File | undefined = e.target.files?.[0];\n      if (!file) return;\n      setUploadingField(String(campo));\n      try {\n        const token = localStorage.getItem(\"authToken\");\n        const fd = new FormData();\n        fd.append(\"file\", file);\n        const res = await fetch(`${API_BASE}/api/upload/unit-document`, {\n          method: \"POST\",\n          headers: token ? { Authorization: `Bearer ${token}` } : {},\n          body: fd,\n          credentials: \"include\",\n        });\n        if (!res.ok) {\n          const text = await res.text();\n          throw new Error(text || \"Falha ao enviar PDF\");\n        }\n        const payload = await res.json();\n        setFormData((a) => ({ ...a, [campo]: payload.url as any }));\n        toast({ title: \"Arquivo anexado\", description: \"PDF anexado com sucesso.\" });\n      } catch (err: any) {\n        toast({ title: \"Erro ao anexar\", description: err.message || \"Falha ao enviar PDF\", variant: \"destructive\" });\n      } finally {\n        setUploadingField(null);\n      }\n    };\n    input.click();\n  };\n\n  const removerAnexo = (campo: keyof FormDataShape) => {\n    setFormData((a) => ({ ...a, [campo]: \"\" as any }));\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-5xl max-h-[90vh] overflow-y-auto\" onOpenAutoFocus={(e) => e.preventDefault()}>\n        <DialogHeader>\n          <div className=\"flex items-start justify-between\">\n            <div className=\"flex-1\">\n              <DialogTitle data-testid=\"modal-title\">\n                {isEditing ? \"Editar Unidade / Franquia\" : \"Nova Unidade / Franquia\"}\n              </DialogTitle>\n              <DialogDescription>\n                {isEditing ? \"Atualize as informa√ß√µes da unidade e dados de franquia\" : \"Preencha os dados para cadastrar uma nova unidade franqueada\"}\n              </DialogDescription>\n            </div>\n            {!isEditing && (\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => {\n                  setFormData({\n                    name: \"Unidade Centro - S√£o Paulo\",\n                    address: \"Rua Augusta, 1000\",\n                    phone: \"(11) 3456-7890\",\n                    email: \"centro@franquiaidiomas.com.br\",\n                    franchiseeType: \"pessoa_fisica\",\n                    franchiseeName: \"Jo√£o Silva Santos\",\n                    franchiseeCpf: \"123.456.789-00\",\n                    franchiseeCpfDoc: \"\",\n                    franchiseeRg: \"12.345.678-9\",\n                    franchiseeRgDoc: \"\",\n                    franchiseeResidenceAddress: \"Rua das Flores, 500 - Vila Madalena\",\n                    franchiseeResidenceDoc: \"\",\n                    franchiseeMaritalStatus: \"casado\",\n                    franchiseeMaritalStatusDoc: \"\",\n                    franchiseeCurriculumDoc: \"\",\n                    franchiseeAssetsDoc: \"\",\n                    franchiseeIncomeDoc: \"\",\n                    franchiseeSocialContractDoc: \"\",\n                    franchiseeCnpj: \"\",\n                    franchiseeCnpjDoc: \"\",\n                    franchiseeStateRegistration: \"\",\n                    franchiseeStateRegistrationDoc: \"\",\n                    franchiseePartnersDocsDoc: \"\",\n                    franchiseeCertificatesDoc: \"\",\n                    financialCapitalDoc: \"\",\n                    financialCashFlowDoc: \"\",\n                    financialTaxReturnsDoc: \"\",\n                    financialBankReferences: \"Banco do Brasil - Ag: 1234-5\",\n                    financialBankReferencesDoc: \"\",\n                    realEstateLocation: \"Centro Comercial - T√©rreo\",\n                    realEstatePropertyDoc: \"\",\n                    realEstateLeaseDoc: \"\",\n                    realEstateFloorPlanDoc: \"\",\n                  });\n                  toast({\n                    title: \"Dados de teste carregados\",\n                    description: \"Formul√°rio preenchido com dados exemplares\",\n                  });\n                }}\n                className=\"ml-2\"\n              >\n                üìù Dados de Teste\n              </Button>\n            )}\n          </div>\n        </DialogHeader>\n\n        <form\n          onSubmit={aoEnviar}\n          className=\"space-y-6\"\n          onKeyDown={(e) => {\n            if (e.key === \"Enter\" && (e.target as HTMLElement).tagName !== \"TEXTAREA\") e.preventDefault();\n          }}\n        >\n          {/* Informa√ß√µes B√°sicas */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold border-b pb-2\">Informa√ß√µes B√°sicas da Unidade</h3>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\">Nome da Unidade *</Label>\n                <Input\n                  id=\"name\"\n                  data-testid=\"input-name\"\n                  required\n                  value={formData.name}\n                  onChange={(e) => setFormData((a) => ({ ...a, name: e.target.value }))}\n                  autoComplete=\"off\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"phone\">Telefone</Label>\n                <Input\n                  id=\"phone\"\n                  data-testid=\"input-phone\"\n                  value={formData.phone}\n                  onChange={(e) => setFormData((a) => ({ ...a, phone: e.target.value }))}\n                  autoComplete=\"off\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">E-mail</Label>\n                <Input\n                  id=\"email\"\n                  data-testid=\"input-email\"\n                  type=\"email\"\n                  value={formData.email}\n                  onChange={(e) => setFormData((a) => ({ ...a, email: e.target.value }))}\n                  autoComplete=\"off\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"address\">Endere√ßo</Label>\n                <Textarea\n                  id=\"address\"\n                  data-testid=\"input-address\"\n                  value={formData.address}\n                  onChange={(e) => setFormData((a) => ({ ...a, address: e.target.value }))}\n                  autoComplete=\"off\"\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Tabs */}\n          <Tabs defaultValue=\"franchisee\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-3\">\n              <TabsTrigger value=\"franchisee\" data-testid=\"tab-franchisee\">Dados do Franqueado</TabsTrigger>\n              <TabsTrigger value=\"financial\" data-testid=\"tab-financial\">Dados Financeiros</TabsTrigger>\n              <TabsTrigger value=\"realestate\" data-testid=\"tab-realestate\">Dados Imobili√°rios</TabsTrigger>\n            </TabsList>\n\n            {/* Franqueado */}\n            <TabsContent value=\"franchisee\" className=\"space-y-4\">\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold border-b pb-2\">Dados do Franqueado</h3>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"franchiseeType\">Tipo de Franqueado</Label>\n                  <Select\n                    value={formData.franchiseeType}\n                    onValueChange={(v) => setFormData((a) => ({ ...a, franchiseeType: v }))}\n                  >\n                    <SelectTrigger id=\"franchiseeType\" data-testid=\"select-franchiseeType\">\n                      <SelectValue placeholder=\"Selecione...\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"pessoa_fisica\">Pessoa F√≠sica</SelectItem>\n                      <SelectItem value=\"pessoa_juridica\">Pessoa Jur√≠dica</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {formData.franchiseeType === \"pessoa_fisica\" && (\n                  <div className=\"space-y-4 border-t pt-4\">\n                    <h4 className=\"font-semibold\">Pessoa F√≠sica</h4>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"franchiseeName\">Nome Completo</Label>\n                        <Input\n                          id=\"franchiseeName\"\n                          data-testid=\"input-franchiseeName\"\n                          value={formData.franchiseeName}\n                          onChange={(e) => setFormData((a) => ({ ...a, franchiseeName: e.target.value }))}\n                          autoComplete=\"off\"\n                        />\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <InputComAnexo\n                          inputId=\"franchiseeCpf\"\n                          rotulo=\"CPF\"\n                          campoInput=\"franchiseeCpf\"\n                          campoAnexo=\"franchiseeCpfDoc\"\n                          valorInput={formData.franchiseeCpf}\n                          valorAnexo={formData.franchiseeCpfDoc}\n                          setValor={(v) => { setFormData(a => ({ ...a, franchiseeCpf: formatarCPF(v) })); setCpfError(\"\"); }}\n                          enviarPdf={enviarPdf}\n                          removerAnexo={removerAnexo}\n                          uploadingField={uploadingField}\n                          placeholder=\"000.000.000-00\"\n                          maxLength={14}\n                          aoSair={aoSairCPF}\n                        />\n\n                        {cpfError && <p className=\"text-sm text-red-500\">{cpfError}</p>}\n                      </div>\n\n                      <InputComAnexo\n                        inputId=\"franchiseeRg\"\n                        rotulo=\"RG\"\n                        campoInput=\"franchiseeRg\"\n                        campoAnexo=\"franchiseeRgDoc\"\n                        valorInput={formData.franchiseeRg}\n                        valorAnexo={formData.franchiseeRgDoc}\n                        setValor={(v) => setFormData((a) => ({ ...a, franchiseeRg: v }))}\n                        enviarPdf={enviarPdf}\n                        removerAnexo={removerAnexo}\n                        uploadingField={uploadingField}\n                      />\n\n                      <InputComAnexo\n                        inputId=\"franchiseeResidenceAddress\"\n                        rotulo=\"Endere√ßo de Resid√™ncia\"\n                        campoInput=\"franchiseeResidenceAddress\"\n                        campoAnexo=\"franchiseeResidenceDoc\"\n                        valorInput={formData.franchiseeResidenceAddress}\n                        valorAnexo={formData.franchiseeResidenceDoc}\n                        setValor={(v) => setFormData((a) => ({ ...a, franchiseeResidenceAddress: v }))}\n                        enviarPdf={enviarPdf}\n                        removerAnexo={removerAnexo}\n                        uploadingField={uploadingField}\n                      />\n\n                      <InputComAnexo\n                        inputId=\"franchiseeMaritalStatus\"\n                        rotulo=\"Estado Civil e Regime de Bens\"\n                        campoInput=\"franchiseeMaritalStatus\"\n                        campoAnexo=\"franchiseeMaritalStatusDoc\"\n                        valorInput={formData.franchiseeMaritalStatus}\n                        valorAnexo={formData.franchiseeMaritalStatusDoc}\n                        setValor={(v) => setFormData((a) => ({ ...a, franchiseeMaritalStatus: v }))}\n                        enviarPdf={enviarPdf}\n                        removerAnexo={removerAnexo}\n                        uploadingField={uploadingField}\n                      />\n\n                      <AttachInput id=\"franchiseeCurriculumDoc\" rotulo=\"Curr√≠culo/Hist√≥rico Profissional\" campo=\"franchiseeCurriculumDoc\"\n                        valorCampo={formData.franchiseeCurriculumDoc} enviarPdf={enviarPdf} removerAnexo={removerAnexo} uploadingField={uploadingField} />\n                      <AttachInput id=\"franchiseeAssetsDoc\" rotulo=\"Declara√ß√£o de Bens\" campo=\"franchiseeAssetsDoc\"\n                        valorCampo={formData.franchiseeAssetsDoc} enviarPdf={enviarPdf} removerAnexo={removerAnexo} uploadingField={uploadingField} />\n                      <AttachInput id=\"franchiseeIncomeDoc\" rotulo=\"Comprovante de Renda\" campo=\"franchiseeIncomeDoc\"\n                        valorCampo={formData.franchiseeIncomeDoc} enviarPdf={enviarPdf} removerAnexo={removerAnexo} uploadingField={uploadingField} />\n                    </div>\n                  </div>\n                )}\n\n                {formData.franchiseeType === \"pessoa_juridica\" && (\n                  <div className=\"space-y-4 border-t pt-4\">\n                    <h4 className=\"font-semibold\">Pessoa Jur√≠dica</h4>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <AttachInput id=\"franchiseeSocialContractDoc\" rotulo=\"Contrato Social/Estatuto\" campo=\"franchiseeSocialContractDoc\"\n                        valorCampo={formData.franchiseeSocialContractDoc} enviarPdf={enviarPdf} removerAnexo={removerAnexo} uploadingField={uploadingField} />\n\n                      <InputComAnexo\n                        inputId=\"franchiseeCnpj\"\n                        rotulo=\"CNPJ\"\n                        campoInput=\"franchiseeCnpj\"\n                        campoAnexo=\"franchiseeCnpjDoc\"\n                        valorInput={formData.franchiseeCnpj}\n                        valorAnexo={formData.franchiseeCnpjDoc}\n                        setValor={(v) => setFormData(a => ({ ...a, franchiseeCnpj: formatarCNPJ(v) }))}\n                        enviarPdf={enviarPdf}\n                        removerAnexo={removerAnexo}\n                        uploadingField={uploadingField}\n                        placeholder=\"00.000.000/0000-00\"\n                        maxLength={18}\n                      />\n\n\n                      <InputComAnexo\n                        inputId=\"franchiseeStateRegistration\"\n                        rotulo=\"Inscri√ß√£o Estadual/Municipal\"\n                        campoInput=\"franchiseeStateRegistration\"\n                        campoAnexo=\"franchiseeStateRegistrationDoc\"\n                        valorInput={formData.franchiseeStateRegistration}\n                        valorAnexo={formData.franchiseeStateRegistrationDoc}\n                        setValor={(v) => setFormData((a) => ({ ...a, franchiseeStateRegistration: v }))}\n                        enviarPdf={enviarPdf}\n                        removerAnexo={removerAnexo}\n                        uploadingField={uploadingField}\n                      />\n\n                      <AttachInput id=\"franchiseePartnersDocsDoc\" rotulo=\"Documentos dos S√≥cios\" campo=\"franchiseePartnersDocsDoc\"\n                        valorCampo={formData.franchiseePartnersDocsDoc} enviarPdf={enviarPdf} removerAnexo={removerAnexo} uploadingField={uploadingField} />\n                      <AttachInput id=\"franchiseeCertificatesDoc\" rotulo=\"Certid√µes Negativas\" campo=\"franchiseeCertificatesDoc\"\n                        valorCampo={formData.franchiseeCertificatesDoc} enviarPdf={enviarPdf} removerAnexo={removerAnexo} uploadingField={uploadingField} />\n                    </div>\n                  </div>\n                )}\n              </div>\n            </TabsContent>\n\n            {/* Financeiros */}\n            <TabsContent value=\"financial\" className=\"space-y-4\">\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold border-b pb-2\">Dados Financeiros</h3>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <AttachInput id=\"financialCapitalDoc\" rotulo=\"Capital Dispon√≠vel para Investimento\" campo=\"financialCapitalDoc\"\n                    valorCampo={formData.financialCapitalDoc} enviarPdf={enviarPdf} removerAnexo={removerAnexo} uploadingField={uploadingField} />\n                  <AttachInput id=\"financialCashFlowDoc\" rotulo=\"Prova de Capacidade de Giro\" campo=\"financialCashFlowDoc\"\n                    valorCampo={formData.financialCashFlowDoc} enviarPdf={enviarPdf} removerAnexo={removerAnexo} uploadingField={uploadingField} />\n                  <AttachInput id=\"financialTaxReturnsDoc\" rotulo=\"Declara√ß√£o de Imposto de Renda\" campo=\"financialTaxReturnsDoc\"\n                    valorCampo={formData.financialTaxReturnsDoc} enviarPdf={enviarPdf} removerAnexo={removerAnexo} uploadingField={uploadingField} />\n\n                  <TextareaComAnexo\n                    textareaId=\"financialBankReferences\"\n                    rotulo=\"Refer√™ncias Banc√°rias e Comerciais\"\n                    campoTexto=\"financialBankReferences\"\n                    campoAnexo=\"financialBankReferencesDoc\"\n                    valorTexto={formData.financialBankReferences}\n                    valorAnexo={formData.financialBankReferencesDoc}\n                    setValor={(v) => setFormData((a) => ({ ...a, financialBankReferences: v }))}\n                    enviarPdf={enviarPdf}\n                    removerAnexo={removerAnexo}\n                    uploadingField={uploadingField}\n                    placeholder=\"Contatos de refer√™ncias\"\n                  />\n                </div>\n              </div>\n            </TabsContent>\n\n            {/* Imobili√°rios */}\n            <TabsContent value=\"realestate\" className=\"space-y-4\">\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold border-b pb-2\">Dados Imobili√°rios</h3>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"realEstateLocation\">Localiza√ß√£o Pretendida (Link)</Label>\n                    <Input\n                      id=\"realEstateLocation\"\n                      data-testid=\"input-realEstateLocation\"\n                      placeholder=\"URL do Google Maps ou similar\"\n                      value={formData.realEstateLocation}\n                      onChange={(e) => setFormData((a) => ({ ...a, realEstateLocation: e.target.value }))}\n                      autoComplete=\"off\"\n                    />\n                  </div>\n\n                  <AttachInput id=\"realEstatePropertyDoc\" rotulo=\"Documentos do Im√≥vel\" campo=\"realEstatePropertyDoc\"\n                    valorCampo={formData.realEstatePropertyDoc} enviarPdf={enviarPdf} removerAnexo={removerAnexo} uploadingField={uploadingField} />\n                  <AttachInput id=\"realEstateLeaseDoc\" rotulo=\"Contrato de Loca√ß√£o\" campo=\"realEstateLeaseDoc\"\n                    valorCampo={formData.realEstateLeaseDoc} enviarPdf={enviarPdf} removerAnexo={removerAnexo} uploadingField={uploadingField} />\n                  <AttachInput id=\"realEstateFloorPlanDoc\" rotulo=\"Planta Baixa/Croqui\" campo=\"realEstateFloorPlanDoc\"\n                    valorCampo={formData.realEstateFloorPlanDoc} enviarPdf={enviarPdf} removerAnexo={removerAnexo} uploadingField={uploadingField} />\n                </div>\n              </div>\n            </TabsContent>\n          </Tabs>\n\n          <DialogFooter>\n            <Button type=\"button\" variant=\"outline\" onClick={() => onOpenChange(false)} data-testid=\"button-cancel\">\n              Cancelar\n            </Button>\n            <Button type=\"submit\" disabled={criarMutacao.isPending || atualizarMutacao.isPending} data-testid=\"button-submit\">\n              {(criarMutacao.isPending || atualizarMutacao.isPending) && <i className=\"fas fa-spinner fa-spin mr-2\"></i>}\n              {isEditing ? \"Atualizar\" : \"Cadastrar\"}\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":36355},"backend/server/auth.js":{"content":"import bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport { storage } from './storage.js';\n// JWT_SECRET √© obrigat√≥rio - falha se n√£o estiver definido\nconst JWT_SECRET = process.env.JWT_SECRET;\nif (!JWT_SECRET) {\n    throw new Error('JWT_SECRET environment variable must be set');\n}\nconst SALT_ROUNDS = 10;\n// ============================================================================\n// PASSWORD HASHING\n// ============================================================================\nexport async function hashPassword(password) {\n    return await bcrypt.hash(password, SALT_ROUNDS);\n}\nexport async function comparePassword(password, hash) {\n    return await bcrypt.compare(password, hash);\n}\nexport function generateToken(user) {\n    const payload = {\n        id: user.id,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        roleId: user.roleId,\n    };\n    return jwt.sign(payload, JWT_SECRET, { expiresIn: '24h' });\n}\nexport function verifyToken(token) {\n    return jwt.verify(token, JWT_SECRET);\n}\n// ============================================================================\n// AUTHENTICATION\n// ============================================================================\nexport async function authenticateUser(email, password) {\n    const user = await storage.getUserByEmail(email);\n    if (!user) {\n        return null;\n    }\n    if (!user.password) {\n        return null;\n    }\n    const isValid = await comparePassword(password, user.password);\n    if (!isValid) {\n        return null;\n    }\n    if (!user.isActive) {\n        throw new Error('User account is inactive');\n    }\n    const token = generateToken(user);\n    return { user, token };\n}\n// ============================================================================\n// MIDDLEWARE\n// ============================================================================\nexport function isAuthenticated(req, res, next) {\n    const authHeader = req.headers.authorization;\n    const token = authHeader && authHeader.startsWith('Bearer ') ? authHeader.substring(7) : null;\n    if (!token) {\n        return res.status(401).json({ message: \"Token n√£o fornecido\" });\n    }\n    try {\n        const decoded = verifyToken(token);\n        req.user = decoded;\n        return next();\n    }\n    catch (error) {\n        return res.status(401).json({ message: \"Token inv√°lido\" });\n    }\n}\nexport function requireAdmin(req, res, next) {\n    isAuthenticated(req, res, async () => {\n        try {\n            const user = await storage.getUserById(req.user.id);\n            if (!user) {\n                return res.status(401).json({ message: \"Usu√°rio n√£o encontrado\" });\n            }\n            const role = await storage.getRoleByName('admin');\n            if (user.roleId === role?.id) {\n                return next();\n            }\n            return res.status(403).json({ message: \"Acesso negado - Permiss√£o de administrador necess√°ria\" });\n        }\n        catch (error) {\n            return res.status(500).json({ message: \"Erro ao verificar permiss√µes\" });\n        }\n    });\n}\n// Permission-based middleware\nexport function requirePermission(permissionName) {\n    return (req, res, next) => {\n        isAuthenticated(req, res, async () => {\n            try {\n                const user = await storage.getUserById(req.user.id);\n                if (!user) {\n                    return res.status(401).json({ message: \"Usu√°rio n√£o encontrado\" });\n                }\n                // Admin tem acesso a tudo\n                const roles = await storage.getRoles();\n                const userRole = roles.find((r) => r.id === user.roleId);\n                if (userRole?.name === 'admin') {\n                    return next();\n                }\n                // Verifica permiss√µes do papel\n                const rolePerms = await storage.getRolePermissionsByName(userRole?.name || '');\n                let allowed = rolePerms.some((rp) => rp.permission.name === permissionName);\n                // Considera overrides por usu√°rio: grant adiciona, deny remove\n                const overrides = await storage.getUserPermissionOverrides(user.id);\n                for (const ov of overrides) {\n                    if (ov.permission.name === permissionName) {\n                        allowed = ov.isGranted ? true : false;\n                    }\n                }\n                if (allowed)\n                    return next();\n                return res.status(403).json({ message: \"Acesso negado - permiss√£o requerida\", permission: permissionName });\n            }\n            catch (error) {\n                return res.status(500).json({ message: \"Erro ao verificar permiss√µes\" });\n            }\n        });\n    };\n}\nexport function requireAdminOrSecretary(req, res, next) {\n    isAuthenticated(req, res, async () => {\n        try {\n            const user = await storage.getUserById(req.user.id);\n            if (!user) {\n                return res.status(401).json({ message: \"Usu√°rio n√£o encontrado\" });\n            }\n            const adminRole = await storage.getRoleByName('admin');\n            const secretaryRole = await storage.getRoleByName('secretary');\n            if (user.roleId === adminRole?.id || user.roleId === secretaryRole?.id) {\n                return next();\n            }\n            return res.status(403).json({ message: \"Acesso negado - Permiss√£o de administrador ou secret√°rio necess√°ria\" });\n        }\n        catch (error) {\n            return res.status(500).json({ message: \"Erro ao verificar permiss√µes\" });\n        }\n    });\n}\nexport const auth = {\n    hashPassword,\n    comparePassword,\n    generateToken,\n    verifyToken,\n    authenticateUser,\n    isAuthenticated,\n    requireAdmin,\n    requirePermission,\n    requireAdminOrSecretary,\n};\n","size_bytes":5809},"GUIA-VPS.md":{"content":"# Migra√ß√£o para Docker - ERP Idiomas\n\n## üê≥ Dockeriza√ß√£o do Sistema Existente\n\n### 1. Instalar Docker (se n√£o tiver)\n\n```bash\n# Conectar no VPS\nssh root@erp.vision.dev.br\n\n# Instalar Docker\ncurl -fsSL https://get.docker.com -o get-docker.sh\nsh get-docker.sh\n\n# Instalar Docker Compose\ncurl -L \"https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\n```\n\n### 2. Preparar Estrutura Docker\n\n```bash\n# Ir para pasta da aplica√ß√£o (onde est√£o as pastas front e back)\ncd /caminho/para/sua/aplicacao\n\n# Copiar arquivos Docker do projeto\n# (Dockerfile do frontend, Dockerfile do backend, docker-compose.yml, etc.)\n```\n\n### 3. Ajustar docker-compose.yml\n\nEdite o `docker-compose.yml` para usar sua configura√ß√£o atual:\n\n```yaml\nversion: '3.8'\n\nservices:\n  frontend:\n    build:\n      context: ./front  # Sua pasta atual do frontend\n      dockerfile: ../Dockerfile  # Copie o Dockerfile para a raiz\n    container_name: erp-frontend\n    restart: unless-stopped\n    ports:\n       - \"5051:80\"\n    networks:\n      - erp-network\n\n  backend:\n    build:\n      context: ./back   # Sua pasta atual do backend\n      dockerfile: ../Dockerfile  # Copie o Dockerfile para a raiz\n    container_name: erp-backend\n    restart: unless-stopped\n    ports:\n       - \"5052:3000\"\n    environment:\n      - NODE_ENV=production\n      # Use suas vari√°veis de ambiente existentes\n    volumes:\n      - ./back/uploads:/app/uploads\n    networks:\n      - erp-network\n    depends_on:\n      - database\n\n  database:\n    image: postgres:15-alpine\n    container_name: erp-database\n    restart: unless-stopped\n    environment:\n      # Use suas configura√ß√µes atuais do banco\n      POSTGRES_DB: seu_banco_atual\n      POSTGRES_USER: seu_usuario_atual\n      POSTGRES_PASSWORD: sua_senha_atual\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n      # Importar banco existente (opcional)\n      - ./backup.sql:/docker-entrypoint-initdb.d/backup.sql\n    ports:\n      - \"5432:5432\"\n    networks:\n      - erp-network\n\nvolumes:\n  postgres_data:\n\nnetworks:\n  erp-network:\n    driver: bridge\n```\n\n### 4. Migrar Banco de Dados (Opcional)\n\nSe quiser migrar o banco atual para o container:\n\n```bash\n# Fazer backup do banco atual\npg_dump -h localhost -U seu_usuario seu_banco > backup.sql\n\n# Colocar o backup na pasta da aplica√ß√£o\n# O Docker vai importar automaticamente na primeira execu√ß√£o\n```\n\n### 5. Ajustar Nginx\n\nEdite sua configura√ß√£o atual do Nginx para apontar para os containers:\n\n```bash\n# Editar configura√ß√£o existente\nnano /etc/nginx/sites-available/erp-idiomas\n```\n\n**Ajustar para:**\n```nginx\n# Frontend (erp.vision.dev.br)\nserver {\n    listen 443 ssl;\n    server_name erp.vision.dev.br;\n    \n    # Seus certificados SSL existentes\n    ssl_certificate /caminho/para/seu/certificado;\n    ssl_certificate_key /caminho/para/sua/chave;\n\n    location / {\n         proxy_pass http://localhost:5051;  # Container do frontend\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n\n# Backend (erpapi.vision.dev.br)\nserver {\n    listen 443 ssl;\n    server_name erpapi.vision.dev.br;\n    \n    # Seus certificados SSL existentes\n    ssl_certificate /caminho/para/seu/certificado;\n    ssl_certificate_key /caminho/para/sua/chave;\n\n    location / {\n         proxy_pass http://localhost:5052;  # Container do backend\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n    }\n}\n```\n\n### 6. Parar Sistema Atual e Subir Docker\n\n```bash\n# Parar aplica√ß√£o atual (ajuste conforme seu setup)\nsystemctl stop sua-aplicacao-frontend\nsystemctl stop sua-aplicacao-backend\n# ou\npm2 stop all\n\n# Subir com Docker (UM COMANDO S√ì!)\ndocker-compose up -d --build\n\n# Verificar se subiu\ndocker-compose ps\ndocker-compose logs -f\n```\n\n## üéØ **Agora √© s√≥ UM comando!**\n\nDepois de configurado, para rodar o sistema completo:\n\n```bash\n# Subir tudo (frontend + backend + banco)\ndocker-compose up -d\n\n# Ver se est√° rodando\ndocker-compose ps\n\n# Ver logs\ndocker-compose logs -f\n```\n\n**N√£o precisa mais de PM2!** O Docker gerencia tudo automaticamente.\n\n### 7. Testar e Recarregar Nginx\n\n```bash\n# Testar configura√ß√£o\nnginx -t\n\n# Recarregar Nginx\nsystemctl reload nginx\n\n# Testar os dom√≠nios\ncurl -I https://erp.vision.dev.br\ncurl -I https://erpapi.vision.dev.br\n```\n\n### 8. Comandos √öteis\n\n```bash\n# Ver status dos containers\ndocker-compose ps\n\n# Ver logs\ndocker-compose logs -f\n\n# Reiniciar apenas um servi√ßo\ndocker-compose restart backend\ndocker-compose restart frontend\n\n# Parar tudo\ndocker-compose down\n\n# Subir novamente\ndocker-compose up -d\n\n# Rebuild apenas um servi√ßo\ndocker-compose up -d --build backend\n```\n\n### 9. Deploy Autom√°tico (do seu PC)\n\nConfigure o `deploy.config.js` com seus dados:\n\n```javascript\nmodule.exports = {\n  server: {\n    host: 'erp.vision.dev.br',  // ou o IP do seu VPS\n    username: 'root',\n    port: 22,\n    privateKey: '~/.ssh/id_rsa',\n  },\n  paths: {\n    app: '/caminho/para/sua/aplicacao',  // onde est√£o as pastas front e back\n    backup: '/opt/backups/erp-idiomas'\n  }\n};\n```\n\nDepois use:\n```bash\n# Deploy r√°pido (s√≥ backend)\nnpm run deploy:quick\n\n# Deploy completo\nnpm run deploy\n```\n\n## üö® Troubleshooting\n\n### Container n√£o sobe\n```bash\n# Ver logs detalhados\ndocker-compose logs nome-do-container\n\n# Verificar portas em uso\n  netstat -tlnp | grep :5052\n  netstat -tlnp | grep :5051\n```\n\n### Nginx n√£o conecta\n```bash\n# Verificar se containers est√£o rodando\ndocker-compose ps\n\n# Testar conex√£o local\n  curl http://localhost:5052  # backend\n  curl http://localhost:5051  # frontend\n```\n\n### Migra√ß√£o do banco\n```bash\n# Se der erro na migra√ß√£o, restaurar manualmente\ndocker-compose exec database psql -U seu_usuario -d seu_banco -f /docker-entrypoint-initdb.d/backup.sql\n```","size_bytes":6275},"replit.md":{"content":"# Overview\n\nEduManage is a comprehensive school management system designed specifically for language schools. The system provides role-based access control for different user types (admins, teachers, secretaries, financial staff, students, and developers) to manage educational operations including student enrollment, staff management, class scheduling, and course administration.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n\n**Framework**: React with TypeScript using Vite as the build tool\n- **Component Library**: Radix UI primitives with shadcn/ui components\n- **Styling**: Tailwind CSS with CSS custom properties for theming\n- **State Management**: TanStack Query (React Query) for server state management\n- **Routing**: Wouter for client-side routing\n- **Form Handling**: React Hook Form with Zod validation\n\nThe frontend follows a component-based architecture with:\n- Layout components for consistent page structure\n- Reusable UI components in the `components/ui` directory\n- Page components for different application views\n- Custom hooks for authentication and other shared logic\n\n## Backend Architecture\n\n**Framework**: Express.js with TypeScript\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Authentication**: Replit Auth with OpenID Connect (OIDC) integration\n- **Session Management**: Express sessions with PostgreSQL storage\n- **API Design**: RESTful API endpoints with proper error handling\n\nThe backend uses a service layer pattern with:\n- Database layer using Drizzle ORM for schema management and queries\n- Storage service layer for business logic abstraction\n- Route handlers for API endpoints\n- Middleware for authentication and request logging\n\n## Database Schema\n\nThe system uses a role-based access control model with the following core entities:\n- **Users**: Central user management with role-based permissions (developer, admin, secretary, financial, teacher, student)\n- **Units**: Physical locations or branches of the school\n- **Staff**: Employee records linked to user accounts\n- **Students**: Student records with enrollment information\n- **Courses**: Course definitions and curriculum\n- **Classes**: Specific class instances with scheduling\n- **Lessons**: Individual lesson records\n- **Sessions**: Authentication session storage (required for Replit Auth)\n\nThe schema uses PostgreSQL enums for role management and includes proper foreign key relationships between entities.\n\n## Authentication & Authorization\n\n**Authentication Provider**: Replit Auth with OIDC\n- Session-based authentication with secure HTTP-only cookies\n- Automatic user provisioning on first login\n- Role-based access control throughout the application\n- Protected routes requiring authentication\n\nDifferent user roles have different access levels:\n- **Developer**: Full system access for development purposes\n- **Admin**: Complete administrative access\n- **Secretary**: Student and enrollment management\n- **Financial**: Financial operations access\n- **Teacher**: Class and student management within assigned classes\n- **Student**: Limited access to personal academic information\n\n## Development Environment\n\n**Build System**: Vite with hot module replacement for development\n- TypeScript for type safety across the entire codebase\n- ESLint and Prettier for code quality (implied by project structure)\n- Drizzle Kit for database migrations and schema management\n- Development and production build configurations\n\nThe project uses a monorepo structure with shared types and schemas between frontend and backend through the `shared` directory.\n\n# External Dependencies\n\n## Database & Infrastructure\n- **Neon Database**: PostgreSQL database hosting with serverless architecture\n- **Replit Platform**: Development environment and deployment platform\n\n## Authentication & Session Management\n- **Replit Auth**: OIDC-based authentication service\n- **connect-pg-simple**: PostgreSQL session store for Express sessions\n\n## UI & Component Libraries\n- **Radix UI**: Headless UI primitives for accessible components\n- **shadcn/ui**: Pre-built component library built on Radix UI\n- **Tailwind CSS**: Utility-first CSS framework for styling\n- **Lucide React**: Icon library for consistent iconography\n\n## Development Tools\n- **Drizzle ORM**: Type-safe database toolkit with schema management\n- **TanStack Query**: Data fetching and caching library for React\n- **Zod**: Schema validation library for runtime type checking\n- **React Hook Form**: Form state management with validation\n\n## Build & Development\n- **Vite**: Fast build tool with hot module replacement\n- **TypeScript**: Static type checking for JavaScript\n- **Wouter**: Lightweight routing library for React","size_bytes":4773},"backend/server/auth.ts":{"content":"import bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport { storage } from './storage.js';\nimport type { User } from '../shared/schema.js';\n\n// JWT_SECRET √© obrigat√≥rio - falha se n√£o estiver definido\nconst JWT_SECRET = process.env.JWT_SECRET;\nif (!JWT_SECRET) {\n  throw new Error('JWT_SECRET environment variable must be set');\n}\n\nconst SALT_ROUNDS = 10;\n\n// ============================================================================\n// PASSWORD HASHING\n// ============================================================================\n\nexport async function hashPassword(password: string): Promise<string> {\n  return await bcrypt.hash(password, SALT_ROUNDS);\n}\n\nexport async function comparePassword(password: string, hash: string): Promise<boolean> {\n  return await bcrypt.compare(password, hash);\n}\n\n// ============================================================================\n// JWT OPERATIONS\n// ============================================================================\n\nexport interface JWTPayload {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  roleId: string;\n}\n\nexport function generateToken(user: User): string {\n  const payload: JWTPayload = {\n    id: user.id,\n    email: user.email,\n    firstName: user.firstName,\n    lastName: user.lastName,\n    roleId: user.roleId,\n  };\n  \n  return jwt.sign(payload, JWT_SECRET!, { expiresIn: '24h' });\n}\n\nexport function verifyToken(token: string): JWTPayload {\n  return jwt.verify(token, JWT_SECRET!) as JWTPayload;\n}\n\n// ============================================================================\n// AUTHENTICATION\n// ============================================================================\n\nexport async function authenticateUser(email: string, password: string): Promise<{ user: User; token: string } | null> {\n  const user = await storage.getUserByEmail(email);\n  \n  if (!user) {\n    return null;\n  }\n\n  if (!user.password) {\n    return null;\n  }\n\n  const isValid = await comparePassword(password, user.password);\n  \n  if (!isValid) {\n    return null;\n  }\n\n  if (!user.isActive) {\n    throw new Error('User account is inactive');\n  }\n\n  const token = generateToken(user);\n  \n  return { user, token };\n}\n\n// ============================================================================\n// MIDDLEWARE\n// ============================================================================\n\nexport function isAuthenticated(req: any, res: any, next: any) {\n  const authHeader = req.headers.authorization;\n  const token = authHeader && authHeader.startsWith('Bearer ') ? authHeader.substring(7) : null;\n\n  if (!token) {\n    return res.status(401).json({ message: \"Token n√£o fornecido\" });\n  }\n\n  try {\n    const decoded = verifyToken(token);\n    req.user = decoded;\n    return next();\n  } catch (error) {\n    return res.status(401).json({ message: \"Token inv√°lido\" });\n  }\n}\n\nexport function requireAdmin(req: any, res: any, next: any) {\n  isAuthenticated(req, res, async () => {\n    try {\n      const user = await storage.getUserById(req.user.id);\n      if (!user) {\n        return res.status(401).json({ message: \"Usu√°rio n√£o encontrado\" });\n      }\n\n      const role = await storage.getRoleByName('admin');\n      if (user.roleId === role?.id) {\n        return next();\n      }\n      \n      return res.status(403).json({ message: \"Acesso negado - Permiss√£o de administrador necess√°ria\" });\n    } catch (error) {\n      return res.status(500).json({ message: \"Erro ao verificar permiss√µes\" });\n    }\n  });\n}\n\n// Permission-based middleware\nexport function requirePermission(permissionName: string) {\n  return (req: any, res: any, next: any) => {\n    isAuthenticated(req, res, async () => {\n      try {\n        const user = await storage.getUserById(req.user.id);\n        if (!user) {\n          return res.status(401).json({ message: \"Usu√°rio n√£o encontrado\" });\n        }\n\n        // Admin tem acesso a tudo\n        const roles = await storage.getRoles();\n        const userRole = roles.find((r) => r.id === user.roleId);\n        if (userRole?.name === 'admin') {\n          return next();\n        }\n\n        // Verifica permiss√µes do papel\n        const rolePerms = await storage.getRolePermissionsByName(userRole?.name || '');\n        let allowed = rolePerms.some((rp) => rp.permission.name === permissionName);\n\n        // Considera overrides por usu√°rio: grant adiciona, deny remove\n        const overrides = await storage.getUserPermissionOverrides(user.id);\n        for (const ov of overrides) {\n          if (ov.permission.name === permissionName) {\n            allowed = ov.isGranted ? true : false;\n          }\n        }\n\n        if (allowed) return next();\n\n        return res.status(403).json({ message: \"Acesso negado - permiss√£o requerida\", permission: permissionName });\n      } catch (error) {\n        return res.status(500).json({ message: \"Erro ao verificar permiss√µes\" });\n      }\n    });\n  };\n}\n\nexport function requireAdminOrSecretary(req: any, res: any, next: any) {\n  isAuthenticated(req, res, async () => {\n    try {\n      const user = await storage.getUserById(req.user.id);\n      if (!user) {\n        return res.status(401).json({ message: \"Usu√°rio n√£o encontrado\" });\n      }\n\n      const adminRole = await storage.getRoleByName('admin');\n      const secretaryRole = await storage.getRoleByName('secretary');\n      \n      if (user.roleId === adminRole?.id || user.roleId === secretaryRole?.id) {\n        return next();\n      }\n      \n      return res.status(403).json({ message: \"Acesso negado - Permiss√£o de administrador ou secret√°rio necess√°ria\" });\n    } catch (error) {\n      return res.status(500).json({ message: \"Erro ao verificar permiss√µes\" });\n    }\n  });\n}\n\nexport const auth = {\n  hashPassword,\n  comparePassword,\n  generateToken,\n  verifyToken,\n  authenticateUser,\n  isAuthenticated,\n  requireAdmin,\n  requirePermission,\n  requireAdminOrSecretary,\n};\n","size_bytes":5903},"DEPLOY-AUTOMATICO.md":{"content":"# Deploy Autom√°tico - ERP Idiomas\n\nSistema de deploy autom√°tico que permite atualizar o servidor diretamente do seu localhost com um simples comando.\n\n## üöÄ Comandos Dispon√≠veis\n\n### 1. Deploy R√°pido (Recomendado) ‚ö°\n```bash\nnpm run deploy:quick\n```\n- **Mais r√°pido** - Apenas reinicia o backend\n- **Ideal para**: Mudan√ßas no c√≥digo do backend\n- **Tempo**: ~30 segundos\n- **Sem rebuild**: Usa container existente\n\n### 2. Deploy Backend Completo üîß\n```bash\nnpm run deploy:backend\n```\n- **Rebuild do backend** - Reconstr√≥i o container\n- **Ideal para**: Mudan√ßas em depend√™ncias do backend\n- **Tempo**: ~2-3 minutos\n- **Inclui**: Backup autom√°tico do banco\n\n### 3. Deploy Completo üèóÔ∏è\n```bash\nnpm run deploy\n```\n- **Frontend + Backend** - Reconstr√≥i tudo\n- **Ideal para**: Mudan√ßas no frontend ou deploy inicial\n- **Tempo**: ~5-8 minutos\n- **Inclui**: Backup + rebuild completo\n\n## ‚öôÔ∏è Configura√ß√£o Inicial\n\n### 1. Configure o Servidor\n\nEdite o arquivo `deploy.config.js`:\n\n```javascript\nmodule.exports = {\n  server: {\n    host: 'seu-servidor.com',     // IP ou dom√≠nio\n    username: 'root',             // usu√°rio SSH\n    port: 22,                     // porta SSH\n    privateKey: '~/.ssh/id_rsa',  // chave SSH\n  },\n  paths: {\n    app: '/opt/erp-idiomas',      // pasta da app no servidor\n    backup: '/opt/backups/erp-idiomas'\n  }\n};\n```\n\n### 2. Configure SSH (Recomendado)\n\nPara n√£o precisar digitar senha toda vez:\n\n```bash\n# Gerar chave SSH (se n√£o tiver)\nssh-keygen -t rsa -b 4096\n\n# Copiar chave para o servidor\nssh-copy-id root@seu-servidor.com\n\n# Testar conex√£o\nssh root@seu-servidor.com\n```\n\n### 3. Instalar Depend√™ncias\n\nNo seu localhost:\n```bash\nnpm install rsync  # Para Windows, instalar via WSL ou Git Bash\n```\n\n## üìã Pr√©-requisitos\n\n### No Servidor:\n- ‚úÖ Docker e Docker Compose instalados\n- ‚úÖ Aplica√ß√£o j√° deployada com Docker\n- ‚úÖ SSH habilitado\n- ‚úÖ Usu√°rio com permiss√µes Docker\n\n### No Localhost:\n- ‚úÖ Node.js instalado\n- ‚úÖ SSH configurado\n- ‚úÖ rsync dispon√≠vel (Git Bash no Windows)\n\n## üîÑ Fluxo de Deploy\n\n### Deploy R√°pido (`deploy:quick`)\n1. üì¶ Envia c√≥digo do backend via rsync\n2. üîÑ Reinicia container do backend\n3. üìã Mostra logs e status\n\n### Deploy Backend (`deploy:backend`)\n1. üîÑ Backup autom√°tico do banco\n2. üì¶ Envia c√≥digo do backend\n3. üõë Para container do backend\n4. üî® Reconstr√≥i container\n5. ‚ñ∂Ô∏è Inicia container\n6. üìã Verifica status e logs\n\n### Deploy Completo (`deploy`)\n1. üîÑ Backup autom√°tico do banco\n2. üì¶ Envia todo o c√≥digo\n3. üõë Para todos os containers\n4. üî® Reconstr√≥i tudo (sem cache)\n5. ‚ñ∂Ô∏è Inicia todos os containers\n6. üß™ Testa conectividade\n7. üìã Verifica status e logs\n\n## üõ†Ô∏è Comandos Manuais\n\nSe precisar executar comandos espec√≠ficos:\n\n```bash\n# Executar script diretamente\nnode scripts/deploy-quick.js\nnode scripts/deploy-backend.js\nnode scripts/deploy-full.js\n\n# Ver logs no servidor\nssh root@seu-servidor.com \"cd /opt/erp-idiomas && docker-compose logs -f\"\n\n# Status dos containers\nssh root@seu-servidor.com \"cd /opt/erp-idiomas && docker-compose ps\"\n\n# Backup manual\nssh root@seu-servidor.com \"cd /opt/erp-idiomas && docker-compose exec -T database pg_dump -U postgres erp_idiomas > backup_manual.sql\"\n```\n\n## üö® Troubleshooting\n\n### Erro de SSH\n```bash\n# Verificar conex√£o SSH\nssh -v root@seu-servidor.com\n\n# Verificar chave SSH\nssh-add -l\n```\n\n### Erro de rsync\n```bash\n# No Windows, usar Git Bash ou WSL\n# Verificar se rsync est√° dispon√≠vel\nwhich rsync\n```\n\n### Container n√£o inicia\n```bash\n# Ver logs detalhados\nssh root@seu-servidor.com \"cd /opt/erp-idiomas && docker-compose logs backend\"\n\n# Verificar espa√ßo em disco\nssh root@seu-servidor.com \"df -h\"\n```\n\n### Erro de permiss√£o\n```bash\n# Verificar permiss√µes Docker\nssh root@seu-servidor.com \"docker ps\"\n\n# Adicionar usu√°rio ao grupo docker (se necess√°rio)\nssh root@seu-servidor.com \"usermod -aG docker $USER\"\n```\n\n## üìä Monitoramento\n\n### Verificar Status\n```bash\n# Status r√°pido\nssh root@seu-servidor.com \"cd /opt/erp-idiomas && docker-compose ps\"\n\n# Logs em tempo real\nssh root@seu-servidor.com \"cd /opt/erp-idiomas && docker-compose logs -f --tail=50\"\n\n# Uso de recursos\nssh root@seu-servidor.com \"docker stats --no-stream\"\n```\n\n### Backup e Restore\n```bash\n# Listar backups\nssh root@seu-servidor.com \"ls -la /opt/backups/erp-idiomas/\"\n\n# Restaurar backup espec√≠fico\nssh root@seu-servidor.com \"cd /opt/erp-idiomas && docker-compose exec -T database psql -U postgres erp_idiomas < /opt/backups/erp-idiomas/backup_20240101_120000.sql\"\n```\n\n## üéØ Dicas de Uso\n\n### Para Desenvolvimento Di√°rio:\n```bash\n# Mudan√ßas pequenas no backend\nnpm run deploy:quick\n\n# Mudan√ßas maiores no backend\nnpm run deploy:backend\n```\n\n### Para Releases:\n```bash\n# Deploy completo com frontend\nnpm run deploy\n```\n\n### Para Emerg√™ncias:\n```bash\n# Rollback r√°pido (se tiver backup)\nssh root@seu-servidor.com \"cd /opt/erp-idiomas && docker-compose down && docker-compose up -d\"\n```\n\n## üîí Seguran√ßa\n\n- ‚úÖ Use chaves SSH em vez de senhas\n- ‚úÖ Configure firewall no servidor\n- ‚úÖ Backups autom√°ticos antes de cada deploy\n- ‚úÖ Monitore logs regularmente\n- ‚úÖ Mantenha backups por pelo menos 7 dias\n\n## üìù Exemplo de Uso\n\n```bash\n# 1. Fazer mudan√ßas no c√≥digo\nvim backend/server/routes.ts\n\n# 2. Testar localmente\nnpm run dev\n\n# 3. Deploy r√°pido para o servidor\nnpm run deploy:quick\n\n# 4. Verificar se funcionou\n# (o script j√° mostra os logs automaticamente)\n```\n\n## üéâ Pronto!\n\nAgora voc√™ pode atualizar seu servidor com um simples comando! \n\n**Recomenda√ß√£o**: Comece sempre com `npm run deploy:quick` para mudan√ßas simples no backend. √â mais r√°pido e seguro.","size_bytes":5694},"backend/server/storage.ts":{"content":"import type {\n  InsertUnit,\n  InsertStaff,\n  InsertStudent,\n  InsertCourse,\n  InsertClass,\n  InsertLesson,\n  InsertBook,\n  InsertPermission,\n  InsertPermissionCategory,\n  InsertRole,\n  InsertRolePermission,\n  InsertUserPermission,\n  InsertPage,\n  InsertRolePagePermission,\n  InsertUserSettings,\n  InsertSupportTicket,\n  InsertSupportTicketResponse,\n  InsertUser,\n  InsertGuardian,\n  InsertFinancialResponsible,\n  InsertFranchiseUnit,\n  InsertCourseUnit,\n  InsertCourseVideo,\n  InsertCourseActivity,\n  InsertStudentProgress,\n  InsertStudentCourseEnrollment,\n  InsertTeacherSchedule,\n  Unit,\n  Staff,\n  Student,\n  Course,\n  Class,\n  Lesson,\n  Book,\n  User,\n  UpsertUser,\n  Guardian,\n  FinancialResponsible,\n  FranchiseUnit,\n  StaffWithUser,\n  StudentWithUser,\n  ClassWithDetails,\n  Permission,\n  PermissionCategory,\n  Role,\n  RolePermission,\n  UserPermission,\n  Page,\n  RolePagePermission,\n  UserWithPermissions,\n  RoleWithPermissions,\n  PermissionsByCategory,\n  UserSettings,\n  SupportTicket,\n  SupportTicketResponse,\n  SupportTicketWithResponses,\n  CourseUnit,\n  CourseVideo,\n  CourseActivity,\n  StudentProgress,\n  StudentCourseEnrollment,\n  GuardianWithFinancial,\n  TeacherSchedule,\n} from \"../shared/schema.js\";\nimport {\n  units,\n  users,\n  staff,\n  students,\n  guardians,\n  financialResponsibles,\n  courses,\n  classes,\n  lessons,\n  books,\n  permissions,\n  permissionCategories,\n  roles,\n  rolePermissions,\n  userPermissions,\n  pages,\n  rolePagePermissions,\n  userSettings,\n  supportTickets,\n  supportTicketResponses,\n  franchiseUnits,\n  courseUnits,\n  courseVideos,\n  courseActivities,\n  studentProgress,\n  studentCourseEnrollments,\n  teacherSchedule,\n} from \"../shared/schema.js\";\nimport { eq, and, desc, sql } from \"drizzle-orm\";\nimport { db } from \"./db.js\";\n\n// ============================================================================\n// USER OPERATIONS\n// ============================================================================\n\nexport async function createUser(data: InsertUser): Promise<User> {\n  const [user] = await db.insert(users).values(data).returning();\n  return user;\n}\n\nexport async function getUserByEmail(email: string): Promise<User | undefined> {\n  const [user] = await db.select().from(users).where(eq(users.email, email)).limit(1);\n  return user;\n}\n\nexport async function getUserById(id: string): Promise<User | undefined> {\n  const [user] = await db.select().from(users).where(eq(users.id, id)).limit(1);\n  return user;\n}\n\nexport async function updateUser(id: string, data: Partial<InsertUser>): Promise<User> {\n  const [user] = await db\n    .update(users)\n    .set({ ...data, updatedAt: new Date() })\n    .where(eq(users.id, id))\n    .returning();\n  return user;\n}\n\nexport async function deleteUser(id: string): Promise<void> {\n  await db.delete(users).where(eq(users.id, id));\n}\n\nexport async function getUsers(): Promise<User[]> {\n  return await db.select().from(users);\n}\n\nexport async function upsertUser(data: UpsertUser): Promise<User> {\n  if (data.id) {\n    // Update existing user\n    const [user] = await db\n      .update(users)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(users.id, data.id))\n      .returning();\n    return user;\n  } else {\n    // Create new user\n    const [user] = await db.insert(users).values(data).returning();\n    return user;\n  }\n}\n\n// ============================================================================\n// TEACHER INDIVIDUAL SCHEDULE OPERATIONS (Nova funcionalidade)\n// ============================================================================\n\nexport async function createTeacherSchedule(data: InsertTeacherSchedule): Promise<TeacherSchedule> {\n  const [schedule] = await db.insert(teacherSchedule).values(data).returning();\n  return schedule;\n}\n\nexport async function getTeacherIndividualSchedule(teacherId: string) {\n  const result = await db\n    .select({\n      schedule: teacherSchedule,\n      teacher: users,\n      unit: units,\n      createdByUser: {\n        id: sql<string>`created_by_user.id`,\n        firstName: sql<string>`created_by_user.first_name`,\n        lastName: sql<string>`created_by_user.last_name`,\n      },\n    })\n    .from(teacherSchedule)\n    .innerJoin(users, eq(teacherSchedule.teacherId, users.id))\n    .innerJoin(units, eq(teacherSchedule.unitId, units.id))\n    .innerJoin(sql`users as created_by_user`, sql`teacher_schedule.created_by = created_by_user.id`)\n    .where(and(\n      eq(teacherSchedule.teacherId, teacherId),\n      eq(teacherSchedule.isActive, true)\n    ))\n    .orderBy(teacherSchedule.dayOfWeek, teacherSchedule.startTime);\n\n  return result.map(r => ({\n    ...r.schedule,\n    teacher: r.teacher,\n    unit: r.unit,\n    createdByUser: r.createdByUser,\n  }));\n}\n\nexport async function updateTeacherSchedule(id: string, data: Partial<InsertTeacherSchedule>): Promise<TeacherSchedule> {\n  const [schedule] = await db\n    .update(teacherSchedule)\n    .set({ ...data, updatedAt: new Date() })\n    .where(eq(teacherSchedule.id, id))\n    .returning();\n  return schedule;\n}\n\nexport async function deleteTeacherSchedule(id: string): Promise<void> {\n  await db\n    .update(teacherSchedule)\n    .set({ isActive: false, updatedAt: new Date() })\n    .where(eq(teacherSchedule.id, id));\n}\n\n// ============================================================================\n// ROLE OPERATIONS\n// ============================================================================\n\nexport async function createRole(data: InsertRole): Promise<Role> {\n  const [role] = await db.insert(roles).values(data).returning();\n  return role;\n}\n\nexport async function getRoleByName(name: string): Promise<Role | undefined> {\n  const [role] = await db.select().from(roles).where(eq(roles.name, name)).limit(1);\n  return role;\n}\n\nexport async function getRoles(): Promise<Role[]> {\n  return await db.select().from(roles).where(eq(roles.isActive, true));\n}\n\nexport async function getRolePermissions(roleId: string): Promise<(RolePermission & { permission: Permission })[]> {\n  return await db\n    .select({\n      id: rolePermissions.id,\n      roleId: rolePermissions.roleId,\n      permissionId: rolePermissions.permissionId,\n      createdAt: rolePermissions.createdAt,\n      permission: permissions,\n    })\n    .from(rolePermissions)\n    .innerJoin(permissions, eq(rolePermissions.permissionId, permissions.id))\n    .where(eq(rolePermissions.roleId, roleId));\n}\n\nexport async function getRolePermissionsByName(roleName: string): Promise<(RolePermission & { permission: Permission })[]> {\n  const role = await getRoleByName(roleName);\n  if (!role) return [];\n\n  return await db\n    .select({\n      id: rolePermissions.id,\n      roleId: rolePermissions.roleId,\n      permissionId: rolePermissions.permissionId,\n      createdAt: rolePermissions.createdAt,\n      permission: permissions,\n    })\n    .from(rolePermissions)\n    .innerJoin(permissions, eq(rolePermissions.permissionId, permissions.id))\n    .where(eq(rolePermissions.roleId, role.id));\n}\n\nexport async function updateRolePermissions(roleId: string, permissionIds: string[]): Promise<void> {\n  await db.transaction(async (tx) => {\n    // Remove permiss√µes existentes\n    await tx.delete(rolePermissions).where(eq(rolePermissions.roleId, roleId));\n    \n    // Adiciona novas permiss√µes\n    if (permissionIds.length > 0) {\n      await tx.insert(rolePermissions).values(\n        permissionIds.map(permissionId => ({\n          roleId,\n          permissionId,\n        }))\n      );\n    }\n  });\n}\n\nexport async function updateRole(id: string, data: Partial<InsertRole>): Promise<Role | undefined> {\n  const [role] = await db\n    .update(roles)\n    .set({\n      ...data,\n      updatedAt: sql`NOW()`,\n    })\n    .where(eq(roles.id, id))\n    .returning();\n  return role;\n}\n\nexport async function deactivateRole(id: string): Promise<void> {\n  await db\n    .update(roles)\n    .set({ isActive: false, updatedAt: sql`NOW()` })\n    .where(eq(roles.id, id));\n}\n\n// ============================================================================\n// USER PERMISSION OVERRIDES\n// ============================================================================\n\nexport async function getUserPermissionOverrides(userId: string): Promise<(UserPermission & { permission: Permission })[]> {\n  return await db\n    .select({\n      id: userPermissions.id,\n      userId: userPermissions.userId,\n      permissionId: userPermissions.permissionId,\n      isGranted: userPermissions.isGranted,\n      createdAt: userPermissions.createdAt,\n      updatedAt: userPermissions.updatedAt,\n      permission: permissions,\n    })\n    .from(userPermissions)\n    .innerJoin(permissions, eq(userPermissions.permissionId, permissions.id))\n    .where(eq(userPermissions.userId, userId));\n}\n\nexport async function updateUserPermissions(userId: string, overrides: { permissionId: string; isGranted: boolean }[]): Promise<void> {\n  await db.transaction(async (tx) => {\n    await tx.delete(userPermissions).where(eq(userPermissions.userId, userId));\n    if (overrides.length > 0) {\n      await tx.insert(userPermissions).values(\n        overrides.map((o) => ({ userId, permissionId: o.permissionId, isGranted: o.isGranted }))\n      );\n    }\n  });\n}\n\n// ============================================================================\n// PERMISSION OPERATIONS\n// ============================================================================\n\nexport async function getPermissions(): Promise<Permission[]> {\n  return await db.select().from(permissions).where(eq(permissions.isActive, true));\n}\n\nexport async function getPermissionsByCategory(): Promise<PermissionsByCategory> {\n  const allPermissions = await getPermissions();\n  const result: PermissionsByCategory = {};\n  \n  for (const permission of allPermissions) {\n    const category = await getPermissionCategory(permission.categoryId);\n    const categoryName = category?.name || 'uncategorized';\n    \n    if (!result[categoryName]) {\n      result[categoryName] = [];\n    }\n    result[categoryName].push(permission);\n  }\n  \n  return result;\n}\n\nexport async function getPermissionCategories(): Promise<PermissionCategory[]> {\n  return await db.select().from(permissionCategories).where(eq(permissionCategories.isActive, true));\n}\n\nexport async function getPermissionCategory(id: string): Promise<PermissionCategory | undefined> {\n  const [category] = await db.select().from(permissionCategories).where(eq(permissionCategories.id, id)).limit(1);\n  return category;\n}\n\nexport async function createPermissionCategory(data: InsertPermissionCategory): Promise<PermissionCategory> {\n  const [category] = await db.insert(permissionCategories).values(data).returning();\n  return category;\n}\n\nexport async function createPermission(data: InsertPermission): Promise<Permission> {\n  const [permission] = await db.insert(permissions).values(data).returning();\n  return permission;\n}\n\n// ============================================================================\n// UNIT OPERATIONS\n// ============================================================================\n\nexport async function createUnit(data: InsertUnit): Promise<Unit> {\n  const [unit] = await db.insert(units).values(data).returning();\n  return unit;\n}\n\nexport async function getUnits(): Promise<Unit[]> {\n  return await db.select().from(units).where(eq(units.isActive, true));\n}\n\nexport async function getUnit(id: string): Promise<Unit | undefined> {\n  const [unit] = await db.select().from(units).where(eq(units.id, id)).limit(1);\n  return unit;\n}\n\nexport async function updateUnit(id: string, data: Partial<InsertUnit>): Promise<Unit> {\n  const [unit] = await db\n    .update(units)\n    .set({ ...data, updatedAt: new Date() })\n    .where(eq(units.id, id))\n    .returning();\n  return unit;\n}\n\nexport async function deleteUnit(id: string): Promise<void> {\n  // Verificar se existem depend√™ncias antes de excluir\n  const [staffCount] = await db.select({ count: sql<number>`count(*)` }).from(staff).where(eq(staff.unitId, id));\n  const [studentsCount] = await db.select({ count: sql<number>`count(*)` }).from(students).where(eq(students.unitId, id));\n  const [classesCount] = await db.select({ count: sql<number>`count(*)` }).from(classes).where(eq(classes.unitId, id));\n  \n  const totalDependencies = Number(staffCount.count) + Number(studentsCount.count) + Number(classesCount.count);\n  \n  if (totalDependencies > 0) {\n    const errorDetails = [];\n    if (Number(staffCount.count) > 0) errorDetails.push(`${staffCount.count} funcion√°rio(s)`);\n    if (Number(studentsCount.count) > 0) errorDetails.push(`${studentsCount.count} estudante(s)`);\n    if (Number(classesCount.count) > 0) errorDetails.push(`${classesCount.count} turma(s)`);\n    \n    throw new Error(`N√£o √© poss√≠vel excluir a unidade. Existem registros vinculados: ${errorDetails.join(', ')}. Remova ou transfira esses registros antes de excluir a unidade.`);\n  }\n  \n  await db.delete(units).where(eq(units.id, id));\n}\n\n// ============================================================================\n// STAFF OPERATIONS\n// ============================================================================\n\nexport async function createStaff(data: InsertStaff): Promise<Staff> {\n  const [staffMember] = await db.insert(staff).values(data).returning();\n  return staffMember;\n}\n\nexport async function getStaff(): Promise<StaffWithUser[]> {\n  const result = await db\n    .select({\n      staff: staff,\n      user: users,\n      unit: units,\n    })\n    .from(staff)\n    .innerJoin(users, eq(staff.userId, users.id))\n    .leftJoin(units, eq(staff.unitId, units.id));\n\n  return result.map(r => ({ ...r.staff, user: r.user, unit: r.unit || undefined }));\n}\n\nexport async function getStaffMember(id: string): Promise<StaffWithUser | undefined> {\n  const [result] = await db\n    .select({\n      staff: staff,\n      user: users,\n      unit: units,\n    })\n    .from(staff)\n    .innerJoin(users, eq(staff.userId, users.id))\n    .leftJoin(units, eq(staff.unitId, units.id))\n    .where(eq(staff.id, id))\n    .limit(1);\n\n  if (!result) return undefined;\n  return { ...result.staff, user: result.user, unit: result.unit || undefined };\n}\n\nexport async function updateStaff(id: string, data: Partial<InsertStaff>): Promise<Staff> {\n  const [staffMember] = await db\n    .update(staff)\n    .set({ ...data, updatedAt: new Date() })\n    .where(eq(staff.id, id))\n    .returning();\n  return staffMember;\n}\n\nexport async function deleteStaff(id: string): Promise<void> {\n  // Apenas deletar o registro de staff, mantendo o usu√°rio no sistema\n  // O usu√°rio pode ter outros pap√©is ou dados importantes no sistema\n  await db.delete(staff).where(eq(staff.id, id));\n}\n\nexport async function getStaffByUserId(userId: string): Promise<StaffWithUser | undefined> {\n  const [result] = await db\n    .select({\n      staff: staff,\n      user: users,\n      unit: units,\n    })\n    .from(staff)\n    .innerJoin(users, eq(staff.userId, users.id))\n    .leftJoin(units, eq(staff.unitId, units.id))\n    .where(eq(staff.userId, userId))\n    .limit(1);\n\n  if (!result) return undefined;\n  return { ...result.staff, user: result.user, unit: result.unit || undefined };\n}\n\n// ============================================================================\n// GUARDIAN & FINANCIAL RESPONSIBLE OPERATIONS\n// ============================================================================\n\nexport async function createGuardian(data: InsertGuardian): Promise<Guardian> {\n  const [guardian] = await db.insert(guardians).values(data).returning();\n  return guardian;\n}\n\nexport async function getGuardian(id: string): Promise<Guardian | undefined> {\n  const [guardian] = await db.select().from(guardians).where(eq(guardians.id, id)).limit(1);\n  return guardian;\n}\n\nexport async function updateGuardian(id: string, data: Partial<InsertGuardian>): Promise<Guardian> {\n  const [guardian] = await db\n    .update(guardians)\n    .set({ ...data, updatedAt: new Date() })\n    .where(eq(guardians.id, id))\n    .returning();\n  return guardian;\n}\n\nexport async function getGuardianWithFinancial(id: string): Promise<GuardianWithFinancial | undefined> {\n  const [result] = await db\n    .select({\n      guardian: guardians,\n      financialResponsible: financialResponsibles,\n    })\n    .from(guardians)\n    .leftJoin(financialResponsibles, eq(financialResponsibles.guardianId, guardians.id))\n    .where(eq(guardians.id, id))\n    .limit(1);\n\n  if (!result) return undefined;\n  return {\n    ...result.guardian,\n    financialResponsible: result.financialResponsible || undefined,\n  };\n}\n\nexport async function createFinancialResponsible(data: InsertFinancialResponsible): Promise<FinancialResponsible> {\n  const [responsible] = await db.insert(financialResponsibles).values(data).returning();\n  return responsible;\n}\n\nexport async function updateFinancialResponsible(id: string, data: Partial<InsertFinancialResponsible>): Promise<FinancialResponsible> {\n  const [responsible] = await db\n    .update(financialResponsibles)\n    .set({ ...data, updatedAt: new Date() })\n    .where(eq(financialResponsibles.id, id))\n    .returning();\n  return responsible;\n}\n\n// ============================================================================\n// STUDENT OPERATIONS\n// ============================================================================\n\nexport async function createStudent(data: InsertStudent): Promise<Student> {\n  const [student] = await db.insert(students).values(data).returning();\n  return student;\n}\n\nexport async function getStudents(): Promise<StudentWithUser[]> {\n  const result = await db\n    .select({\n      student: students,\n      user: users,\n      unit: units,\n      guardian: guardians,\n      financialResponsible: financialResponsibles,\n    })\n    .from(students)\n    .innerJoin(users, eq(students.userId, users.id))\n    .leftJoin(units, eq(students.unitId, units.id))\n    .leftJoin(guardians, eq(students.guardianId, guardians.id))\n    .leftJoin(financialResponsibles, eq(financialResponsibles.guardianId, guardians.id))\n    .where(eq(students.isActive, true));\n\n  return result.map(r => ({\n    ...r.student,\n    user: r.user,\n    unit: r.unit || undefined,\n    guardian: r.guardian ? {\n      ...r.guardian,\n      financialResponsible: r.financialResponsible || undefined,\n    } : undefined,\n  }));\n}\n\nexport async function getStudent(id: string): Promise<StudentWithUser | undefined> {\n  const [result] = await db\n    .select({\n      student: students,\n      user: users,\n      unit: units,\n      guardian: guardians,\n      financialResponsible: financialResponsibles,\n    })\n    .from(students)\n    .innerJoin(users, eq(students.userId, users.id))\n    .leftJoin(units, eq(students.unitId, units.id))\n    .leftJoin(guardians, eq(students.guardianId, guardians.id))\n    .leftJoin(financialResponsibles, eq(financialResponsibles.guardianId, guardians.id))\n    .where(eq(students.id, id))\n    .limit(1);\n\n  if (!result) return undefined;\n  return {\n    ...result.student,\n    user: result.user,\n    unit: result.unit || undefined,\n    guardian: result.guardian ? {\n      ...result.guardian,\n      financialResponsible: result.financialResponsible || undefined,\n    } : undefined,\n  };\n}\n\nexport async function updateStudent(id: string, data: Partial<InsertStudent>): Promise<Student> {\n  const [student] = await db\n    .update(students)\n    .set({ ...data, updatedAt: new Date() })\n    .where(eq(students.id, id))\n    .returning();\n  return student;\n}\n\nexport async function deleteStudent(id: string): Promise<void> {\n  const student = await db.select().from(students).where(eq(students.id, id)).limit(1);\n  if (student.length > 0) {\n    await db.delete(students).where(eq(students.id, id));\n    await db.delete(users).where(eq(users.id, student[0].userId));\n  }\n}\n\n// Buscar estudante pelo userId (para √°rea do aluno)\nexport async function getStudentByUserId(userId: string): Promise<StudentWithUser | undefined> {\n  const [result] = await db\n    .select({\n      student: students,\n      user: users,\n      unit: units,\n    })\n    .from(students)\n    .innerJoin(users, eq(students.userId, users.id))\n    .leftJoin(units, eq(students.unitId, units.id))\n    .where(eq(students.userId, userId))\n    .limit(1);\n\n  if (!result) return undefined;\n  return { ...result.student, user: result.user, unit: result.unit || undefined };\n}\n\n// Buscar estudante pelo CPF\nexport async function getStudentByCpf(cpf: string): Promise<StudentWithUser | undefined> {\n  const [result] = await db\n    .select({\n      student: students,\n      user: users,\n      unit: units,\n    })\n    .from(students)\n    .innerJoin(users, eq(students.userId, users.id))\n    .leftJoin(units, eq(students.unitId, units.id))\n    .where(and(eq(students.cpf, cpf), eq(students.isActive, true)))\n    .limit(1);\n\n  if (!result) return undefined;\n  return { ...result.student, user: result.user, unit: result.unit || undefined };\n}\n\n// Buscar matr√≠culas de cursos do estudante (para estantes estilo Netflix)\nexport async function getStudentCourseEnrollmentsForUser(userId: string): Promise<(\n  StudentCourseEnrollment & { course: Pick<Course, 'id' | 'name' | 'level'> }\n)[]> {\n  const student = await getStudentByUserId(userId);\n  if (!student) return [];\n\n  const rows = await db\n    .select({\n      enrollment: studentCourseEnrollments,\n      course: courses,\n    })\n    .from(studentCourseEnrollments)\n    .innerJoin(courses, eq(studentCourseEnrollments.courseId, courses.id))\n    .where(eq(studentCourseEnrollments.studentId, student.id));\n\n  return rows.map(r => ({\n    ...r.enrollment,\n    course: { id: r.course.id, name: r.course.name, level: r.course.level },\n  }));\n}\n\n// Buscar detalhes de curso com livros b√°sicos (para prateleiras)\nexport async function getCourseWithBooksBasic(courseId: string): Promise<(Course & { books: Pick<Book, 'id' | 'name' | 'description' | 'color'>[] }) | undefined> {\n  const course = await getCourse(courseId);\n  if (!course) return undefined;\n\n  const courseBooks = await db\n    .select({\n      id: books.id,\n      name: books.name,\n      description: books.description,\n      color: books.color,\n    })\n    .from(books)\n    .where(and(eq(books.courseId, courseId), eq(books.isActive, true)))\n    .orderBy(books.name);\n\n  return { ...course, books: courseBooks } as any;\n}\n\n// ============================================================================\n// COURSE OPERATIONS\n// ============================================================================\n\nexport async function createCourse(data: InsertCourse): Promise<Course> {\n  const [course] = await db.insert(courses).values(data).returning();\n  return course;\n}\n\nexport async function getCourses(): Promise<Course[]> {\n  return await db.select().from(courses).where(eq(courses.isActive, true));\n}\n\nexport async function getCourse(id: string): Promise<Course | undefined> {\n  const [course] = await db.select().from(courses).where(eq(courses.id, id)).limit(1);\n  return course;\n}\n\nexport async function updateCourse(id: string, data: Partial<InsertCourse>): Promise<Course> {\n  const [course] = await db\n    .update(courses)\n    .set({ ...data, updatedAt: new Date() })\n    .where(eq(courses.id, id))\n    .returning();\n  return course;\n}\n\nexport async function deleteCourse(id: string): Promise<void> {\n  await db.delete(courses).where(eq(courses.id, id));\n}\n\n// ============================================================================\n// BOOK OPERATIONS\n// ============================================================================\n\nexport async function createBook(data: InsertBook): Promise<Book> {\n  const [book] = await db.insert(books).values(data).returning();\n  return book;\n}\n\nexport async function getBooks(): Promise<Book[]> {\n  return await db.select().from(books).where(eq(books.isActive, true));\n}\n\nexport async function getBook(id: string): Promise<Book | undefined> {\n  const [book] = await db.select().from(books).where(eq(books.id, id)).limit(1);\n  return book;\n}\n\nexport async function updateBook(id: string, data: Partial<InsertBook>): Promise<Book> {\n  const [book] = await db\n    .update(books)\n    .set({ ...data, updatedAt: new Date() })\n    .where(eq(books.id, id))\n    .returning();\n  return book;\n}\n\nexport async function deleteBook(id: string): Promise<void> {\n  await db.delete(books).where(eq(books.id, id));\n}\n\n// ============================================================================\n// CLASS OPERATIONS\n// ============================================================================\n\nexport async function createClass(data: InsertClass): Promise<Class> {\n  const [classItem] = await db.insert(classes).values(data).returning();\n  return classItem;\n}\n\nexport async function getClasses(): Promise<ClassWithDetails[]> {\n  const result = await db\n    .select({\n      class: classes,\n      book: books,\n      course: courses,\n      teacher: users,\n      unit: units,\n    })\n    .from(classes)\n    .innerJoin(books, eq(classes.bookId, books.id))\n    .innerJoin(courses, eq(books.courseId, courses.id))\n    .innerJoin(users, eq(classes.teacherId, users.id))\n    .innerJoin(units, eq(classes.unitId, units.id))\n    .where(eq(classes.isActive, true));\n\n  return result.map(r => ({\n    ...r.class,\n    book: { ...r.book, course: r.course },\n    teacher: r.teacher,\n    unit: r.unit,\n    enrollments: [],\n  }));\n}\n\nexport async function getClass(id: string): Promise<ClassWithDetails | undefined> {\n  const [result] = await db\n    .select({\n      class: classes,\n      book: books,\n      course: courses,\n      teacher: users,\n      unit: units,\n    })\n    .from(classes)\n    .innerJoin(books, eq(classes.bookId, books.id))\n    .innerJoin(courses, eq(books.courseId, courses.id))\n    .innerJoin(users, eq(classes.teacherId, users.id))\n    .innerJoin(units, eq(classes.unitId, units.id))\n    .where(eq(classes.id, id))\n    .limit(1);\n\n  if (!result) return undefined;\n  return {\n    ...result.class,\n    book: { ...result.book, course: result.course },\n    teacher: result.teacher,\n    unit: result.unit,\n    enrollments: [],\n  };\n}\n\nexport async function updateClass(id: string, data: Partial<InsertClass>): Promise<Class> {\n  const [classItem] = await db\n    .update(classes)\n    .set({ ...data, updatedAt: new Date() })\n    .where(eq(classes.id, id))\n    .returning();\n  return classItem;\n}\n\nexport async function deleteClass(id: string): Promise<void> {\n  await db.delete(classes).where(eq(classes.id, id));\n}\n\nexport async function getTeachers(): Promise<StaffWithUser[]> {\n  const result = await db\n    .select({\n      staff: staff,\n      user: users,\n    })\n    .from(staff)\n    .innerJoin(users, eq(staff.userId, users.id))\n    .innerJoin(roles, eq(users.roleId, roles.id))\n    .where(and(\n      eq(staff.isActive, true),\n      eq(roles.name, 'teacher')\n    ));\n\n  return result.map(r => ({\n    ...r.staff,\n    user: r.user,\n  }));\n}\n\nexport async function getTeacherSchedule(teacherId: string) {\n  // Buscar todas as turmas do professor\n  const teacherClasses = await db\n    .select({\n      class: classes,\n      book: books,\n      course: courses,\n      unit: units,\n    })\n    .from(classes)\n    .innerJoin(books, eq(classes.bookId, books.id))\n    .innerJoin(courses, eq(books.courseId, courses.id))\n    .innerJoin(units, eq(classes.unitId, units.id))\n    .where(and(eq(classes.teacherId, teacherId), eq(classes.isActive, true)));\n\n  // Gerar hor√°rios ocupados e dispon√≠veis\n  const occupiedSlots = teacherClasses.map(r => ({\n    id: r.class.id,\n    dayOfWeek: r.class.dayOfWeek,\n    startTime: r.class.startTime,\n    endTime: r.class.endTime,\n    room: r.class.room,\n    className: r.class.name,\n    courseName: r.course.name,\n    bookName: r.book.name,\n    unitName: r.unit.name,\n    currentStudents: r.class.currentStudents,\n    maxStudents: r.class.maxStudents,\n    status: 'occupied' as const\n  }));\n\n  // Gerar hor√°rios dispon√≠veis (8h √†s 22h, de segunda a s√°bado)\n  const availableSlots = [];\n  const timeSlots = [\n    '08:00', '09:00', '10:00', '11:00', '12:00', '13:00', '14:00', \n    '15:00', '16:00', '17:00', '18:00', '19:00', '20:00', '21:00'\n  ];\n  \n  for (let day = 1; day <= 6; day++) { // Segunda a s√°bado\n    for (let i = 0; i < timeSlots.length - 1; i++) {\n      const startTime = timeSlots[i];\n      const endTime = timeSlots[i + 1];\n      \n      // Verificar se este hor√°rio n√£o est√° ocupado\n      const isOccupied = occupiedSlots.some(slot => \n        slot.dayOfWeek === day && \n        slot.startTime === startTime\n      );\n      \n      if (!isOccupied) {\n        availableSlots.push({\n          dayOfWeek: day,\n          startTime,\n          endTime,\n          status: 'available' as const\n        });\n      }\n    }\n  }\n\n  return {\n    teacherId,\n    occupiedSlots,\n    availableSlots\n  };\n}\n\n// ============================================================================\n// LESSON OPERATIONS\n// ============================================================================\n\nexport async function createLesson(data: InsertLesson): Promise<Lesson> {\n  const [lesson] = await db.insert(lessons).values(data).returning();\n  return lesson;\n}\n\nexport async function getLessons(): Promise<Lesson[]> {\n  return await db.select().from(lessons).orderBy(desc(lessons.date));\n}\n\nexport async function getLesson(id: string): Promise<Lesson | undefined> {\n  const [lesson] = await db.select().from(lessons).where(eq(lessons.id, id)).limit(1);\n  return lesson;\n}\n\nexport async function updateLesson(id: string, data: Partial<InsertLesson>): Promise<Lesson> {\n  const [lesson] = await db\n    .update(lessons)\n    .set({ ...data, updatedAt: new Date() })\n    .where(eq(lessons.id, id))\n    .returning();\n  return lesson;\n}\n\nexport async function deleteLesson(id: string): Promise<void> {\n  await db.delete(lessons).where(eq(lessons.id, id));\n}\n\n// ============================================================================\n// DASHBOARD OPERATIONS\n// ============================================================================\n\nexport async function getDashboardStats() {\n  const [totalStudentsResult] = await db\n    .select({ count: sql<number>`count(*)::int` })\n    .from(students)\n    .where(eq(students.isActive, true));\n\n  const [totalStaffResult] = await db\n    .select({ count: sql<number>`count(*)::int` })\n    .from(staff)\n    .where(eq(staff.isActive, true));\n\n  const [totalCoursesResult] = await db\n    .select({ count: sql<number>`count(*)::int` })\n    .from(courses)\n    .where(eq(courses.isActive, true));\n\n  const [totalClassesResult] = await db\n    .select({ count: sql<number>`count(*)::int` })\n    .from(classes)\n    .where(eq(classes.isActive, true));\n\n  return {\n    totalStudents: totalStudentsResult?.count || 0,\n    totalStaff: totalStaffResult?.count || 0,\n    totalCourses: totalCoursesResult?.count || 0,\n    totalClasses: totalClassesResult?.count || 0,\n  };\n}\n\n// ============================================================================\n// SUPPORT TICKET OPERATIONS\n// ============================================================================\n\nexport async function createSupportTicket(data: InsertSupportTicket & { userId: string }): Promise<SupportTicket> {\n  const [ticket] = await db.insert(supportTickets).values(data).returning();\n  return ticket;\n}\n\nexport async function getSupportTickets(): Promise<SupportTicket[]> {\n  return await db.select().from(supportTickets).orderBy(desc(supportTickets.createdAt));\n}\n\nexport async function getSupportTicket(id: string): Promise<SupportTicketWithResponses | undefined> {\n  const [ticket] = await db.select().from(supportTickets).where(eq(supportTickets.id, id)).limit(1);\n  if (!ticket) return undefined;\n\n  const responses = await db\n    .select()\n    .from(supportTicketResponses)\n    .where(eq(supportTicketResponses.ticketId, id))\n    .orderBy(supportTicketResponses.createdAt);\n\n  const [user] = await db.select().from(users).where(eq(users.id, ticket.userId)).limit(1);\n  \n  let assignedUser;\n  if (ticket.assignedTo) {\n    [assignedUser] = await db.select().from(users).where(eq(users.id, ticket.assignedTo)).limit(1);\n  }\n\n  return {\n    ...ticket,\n    responses,\n    user,\n    assignedUser,\n  };\n}\n\nexport async function updateSupportTicket(id: string, data: Partial<InsertSupportTicket>): Promise<SupportTicket> {\n  const [ticket] = await db\n    .update(supportTickets)\n    .set({ ...data, updatedAt: new Date() })\n    .where(eq(supportTickets.id, id))\n    .returning();\n  return ticket;\n}\n\nexport async function createSupportTicketResponse(data: InsertSupportTicketResponse & { ticketId: string; userId: string }): Promise<SupportTicketResponse> {\n  const [response] = await db.insert(supportTicketResponses).values(data).returning();\n  return response;\n}\n\n// ============================================================================\n// USER SETTINGS OPERATIONS\n// ============================================================================\n\nexport async function getUserSettings(userId: string): Promise<UserSettings | undefined> {\n  const [settings] = await db\n    .select()\n    .from(userSettings)\n    .where(eq(userSettings.userId, userId))\n    .limit(1);\n  return settings;\n}\n\nexport async function createUserSettings(data: InsertUserSettings & { userId: string }): Promise<UserSettings> {\n  const [settings] = await db.insert(userSettings).values(data).returning();\n  return settings;\n}\n\nexport async function updateUserSettings(userId: string, data: Partial<InsertUserSettings>): Promise<UserSettings> {\n  const [settings] = await db\n    .update(userSettings)\n    .set({ ...data, updatedAt: new Date() })\n    .where(eq(userSettings.userId, userId))\n    .returning();\n  return settings;\n}\n\n// ============================================================================\n// PAGES OPERATIONS\n// ============================================================================\n\nexport async function createPage(data: InsertPage): Promise<Page> {\n  const [page] = await db.insert(pages).values(data).returning();\n  return page;\n}\n\nexport async function getPages(): Promise<Page[]> {\n  return await db.select().from(pages).orderBy(pages.displayName);\n}\n\nexport async function getPageByName(name: string): Promise<Page | undefined> {\n  const [page] = await db\n    .select()\n    .from(pages)\n    .where(eq(pages.name, name))\n    .limit(1);\n  return page;\n}\n\nexport async function getPageById(id: string): Promise<Page | undefined> {\n  const [page] = await db\n    .select()\n    .from(pages)\n    .where(eq(pages.id, id))\n    .limit(1);\n  return page;\n}\n\nexport async function updatePage(id: string, data: Partial<InsertPage>): Promise<Page> {\n  const [page] = await db\n    .update(pages)\n    .set({ ...data, updatedAt: new Date() })\n    .where(eq(pages.id, id))\n    .returning();\n  return page;\n}\n\nexport async function deletePage(id: string): Promise<void> {\n  await db.delete(pages).where(eq(pages.id, id));\n}\n\n// ============================================================================\n// ROLE PAGE PERMISSIONS OPERATIONS\n// ============================================================================\n\nexport async function createRolePagePermission(data: InsertRolePagePermission): Promise<RolePagePermission> {\n  const [permission] = await db.insert(rolePagePermissions).values(data).returning();\n  return permission;\n}\n\nexport async function getRolePagePermissions(roleId?: string): Promise<RolePagePermission[]> {\n  const query = db.select().from(rolePagePermissions);\n  if (roleId) {\n    return await query.where(eq(rolePagePermissions.roleId, roleId));\n  }\n  return await query;\n}\n\nexport async function getRolePagePermission(roleId: string, pageId: string): Promise<RolePagePermission | undefined> {\n  const [permission] = await db\n    .select()\n    .from(rolePagePermissions)\n    .where(and(\n      eq(rolePagePermissions.roleId, roleId),\n      eq(rolePagePermissions.pageId, pageId)\n    ))\n    .limit(1);\n  return permission;\n}\n\nexport async function updateRolePagePermission(roleId: string, pageId: string, data: Partial<InsertRolePagePermission>): Promise<RolePagePermission> {\n  const [permission] = await db\n    .update(rolePagePermissions)\n    .set({ ...data, updatedAt: new Date() })\n    .where(and(\n      eq(rolePagePermissions.roleId, roleId),\n      eq(rolePagePermissions.pageId, pageId)\n    ))\n    .returning();\n  return permission;\n}\n\nexport async function deleteRolePagePermission(roleId: string, pageId: string): Promise<void> {\n  await db.delete(rolePagePermissions).where(and(\n    eq(rolePagePermissions.roleId, roleId),\n    eq(rolePagePermissions.pageId, pageId)\n  ));\n}\n\nexport async function getRoleAllowedPages(roleId: string): Promise<Page[]> {\n  return await db\n    .select({\n      id: pages.id,\n      name: pages.name,\n      displayName: pages.displayName,\n      description: pages.description,\n      route: pages.route,\n      isActive: pages.isActive,\n      createdAt: pages.createdAt,\n      updatedAt: pages.updatedAt,\n    })\n    .from(pages)\n    .innerJoin(rolePagePermissions, eq(pages.id, rolePagePermissions.pageId))\n    .where(and(\n      eq(rolePagePermissions.roleId, roleId),\n      eq(rolePagePermissions.canAccess, true),\n      eq(pages.isActive, true)\n    ))\n    .orderBy(pages.displayName);\n}\n\n// Export all storage functions\nexport const storage = {\n  // Users\n  createUser,\n  getUserByEmail,\n  getUserById,\n  updateUser,\n  deleteUser,\n  getUsers,\n  upsertUser,\n  \n  // Roles\n  createRole,\n  getRoleByName,\n  getRoles,\n  getRolePermissions,\n  getRolePermissionsByName,\n  updateRolePermissions,\n  updateRole,\n  deactivateRole,\n  \n  // Permissions\n  getPermissions,\n  getPermissionsByCategory,\n  getPermissionCategories,\n  getPermissionCategory,\n  createPermissionCategory,\n  createPermission,\n  getUserPermissionOverrides,\n  updateUserPermissions,\n  \n  // Units\n  createUnit,\n  getUnits,\n  getUnit,\n  updateUnit,\n  deleteUnit,\n  \n  // Staff\n  createStaff,\n  getStaff,\n  getStaffMember,\n  getStaffByUserId,\n  updateStaff,\n  deleteStaff,\n  \n  // Guardians\n  createGuardian,\n  getGuardian,\n  updateGuardian,\n  getGuardianWithFinancial,\n  createFinancialResponsible,\n  updateFinancialResponsible,\n  \n  // Students\n  createStudent,\n  getStudents,\n  getStudent,\n  getStudentByUserId,\n  getStudentCourseEnrollmentsForUser,\n  updateStudent,\n  deleteStudent,\n  \n  // Courses\n  getCourseWithBooksBasic,\n  createCourse,\n  getCourses,\n  getCourse,\n  updateCourse,\n  deleteCourse,\n  \n  // Books\n  createBook,\n  getBooks,\n  getBook,\n  updateBook,\n  deleteBook,\n  \n  // Classes\n  createClass,\n  getClasses,\n  getClass,\n  updateClass,\n  deleteClass,\n  \n  // Lessons\n  createLesson,\n  getLessons,\n  getLesson,\n  updateLesson,\n  deleteLesson,\n  \n  // Dashboard\n  getDashboardStats,\n  \n  // Support\n  createSupportTicket,\n  getSupportTickets,\n  getSupportTicket,\n  updateSupportTicket,\n  createSupportTicketResponse,\n  \n  // User Settings\n  getUserSettings,\n  createUserSettings,\n  updateUserSettings,\n  \n  // Pages\n  createPage,\n  getPages,\n  getPageByName,\n  getPageById,\n  updatePage,\n  deletePage,\n  \n  // Role Page Permissions\n  createRolePagePermission,\n  getRolePagePermissions,\n  getRolePagePermission,\n  updateRolePagePermission,\n  deleteRolePagePermission,\n  getRoleAllowedPages,\n  \n  // Teacher Schedule\n  getTeacherSchedule,\n  \n  // Teacher Individual Schedule (Nova funcionalidade)\n  createTeacherSchedule,\n  getTeacherIndividualSchedule,\n  updateTeacherSchedule,\n  deleteTeacherSchedule,\n  \n  // Staff with Teachers\n  getTeachers,\n};\n","size_bytes":39293},"backend/build-frontend.js":{"content":"\n#!/usr/bin/env node\n\nimport { execSync } from 'child_process';\nimport fs from 'fs';\nimport path from 'path';\n\nconsole.log('üèóÔ∏è  Building frontend...');\n\n// Build do frontend\nexecSync('npm run build', { stdio: 'inherit' });\n\n// Criar estrutura de diret√≥rios se n√£o existir\nconst frontendDir = '/var/www/erp/front';\nif (!fs.existsSync(frontendDir)) {\n  fs.mkdirSync(frontendDir, { recursive: true });\n  console.log(`üìÅ Created directory: ${frontendDir}`);\n}\n\n// Copiar arquivos do build para o diret√≥rio do nginx\nexecSync(`cp -r dist/public/* ${frontendDir}/`, { stdio: 'inherit' });\n\nconsole.log('‚úÖ Frontend build completed and copied to /var/www/erp/front');\n","size_bytes":671},"backend/drizzle.config.js":{"content":"import { defineConfig } from \"drizzle-kit\";\nif (!process.env.DATABASE_URL) {\n    throw new Error(\"DATABASE_URL must be set. Did you forget to provision a database?\");\n}\nexport default defineConfig({\n    out: \"./migrations\",\n    schema: \"./shared/schema.ts\",\n    dialect: \"postgresql\",\n    dbCredentials: {\n        url: process.env.DATABASE_URL,\n    },\n});\n","size_bytes":356},"frontend/client/src/components/TeacherScheduleView.tsx":{"content":"import React from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Loader2, Calendar, Clock, MapPin, BookOpen } from 'lucide-react';\nimport { format, startOfWeek, addDays } from 'date-fns';\nimport { ptBR } from 'date-fns/locale';\n\ninterface TeacherScheduleEntry {\n  id: string;\n  teacherId: string;\n  unitId: string;\n  courseName: string;\n  dayOfWeek: number;\n  startTime: string;\n  endTime: string;\n  room: string;\n  notes?: string;\n  isActive: boolean;\n  teacher: {\n    id: string;\n    name: string;\n  };\n  unit: {\n    id: string;\n    name: string;\n  };\n}\n\nconst DAYS_OF_WEEK = [\n  { value: 0, label: 'Domingo', short: 'Dom' },\n  { value: 1, label: 'Segunda-feira', short: 'Seg' },\n  { value: 2, label: 'Ter√ßa-feira', short: 'Ter' },\n  { value: 3, label: 'Quarta-feira', short: 'Qua' },\n  { value: 4, label: 'Quinta-feira', short: 'Qui' },\n  { value: 5, label: 'Sexta-feira', short: 'Sex' },\n  { value: 6, label: 'S√°bado', short: 'S√°b' }\n];\n\nconst TeacherScheduleView: React.FC = () => {\n  const { user } = useAuth();\n\n  // Fetch teacher's individual schedule\n  const { data: teacherSchedule = [], isLoading: scheduleLoading, error } = useQuery<TeacherScheduleEntry[]>({\n    queryKey: ['my-teacher-schedule', user?.id],\n    queryFn: async () => {\n      const response = await fetch('/api/teacher-schedule/my-schedule');\n      if (!response.ok) {\n        if (response.status === 404) {\n          return []; // No schedule found\n        }\n        throw new Error('Erro ao buscar sua agenda');\n      }\n      return response.json();\n    },\n    enabled: !!user?.id && user?.role === 'teacher'\n  });\n\n  const formatTime = (time: string) => {\n    return time.substring(0, 5); // Remove seconds if present\n  };\n\n  const getDayName = (dayOfWeek: number) => {\n    return DAYS_OF_WEEK.find(day => day.value === dayOfWeek)?.label || 'Desconhecido';\n  };\n\n  const getDayShort = (dayOfWeek: number) => {\n    return DAYS_OF_WEEK.find(day => day.value === dayOfWeek)?.short || 'N/A';\n  };\n\n  // Group schedule entries by day of week\n  const scheduleByDay = teacherSchedule.reduce((acc, entry) => {\n    if (!acc[entry.dayOfWeek]) {\n      acc[entry.dayOfWeek] = [];\n    }\n    acc[entry.dayOfWeek].push(entry);\n    return acc;\n  }, {} as Record<number, TeacherScheduleEntry[]>);\n\n  // Get current week dates for display\n  const currentWeekStart = startOfWeek(new Date(), { locale: ptBR });\n  const weekDays = Array.from({ length: 7 }, (_, i) => addDays(currentWeekStart, i));\n\n  if (scheduleLoading) {\n    return (\n      <Card>\n        <CardContent className=\"py-12\">\n          <div className=\"flex items-center justify-center\">\n            <Loader2 className=\"h-6 w-6 animate-spin mr-2\" />\n            <span>Carregando sua agenda...</span>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card>\n        <CardContent className=\"py-12 text-center\">\n          <Calendar className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground opacity-50\" />\n          <h3 className=\"text-lg font-semibold mb-2\">Erro ao carregar agenda</h3>\n          <p className=\"text-muted-foreground\">\n            N√£o foi poss√≠vel carregar sua agenda. Tente novamente mais tarde.\n          </p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (teacherSchedule.length === 0) {\n    return (\n      <Card>\n        <CardContent className=\"py-12 text-center\">\n          <Calendar className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground opacity-50\" />\n          <h3 className=\"text-lg font-semibold mb-2\">Agenda Vazia</h3>\n          <p className=\"text-muted-foreground\">\n            Voc√™ ainda n√£o possui hor√°rios cadastrados em sua agenda.\n            <br />\n            Entre em contato com a administra√ß√£o para configurar seus hor√°rios.\n          </p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Weekly Overview */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Calendar className=\"h-5 w-5\" />\n            Vis√£o Semanal - {format(currentWeekStart, 'dd/MM', { locale: ptBR })} a {format(addDays(currentWeekStart, 6), 'dd/MM/yyyy', { locale: ptBR })}\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <div className=\"min-w-[700px] grid grid-cols-7 gap-2\">\n              {weekDays.map((date, index) => {\n                const dayEntries = scheduleByDay[index] || [];\n                const isToday = format(date, 'yyyy-MM-dd') === format(new Date(), 'yyyy-MM-dd');\n                \n                return (\n                  <div\n                    key={index}\n                    className={`p-2 md:p-3 rounded-lg border ${\n                      isToday ? 'bg-primary/10 border-primary' : 'bg-muted/50'\n                    }`}\n                  >\n                    <div className=\"text-center mb-2\">\n                      <div className={`text-xs md:text-sm font-medium ${isToday ? 'text-primary' : ''}`}>\n                        <span className=\"hidden sm:inline\">{getDayName(index)}</span>\n                        <span className=\"sm:hidden\">{getDayShort(index)}</span>\n                      </div>\n                      <div className={`text-xs ${isToday ? 'text-primary' : 'text-muted-foreground'}`}>\n                        {format(date, 'dd/MM')}\n                      </div>\n                    </div>\n                    <div className=\"space-y-1\">\n                      {dayEntries\n                        .sort((a, b) => a.startTime.localeCompare(b.startTime))\n                        .map((entry) => (\n                          <div\n                            key={entry.id}\n                            className=\"text-xs p-1 bg-background rounded border\"\n                          >\n                            <div className=\"font-medium truncate\">{entry.courseName}</div>\n                            <div className=\"text-muted-foreground\">\n                              {formatTime(entry.startTime)}-{formatTime(entry.endTime)}\n                            </div>\n                          </div>\n                        ))}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Detailed Schedule by Day */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <BookOpen className=\"h-5 w-5\" />\n            Agenda Detalhada\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-6\">\n            {DAYS_OF_WEEK.map((day) => {\n              const dayEntries = scheduleByDay[day.value] || [];\n              if (dayEntries.length === 0) return null;\n\n              return (\n                <div key={day.value} className=\"space-y-3\">\n                  <h3 className=\"font-semibold text-lg border-b pb-2 flex items-center gap-2\">\n                    <Calendar className=\"h-4 w-4\" />\n                    {day.label}\n                  </h3>\n                  <div className=\"grid gap-3\">\n                    {dayEntries\n                      .sort((a, b) => a.startTime.localeCompare(b.startTime))\n                      .map((entry) => (\n                        <Card key={entry.id} className=\"p-3 md:p-4 bg-muted/30\">\n                          <div className=\"flex flex-col sm:flex-row sm:items-start sm:justify-between gap-3\">\n                            <div className=\"flex-1\">\n                              <div className=\"flex flex-col sm:flex-row sm:items-center gap-2 sm:gap-3 mb-3\">\n                                <Badge variant=\"outline\" className=\"flex items-center gap-1 w-fit\">\n                                  <Clock className=\"h-3 w-3\" />\n                                  <span className=\"text-xs sm:text-sm\">\n                                    {formatTime(entry.startTime)} - {formatTime(entry.endTime)}\n                                  </span>\n                                </Badge>\n                                <Badge variant=\"secondary\" className=\"flex items-center gap-1 w-fit\">\n                                  <MapPin className=\"h-3 w-3\" />\n                                  <span className=\"text-xs sm:text-sm\">{entry.room}</span>\n                                </Badge>\n                              </div>\n                              <h4 className=\"font-semibold text-base md:text-lg mb-1\">{entry.courseName}</h4>\n                              <p className=\"text-sm md:text-base text-muted-foreground mb-2\">\n                                <strong>Unidade:</strong> {entry.unit.name}\n                              </p>\n                              {entry.notes && (\n                                <div className=\"mt-3 p-2 md:p-3 bg-background rounded-md border\">\n                                  <p className=\"text-xs md:text-sm\">\n                                    <strong>Observa√ß√µes:</strong> {entry.notes}\n                                  </p>\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                        </Card>\n                      ))}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default TeacherScheduleView;","size_bytes":9599},"frontend/client/src/pages/Permissions.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient, extractErrorMessage } from \"@/lib/queryClient\";\nimport Layout from \"@/components/Layout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\n// import { insertRoleSchema } from \"@shared/schema\"; // Comentado temporariamente\nimport {\n  Shield,\n  Settings,\n  Edit,\n  Trash2,\n  Plus,\n  Users,\n  Crown,\n  UserCheck,\n  UserCog,\n  GraduationCap,\n  BookOpen,\n  CheckCircle,\n  Tag,\n  Info,\n  Globe,\n  Lock\n} from \"lucide-react\";\n\n// Schema baseado no compartilhado com valida√ß√µes espec√≠ficas da UI\nconst createRoleSchema = z.object({\n  name: z.string()\n    .min(1, \"Nome √© obrigat√≥rio\")\n    .max(50, \"Nome deve ter no m√°ximo 50 caracteres\")\n    .regex(/^[a-zA-Z0-9_-]+$/, \"Nome deve conter apenas letras, n√∫meros, underscore e h√≠fen\")\n    .refine(\n      (value) => !['admin', 'secretary', 'teacher', 'student'].includes(value.toLowerCase()),\n      \"Este nome √© reservado pelo sistema\"\n    ),\n  displayName: z.string()\n    .min(1, \"Nome de exibi√ß√£o √© obrigat√≥rio\")\n    .max(100, \"Nome de exibi√ß√£o deve ter no m√°ximo 100 caracteres\"),\n  description: z.string()\n    .max(500, \"Descri√ß√£o deve ter no m√°ximo 500 caracteres\")\n    .optional()\n});\n\ntype CreateRoleFormData = z.infer<typeof createRoleSchema>;\n\nexport default function Permissions() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [selectedRole, setSelectedRole] = useState<any>(null);\n  const [permissionsModalOpen, setPermissionsModalOpen] = useState(false);\n  const [selectedPermissions, setSelectedPermissions] = useState<string[]>([]);\n  const [pagePermissionsModalOpen, setPagePermissionsModalOpen] = useState(false);\n  const [selectedPagePermissions, setSelectedPagePermissions] = useState<{[key: string]: boolean}>({});\n  const [createRoleModalOpen, setCreateRoleModalOpen] = useState(false);\n  const [editRoleModalOpen, setEditRoleModalOpen] = useState(false);\n  const [roleToEdit, setRoleToEdit] = useState<any>(null);\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n  const [roleToDelete, setRoleToDelete] = useState<any>(null);\n\n  // Apenas admin pode acessar (removido developer conforme solicitado)\n  if (!user || user.role !== 'admin') {\n    return (\n      <Layout>\n        <div className=\"p-6\">\n          <div className=\"text-center\">\n            <h2 className=\"text-2xl font-bold text-red-600 mb-4\">Acesso Negado</h2>\n            <p className=\"text-muted-foreground\">\n              Apenas o administrador pode gerenciar permiss√µes do sistema.\n            </p>\n          </div>\n        </div>\n      </Layout>\n    );\n  }\n\n  // Buscar todos os roles do sistema\n  const { data: roles, isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/roles\"],\n    retry: false,\n  });\n\n  // Buscar todas as permiss√µes dispon√≠veis\n  const { data: permissions } = useQuery<any[]>({\n    queryKey: [\"/api/permissions\"],\n    retry: false,\n  });\n\n  // Buscar todas as p√°ginas dispon√≠veis\n  const { data: pages } = useQuery<any[]>({\n    queryKey: [\"/api/pages\"],\n    retry: false,\n  });\n\n  // Buscar permiss√µes do role selecionado\n  const { \n    data: roleWithPermissions, \n    isLoading: rolePermissionsLoading \n  } = useQuery({\n    queryKey: [\"/api/roles\", selectedRole?.id, \"permissions\"],\n    enabled: !!selectedRole?.id && permissionsModalOpen,\n    retry: false,\n  });\n\n  // Buscar permiss√µes de p√°ginas do role selecionado\n  const { \n    data: rolePagePermissions, \n    isLoading: rolePagePermissionsLoading \n  } = useQuery({\n    queryKey: [\"/api/roles\", selectedRole?.id, \"pages\"],\n    enabled: !!selectedRole?.id && pagePermissionsModalOpen,\n    retry: false,\n  });\n\n  // Mutation para atualizar permiss√µes do role\n  const updateRolePermissionsMutation = useMutation({\n    mutationFn: async (data: { roleId: string; permissionIds: string[] }) => {\n      await apiRequest(\"PUT\", `/api/roles/${data.roleId}/permissions`, { permissionIds: data.permissionIds });\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/roles\", variables.roleId, \"permissions\"] });\n      toast({\n        title: \"Sucesso!\",\n        description: \"Permiss√µes do n√≠vel atualizadas com sucesso.\",\n      });\n      setPermissionsModalOpen(false);\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao atualizar permiss√µes do n√≠vel. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mutation para atualizar permiss√µes de p√°ginas do role\n  const updateRolePagePermissionsMutation = useMutation({\n    mutationFn: async (data: { roleId: string; pagePermissions: {pageId: string; canAccess: boolean}[] }) => {\n      await apiRequest(\"PUT\", `/api/roles/${data.roleId}/pages`, { pagePermissions: data.pagePermissions });\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/roles\", variables.roleId, \"pages\"] });\n      toast({\n        title: \"Sucesso!\",\n        description: \"Permiss√µes de p√°ginas do n√≠vel atualizadas com sucesso.\",\n      });\n      setPagePermissionsModalOpen(false);\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao atualizar permiss√µes de p√°ginas do n√≠vel. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mutation para criar novo role\n  const createRoleMutation = useMutation({\n    mutationFn: async (data: CreateRoleFormData) => {\n      await apiRequest(\"POST\", \"/api/roles\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/roles\"] });\n      toast({\n        title: \"Sucesso!\",\n        description: \"Novo n√≠vel de acesso criado com sucesso.\",\n      });\n      setCreateRoleModalOpen(false);\n      createRoleForm.reset();\n    },\n    onError: (error: any) => {\n      let errorMessage = \"Erro ao criar n√≠vel de acesso. Tente novamente.\";\n      \n      // Tratar erro 409 (conflito) especificamente\n      if (error.response?.status === 409 || extractErrorMessage(error)?.includes(\"already exists\")) {\n        errorMessage = \"Nome j√° em uso ou reservado pelo sistema.\";\n      } else {\n        errorMessage = extractErrorMessage(error) || errorMessage;\n      }\n      \n      toast({\n        title: \"Erro\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mutation para atualizar role\n  const updateRoleMutation = useMutation({\n    mutationFn: async (data: { id: string; roleData: Partial<CreateRoleFormData> }) => {\n      await apiRequest(\"PUT\", `/api/roles/${data.id}`, data.roleData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/roles\"] });\n      toast({\n        title: \"Sucesso!\",\n        description: \"N√≠vel de acesso atualizado com sucesso.\",\n      });\n      setEditRoleModalOpen(false);\n      setRoleToEdit(null);\n      editRoleForm.reset();\n    },\n    onError: (error: any) => {\n      let errorMessage = \"Erro ao atualizar n√≠vel de acesso. Tente novamente.\";\n      \n      // Tratar erro 409 (conflito) especificamente\n      if (error.response?.status === 409 || extractErrorMessage(error)?.includes(\"already exists\")) {\n        errorMessage = \"Nome j√° em uso ou reservado pelo sistema.\";\n      } else if (error.response?.status === 403 || extractErrorMessage(error)?.includes(\"Cannot modify\")) {\n        errorMessage = \"N√£o √© poss√≠vel modificar n√≠veis de sistema.\";\n      } else {\n        errorMessage = extractErrorMessage(error) || errorMessage;\n      }\n      \n      toast({\n        title: \"Erro\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mutation para deletar role\n  const deleteRoleMutation = useMutation({\n    mutationFn: async (roleId: string) => {\n      await apiRequest(\"DELETE\", `/api/roles/${roleId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/roles\"] });\n      toast({\n        title: \"Sucesso!\",\n        description: \"N√≠vel de acesso removido com sucesso.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: extractErrorMessage(error) || \"Erro ao remover n√≠vel de acesso. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Form para cria√ß√£o de role\n  const createRoleForm = useForm<CreateRoleFormData>({\n    resolver: zodResolver(createRoleSchema),\n    defaultValues: {\n      name: \"\",\n      displayName: \"\",\n      description: \"\",\n    },\n  });\n\n  // Form para edi√ß√£o de role\n  const editRoleForm = useForm<CreateRoleFormData>({\n    resolver: zodResolver(createRoleSchema),\n    defaultValues: {\n      name: \"\",\n      displayName: \"\",\n      description: \"\",\n    },\n  });\n\n  // Mapear roles para os 4 tipos fixos\n  const getRoleInfo = (role: string) => {\n    switch (role) {\n      case 'admin':\n        return { \n          icon: Crown, \n          color: 'bg-red-100 text-red-700 dark:bg-red-900 dark:text-red-300',\n          displayName: 'Administrativo'\n        };\n      case 'secretary':\n        return { \n          icon: UserCog, \n          color: 'bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-300',\n          displayName: 'Secretario'\n        };\n      case 'teacher':\n        return { \n          icon: BookOpen, \n          color: 'bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300',\n          displayName: 'Professor'\n        };\n      case 'student':\n        return { \n          icon: GraduationCap, \n          color: 'bg-purple-100 text-purple-700 dark:bg-purple-900 dark:text-purple-300',\n          displayName: 'Aluno'\n        };\n      default:\n        return { \n          icon: UserCog, \n          color: 'bg-gray-100 text-gray-700 dark:bg-gray-900 dark:text-gray-300',\n          displayName: role\n        };\n    }\n  };\n\n  // Abrir modal de permiss√µes\n  const handleManagePermissions = (role: any) => {\n    setSelectedRole(role);\n    setPermissionsModalOpen(true);\n  };\n\n  // Salvar permiss√µes\n  const handleSavePermissions = () => {\n    if (!selectedRole?.id) return;\n    \n    updateRolePermissionsMutation.mutate({\n      roleId: selectedRole.id,\n      permissionIds: selectedPermissions\n    });\n  };\n\n  // Abrir modal de permiss√µes de p√°ginas\n  const handleManagePagePermissions = (role: any) => {\n    setSelectedRole(role);\n    setPagePermissionsModalOpen(true);\n  };\n\n  // Salvar permiss√µes de p√°ginas\n  const handleSavePagePermissions = () => {\n    if (!selectedRole?.id || !pages) return;\n    \n    const pagePermissions = pages.map(page => ({\n      pageId: page.id,\n      canAccess: selectedPagePermissions[page.id] || false\n    }));\n    \n    updateRolePagePermissionsMutation.mutate({\n      roleId: selectedRole.id,\n      pagePermissions\n    });\n  };\n\n  // Criar novo role\n  const handleCreateRole = (data: CreateRoleFormData) => {\n    createRoleMutation.mutate(data);\n  };\n\n  // Abrir modal de edi√ß√£o\n  const handleEditRole = (role: any) => {\n    if (role.isSystemRole) {\n      toast({\n        title: \"N√£o permitido\",\n        description: \"N√≠veis de sistema n√£o podem ser editados.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    setRoleToEdit(role);\n    editRoleForm.reset({\n      name: role.name,\n      displayName: role.displayName,\n      description: role.description || \"\",\n    });\n    setEditRoleModalOpen(true);\n  };\n\n  // Atualizar role\n  const handleUpdateRole = (data: CreateRoleFormData) => {\n    if (!roleToEdit?.id) return;\n    \n    updateRoleMutation.mutate({\n      id: roleToEdit.id,\n      roleData: data\n    });\n  };\n\n  // Deletar role\n  const handleDeleteRole = (role: any) => {\n    if (role.isSystemRole) {\n      toast({\n        title: \"N√£o permitido\",\n        description: \"N√≠veis de sistema n√£o podem ser removidos.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setRoleToDelete(role);\n    setIsDeleteDialogOpen(true);\n  };\n\n  const confirmDeleteRole = () => {\n    if (roleToDelete) {\n      deleteRoleMutation.mutate(roleToDelete.id);\n      setIsDeleteDialogOpen(false);\n      setRoleToDelete(null);\n    }\n  };\n\n  // Inicializar permiss√µes selecionadas quando modal abre\n  useEffect(() => {\n    if (permissionsModalOpen && roleWithPermissions && (roleWithPermissions as any)?.rolePermissions) {\n      const grantedPermissionIds = (roleWithPermissions as any).rolePermissions\n        .map((rp: any) => rp.permission.id);\n      setSelectedPermissions(grantedPermissionIds);\n    }\n  }, [permissionsModalOpen, roleWithPermissions]);\n\n  // Limpar estados quando modal fecha\n  useEffect(() => {\n    if (!permissionsModalOpen) {\n      setSelectedPermissions([]);\n      setSelectedRole(null);\n    }\n  }, [permissionsModalOpen]);\n\n  // Inicializar permiss√µes de p√°ginas selecionadas quando modal abre\n  useEffect(() => {\n    if (pagePermissionsModalOpen && rolePagePermissions && pages) {\n      const pagePermissionsMap: {[key: string]: boolean} = {};\n      \n      // Inicializar todas as p√°ginas como false\n      pages.forEach(page => {\n        pagePermissionsMap[page.id] = false;\n      });\n      \n      // Marcar as p√°ginas que o role tem acesso\n      rolePagePermissions.forEach((rpp: any) => {\n        pagePermissionsMap[rpp.pageId] = rpp.canAccess;\n      });\n      \n      setSelectedPagePermissions(pagePermissionsMap);\n    }\n  }, [pagePermissionsModalOpen, rolePagePermissions, pages]);\n\n  // Limpar estados quando modal de p√°ginas fecha\n  useEffect(() => {\n    if (!pagePermissionsModalOpen) {\n      setSelectedPagePermissions({});\n      setSelectedRole(null);\n    }\n  }, [pagePermissionsModalOpen]);\n\n  // Toggle permiss√£o de p√°gina\n  const togglePagePermission = (pageId: string) => {\n    setSelectedPagePermissions(prev => ({\n      ...prev,\n      [pageId]: !prev[pageId]\n    }));\n  };\n\n  // Toggle permiss√£o\n  const togglePermission = (permissionId: string) => {\n    setSelectedPermissions(prev => \n      prev.includes(permissionId)\n        ? prev.filter(id => id !== permissionId)\n        : [...prev, permissionId]\n    );\n  };\n\n  // Mapeamento de permiss√µes para p√°ginas/funcionalidades\n  const getPagePermissions = (permissions: any[]) => {\n    const pageGroups = [\n      {\n        title: \"Dashboard\",\n        icon: \"üìä\",\n        permissions: permissions.filter(p => p.name === 'dashboard:read')\n      },\n      {\n        title: \"Unidades\",\n        icon: \"üè¢\",\n        permissions: permissions.filter(p => p.name.startsWith('units:'))\n      },\n      {\n        title: \"Funcion√°rios\",\n        icon: \"üë•\",\n        permissions: permissions.filter(p => p.name.startsWith('staff:'))\n      },\n      {\n        title: \"Estudantes\",\n        icon: \"üéì\",\n        permissions: permissions.filter(p => p.name.startsWith('students:'))\n      },\n      {\n        title: \"Cursos\",\n        icon: \"üìö\",\n        permissions: permissions.filter(p => p.name.startsWith('courses:'))\n      },\n      {\n        title: \"Livros\",\n        icon: \"üìñ\",\n        permissions: permissions.filter(p => p.name.startsWith('books:'))\n      },\n      {\n        title: \"Aulas\",\n        icon: \"üè´\",\n        permissions: permissions.filter(p => p.name.startsWith('classes:'))\n      },\n      {\n        title: \"√Årea do Estudante\",\n        icon: \"üìù\",\n        permissions: permissions.filter(p => p.name.startsWith('lessons:'))\n      },\n      {\n        title: \"Financeiro\",\n        icon: \"üí∞\",\n        permissions: permissions.filter(p => p.name.startsWith('finance:'))\n      },\n      {\n        title: \"Configura√ß√µes\",\n        icon: \"‚öôÔ∏è\",\n        permissions: permissions.filter(p => p.name === 'settings:read')\n      },\n      {\n        title: \"Suporte\",\n        icon: \"üÜò\",\n        permissions: permissions.filter(p => p.name === 'support:read')\n      },\n      {\n        title: \"Gerenciar Permiss√µes\",\n        icon: \"üîê\",\n        permissions: permissions.filter(p => p.name === 'permissions:manage')\n      }\n    ].filter(group => group.permissions.length > 0);\n\n    return pageGroups;\n  };\n\n  return (\n    <Layout>\n      <div className=\"p-6 space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\" data-testid=\"text-permissions-title\">\n              Gerenciamento de N√≠veis de Acesso\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Configure as permiss√µes para cada n√≠vel de usu√°rio do sistema\n            </p>\n          </div>\n          \n          <div className=\"flex items-center gap-4\">\n            <Button \n              onClick={() => setCreateRoleModalOpen(true)}\n              className=\"flex items-center gap-2\"\n              data-testid=\"button-create-role\"\n            >\n              <Plus className=\"w-4 h-4\" />\n              Adicionar Novo N√≠vel\n            </Button>\n            \n            <div className=\"text-sm text-muted-foreground bg-muted px-3 py-2 rounded-lg flex items-center\">\n              <Info className=\"w-4 h-4 mr-2\" />\n              4 n√≠veis fixos + personalizados\n            </div>\n          </div>\n        </div>\n\n        {/* Cards dos n√≠veis/roles */}\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {Array.from({ length: 4 }).map((_, index) => (\n              <Card key={index} className=\"animate-pulse\">\n                <CardHeader>\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-16 h-16 bg-muted rounded-lg\"></div>\n                    <div className=\"flex-1 space-y-2\">\n                      <div className=\"h-6 bg-muted rounded w-3/4\"></div>\n                      <div className=\"h-4 bg-muted rounded w-1/2\"></div>\n                    </div>\n                  </div>\n                </CardHeader>\n              </Card>\n            ))}\n          </div>\n        ) : !roles || roles.length === 0 ? (\n          <Card>\n            <CardContent className=\"py-12 text-center\">\n              <Shield className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">Nenhum n√≠vel encontrado</h3>\n              <p className=\"text-muted-foreground\">\n                N√£o h√° n√≠veis de acesso configurados no sistema.\n              </p>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {roles.map((role: any) => {\n              const roleInfo = getRoleInfo(role.name);\n              const IconComponent = roleInfo.icon;\n              return (\n                <Card key={role.id} className=\"hover:shadow-md transition-shadow\">\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className={`w-16 h-16 rounded-lg flex items-center justify-center ${roleInfo.color}`}>\n                        <IconComponent className=\"w-8 h-8\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <CardTitle className=\"text-xl\">\n                          {role.displayName ?? roleInfo.displayName}\n                        </CardTitle>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {role.description ?? 'N√≠vel de acesso do sistema'}\n                        </p>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  \n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        <Tag className=\"w-3 h-3 mr-1\" />\n                        {role.isSystemRole ? 'Sistema' : 'Personalizado'}\n                      </Badge>\n                      {role.isActive && (\n                        <Badge variant=\"secondary\" className=\"text-xs text-green-700 bg-green-100 dark:text-green-300 dark:bg-green-900\">\n                          <CheckCircle className=\"w-3 h-3 mr-1\" />\n                          Ativo\n                        </Badge>\n                      )}\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <Button \n                        onClick={() => handleManagePermissions(role)}\n                        className=\"w-full\"\n                        size=\"sm\"\n                        data-testid={`button-manage-permissions-${role.id}`}\n                      >\n                        <Settings className=\"w-4 h-4 mr-2\" />\n                        Configurar Permiss√µes\n                      </Button>\n                      \n                      <Button \n                        onClick={() => handleManagePagePermissions(role)}\n                        className=\"w-full\"\n                        size=\"sm\"\n                        variant=\"outline\"\n                        data-testid={`button-manage-page-permissions-${role.id}`}\n                      >\n                        <Globe className=\"w-4 h-4 mr-2\" />\n                        Configurar P√°ginas\n                      </Button>\n                      \n                      {!role.isSystemRole && (\n                        <div className=\"flex gap-2\">\n                          <Button\n                            onClick={() => handleEditRole(role)}\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"flex-1\"\n                            data-testid={`button-edit-role-${role.id}`}\n                          >\n                            <Edit className=\"w-4 h-4 mr-2\" />\n                            Editar\n                          </Button>\n                          \n                          <Button\n                            onClick={() => handleDeleteRole(role)}\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"flex-1 border-red-200 text-red-600 hover:bg-red-50 dark:border-red-800 dark:text-red-400 dark:hover:bg-red-950\"\n                            data-testid={`button-delete-role-${role.id}`}\n                          >\n                            <Trash2 className=\"w-4 h-4 mr-2\" />\n                            Remover\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        )}\n\n        {/* Modal de Permiss√µes */}\n        <Dialog open={permissionsModalOpen} onOpenChange={setPermissionsModalOpen}>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>\n                Configurar Permiss√µes do N√≠vel\n              </DialogTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                {selectedRole && \n                  `${selectedRole.displayName} - ${selectedRole.description}`\n                }\n              </p>\n              {selectedRole?.isSystemRole && selectedRole?.name === 'admin' && (\n                <div className=\"bg-amber-50 border border-amber-200 rounded-lg p-3 mt-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <Shield className=\"w-4 h-4 text-amber-600\" />\n                    <span className=\"text-sm font-medium text-amber-800\">\n                      N√≠vel Administrativo\n                    </span>\n                  </div>\n                  <p className=\"text-xs text-amber-700 mt-1\">\n                    Este n√≠vel possui acesso total ao sistema e n√£o pode ser modificado.\n                  </p>\n                </div>\n              )}\n            </DialogHeader>\n            \n            <div className=\"space-y-4\">\n              {rolePermissionsLoading ? (\n                <div className=\"space-y-3\">\n                  <Label className=\"text-sm font-medium\">Carregando permiss√µes...</Label>\n                  <div className=\"space-y-2\">\n                    {Array.from({ length: 4 }).map((_, index) => (\n                      <div key={index} className=\"flex items-center space-x-2 animate-pulse\">\n                        <div className=\"w-4 h-4 bg-muted rounded\"></div>\n                        <div className=\"w-32 h-4 bg-muted rounded\"></div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              ) : !permissions || permissions.length === 0 ? (\n                <div className=\"text-center py-4\">\n                  <p className=\"text-sm text-muted-foreground\">Nenhuma permiss√£o encontrada.</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  <Label className=\"text-sm font-medium\">\n                    Selecione quais p√°ginas este n√≠vel pode acessar:\n                  </Label>\n                  <div className=\"max-h-96 overflow-y-auto space-y-4\">\n                    {getPagePermissions(permissions).map((pageGroup) => (\n                      <div key={pageGroup.title} className=\"border rounded-lg p-4\">\n                        <div className=\"flex items-center gap-2 mb-3\">\n                          <span className=\"text-lg\">{pageGroup.icon}</span>\n                          <h4 className=\"font-medium text-sm\">{pageGroup.title}</h4>\n                        </div>\n                        <div className=\"space-y-2 ml-6\">\n                          {pageGroup.permissions.map((permission: any) => {\n                            const isReadOnly = permission.name.endsWith(':read');\n                            const isDisabled = selectedRole?.isSystemRole && selectedRole?.name === 'admin';\n                            \n                            return (\n                              <div key={permission.id} className=\"flex items-center space-x-2\">\n                                <Checkbox\n                                  id={permission.id}\n                                  checked={selectedRole?.isSystemRole && selectedRole?.name === 'admin' ? true : selectedPermissions.includes(permission.id)}\n                                  onCheckedChange={() => !isDisabled && togglePermission(permission.id)}\n                                  disabled={isDisabled}\n                                  data-testid={`checkbox-permission-${permission.name}`}\n                                />\n                                <Label \n                                  htmlFor={permission.id} \n                                  className={`text-sm cursor-pointer flex-1 ${isDisabled ? 'text-muted-foreground' : ''}`}\n                                >\n                                  {isReadOnly ? 'üëÅÔ∏è Visualizar' : '‚úèÔ∏è Gerenciar'}\n                                  <span className=\"text-xs text-muted-foreground ml-2\">\n                                    ({permission.displayName})\n                                  </span>\n                                </Label>\n                              </div>\n                            );\n                          })}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n            \n            <DialogFooter>\n              <Button \n                variant=\"outline\" \n                onClick={() => setPermissionsModalOpen(false)}\n                data-testid=\"button-cancel-permissions\"\n              >\n                Cancelar\n              </Button>\n              <Button \n                onClick={handleSavePermissions}\n                disabled={updateRolePermissionsMutation.isPending || (selectedRole?.isSystemRole && selectedRole?.name === 'admin')}\n                data-testid=\"button-save-permissions\"\n              >\n                {updateRolePermissionsMutation.isPending ? 'Salvando...' : 'Salvar'}\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n\n        {/* Modal de Cria√ß√£o de Role */}\n        <Dialog \n          open={createRoleModalOpen} \n          onOpenChange={(open) => {\n            if (!open) {\n              createRoleForm.reset();\n            }\n            setCreateRoleModalOpen(open);\n          }}\n        >\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>\n                Adicionar Novo N√≠vel de Acesso\n              </DialogTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                Crie um novo n√≠vel de acesso personalizado para o sistema\n              </p>\n            </DialogHeader>\n            \n            <Form {...createRoleForm}>\n              <form onSubmit={createRoleForm.handleSubmit(handleCreateRole)} className=\"space-y-4\">\n                <FormField\n                  control={createRoleForm.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nome Interno</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          placeholder=\"ex: coordinator, supervisor\"\n                          data-testid=\"input-role-name\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                      <p className=\"text-xs text-muted-foreground\">\n                        Apenas letras, n√∫meros, underscore e h√≠fen\n                      </p>\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={createRoleForm.control}\n                  name=\"displayName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nome de Exibi√ß√£o</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          placeholder=\"ex: Coordenador, Supervisor\"\n                          data-testid=\"input-role-display-name\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={createRoleForm.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Descri√ß√£o (Opcional)</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          {...field} \n                          placeholder=\"Descreva as responsabilidades deste n√≠vel...\"\n                          rows={3}\n                          data-testid=\"input-role-description\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <DialogFooter>\n                  <Button \n                    type=\"button\"\n                    variant=\"outline\" \n                    onClick={() => setCreateRoleModalOpen(false)}\n                    data-testid=\"button-cancel-create-role\"\n                  >\n                    Cancelar\n                  </Button>\n                  <Button \n                    type=\"submit\"\n                    disabled={createRoleMutation.isPending}\n                    data-testid=\"button-submit-create-role\"\n                  >\n                    {createRoleMutation.isPending ? 'Criando...' : 'Criar N√≠vel'}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Modal de Edi√ß√£o de Role */}\n        <Dialog \n          open={editRoleModalOpen} \n          onOpenChange={(open) => {\n            if (!open) {\n              editRoleForm.reset();\n              setRoleToEdit(null);\n            }\n            setEditRoleModalOpen(open);\n          }}\n        >\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>\n                Editar N√≠vel de Acesso\n              </DialogTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                {roleToEdit && `Editando: ${roleToEdit.displayName}`}\n              </p>\n            </DialogHeader>\n            \n            <Form {...editRoleForm}>\n              <form onSubmit={editRoleForm.handleSubmit(handleUpdateRole)} className=\"space-y-4\">\n                <FormField\n                  control={editRoleForm.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nome Interno</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          placeholder=\"ex: coordinator, supervisor\"\n                          data-testid=\"input-edit-role-name\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                      <p className=\"text-xs text-muted-foreground\">\n                        Apenas letras, n√∫meros, underscore e h√≠fen\n                      </p>\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={editRoleForm.control}\n                  name=\"displayName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nome de Exibi√ß√£o</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          placeholder=\"ex: Coordenador, Supervisor\"\n                          data-testid=\"input-edit-role-display-name\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={editRoleForm.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Descri√ß√£o (Opcional)</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          {...field} \n                          placeholder=\"Descreva as responsabilidades deste n√≠vel...\"\n                          rows={3}\n                          data-testid=\"input-edit-role-description\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <DialogFooter>\n                  <Button \n                    type=\"button\"\n                    variant=\"outline\" \n                    onClick={() => setEditRoleModalOpen(false)}\n                    data-testid=\"button-cancel-edit-role\"\n                  >\n                    Cancelar\n                  </Button>\n                  <Button \n                    type=\"submit\"\n                    disabled={updateRoleMutation.isPending}\n                    data-testid=\"button-submit-edit-role\"\n                  >\n                    {updateRoleMutation.isPending ? 'Salvando...' : 'Salvar Altera√ß√µes'}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>\n          <AlertDialogContent data-testid=\"dialog-delete-role\">\n            <AlertDialogHeader>\n              <AlertDialogTitle>Confirmar exclus√£o</AlertDialogTitle>\n              <AlertDialogDescription>\n                Tem certeza que deseja remover o n√≠vel <strong>\"{roleToDelete?.displayName}\"</strong>?\n                Esta a√ß√£o n√£o pode ser desfeita e todos os usu√°rios com este n√≠vel perder√£o suas permiss√µes associadas.\n              </AlertDialogDescription>\n            </AlertDialogHeader>\n            <AlertDialogFooter>\n              <AlertDialogCancel data-testid=\"button-cancel-delete-role\">Cancelar</AlertDialogCancel>\n              <AlertDialogAction \n                onClick={confirmDeleteRole} \n                className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                data-testid=\"button-confirm-delete-role\"\n              >\n                {deleteRoleMutation.isPending ? \"Excluindo...\" : \"Excluir N√≠vel\"}\n              </AlertDialogAction>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialog>\n\n        {/* Modal de Permiss√µes de P√°ginas */}\n        <Dialog open={pagePermissionsModalOpen} onOpenChange={setPagePermissionsModalOpen}>\n          <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\" data-testid=\"dialog-page-permissions\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-2\">\n                <Globe className=\"w-5 h-5\" />\n                Configurar P√°ginas - {selectedRole?.displayName}\n              </DialogTitle>\n              <DialogDescription>\n                Selecione quais p√°ginas este n√≠vel pode acessar no sistema.\n              </DialogDescription>\n            </DialogHeader>\n\n            <div className=\"space-y-4\">\n              {pages && pages.length > 0 ? (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {pages.map((page: any) => (\n                    <div key={page.id} className=\"flex items-center space-x-3 p-3 border rounded-lg\">\n                      <Checkbox\n                        id={`page-${page.id}`}\n                        checked={selectedPagePermissions[page.id] || false}\n                        onCheckedChange={() => togglePagePermission(page.id)}\n                        data-testid={`checkbox-page-${page.id}`}\n                      />\n                      <div className=\"flex-1\">\n                        <label \n                          htmlFor={`page-${page.id}`}\n                          className=\"text-sm font-medium cursor-pointer\"\n                        >\n                          {page.displayName}\n                        </label>\n                        {page.description && (\n                          <p className=\"text-xs text-muted-foreground mt-1\">\n                            {page.description}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <Lock className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                  <p className=\"text-muted-foreground\">Nenhuma p√°gina encontrada</p>\n                </div>\n              )}\n            </div>\n\n            <DialogFooter>\n              <Button \n                type=\"button\"\n                variant=\"outline\" \n                onClick={() => setPagePermissionsModalOpen(false)}\n                data-testid=\"button-cancel-page-permissions\"\n              >\n                Cancelar\n              </Button>\n              <Button \n                onClick={handleSavePagePermissions}\n                disabled={updateRolePagePermissionsMutation.isPending}\n                data-testid=\"button-save-page-permissions\"\n              >\n                {updateRolePagePermissionsMutation.isPending ? 'Salvando...' : 'Salvar Permiss√µes'}\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":40925},"frontend/client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"frontend/client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"frontend/client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"backend/README-DEPLOY.md":{"content":"# üöÄ Guia de Deploy - Configura√ß√£o Adaptativa\n\n## üìã Arquivos de Configura√ß√£o\n\n### üîß `.env` (Desenvolvimento)\n- Usado para desenvolvimento local\n- `NODE_ENV=development`\n\n### üåê `.env.production` (Servidor)\n- Usado para produ√ß√£o no servidor\n- `NODE_ENV=production`\n- **FRONTEND_URL sem backticks**\n\n## üõ†Ô∏è Como usar no servidor:\n\n### Op√ß√£o 1: Substituir arquivo\n```bash\n# No servidor VPS:\ncd /var/www/erp/back\ncp .env.production .env\n```\n\n### Op√ß√£o 2: Editar manualmente\n```bash\n# No servidor VPS:\ncd /var/www/erp/back\nnano .env\n\n# Alterar:\nNODE_ENV=development  ‚Üí  NODE_ENV=production\n# Remover backticks do FRONTEND_URL se existirem\n```\n\n## üîÑ Ap√≥s alterar configura√ß√£o:\n\n```bash\n# 1. Executar migra√ß√£o\nnpx drizzle-kit push\n\n# 2. Reiniciar aplica√ß√£o\npm2 restart all\n# OU\npm2 restart erp\n```\n\n## ‚ö†Ô∏è Problemas Comuns:\n\n1. **Backticks no FRONTEND_URL** - Remover `` ` ``\n2. **NODE_ENV incorreto** - Usar `production` no servidor\n3. **Migra√ß√£o n√£o aplicada** - Executar `npx drizzle-kit push`\n\n## ‚úÖ Verifica√ß√£o:\n\n```bash\n# Testar conex√£o com banco\npsql \"postgresql://school_admin:v9nQm7X2kL8Z4pE1aD6R0yU3tB5C_-N@127.0.0.1:5432/school_system\" -c \"\\d roles\"\n\n# Verificar se coluna is_deletable existe\npsql \"postgresql://school_admin:v9nQm7X2kL8Z4pE1aD6R0yU3tB5C_-N@127.0.0.1:5432/school_system\" -c \"SELECT column_name FROM information_schema.columns WHERE table_name = 'roles';\"\n```","size_bytes":1424},"scripts/deploy-quick.js":{"content":"#!/usr/bin/env node\n\nconst { execSync } = require('child_process');\nconst path = require('path');\nconst fs = require('fs');\n\n// Carregar configura√ß√µes\nconst config = require('../deploy.config.js');\n\nconsole.log('‚ö° Iniciando deploy r√°pido (sem rebuild)...\\n');\n\nfunction runCommand(command, description) {\n  console.log(`üìã ${description}`);\n  console.log(`üíª Executando: ${command}\\n`);\n  \n  try {\n    const output = execSync(command, { \n      stdio: 'inherit',\n      cwd: process.cwd()\n    });\n    console.log('‚úÖ Sucesso!\\n');\n    return output;\n  } catch (error) {\n    console.error(`‚ùå Erro: ${error.message}\\n`);\n    process.exit(1);\n  }\n}\n\nfunction deployQuick() {\n  const { server, paths, docker } = config;\n  \n  // Comandos SSH base\n  const sshBase = `ssh -p ${server.port} ${server.username}@${server.host}`;\n  \n  console.log('üì¶ Enviando apenas c√≥digo do backend...');\n  runCommand(\n    `rsync -avz --delete --exclude node_modules --exclude .git ./backend/ ${server.username}@${server.host}:${paths.app}/backend/`,\n    'Sincronizando backend'\n  );\n  \n  console.log('üîÑ Reiniciando container do backend...');\n  runCommand(\n    `${sshBase} \"cd ${paths.app} && docker-compose restart ${docker.services.backend}\"`,\n    'Reiniciando backend'\n  );\n  \n  console.log('‚è≥ Aguardando reinicializa√ß√£o...');\n  runCommand(\n    `${sshBase} \"sleep 5\"`,\n    'Aguardando'\n  );\n  \n  console.log('üîç Verificando status...');\n  runCommand(\n    `${sshBase} \"cd ${paths.app} && docker-compose ps ${docker.services.backend}\"`,\n    'Status do backend'\n  );\n  \n  console.log('üìã Logs recentes...');\n  runCommand(\n    `${sshBase} \"cd ${paths.app} && docker-compose logs --tail=10 ${docker.services.backend}\"`,\n    'Logs do backend'\n  );\n  \n  console.log('‚ö° Deploy r√°pido conclu√≠do! üéâ\\n');\n}\n\n// Verificar se as configura√ß√µes est√£o corretas\nif (!config.server.host || !config.server.username) {\n  console.error('‚ùå Erro: Configure o servidor no arquivo deploy.config.js');\n  process.exit(1);\n}\n\n// Executar deploy\ndeployQuick();","size_bytes":2045},"frontend/tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\n    path.join(__dirname, \"client/index.html\"),\n    path.join(__dirname, \"client/src/**/*.{js,jsx,ts,tsx}\"),\n  ],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\", \"Inter\", \"system-ui\", \"sans-serif\"],\n        serif: [\"var(--font-serif)\", \"Georgia\", \"serif\"],\n        mono: [\"var(--font-mono)\", \"Menlo\", \"monospace\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3013},"frontend/client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"frontend/client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"frontend/client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"frontend/client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"frontend/client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"frontend/client/src/components/LessonModal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, extractErrorMessage } from \"@/lib/queryClient\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { CalendarIcon, Loader2 } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { format } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\n\n// Extended schema for lesson form validation\nconst lessonFormSchema = z.object({\n  classId: z.string().min(1, \"Turma √© obrigat√≥ria\"),\n  date: z.date({ required_error: \"Data √© obrigat√≥ria\" }),\n  startTime: z.string().min(1, \"Hor√°rio de in√≠cio √© obrigat√≥rio\"),\n  endTime: z.string().min(1, \"Hor√°rio de fim √© obrigat√≥rio\"),\n  bookDay: z.coerce.number().min(1, \"Dia do livro deve ser pelo menos 1\"),\n  content: z.string().optional(),\n  homework: z.string().optional(),\n  observations: z.string().optional(),\n}).refine((data: any) => {\n  if (data.startTime && data.endTime) {\n    const start = data.startTime.split(':').map(Number);\n    const end = data.endTime.split(':').map(Number);\n    const startMinutes = start[0] * 60 + start[1];\n    const endMinutes = end[0] * 60 + end[1];\n    return endMinutes > startMinutes;\n  }\n  return true;\n}, {\n  message: \"Hor√°rio de fim deve ser posterior ao hor√°rio de in√≠cio\",\n  path: [\"endTime\"],\n});\n\ntype LessonFormData = z.infer<typeof lessonFormSchema>;\n\ninterface LessonModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  lessonToEdit?: any; // Existing lesson data when editing\n  defaultClassId?: string; // Pre-select a class when creating from class context\n}\n\nexport default function LessonModal({ \n  isOpen, \n  onClose, \n  lessonToEdit, \n  defaultClassId \n}: LessonModalProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [conflictCheck, setConflictCheck] = useState<{ hasConflict: boolean; conflictingLesson?: any } | null>(null);\n  const [checkingConflict, setCheckingConflict] = useState(false);\n\n  const isEditing = !!lessonToEdit;\n\n  // Fetch classes (filtered by teacher if user is a teacher)\n  const { data: classes = [], isLoading: classesLoading } = useQuery<any[]>({\n    queryKey: user?.role === 'teacher' \n      ? [\"/api/classes/teacher\", user.id]\n      : [\"/api/classes\"],\n    enabled: isOpen,\n  });\n\n  const form = useForm<LessonFormData>({\n    resolver: zodResolver(lessonFormSchema),\n    defaultValues: {\n      classId: defaultClassId || \"\",\n      title: \"\",\n      bookDay: 1,\n      date: new Date(),\n      startTime: \"\",\n      endTime: \"\",\n      room: \"\",\n      status: \"scheduled\",\n      notes: \"\",\n    },\n  });\n\n  // Reset form when modal opens/closes or when lessonToEdit changes\n  useEffect(() => {\n    if (isOpen) {\n      if (lessonToEdit) {\n        // Editing existing lesson\n        form.reset({\n          classId: lessonToEdit.classId,\n          title: lessonToEdit.title,\n          bookDay: lessonToEdit.bookDay,\n          date: new Date(lessonToEdit.date),\n          startTime: lessonToEdit.startTime,\n          endTime: lessonToEdit.endTime,\n          room: lessonToEdit.room || \"\",\n          status: lessonToEdit.status,\n          notes: lessonToEdit.notes || \"\",\n        });\n      } else {\n        // Creating new lesson\n        form.reset({\n          classId: defaultClassId || \"\",\n          title: \"\",\n          bookDay: 1,\n          date: new Date(),\n          startTime: \"\",\n          endTime: \"\",\n          room: \"\",\n          status: \"scheduled\",\n          notes: \"\",\n        });\n      }\n      setConflictCheck(null);\n    }\n  }, [isOpen, lessonToEdit, defaultClassId, form]);\n\n  // Check for conflicts when time fields change\n  const checkConflicts = async (classId: string, date: Date, startTime: string, endTime: string) => {\n    if (!classId || !startTime || !endTime) {\n      setConflictCheck(null);\n      return;\n    }\n\n    // Get teacher ID from selected class\n    const selectedClass = classes.find((cls: any) => cls.id === classId);\n    if (!selectedClass?.teacher?.id) {\n      setConflictCheck(null);\n      return;\n    }\n\n    setCheckingConflict(true);\n    try {\n      const conflictResult = await apiRequest('POST', '/api/lessons/check-conflicts', {\n        teacherId: selectedClass.teacher.id,\n        date: date.toISOString(),\n        startTime,\n        endTime,\n        excludeLessonId: lessonToEdit?.id\n      }) as { hasConflict: boolean; conflictingLesson?: any };\n      setConflictCheck(conflictResult);\n    } catch (error) {\n      console.error('Error checking conflicts:', error);\n      setConflictCheck(null);\n    } finally {\n      setCheckingConflict(false);\n    }\n  };\n\n  // Watch form fields for conflict checking\n  const watchedClassId = form.watch(\"classId\");\n  const watchedDate = form.watch(\"date\");\n  const watchedStartTime = form.watch(\"startTime\");\n  const watchedEndTime = form.watch(\"endTime\");\n\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      checkConflicts(watchedClassId, watchedDate, watchedStartTime, watchedEndTime);\n    }, 500); // Debounce conflict checking\n\n    return () => clearTimeout(timeoutId);\n  }, [watchedClassId, watchedDate, watchedStartTime, watchedEndTime, classes]);\n\n  // Create lesson mutation\n  const createLessonMutation = useMutation({\n    mutationFn: async (data: LessonFormData) => {\n      const lessonData = {\n        ...data,\n        date: data.date.toISOString(),\n      };\n      return await apiRequest(\"POST\", \"/api/lessons\", lessonData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/lessons\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/lessons/today\"] });\n      // Invalidate teacher queries with correct key format\n      if (user?.role === 'teacher') {\n        queryClient.invalidateQueries({ queryKey: [\"/api/lessons/teacher\", user.id] });\n      } else {\n        queryClient.invalidateQueries({ queryKey: [\"/api/lessons/teacher\"] });\n      }\n      toast({\n        title: \"Sucesso!\",\n        description: \"Aula criada com sucesso.\",\n      });\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: extractErrorMessage(error) || \"Falha ao criar aula. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update lesson mutation\n  const updateLessonMutation = useMutation({\n    mutationFn: async (data: LessonFormData) => {\n      const lessonData = {\n        ...data,\n        date: data.date.toISOString(),\n      };\n      return await apiRequest(\"PUT\", `/api/lessons/${lessonToEdit.id}`, lessonData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/lessons\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/lessons/today\"] });\n      // Invalidate teacher queries with correct key format\n      if (user?.role === 'teacher') {\n        queryClient.invalidateQueries({ queryKey: [\"/api/lessons/teacher\", user.id] });\n      } else {\n        queryClient.invalidateQueries({ queryKey: [\"/api/lessons/teacher\"] });\n      }\n      toast({\n        title: \"Sucesso!\",\n        description: \"Aula atualizada com sucesso.\",\n      });\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: extractErrorMessage(error) || \"Falha ao atualizar aula. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = async (data: LessonFormData) => {\n    // Final conflict check before submission\n    if (conflictCheck?.hasConflict) {\n      toast({\n        title: \"Conflito de hor√°rio\",\n        description: \"Resolve o conflito de hor√°rio antes de salvar.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (isEditing) {\n      updateLessonMutation.mutate(data);\n    } else {\n      createLessonMutation.mutate(data);\n    }\n  };\n\n  const handleClose = () => {\n    form.reset();\n    setConflictCheck(null);\n    onClose();\n  };\n\n  const isSubmitting = createLessonMutation.isPending || updateLessonMutation.isPending;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>\n            {isEditing ? \"Editar Aula\" : \"Nova Aula\"}\n          </DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {/* Class Selection */}\n              <FormField\n                control={form.control}\n                name=\"classId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Turma</FormLabel>\n                    <FormControl>\n                      <Select \n                        value={field.value} \n                        onValueChange={field.onChange}\n                        disabled={classesLoading}\n                        data-testid=\"select-class\"\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Selecione uma turma\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {(classes as any[]).map((cls: any) => (\n                            <SelectItem key={cls.id} value={cls.id}>\n                              {cls.name} - {cls.book?.name}\n                              {user?.role !== 'teacher' && cls.teacher && (\n                                <span className=\"text-sm text-muted-foreground ml-2\">\n                                  ({cls.teacher.firstName} {cls.teacher.lastName})\n                                </span>\n                              )}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Title */}\n              <FormField\n                control={form.control}\n                name=\"title\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>T√≠tulo da Aula</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-lesson-title\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Book Day */}\n              <FormField\n                control={form.control}\n                name=\"bookDay\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Dia do Livro</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        min=\"1\"\n                        {...field}\n                        data-testid=\"input-book-day\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Date */}\n              <FormField\n                control={form.control}\n                name=\"date\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Data</FormLabel>\n                    <FormControl>\n                      <Popover>\n                        <PopoverTrigger asChild>\n                          <Button\n                            variant=\"outline\"\n                            className={cn(\n                              \"w-full justify-start text-left font-normal\",\n                              !field.value && \"text-muted-foreground\"\n                            )}\n                            data-testid=\"input-lesson-date\"\n                          >\n                            <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                            {field.value ? (\n                              format(field.value, \"PPP\", { locale: ptBR })\n                            ) : (\n                              \"Selecione uma data\"\n                            )}\n                          </Button>\n                        </PopoverTrigger>\n                        <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                          <Calendar\n                            mode=\"single\"\n                            selected={field.value}\n                            onSelect={field.onChange}\n                            initialFocus\n                          />\n                        </PopoverContent>\n                      </Popover>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Start Time */}\n              <FormField\n                control={form.control}\n                name=\"startTime\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Hor√°rio de In√≠cio</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"time\" \n                        {...field}\n                        data-testid=\"input-start-time\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* End Time */}\n              <FormField\n                control={form.control}\n                name=\"endTime\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Hor√°rio de Fim</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"time\" \n                        {...field}\n                        data-testid=\"input-end-time\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Room */}\n              <FormField\n                control={form.control}\n                name=\"room\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Sala</FormLabel>\n                    <FormControl>\n                      <Input {...field} value={field.value || \"\"} data-testid=\"input-room\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Status */}\n              <FormField\n                control={form.control}\n                name=\"status\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Status</FormLabel>\n                    <FormControl>\n                      <Select \n                        value={field.value || \"scheduled\"} \n                        onValueChange={field.onChange}\n                        data-testid=\"select-status\"\n                      >\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"scheduled\">Agendado</SelectItem>\n                          <SelectItem value=\"in_progress\">Em andamento</SelectItem>\n                          <SelectItem value=\"completed\">Conclu√≠do</SelectItem>\n                          <SelectItem value=\"cancelled\">Cancelado</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Notes */}\n            <FormField\n              control={form.control}\n              name=\"notes\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Observa√ß√µes</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      {...field} \n                      value={field.value || \"\"}\n                      rows={3}\n                      data-testid=\"textarea-notes\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Conflict Warning */}\n            {checkingConflict && (\n              <div className=\"flex items-center space-x-2 text-muted-foreground\">\n                <Loader2 className=\"h-4 w-4 animate-spin\" />\n                <span>Verificando conflitos...</span>\n              </div>\n            )}\n\n            {conflictCheck?.hasConflict && (\n              <div className=\"p-3 rounded-md bg-destructive/10 border border-destructive/20\">\n                <div className=\"flex items-start space-x-2\">\n                  <div className=\"text-destructive\">‚ö†Ô∏è</div>\n                  <div>\n                    <h4 className=\"font-medium text-destructive\">Conflito de hor√°rio detectado</h4>\n                    <p className=\"text-sm text-destructive/80 mt-1\">\n                      J√° existe uma aula \"{conflictCheck.conflictingLesson?.title}\" \n                      no hor√°rio {conflictCheck.conflictingLesson?.startTime}-{conflictCheck.conflictingLesson?.endTime}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Form Actions */}\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={handleClose}\n                disabled={isSubmitting}\n                data-testid=\"button-cancel\"\n              >\n                Cancelar\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={isSubmitting || conflictCheck?.hasConflict}\n                data-testid=\"button-save-lesson\"\n              >\n                {isSubmitting ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    {isEditing ? \"Atualizando...\" : \"Criando...\"}\n                  </>\n                ) : (\n                  isEditing ? \"Atualizar\" : \"Criar Aula\"\n                )}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":19233},"frontend/client/src/components/TeacherIndividualScheduleManager.tsx":{"content":"import React, { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useToast } from '@/hooks/use-toast';\nimport { Loader2, Plus, Edit, Trash2, Calendar, Clock, MapPin } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\n\ninterface Teacher {\n  id: string;\n  name: string;\n  email: string;\n}\n\ninterface Unit {\n  id: string;\n  name: string;\n}\n\ninterface TeacherScheduleEntry {\n  id: string;\n  teacherId: string;\n  unitId: string;\n  courseName: string;\n  dayOfWeek: number;\n  startTime: string;\n  endTime: string;\n  room: string;\n  notes?: string;\n  isActive: boolean;\n  scheduleType: 'fixed' | 'flexible'; // Novo campo para tipo de hor√°rio\n  isRecurring: boolean; // Novo campo para hor√°rios recorrentes\n  teacher: {\n    id: string;\n    name: string;\n  };\n  unit: {\n    id: string;\n    name: string;\n  };\n}\n\ninterface ScheduleFormData {\n  teacherId: string;\n  unitId: string;\n  courseName: string;\n  dayOfWeek: number;\n  startTime: string;\n  endTime: string;\n  room: string;\n  notes: string;\n  scheduleType: 'fixed' | 'flexible'; // Novo campo para tipo de hor√°rio\n  isRecurring: boolean; // Novo campo para hor√°rios recorrentes\n}\n\nconst DAYS_OF_WEEK = [\n  { value: 0, label: 'Domingo' },\n  { value: 1, label: 'Segunda-feira' },\n  { value: 2, label: 'Ter√ßa-feira' },\n  { value: 3, label: 'Quarta-feira' },\n  { value: 4, label: 'Quinta-feira' },\n  { value: 5, label: 'Sexta-feira' },\n  { value: 6, label: 'S√°bado' }\n];\n\nconst TeacherIndividualScheduleManager: React.FC = () => {\n  const [selectedTeacherId, setSelectedTeacherId] = useState<string>('');\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editingEntry, setEditingEntry] = useState<TeacherScheduleEntry | null>(null);\n  const [scheduleForm, setScheduleForm] = useState<ScheduleFormData>({\n    teacherId: '',\n    unitId: '',\n    courseName: '',\n    dayOfWeek: 1,\n    startTime: '',\n    endTime: '',\n    room: '',\n    notes: '',\n    scheduleType: 'fixed',\n    isRecurring: true\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch teachers\n  const { data: teachers, isLoading: teachersLoading } = useQuery<Teacher[]>({\n    queryKey: ['teachers'],\n    queryFn: async () => {\n      const response = await fetch('/api/teachers');\n      if (!response.ok) throw new Error('Erro ao buscar professores');\n      return response.json();\n    }\n  });\n\n  // Fetch units\n  const { data: units, isLoading: unitsLoading } = useQuery<Unit[]>({\n    queryKey: ['units'],\n    queryFn: async () => {\n      const response = await fetch('/api/units');\n      if (!response.ok) throw new Error('Erro ao buscar unidades');\n      return response.json();\n    }\n  });\n\n  // Fetch teacher individual schedule\n  const { data: teacherSchedule = [], isLoading: scheduleLoading } = useQuery<TeacherScheduleEntry[]>({\n    queryKey: ['teacher-individual-schedule', selectedTeacherId],\n    queryFn: async () => {\n      const response = await fetch(`/api/teacher-schedule/${selectedTeacherId}`);\n      if (!response.ok) throw new Error('Erro ao buscar agenda do professor');\n      return response.json();\n    },\n    enabled: !!selectedTeacherId\n  });\n\n  // Create schedule entry mutation\n  const createScheduleMutation = useMutation({\n    mutationFn: async (scheduleData: ScheduleFormData) => {\n      const response = await fetch('/api/teacher-schedule', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(scheduleData)\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Erro ao criar entrada na agenda');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Sucesso',\n        description: 'Entrada na agenda criada com sucesso!'\n      });\n      queryClient.invalidateQueries({ queryKey: ['teacher-individual-schedule', selectedTeacherId] });\n      setIsModalOpen(false);\n      resetForm();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: 'Erro',\n        description: error.message,\n        variant: 'destructive'\n      });\n    }\n  });\n\n  // Update schedule entry mutation\n  const updateScheduleMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: ScheduleFormData }) => {\n      const response = await fetch(`/api/teacher-schedule/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data)\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Erro ao atualizar entrada na agenda');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Sucesso',\n        description: 'Entrada na agenda atualizada com sucesso!'\n      });\n      queryClient.invalidateQueries({ queryKey: ['teacher-individual-schedule', selectedTeacherId] });\n      setIsModalOpen(false);\n      resetForm();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: 'Erro',\n        description: error.message,\n        variant: 'destructive'\n      });\n    }\n  });\n\n  // Delete schedule entry mutation\n  const deleteScheduleMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/teacher-schedule/${id}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Erro ao excluir entrada na agenda');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Sucesso',\n        description: 'Entrada na agenda exclu√≠da com sucesso!'\n      });\n      queryClient.invalidateQueries({ queryKey: ['teacher-individual-schedule', selectedTeacherId] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: 'Erro',\n        description: error.message,\n        variant: 'destructive'\n      });\n    }\n  });\n\n  const resetForm = () => {\n    setScheduleForm({\n      teacherId: selectedTeacherId,\n      unitId: '',\n      courseName: '',\n      dayOfWeek: 1,\n      startTime: '',\n      endTime: '',\n      room: '',\n      notes: '',\n      scheduleType: 'fixed',\n      isRecurring: true\n    });\n    setEditingEntry(null);\n  };\n\n  const handleOpenModal = (entry?: TeacherScheduleEntry) => {\n    if (entry) {\n      setEditingEntry(entry);\n      setScheduleForm({\n        teacherId: entry.teacherId,\n        unitId: entry.unitId,\n        courseName: entry.courseName,\n        dayOfWeek: entry.dayOfWeek,\n        startTime: entry.startTime,\n        endTime: entry.endTime,\n        room: entry.room,\n        notes: entry.notes || '',\n        scheduleType: entry.scheduleType || 'fixed',\n        isRecurring: entry.isRecurring !== undefined ? entry.isRecurring : true\n      });\n    } else {\n      resetForm();\n    }\n    setIsModalOpen(true);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!selectedTeacherId) {\n      toast({\n        title: 'Erro',\n        description: 'Selecione um professor primeiro',\n        variant: 'destructive'\n      });\n      return;\n    }\n\n    const formData = { ...scheduleForm, teacherId: selectedTeacherId };\n\n    if (editingEntry) {\n      updateScheduleMutation.mutate({ id: editingEntry.id, data: formData });\n    } else {\n      createScheduleMutation.mutate(formData);\n    }\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm('Tem certeza que deseja excluir esta entrada da agenda?')) {\n      deleteScheduleMutation.mutate(id);\n    }\n  };\n\n  const getDayName = (dayOfWeek: number) => {\n    return DAYS_OF_WEEK.find(day => day.value === dayOfWeek)?.label || 'Desconhecido';\n  };\n\n  const formatTime = (time: string) => {\n    return time.substring(0, 5); // Remove seconds if present\n  };\n\n  // Group schedule entries by day of week\n  const scheduleByDay = teacherSchedule.reduce((acc, entry) => {\n    if (!acc[entry.dayOfWeek]) {\n      acc[entry.dayOfWeek] = [];\n    }\n    acc[entry.dayOfWeek].push(entry);\n    return acc;\n  }, {} as Record<number, TeacherScheduleEntry[]>);\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Calendar className=\"h-5 w-5\" />\n            Agenda Individual do Professor\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-col sm:flex-row gap-4 items-start sm:items-end\">\n            <div className=\"flex-1 w-full\">\n              <Label htmlFor=\"teacher-select\">Selecionar Professor</Label>\n              <Select value={selectedTeacherId} onValueChange={setSelectedTeacherId}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Escolha um professor\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {teachers?.map((teacher) => (\n                    <SelectItem key={teacher.id} value={teacher.id}>\n                      {teacher.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <Button\n              onClick={() => handleOpenModal()}\n              disabled={!selectedTeacherId}\n              className=\"flex items-center gap-2 w-full sm:w-auto\"\n            >\n              <Plus className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Adicionar Hor√°rio</span>\n              <span className=\"sm:hidden\">Adicionar</span>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {selectedTeacherId && (\n        <Card>\n          <CardHeader>\n            <CardTitle>\n              Agenda de {teachers?.find(t => t.id === selectedTeacherId)?.name}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {scheduleLoading ? (\n              <div className=\"flex items-center justify-center py-8\">\n                <Loader2 className=\"h-6 w-6 animate-spin\" />\n                <span className=\"ml-2\">Carregando agenda...</span>\n              </div>\n            ) : teacherSchedule.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <Calendar className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                <p>Nenhum hor√°rio cadastrado para este professor</p>\n              </div>\n            ) : (\n              <div className=\"space-y-6\">\n                {DAYS_OF_WEEK.map((day) => {\n                  const dayEntries = scheduleByDay[day.value] || [];\n                  if (dayEntries.length === 0) return null;\n\n                  return (\n                    <div key={day.value} className=\"space-y-2\">\n                      <h3 className=\"font-semibold text-lg border-b pb-2\">\n                        {day.label}\n                      </h3>\n                      <div className=\"grid gap-3\">\n                        {dayEntries\n                          .sort((a, b) => a.startTime.localeCompare(b.startTime))\n                          .map((entry) => (\n                            <Card key={entry.id} className=\"p-3 md:p-4\">\n                              <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-3\">\n                                <div className=\"flex-1 w-full\">\n                                  <div className=\"flex flex-wrap items-center gap-2 mb-2\">\n                                    <Badge variant=\"outline\" className=\"flex items-center gap-1 text-xs\">\n                                      <Clock className=\"h-3 w-3\" />\n                                      {formatTime(entry.startTime)} - {formatTime(entry.endTime)}\n                                    </Badge>\n                                    <Badge variant=\"secondary\" className=\"flex items-center gap-1 text-xs\">\n                                      <MapPin className=\"h-3 w-3\" />\n                                      {entry.room}\n                                    </Badge>\n                                    <Badge \n                                      variant={entry.scheduleType === 'fixed' ? 'default' : 'outline'} \n                                      className=\"flex items-center gap-1 text-xs\"\n                                    >\n                                      {entry.scheduleType === 'fixed' ? (\n                                        <>\n                                          <Clock className=\"h-3 w-3\" />\n                                          Fixo\n                                        </>\n                                      ) : (\n                                        <>\n                                          <Calendar className=\"h-3 w-3\" />\n                                          Flex√≠vel\n                                        </>\n                                      )}\n                                    </Badge>\n                                    {entry.isRecurring && (\n                                      <Badge variant=\"outline\" className=\"text-xs\">\n                                        Recorrente\n                                      </Badge>\n                                    )}\n                                  </div>\n                                  <h4 className=\"font-medium text-sm md:text-base\">{entry.courseName}</h4>\n                                  <p className=\"text-xs md:text-sm text-muted-foreground\">\n                                    Unidade: {entry.unit.name}\n                                  </p>\n                                  {entry.notes && (\n                                    <p className=\"text-xs md:text-sm text-muted-foreground mt-1\">\n                                      Observa√ß√µes: {entry.notes}\n                                    </p>\n                                  )}\n                                </div>\n                                <div className=\"flex gap-2 w-full sm:w-auto\">\n                                  <Button\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    onClick={() => handleOpenModal(entry)}\n                                    className=\"flex-1 sm:flex-none\"\n                                  >\n                                    <Edit className=\"h-4 w-4\" />\n                                    <span className=\"ml-1 sm:hidden\">Editar</span>\n                                  </Button>\n                                  <Button\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    onClick={() => handleDelete(entry.id)}\n                                    className=\"text-destructive hover:text-destructive flex-1 sm:flex-none\"\n                                  >\n                                    <Trash2 className=\"h-4 w-4\" />\n                                    <span className=\"ml-1 sm:hidden\">Excluir</span>\n                                  </Button>\n                                </div>\n                              </div>\n                            </Card>\n                          ))}\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>\n        <DialogContent className=\"max-w-md sm:max-w-lg md:max-w-xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>\n              {editingEntry ? 'Editar Hor√°rio' : 'Adicionar Hor√°rio'}\n            </DialogTitle>\n          </DialogHeader>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"unitId\">Unidade</Label>\n              <Select\n                value={scheduleForm.unitId}\n                onValueChange={(value) => setScheduleForm(prev => ({ ...prev, unitId: value }))}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Selecione a unidade\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {units?.map((unit) => (\n                    <SelectItem key={unit.id} value={unit.id}>\n                      {unit.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"courseName\">Nome do Curso/Atividade</Label>\n              <Input\n                id=\"courseName\"\n                value={scheduleForm.courseName}\n                onChange={(e) => setScheduleForm(prev => ({ ...prev, courseName: e.target.value }))}\n                placeholder=\"Ex: Ingl√™s B√°sico, Reuni√£o Pedag√≥gica...\"\n                required\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"dayOfWeek\">Dia da Semana</Label>\n              <Select\n                value={scheduleForm.dayOfWeek.toString()}\n                onValueChange={(value) => setScheduleForm(prev => ({ ...prev, dayOfWeek: parseInt(value) }))}\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {DAYS_OF_WEEK.map((day) => (\n                    <SelectItem key={day.value} value={day.value.toString()}>\n                      {day.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"startTime\">Hor√°rio In√≠cio</Label>\n                <Input\n                  id=\"startTime\"\n                  type=\"time\"\n                  value={scheduleForm.startTime}\n                  onChange={(e) => setScheduleForm(prev => ({ ...prev, startTime: e.target.value }))}\n                  required\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"endTime\">Hor√°rio Fim</Label>\n                <Input\n                  id=\"endTime\"\n                  type=\"time\"\n                  value={scheduleForm.endTime}\n                  onChange={(e) => setScheduleForm(prev => ({ ...prev, endTime: e.target.value }))}\n                  required\n                />\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"room\">Sala</Label>\n              <Input\n                id=\"room\"\n                value={scheduleForm.room}\n                onChange={(e) => setScheduleForm(prev => ({ ...prev, room: e.target.value }))}\n                placeholder=\"Ex: Sala 101, Online...\"\n                required\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"notes\">Observa√ß√µes (opcional)</Label>\n              <Textarea\n                id=\"notes\"\n                value={scheduleForm.notes}\n                onChange={(e) => setScheduleForm(prev => ({ ...prev, notes: e.target.value }))}\n                placeholder=\"Observa√ß√µes adicionais...\"\n                rows={3}\n              />\n            </div>\n\n            {/* Configura√ß√µes de Hor√°rio */}\n            <div className=\"space-y-4 border-t pt-4\">\n              <h4 className=\"font-medium text-sm text-foreground\">Configura√ß√µes de Hor√°rio</h4>\n              \n              <div>\n                <Label htmlFor=\"scheduleType\">Tipo de Hor√°rio</Label>\n                <Select\n                  value={scheduleForm.scheduleType}\n                  onValueChange={(value: 'fixed' | 'flexible') => setScheduleForm(prev => ({ ...prev, scheduleType: value }))}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"fixed\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Clock className=\"h-4 w-4\" />\n                        <div>\n                          <div className=\"font-medium\">Hor√°rio Fixo</div>\n                          <div className=\"text-xs text-muted-foreground\">Mesmo hor√°rio toda semana</div>\n                        </div>\n                      </div>\n                    </SelectItem>\n                    <SelectItem value=\"flexible\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Calendar className=\"h-4 w-4\" />\n                        <div>\n                          <div className=\"font-medium\">Hor√°rio Flex√≠vel</div>\n                          <div className=\"text-xs text-muted-foreground\">Hor√°rio pode variar</div>\n                        </div>\n                      </div>\n                    </SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <input\n                  type=\"checkbox\"\n                  id=\"isRecurring\"\n                  checked={scheduleForm.isRecurring}\n                  onChange={(e) => setScheduleForm(prev => ({ ...prev, isRecurring: e.target.checked }))}\n                  className=\"rounded border-gray-300\"\n                />\n                <Label htmlFor=\"isRecurring\" className=\"text-sm\">\n                  Hor√°rio recorrente (repetir semanalmente)\n                </Label>\n              </div>\n\n              {scheduleForm.scheduleType === 'flexible' && (\n                <div className=\"bg-amber-50 border border-amber-200 rounded-lg p-3\">\n                  <div className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-info-circle text-amber-600 mt-0.5\"></i>\n                    <div className=\"text-sm text-amber-800\">\n                      <strong>Hor√°rio Flex√≠vel:</strong> Este hor√°rio serve como base, mas pode ser ajustado conforme necess√°rio. \n                      Ideal para aulas particulares ou atividades que podem ter varia√ß√µes de hor√°rio.\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            <div className=\"flex gap-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsModalOpen(false)}\n                className=\"flex-1\"\n              >\n                Cancelar\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createScheduleMutation.isPending || updateScheduleMutation.isPending}\n                className=\"flex-1\"\n              >\n                {(createScheduleMutation.isPending || updateScheduleMutation.isPending) && (\n                  <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n                )}\n                {editingEntry ? 'Atualizar' : 'Criar'}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default TeacherIndividualScheduleManager;","size_bytes":23561},"frontend/client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"frontend/client/src/components/ClassModal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, extractErrorMessage } from \"@/lib/queryClient\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Loader2, Trash2 } from \"lucide-react\";\n\n// Extended schema for class form validation\nconst classFormSchema = z.object({\n  name: z.string().min(1, \"Nome da turma √© obrigat√≥rio\"),\n  bookId: z.string().min(1, \"Livro √© obrigat√≥rio\"),\n  teacherId: z.string().min(1, \"Professor √© obrigat√≥rio\"),\n  unitId: z.string().min(1, \"Unidade √© obrigat√≥ria\"),\n  dayOfWeek: z.coerce.number().min(0).max(6, \"Dia da semana deve ser entre 0-6\"),\n  startTime: z.string().min(1, \"Hor√°rio de in√≠cio √© obrigat√≥rio\"),\n  endTime: z.string().min(1, \"Hor√°rio de fim √© obrigat√≥rio\"),\n  maxStudents: z.coerce.number().min(1, \"M√°ximo de alunos deve ser pelo menos 1\"),\n}).refine((data: any) => {\n  if (data.startTime && data.endTime) {\n    const start = data.startTime.split(':').map(Number);\n    const end = data.endTime.split(':').map(Number);\n    const startMinutes = start[0] * 60 + start[1];\n    const endMinutes = end[0] * 60 + end[1];\n    return endMinutes > startMinutes;\n  }\n  return true;\n}, {\n  message: \"Hor√°rio de fim deve ser posterior ao hor√°rio de in√≠cio\",\n  path: [\"endTime\"],\n});\n\ntype ClassFormData = z.infer<typeof classFormSchema>;\n\ninterface ClassModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  classToEdit?: any; // Existing class data when editing\n}\n\nconst daysOfWeek = [\n  { value: 0, label: \"Domingo\" },\n  { value: 1, label: \"Segunda-feira\" },\n  { value: 2, label: \"Ter√ßa-feira\" },\n  { value: 3, label: \"Quarta-feira\" },\n  { value: 4, label: \"Quinta-feira\" },\n  { value: 5, label: \"Sexta-feira\" },\n  { value: 6, label: \"S√°bado\" },\n];\n\nexport default function ClassModal({ \n  isOpen, \n  onClose, \n  classToEdit\n}: ClassModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);\n\n  const isEditing = !!classToEdit;\n\n  // Fetch books for dropdown\n  const { data: books = [], isLoading: booksLoading } = useQuery<any[]>({\n    queryKey: [\"/api/books\"],\n    enabled: isOpen,\n  });\n\n  // Fetch teachers for dropdown\n  const { data: staff = [], isLoading: staffLoading } = useQuery<any[]>({\n    queryKey: [\"/api/staff\"],\n    enabled: isOpen,\n  });\n\n  // Fetch units for dropdown\n  const { data: units = [], isLoading: unitsLoading } = useQuery<any[]>({\n    queryKey: [\"/api/units\"],\n    enabled: isOpen,\n  });\n\n  // Filter teachers from staff\n  const teachers = staff.filter(s => s.user?.role === 'teacher');\n\n  const form = useForm<ClassFormData>({\n    resolver: zodResolver(classFormSchema),\n    defaultValues: {\n      name: \"\",\n      bookId: \"\",\n      teacherId: \"\",\n      unitId: \"\",\n      dayOfWeek: 1, // Monday by default\n      startTime: \"\",\n      endTime: \"\",\n      room: \"\",\n      maxStudents: 15,\n      currentStudents: 0,\n    },\n  });\n\n  // Reset form when modal opens/closes or when classToEdit changes\n  useEffect(() => {\n    if (isOpen) {\n      if (classToEdit) {\n        // Editing existing class\n        form.reset({\n          name: classToEdit.name,\n          bookId: classToEdit.bookId,\n          teacherId: classToEdit.teacherId,\n          unitId: classToEdit.unitId,\n          dayOfWeek: classToEdit.dayOfWeek,\n          startTime: classToEdit.startTime,\n          endTime: classToEdit.endTime,\n          room: classToEdit.room || \"\",\n          maxStudents: classToEdit.maxStudents || 15,\n          currentStudents: classToEdit.currentStudents || 0,\n        });\n      } else {\n        // Creating new class\n        form.reset({\n          name: \"\",\n          bookId: \"\",\n          teacherId: \"\",\n          unitId: \"\",\n          dayOfWeek: 1,\n          startTime: \"\",\n          endTime: \"\",\n          room: \"\",\n          maxStudents: 15,\n          currentStudents: 0,\n        });\n      }\n    }\n  }, [isOpen, classToEdit, form]);\n\n  // Create class mutation\n  const createClassMutation = useMutation({\n    mutationFn: async (data: ClassFormData) => {\n      return await apiRequest(\"POST\", \"/api/classes\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/classes\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/schedule/admin\"] });\n      toast({\n        title: \"Sucesso!\",\n        description: \"Turma criada com sucesso.\",\n      });\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: extractErrorMessage(error) || \"Falha ao criar turma. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update class mutation\n  const updateClassMutation = useMutation({\n    mutationFn: async (data: ClassFormData) => {\n      return await apiRequest(\"PUT\", `/api/classes/${classToEdit.id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/classes\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/schedule/admin\"] });\n      toast({\n        title: \"Sucesso!\",\n        description: \"Turma atualizada com sucesso.\",\n      });\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: extractErrorMessage(error) || \"Falha ao atualizar turma. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete class mutation\n  const deleteClassMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"DELETE\", `/api/classes/${classToEdit.id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/classes\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/schedule/admin\"] });\n      toast({\n        title: \"Sucesso!\",\n        description: \"Turma exclu√≠da com sucesso.\",\n      });\n      setShowDeleteConfirm(false);\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: extractErrorMessage(error) || \"Falha ao excluir turma. Tente novamente.\",\n        variant: \"destructive\",\n      });\n      setShowDeleteConfirm(false);\n    },\n  });\n\n  const onSubmit = async (data: ClassFormData) => {\n    if (isEditing) {\n      updateClassMutation.mutate(data);\n    } else {\n      createClassMutation.mutate(data);\n    }\n  };\n\n  const handleClose = () => {\n    form.reset();\n    setShowDeleteConfirm(false);\n    onClose();\n  };\n\n  const handleDeleteConfirm = () => {\n    deleteClassMutation.mutate();\n  };\n\n  const isSubmitting = createClassMutation.isPending || updateClassMutation.isPending || deleteClassMutation.isPending;\n\n  return (\n    <>\n      <Dialog open={isOpen} onOpenChange={handleClose}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>\n              {isEditing ? \"Editar Turma\" : \"Nova Turma\"}\n            </DialogTitle>\n          </DialogHeader>\n\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {/* Class Name */}\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nome da Turma</FormLabel>\n                      <FormControl>\n                        <Input {...field} data-testid=\"input-class-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Book Selection */}\n                <FormField\n                  control={form.control}\n                  name=\"bookId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Livro</FormLabel>\n                      <FormControl>\n                        <Select \n                          value={field.value} \n                          onValueChange={field.onChange}\n                          disabled={booksLoading}\n                          data-testid=\"select-book\"\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Selecione um livro\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {books.map((book: any) => (\n                              <SelectItem key={book.id} value={book.id}>\n                                {book.name} - {book.course?.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Teacher Selection */}\n                <FormField\n                  control={form.control}\n                  name=\"teacherId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Professor</FormLabel>\n                      <FormControl>\n                        <Select \n                          value={field.value} \n                          onValueChange={field.onChange}\n                          disabled={staffLoading}\n                          data-testid=\"select-teacher\"\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Selecione um professor\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {teachers.map((teacher: any) => (\n                              <SelectItem key={teacher.user.id} value={teacher.user.id}>\n                                {teacher.user.firstName} {teacher.user.lastName}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Unit Selection */}\n                <FormField\n                  control={form.control}\n                  name=\"unitId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Unidade</FormLabel>\n                      <FormControl>\n                        <Select \n                          value={field.value} \n                          onValueChange={field.onChange}\n                          disabled={unitsLoading}\n                          data-testid=\"select-unit\"\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Selecione uma unidade\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {units.map((unit: any) => (\n                              <SelectItem key={unit.id} value={unit.id}>\n                                {unit.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Day of Week */}\n                <FormField\n                  control={form.control}\n                  name=\"dayOfWeek\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Dia da Semana</FormLabel>\n                      <FormControl>\n                        <Select \n                          value={field.value?.toString()} \n                          onValueChange={(value) => field.onChange(parseInt(value))}\n                          data-testid=\"select-day-of-week\"\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Selecione o dia\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {daysOfWeek.map((day) => (\n                              <SelectItem key={day.value} value={day.value.toString()}>\n                                {day.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Start Time */}\n                <FormField\n                  control={form.control}\n                  name=\"startTime\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Hor√°rio de In√≠cio</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"time\" \n                          {...field}\n                          data-testid=\"input-start-time\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* End Time */}\n                <FormField\n                  control={form.control}\n                  name=\"endTime\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Hor√°rio de Fim</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"time\" \n                          {...field}\n                          data-testid=\"input-end-time\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Room */}\n                <FormField\n                  control={form.control}\n                  name=\"room\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Sala</FormLabel>\n                      <FormControl>\n                        <Input {...field} value={field.value || \"\"} data-testid=\"input-room\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Max Students */}\n                <FormField\n                  control={form.control}\n                  name=\"maxStudents\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>M√°ximo de Alunos</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          min=\"1\"\n                          {...field}\n                          data-testid=\"input-max-students\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              {/* Form Actions */}\n              <div className=\"flex justify-between pt-4\">\n                <div>\n                  {isEditing && (\n                    <Button\n                      type=\"button\"\n                      variant=\"destructive\"\n                      onClick={() => setShowDeleteConfirm(true)}\n                      disabled={isSubmitting}\n                      data-testid=\"button-delete-class\"\n                    >\n                      <Trash2 className=\"mr-2 h-4 w-4\" />\n                      Excluir Turma\n                    </Button>\n                  )}\n                </div>\n                <div className=\"flex space-x-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={handleClose}\n                    disabled={isSubmitting}\n                    data-testid=\"button-cancel\"\n                  >\n                    Cancelar\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={isSubmitting}\n                    data-testid=\"button-save-class\"\n                  >\n                    {isSubmitting ? (\n                      <>\n                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                        {deleteClassMutation.isPending ? \"Excluindo...\" : (isEditing ? \"Atualizando...\" : \"Criando...\")}\n                      </>\n                    ) : (\n                      isEditing ? \"Atualizar\" : \"Criar Turma\"\n                    )}\n                  </Button>\n                </div>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={showDeleteConfirm} onOpenChange={setShowDeleteConfirm}>\n        <AlertDialogContent data-testid=\"dialog-delete-confirm\">\n          <AlertDialogHeader>\n            <AlertDialogTitle>Confirmar Exclus√£o</AlertDialogTitle>\n            <AlertDialogDescription>\n              Tem certeza de que deseja excluir a turma \"{classToEdit?.name}\"? \n              Esta a√ß√£o n√£o pode ser desfeita e todas as aulas relacionadas tamb√©m ser√£o exclu√≠das.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\" disabled={deleteClassMutation.isPending}>\n              Cancelar\n            </AlertDialogCancel>\n            <AlertDialogAction\n              onClick={handleDeleteConfirm}\n              disabled={deleteClassMutation.isPending}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n              data-testid=\"button-confirm-delete\"\n            >\n              {deleteClassMutation.isPending ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Excluindo...\n                </>\n              ) : (\n                \"Excluir\"\n              )}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n}\n","size_bytes":19212},"frontend/client/src/pages/Support.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { displayDateBR } from \"@/lib/cpfUtils\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { apiRequest, queryClient, extractErrorMessage } from \"@/lib/queryClient\";\nimport Layout from \"@/components/Layout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport {\n  HelpCircle,\n  Send,\n  MessageCircle,\n  Phone,\n  Mail,\n  Book,\n  AlertCircle,\n  Clock,\n  CheckCircle,\n  XCircle,\n  Bug,\n  Lightbulb,\n  Users,\n  Search,\n  ExternalLink\n} from \"lucide-react\";\n\ninterface SupportTicket {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  status: 'open' | 'in_progress' | 'resolved' | 'closed';\n  createdAt: Date;\n  updatedAt: Date;\n  userId: string;\n  assignedTo?: string;\n  responses?: SupportResponse[];\n}\n\ninterface SupportResponse {\n  id: string;\n  message: string;\n  isFromSupport: boolean;\n  createdAt: Date;\n  userId: string;\n}\n\n// Form schema\nconst ticketFormSchema = z.object({\n  title: z.string().min(1, \"T√≠tulo √© obrigat√≥rio\").min(10, \"T√≠tulo deve ter pelo menos 10 caracteres\"),\n  description: z.string().min(1, \"Descri√ß√£o √© obrigat√≥ria\").min(20, \"Descri√ß√£o deve ter pelo menos 20 caracteres\"),\n  category: z.string().min(1, \"Categoria √© obrigat√≥ria\"),\n  priority: z.enum([\"low\", \"medium\", \"high\", \"urgent\"]),\n});\n\ntype TicketFormValues = z.infer<typeof ticketFormSchema>;\n\nexport default function Support() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  \n  // Form setup\n  const ticketForm = useForm<TicketFormValues>({\n    resolver: zodResolver(ticketFormSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      category: \"\",\n      priority: \"medium\",\n    },\n  });\n\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  // FAQ mock data\n  const faqData = [\n    {\n      id: \"1\",\n      category: \"Geral\",\n      question: \"Como fa√ßo para redefinir minha senha?\",\n      answer: \"Para redefinir sua senha, acesse as Configura√ß√µes > Seguran√ßa > Alterar Senha. Voc√™ tamb√©m pode solicitar uma redefini√ß√£o na tela de login clicando em 'Esqueci minha senha'.\"\n    },\n    {\n      id: \"2\", \n      category: \"Agenda\",\n      question: \"Como adicionar uma nova aula na agenda?\",\n      answer: \"Na p√°gina Agenda, clique em 'Nova Aula' e preencha as informa√ß√µes necess√°rias. Certifique-se de selecionar o professor, hor√°rio e sala corretos.\"\n    },\n    {\n      id: \"3\",\n      category: \"Alunos\",\n      question: \"Como matricular um novo aluno?\",\n      answer: \"V√° para a se√ß√£o Alunos e clique em 'Novo Aluno'. Preencha todos os dados obrigat√≥rios e selecione o curso desejado. O aluno ser√° adicionado automaticamente ao sistema.\"\n    },\n    {\n      id: \"4\",\n      category: \"Sistema\",\n      question: \"Por que n√£o consigo acessar certas p√°ginas?\",\n      answer: \"O acesso √†s p√°ginas √© controlado por permiss√µes baseadas no seu perfil (admin, professor, secret√°rio, etc.). Entre em contato com o administrador se precisar de permiss√µes adicionais.\"\n    },\n    {\n      id: \"5\",\n      category: \"Relat√≥rios\",\n      question: \"Como gerar relat√≥rios de frequ√™ncia?\",\n      answer: \"Os relat√≥rios de frequ√™ncia podem ser gerados na se√ß√£o Relat√≥rios. Selecione o per√≠odo, turma ou aluno espec√≠fico e clique em 'Gerar Relat√≥rio'.\"\n    },\n    {\n      id: \"6\",\n      category: \"Backup\",\n      question: \"Como fazer backup dos dados?\",\n      answer: \"Apenas administradores podem fazer backup dos dados. Acesse Configura√ß√µes > Avan√ßado > Exportar Dados. Recomendamos fazer backups semanais.\"\n    }\n  ];\n\n  // Filtrar FAQ baseado na busca\n  const filteredFaq = faqData.filter(item => \n    item.question.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    item.answer.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    item.category.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  // Query para buscar tickets\n  const { data: userTickets = [], isLoading: ticketsLoading, error: ticketsError } = useQuery<SupportTicket[]>({\n    queryKey: ['/api/support/tickets'],\n    enabled: !!user,\n  });\n\n  // Mutation para criar ticket\n  const createTicketMutation = useMutation({\n    mutationFn: async (ticketData: TicketFormValues) => {\n      const response = await apiRequest('POST', '/api/support/tickets', ticketData);\n      return response;\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Ticket criado com sucesso\",\n        description: `Seu ticket #${data.id} foi criado. Entraremos em contato em breve.`,\n      });\n      ticketForm.reset();\n      // Invalidate tickets cache\n      queryClient.invalidateQueries({ queryKey: ['/api/support/tickets'] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erro ao criar ticket\",\n        description: extractErrorMessage(error) || \"Tente novamente mais tarde.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmitTicket = (data: TicketFormValues) => {\n    createTicketMutation.mutate(data);\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'urgent': return 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400';\n      case 'high': return 'bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-400';\n      case 'medium': return 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400';\n      case 'low': return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'open': return 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400';\n      case 'in_progress': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400';\n      case 'resolved': return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400';\n      case 'closed': return 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'open': return <Clock className=\"h-4 w-4\" />;\n      case 'in_progress': return <AlertCircle className=\"h-4 w-4\" />;\n      case 'resolved': return <CheckCircle className=\"h-4 w-4\" />;\n      case 'closed': return <XCircle className=\"h-4 w-4\" />;\n      default: return <Clock className=\"h-4 w-4\" />;\n    }\n  };\n\n  if (!user) {\n    return (\n      <Layout>\n        <div className=\"p-6\">\n          <div className=\"text-center\">\n            <h2 className=\"text-2xl font-bold text-destructive mb-4\">Acesso Negado</h2>\n            <p className=\"text-muted-foreground\">\n              Voc√™ precisa estar logado para acessar o suporte.\n            </p>\n          </div>\n        </div>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout>\n      <div className=\"p-6 space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n              <HelpCircle className=\"h-6 w-6 text-primary-foreground\" />\n            </div>\n            <div>\n              <h1 className=\"text-2xl font-semibold text-foreground\" data-testid=\"text-support-title\">\n                Central de Ajuda\n              </h1>\n              <p className=\"text-sm text-muted-foreground\">\n                Encontre respostas ou entre em contato conosco\n              </p>\n            </div>\n          </div>\n          <Badge variant=\"secondary\">\n            OpenLife Suporte\n          </Badge>\n        </div>\n\n        <Tabs defaultValue=\"faq\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-2 md:grid-cols-4\">\n            <TabsTrigger value=\"faq\" className=\"flex items-center space-x-1\">\n              <Book className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">FAQ</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"new-ticket\" className=\"flex items-center space-x-1\">\n              <MessageCircle className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Novo Ticket</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"my-tickets\" className=\"flex items-center space-x-1\">\n              <Users className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Meus Tickets</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"contact\" className=\"flex items-center space-x-1\">\n              <Phone className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Contato</span>\n            </TabsTrigger>\n          </TabsList>\n\n          {/* FAQ */}\n          <TabsContent value=\"faq\" className=\"space-y-6\">\n            <Card data-testid=\"card-faq\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Book className=\"h-5 w-5\" />\n                  <span>Perguntas Frequentes</span>\n                </CardTitle>\n                <CardDescription>\n                  Encontre respostas para as d√∫vidas mais comuns\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Barra de pesquisa */}\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    placeholder=\"Pesquisar na FAQ...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-10\"\n                    data-testid=\"input-faq-search\"\n                  />\n                </div>\n\n                {/* FAQ Accordion */}\n                <Accordion type=\"single\" collapsible className=\"w-full\">\n                  {filteredFaq.map((faq) => (\n                    <AccordionItem key={faq.id} value={faq.id} data-testid={`faq-item-${faq.id}`}>\n                      <AccordionTrigger className=\"text-left\" data-testid={`faq-question-${faq.id}`}>\n                        <div className=\"flex items-start space-x-3\">\n                          <Badge variant=\"outline\" className=\"text-xs\" data-testid={`faq-category-${faq.id}`}>\n                            {faq.category}\n                          </Badge>\n                          <span>{faq.question}</span>\n                        </div>\n                      </AccordionTrigger>\n                      <AccordionContent data-testid={`faq-answer-${faq.id}`}>\n                        <div className=\"pt-2 pl-16\">\n                          <p className=\"text-muted-foreground\">{faq.answer}</p>\n                        </div>\n                      </AccordionContent>\n                    </AccordionItem>\n                  ))}\n                </Accordion>\n\n                {filteredFaq.length === 0 && (\n                  <div className=\"text-center py-8\">\n                    <p className=\"text-muted-foreground\">\n                      Nenhum resultado encontrado para \"{searchQuery}\"\n                    </p>\n                  </div>\n                )}\n\n                <Separator />\n\n                <div className=\"bg-muted p-4 rounded-lg\">\n                  <div className=\"flex items-start space-x-3\">\n                    <Lightbulb className=\"h-5 w-5 text-primary mt-0.5\" />\n                    <div>\n                      <h3 className=\"font-medium text-sm\">N√£o encontrou sua resposta?</h3>\n                      <p className=\"text-sm text-muted-foreground mt-1\">\n                        Crie um ticket de suporte e nossa equipe entrar√° em contato com voc√™.\n                      </p>\n                      <Button size=\"sm\" className=\"mt-2\" onClick={() => {\n                        // Switch to new ticket tab\n                        const ticketTab = document.querySelector('[value=\"new-ticket\"]') as HTMLElement;\n                        ticketTab?.click();\n                      }} data-testid=\"button-create-ticket-from-faq\">\n                        Criar Ticket\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Novo Ticket */}\n          <TabsContent value=\"new-ticket\" className=\"space-y-6\">\n            <Card data-testid=\"card-new-ticket\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <MessageCircle className=\"h-5 w-5\" />\n                  <span>Criar Novo Ticket</span>\n                </CardTitle>\n                <CardDescription>\n                  Descreva seu problema ou sugest√£o detalhadamente\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Form {...ticketForm}>\n                  <form onSubmit={ticketForm.handleSubmit(onSubmitTicket)} className=\"space-y-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <FormField\n                      control={ticketForm.control}\n                      name=\"category\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Categoria *</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-ticket-category\">\n                                <SelectValue placeholder=\"Selecione a categoria\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"tecnico\">\n                                <div className=\"flex items-center space-x-2\">\n                                  <Bug className=\"h-4 w-4\" />\n                                  <span>Problema T√©cnico</span>\n                                </div>\n                              </SelectItem>\n                              <SelectItem value=\"sugestao\">\n                                <div className=\"flex items-center space-x-2\">\n                                  <Lightbulb className=\"h-4 w-4\" />\n                                  <span>Sugest√£o de Melhoria</span>\n                                </div>\n                              </SelectItem>\n                              <SelectItem value=\"duvida\">\n                                <div className=\"flex items-center space-x-2\">\n                                  <HelpCircle className=\"h-4 w-4\" />\n                                  <span>D√∫vida Geral</span>\n                                </div>\n                              </SelectItem>\n                              <SelectItem value=\"permissao\">\n                                <div className=\"flex items-center space-x-2\">\n                                  <Users className=\"h-4 w-4\" />\n                                  <span>Solicita√ß√£o de Acesso</span>\n                                </div>\n                              </SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={ticketForm.control}\n                      name=\"priority\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Prioridade</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-ticket-priority\">\n                                <SelectValue />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"low\">Baixa</SelectItem>\n                              <SelectItem value=\"medium\">M√©dia</SelectItem>\n                              <SelectItem value=\"high\">Alta</SelectItem>\n                              <SelectItem value=\"urgent\">Urgente</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={ticketForm.control}\n                    name=\"title\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>T√≠tulo *</FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder=\"Descreva brevemente o problema ou solicita√ß√£o\"\n                            data-testid=\"input-ticket-title\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={ticketForm.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Descri√ß√£o Detalhada *</FormLabel>\n                        <FormControl>\n                          <Textarea\n                            placeholder=\"Forne√ßa o m√°ximo de detalhes poss√≠vel sobre o problema, incluindo passos para reproduzi-lo, mensagens de erro, etc.\"\n                            rows={6}\n                            data-testid=\"textarea-ticket-description\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4\">\n                    <div className=\"flex items-start space-x-3\">\n                      <AlertCircle className=\"h-5 w-5 text-blue-600 dark:text-blue-400 mt-0.5\" />\n                      <div className=\"text-sm\">\n                        <h3 className=\"font-medium text-blue-800 dark:text-blue-200 mb-1\">\n                          Dicas para um ticket eficaz:\n                        </h3>\n                        <ul className=\"text-blue-700 dark:text-blue-300 space-y-1 list-disc list-inside\">\n                          <li>Seja espec√≠fico sobre o problema encontrado</li>\n                          <li>Inclua passos detalhados para reproduzir o erro</li>\n                          <li>Mencione qual navegador e sistema operacional est√° usando</li>\n                          <li>Anexe prints de tela se relevante</li>\n                        </ul>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex justify-end space-x-2\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => ticketForm.reset()}\n                      data-testid=\"button-clear-ticket\"\n                    >\n                      Limpar\n                    </Button>\n                    <Button\n                      type=\"submit\"\n                      disabled={createTicketMutation.isPending}\n                      data-testid=\"button-submit-ticket\"\n                    >\n                      <Send className=\"h-4 w-4 mr-2\" />\n                      {createTicketMutation.isPending ? 'Enviando...' : 'Enviar Ticket'}\n                    </Button>\n                  </div>\n                </form>\n                </Form>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Meus Tickets */}\n          <TabsContent value=\"my-tickets\" className=\"space-y-6\">\n            <Card data-testid=\"card-my-tickets\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Users className=\"h-5 w-5\" />\n                  <span>Meus Tickets</span>\n                </CardTitle>\n                <CardDescription>\n                  Acompanhe o status dos seus tickets de suporte\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {ticketsLoading ? (\n                  <div className=\"text-center py-8\" data-testid=\"tickets-loading\">\n                    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n                    <p className=\"text-muted-foreground\">Carregando tickets...</p>\n                  </div>\n                ) : ticketsError ? (\n                  <div className=\"text-center py-8\" data-testid=\"tickets-error\">\n                    <p className=\"text-destructive mb-2\">Erro ao carregar tickets</p>\n                    <p className=\"text-sm text-muted-foreground\">Tente recarregar a p√°gina</p>\n                  </div>\n                ) : userTickets && userTickets.length > 0 ? (\n                  userTickets.map((ticket) => (\n                    <Card key={ticket.id} className=\"border-l-4 border-l-primary\" data-testid={`ticket-card-${ticket.id}`}>\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-start justify-between mb-3\">\n                          <div className=\"space-y-1\">\n                            <h3 className=\"font-medium\" data-testid={`ticket-title-${ticket.id}`}>{ticket.title}</h3>\n                            <p className=\"text-sm text-muted-foreground line-clamp-2\" data-testid={`ticket-description-${ticket.id}`}>\n                              {ticket.description}\n                            </p>\n                          </div>\n                          <div className=\"flex flex-col items-end space-y-2\">\n                            <Badge className={getStatusColor(ticket.status)} data-testid={`ticket-status-${ticket.id}`}>\n                              {getStatusIcon(ticket.status)}\n                              <span className=\"ml-1 capitalize\">{ticket.status.replace('_', ' ')}</span>\n                            </Badge>\n                            <Badge variant=\"outline\" className={getPriorityColor(ticket.priority)} data-testid={`ticket-priority-${ticket.id}`}>\n                              {ticket.priority === 'urgent' && 'Urgente'}\n                              {ticket.priority === 'high' && 'Alta'}\n                              {ticket.priority === 'medium' && 'M√©dia'}\n                              {ticket.priority === 'low' && 'Baixa'}\n                            </Badge>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n                          <span data-testid={`ticket-id-${ticket.id}`}>Ticket #{ticket.id}</span>\n                          <span data-testid={`ticket-date-${ticket.id}`}>{displayDateBR(ticket.createdAt)}</span>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <MessageCircle className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                    <p className=\"text-muted-foreground mb-2\">\n                      Voc√™ ainda n√£o possui tickets de suporte\n                    </p>\n                    <Button variant=\"outline\" onClick={() => {\n                      const ticketTab = document.querySelector('[value=\"new-ticket\"]') as HTMLElement;\n                      ticketTab?.click();\n                    }} data-testid=\"button-create-first-ticket\">\n                      Criar Primeiro Ticket\n                    </Button>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Contato */}\n          <TabsContent value=\"contact\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <Card data-testid=\"card-contact-info\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Phone className=\"h-5 w-5\" />\n                    <span>Informa√ß√µes de Contato</span>\n                  </CardTitle>\n                  <CardDescription>\n                    Entre em contato atrav√©s dos canais abaixo\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-10 h-10 bg-blue-100 dark:bg-blue-900/20 rounded-lg flex items-center justify-center\">\n                      <Mail className=\"h-5 w-5 text-blue-600 dark:text-blue-400\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-medium\">Email</h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        suporte@openlife.com\n                        {/* COMENTADO: Email configur√°vel via .env */}\n                        {/* {process.env.SUPPORT_EMAIL || 'suporte@openlife.com'} */}\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-10 h-10 bg-green-100 dark:bg-green-900/20 rounded-lg flex items-center justify-center\">\n                      <Phone className=\"h-5 w-5 text-green-600 dark:text-green-400\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-medium\">Telefone</h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        (11) 9999-9999\n                        {/* COMENTADO: Telefone configur√°vel via .env */}\n                        {/* {process.env.SUPPORT_PHONE || '(11) 9999-9999'} */}\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-10 h-10 bg-purple-100 dark:bg-purple-900/20 rounded-lg flex items-center justify-center\">\n                      <MessageCircle className=\"h-5 w-5 text-purple-600 dark:text-purple-400\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-medium\">WhatsApp</h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        (11) 99999-9999\n                        {/* COMENTADO: WhatsApp configur√°vel via .env */}\n                        {/* {process.env.SUPPORT_WHATSAPP || '(11) 99999-9999'} */}\n                      </p>\n                    </div>\n                  </div>\n\n                  <Separator />\n\n                  <div className=\"space-y-2\">\n                    <h3 className=\"font-medium\">Hor√°rio de Atendimento</h3>\n                    <div className=\"text-sm text-muted-foreground space-y-1\">\n                      <p>Segunda a Sexta: 8h √†s 18h</p>\n                      <p>S√°bados: 8h √†s 12h</p>\n                      <p>Domingos: Fechado</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card data-testid=\"card-help-resources\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Book className=\"h-5 w-5\" />\n                    <span>Recursos de Ajuda</span>\n                  </CardTitle>\n                  <CardDescription>\n                    Links √∫teis e documenta√ß√£o\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <Button variant=\"outline\" className=\"w-full justify-start h-auto p-4\" data-testid=\"button-manual\">\n                    <div className=\"flex items-center space-x-3\">\n                      <Book className=\"h-5 w-5 text-blue-600\" />\n                      <div className=\"text-left\">\n                        <div className=\"font-medium\">Manual do Usu√°rio</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Guia completo de uso do sistema\n                        </div>\n                      </div>\n                      <ExternalLink className=\"h-4 w-4 ml-auto\" />\n                    </div>\n                  </Button>\n\n                  <Button variant=\"outline\" className=\"w-full justify-start h-auto p-4\" data-testid=\"button-tutorial\">\n                    <div className=\"flex items-center space-x-3\">\n                      <Users className=\"h-5 w-5 text-green-600\" />\n                      <div className=\"text-left\">\n                        <div className=\"font-medium\">Tutoriais em V√≠deo</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Aprenda atrav√©s de v√≠deos pr√°ticos\n                        </div>\n                      </div>\n                      <ExternalLink className=\"h-4 w-4 ml-auto\" />\n                    </div>\n                  </Button>\n\n                  <Button variant=\"outline\" className=\"w-full justify-start h-auto p-4\" data-testid=\"button-community\">\n                    <div className=\"flex items-center space-x-3\">\n                      <MessageCircle className=\"h-5 w-5 text-purple-600\" />\n                      <div className=\"text-left\">\n                        <div className=\"font-medium\">Comunidade</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          F√≥rum da comunidade de usu√°rios\n                        </div>\n                      </div>\n                      <ExternalLink className=\"h-4 w-4 ml-auto\" />\n                    </div>\n                  </Button>\n\n                  <Separator />\n\n                  <div className=\"bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4\">\n                    <div className=\"flex items-start space-x-3\">\n                      <AlertCircle className=\"h-5 w-5 text-yellow-600 dark:text-yellow-400 mt-0.5\" />\n                      <div className=\"text-sm\">\n                        <h3 className=\"font-medium text-yellow-800 dark:text-yellow-200 mb-1\">\n                          Suporte de Emerg√™ncia\n                        </h3>\n                        <p className=\"text-yellow-700 dark:text-yellow-300\">\n                          Para problemas cr√≠ticos fora do hor√°rio comercial, \n                          envie um email marcando como \"URGENTE\" no assunto.\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":32295},"DOCKER-DEPLOY.md":{"content":"# Deploy com Docker - ERP Idiomas\n\nEste documento descreve como fazer o deploy da aplica√ß√£o ERP Idiomas usando Docker, com frontend buildado e backend rodando com PM2.\n\n## üìã Pr√©-requisitos\n\n- Docker e Docker Compose instalados no servidor\n- Nginx instalado no servidor (configura√ß√£o externa ao Docker)\n- Acesso SSH ao servidor\n- Dom√≠nio configurado apontando para o servidor\n\n## üöÄ Deploy da Aplica√ß√£o\n\n### 1. Prepara√ß√£o do Ambiente\n\n```bash\n# Clone o reposit√≥rio no servidor\ngit clone <seu-repositorio> /opt/erp-idiomas\ncd /opt/erp-idiomas\n\n# Copie e configure as vari√°veis de ambiente\ncp .env.example .env\nnano .env\n```\n\n### 2. Configura√ß√£o das Vari√°veis de Ambiente\n\nEdite o arquivo `.env` com suas configura√ß√µes:\n\n```env\n# Database Configuration\nDB_NAME=erp_idiomas\nDB_USER=postgres\nDB_PASSWORD=sua_senha_segura_aqui\n\n# Backend Configuration\nNODE_ENV=production\nPORT=3000\nJWT_SECRET=sua_chave_jwt_muito_segura_aqui\nSESSION_SECRET=sua_chave_session_muito_segura_aqui\n\n# Database URL for Drizzle ORM\nDATABASE_URL=postgresql://postgres:sua_senha_segura_aqui@database:5432/erp_idiomas\n\n# Other configurations\nCORS_ORIGIN=https://seu-dominio.com\n```\n\n### 3. Build e Execu√ß√£o dos Containers\n\n```bash\n# Build e start dos servi√ßos\ndocker-compose up -d --build\n\n# Verificar se os containers est√£o rodando\ndocker-compose ps\n\n# Ver logs em tempo real\ndocker-compose logs -f\n```\n\n### 4. Configura√ß√£o do Banco de Dados\n\n```bash\n# Executar migra√ß√µes (se necess√°rio)\ndocker-compose exec backend npm run db:push\n\n# Executar seed (se necess√°rio)\ndocker-compose exec backend npm run seed\n```\n\n## üåê Configura√ß√£o do Nginx no Servidor\n\n### Configura√ß√£o do Virtual Host\n\nCrie o arquivo `/etc/nginx/sites-available/erp-idiomas`:\n\n```nginx\nserver {\n    listen 80;\n    server_name seu-dominio.com www.seu-dominio.com;\n    \n    # Redirect HTTP to HTTPS\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name seu-dominio.com www.seu-dominio.com;\n    \n    # SSL Configuration\n    ssl_certificate /path/to/your/certificate.crt;\n    ssl_certificate_key /path/to/your/private.key;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n    \n    # Security Headers\n    add_header X-Frame-Options \"SAMEORIGIN\" always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n    add_header Referrer-Policy \"no-referrer-when-downgrade\" always;\n    add_header Content-Security-Policy \"default-src 'self' http: https: data: blob: 'unsafe-inline'\" always;\n    \n    # Frontend (React App)\n    location / {\n        proxy_pass http://localhost:8080;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_cache_bypass $http_upgrade;\n        \n        # Fallback para SPA\n        try_files $uri $uri/ @fallback;\n    }\n    \n    # Fallback para Single Page Application\n    location @fallback {\n        proxy_pass http://localhost:8080;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_cache_bypass $http_upgrade;\n    }\n    \n    # Backend API\n    location /api/ {\n        proxy_pass http://localhost:3000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_cache_bypass $http_upgrade;\n        \n        # Timeout settings\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 60s;\n    }\n    \n    # WebSocket support (se necess√°rio)\n    location /ws {\n        proxy_pass http://localhost:3000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n    \n    # Static files caching\n    location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {\n        proxy_pass http://localhost:8080;\n        expires 1y;\n        add_header Cache-Control \"public, immutable\";\n    }\n    \n    # Gzip compression\n    gzip on;\n    gzip_vary on;\n    gzip_min_length 1024;\n    gzip_proxied expired no-cache no-store private must-revalidate auth;\n    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;\n}\n```\n\n### Ativa√ß√£o da Configura√ß√£o\n\n```bash\n# Criar link simb√≥lico\nsudo ln -s /etc/nginx/sites-available/erp-idiomas /etc/nginx/sites-enabled/\n\n# Testar configura√ß√£o\nsudo nginx -t\n\n# Recarregar Nginx\nsudo systemctl reload nginx\n```\n\n## üîß Comandos √öteis\n\n### Gerenciamento dos Containers\n\n```bash\n# Parar todos os servi√ßos\ndocker-compose down\n\n# Parar e remover volumes (CUIDADO: apaga dados do banco)\ndocker-compose down -v\n\n# Rebuild apenas um servi√ßo\ndocker-compose up -d --build backend\n\n# Ver logs de um servi√ßo espec√≠fico\ndocker-compose logs -f backend\n\n# Executar comando dentro do container\ndocker-compose exec backend bash\n```\n\n### Backup do Banco de Dados\n\n```bash\n# Criar backup\ndocker-compose exec database pg_dump -U postgres erp_idiomas > backup_$(date +%Y%m%d_%H%M%S).sql\n\n# Restaurar backup\ndocker-compose exec -T database psql -U postgres erp_idiomas < backup_file.sql\n```\n\n### Monitoramento\n\n```bash\n# Ver status dos containers\ndocker-compose ps\n\n# Ver uso de recursos\ndocker stats\n\n# Ver logs do PM2 dentro do container\ndocker-compose exec backend pm2 logs\n\n# Ver status do PM2\ndocker-compose exec backend pm2 status\n```\n\n## üîí Seguran√ßa\n\n### Firewall\n\n```bash\n# Permitir apenas portas necess√°rias\nsudo ufw allow 22    # SSH\nsudo ufw allow 80    # HTTP\nsudo ufw allow 443   # HTTPS\nsudo ufw enable\n```\n\n### SSL/TLS\n\nRecomenda-se usar Let's Encrypt para certificados SSL gratuitos:\n\n```bash\n# Instalar Certbot\nsudo apt install certbot python3-certbot-nginx\n\n# Obter certificado\nsudo certbot --nginx -d seu-dominio.com -d www.seu-dominio.com\n\n# Renova√ß√£o autom√°tica\nsudo crontab -e\n# Adicionar: 0 12 * * * /usr/bin/certbot renew --quiet\n```\n\n## üìä Monitoramento e Logs\n\n### Logs da Aplica√ß√£o\n\n```bash\n# Logs do Docker Compose\ndocker-compose logs -f --tail=100\n\n# Logs espec√≠ficos do backend\ndocker-compose logs -f backend\n\n# Logs do PM2\ndocker-compose exec backend pm2 logs --lines 100\n```\n\n### Monitoramento de Recursos\n\n```bash\n# Uso de CPU e mem√≥ria dos containers\ndocker stats\n\n# Espa√ßo em disco\ndf -h\ndocker system df\n```\n\n## üö® Troubleshooting\n\n### Problemas Comuns\n\n1. **Container n√£o inicia**: Verificar logs com `docker-compose logs`\n2. **Erro de conex√£o com banco**: Verificar vari√°veis de ambiente\n3. **Frontend n√£o carrega**: Verificar se o build foi feito corretamente\n4. **API n√£o responde**: Verificar se o backend est√° rodando na porta correta\n\n### Comandos de Diagn√≥stico\n\n```bash\n# Verificar conectividade entre containers\ndocker-compose exec frontend ping backend\n\n# Verificar portas abertas\nnetstat -tlnp | grep :3000\nnetstat -tlnp | grep :8080\n\n# Verificar logs do Nginx\nsudo tail -f /var/log/nginx/error.log\nsudo tail -f /var/log/nginx/access.log\n```\n\n## üìù Notas Importantes\n\n- O Nginx √© configurado **externamente** ao Docker para maior flexibilidade\n- O backend roda com PM2 para melhor gerenciamento de processos\n- O frontend √© servido como arquivos est√°ticos buildados\n- Sempre fa√ßa backup do banco antes de atualiza√ß√µes\n- Monitore os logs regularmente para identificar problemas\n\n## üîÑ Atualiza√ß√µes\n\nPara atualizar a aplica√ß√£o:\n\n```bash\n# 1. Fazer backup do banco\ndocker-compose exec database pg_dump -U postgres erp_idiomas > backup_pre_update.sql\n\n# 2. Parar os servi√ßos\ndocker-compose down\n\n# 3. Atualizar c√≥digo\ngit pull origin main\n\n# 4. Rebuild e restart\ndocker-compose up -d --build\n\n# 5. Executar migra√ß√µes se necess√°rio\ndocker-compose exec backend npm run db:push\n```","size_bytes":8788},"frontend/client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"frontend/client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"backend/server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport { nanoid } from \"nanoid\";\nimport { fileURLToPath } from \"url\";\n\nconst viteLogger = createLogger();\n\n// __dirname compat√≠vel com ESM\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const frontendRoot = path.resolve(__dirname, \"..\", \"..\", \"frontend\");\n\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    root: path.join(frontendRoot, \"client\"),\n    configFile: path.join(frontendRoot, \"vite.config.ts\"),\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        __dirname,\n        \"..\",\n        \"..\",\n        \"frontend\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // sempre recarrega o index.html do disco\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const caminhosPossiveis = [\n    process.env.FRONT_DIST || \"\",                       // <<< permite apontar absoluto\n    path.resolve(__dirname, \"..\", \"..\", \"frontend\", \"client\", \"dist\"),\n    path.resolve(__dirname, \"..\", \"..\", \"frontend\", \"dist\"),\n    \"/var/www/erp/front\",                               // <<< teu caminho atual\n  ].filter(Boolean);\n\n\n  const distEncontrado = caminhosPossiveis.find((p) => fs.existsSync(p));\n  if (!distEncontrado) {\n    throw new Error(\n      `Build n√£o encontrado. Rode o build do front:\n- cd /var/www/erp/frontend && npm ci && npm run build\nTentado: \n${caminhosPossiveis.join(\"\\n\")}`\n    );\n  }\n\n  app.use(express.static(distEncontrado));\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distEncontrado, \"index.html\"));\n  });\n}\n\n","size_bytes":2888},"frontend/client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"frontend/client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"frontend/client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"frontend/client/src/components/Sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface SidebarProps {\n  expanded: boolean;\n  isMobile: boolean;\n}\n\nexport default function Sidebar({ expanded, isMobile }: SidebarProps) {\n  const { user } = useAuth();\n  const [location] = useLocation();\n\n  // Get role-based permissions for access control\n  const { data: rolePermissions, isLoading: permissionsLoading } = useQuery({\n    queryKey: ['/api/auth/effective-permissions'],\n    enabled: !!user?.id,\n    retry: false,\n  });\n\n  const isActive = (path: string) => {\n    if (path === \"/\" && location === \"/\") return true;\n    if (path !== \"/\" && location.startsWith(path)) return true;\n    return false;\n  };\n\n  const canAccess = (permissionName: string) => {\n    // Admin role always has access (failsafe)\n    if (user?.role === 'admin') {\n      return true;\n    }\n\n    // If role permissions are still loading, don't show any menu items (eliminates flicker)\n    if (permissionsLoading) {\n      return false;\n    }\n\n    // If role permissions haven't loaded yet or are malformed, deny access\n    if (!rolePermissions || !Array.isArray((rolePermissions as any)?.permissions)) {\n      return false;\n    }\n\n    // Check if user's role has the specific permission\n    return (rolePermissions as any).permissions.some((permission: any) => \n      permission.name === permissionName\n    );\n  };\n\n  const menuItems = [\n    {\n      path: \"/\",\n      icon: \"fas fa-chart-line\",\n      label: \"Dashboard\",\n      permission: \"dashboard:read\"\n    },\n    {\n      path: \"/units\",\n      icon: \"fas fa-building\",\n      label: \"Unidades\",\n      permission: \"units:read\"\n    },\n    {\n      path: \"/staff\",\n      icon: \"fas fa-users\",\n      label: \"Colaboradores\", \n      permission: \"staff:read\"\n    },\n    {\n      path: \"/students\",\n      icon: \"fas fa-user-graduate\",\n      label: \"Alunos\",\n      permission: \"students:read\"\n    },\n    {\n      path: \"/courses\",\n      icon: \"fas fa-book\",\n      label: \"Cursos\",\n      permission: \"courses:read\"\n    },\n    {\n      path: \"/schedule\",\n      icon: \"fas fa-calendar-alt\",\n      label: \"Agenda\",\n      permission: \"classes:read\"\n    },\n    {\n      path: \"/teacher-individual-schedule\",\n      icon: \"fas fa-calendar-week\",\n      label: \"Agenda Individual\",\n      permission: \"teacher_schedule:manage\"\n    },\n    {\n      path: \"/student-area\",\n      icon: \"fas fa-book-open\",\n      label: \"√Årea do Aluno\",\n      permission: \"lessons:read\",\n      hideForAdmin: true\n    }\n  ];\n\n  const systemMenuItems = [\n    {\n      path: \"/financial\",\n      icon: \"fas fa-dollar-sign\",\n      label: \"Financeiro\",\n      permission: \"finance:read\"\n    },\n    {\n      path: \"/settings\",\n      icon: \"fas fa-cog\",\n      label: \"Configura√ß√µes\",\n      permission: \"settings:read\"\n    },\n    {\n      path: \"/permissions\",\n      icon: \"fas fa-shield-alt\",\n      label: \"Permiss√µes\",\n      permission: \"permissions:manage\"\n    },\n    {\n      path: \"/support\",\n      icon: \"fas fa-question-circle\",\n      label: \"Suporte\",\n      permission: \"support:read\"\n    }\n  ];\n\n  const { toast } = useToast();\n\n  const handleLogout = () => {\n    // Clear authentication data (JWT logout is client-side only)\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('user');\n\n    // Redirect to login page\n    window.location.href = '/';\n  };\n\n  return (\n    <aside \n      className={`${\n        expanded ? (isMobile ? 'w-64' : 'w-64') : 'w-16'\n      } ${\n        isMobile && !expanded ? 'hidden' : ''\n      } glassmorphism-card border-r border-white/20 flex flex-col shadow-xl backdrop-blur-xl transition-all duration-300 ease-in-out overflow-hidden ${\n        isMobile && expanded ? 'fixed inset-y-0 left-0 z-50' : ''\n      }`} \n      data-testid=\"sidebar\"\n    >\n      {/* Logo & Brand */}\n      <div className={`${expanded ? 'p-6' : 'p-3'} border-b border-white/20 transition-all duration-300`}>\n        <div className={`flex items-center ${expanded ? 'space-x-3' : 'justify-center'}`}>\n          <div className=\"w-12 h-12 gradient-primary rounded-xl flex items-center justify-center icon-glow shadow-lg flex-shrink-0\">\n            <i className=\"fas fa-graduation-cap text-white text-xl\"></i>\n          </div>\n          {expanded && (\n            <div className=\"overflow-hidden\">\n              <h1 className=\"text-xl font-bold text-gradient whitespace-nowrap\">OpenLife</h1>\n              <p className=\"text-xs text-muted-foreground font-medium whitespace-nowrap\">Escola de Idiomas</p>\n            </div>\n          )}\n        </div>\n      </div>\n\n\n      {/* Navigation */}\n      <nav className={`flex-1 overflow-y-auto overflow-x-hidden ${expanded ? 'p-4' : 'p-2'} transition-all duration-300`}>\n        <div className=\"space-y-2\">\n          {/* Main Menu Items */}\n          {menuItems\n            .filter(item => canAccess(item.permission))\n            .filter(item => !(user?.role === 'admin' && item.hideForAdmin))\n            .map((item) => (\n              <Link\n                key={item.path}\n                href={item.path}\n                className={`flex items-center ${expanded ? 'space-x-3 px-4 py-3' : 'justify-center px-2 py-3'} rounded-xl transition-smooth group relative ${\n                  isActive(item.path)\n                    ? 'gradient-primary text-white shadow-lg icon-glow'\n                    : 'text-muted-foreground sidebar-hover'\n                }`}\n                data-testid={`link-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n                title={!expanded ? item.label : undefined}\n              >\n                <i className={`${item.icon} w-5 flex-shrink-0`}></i>\n                {expanded && <span className=\"text-sm font-medium whitespace-nowrap\">{item.label}</span>}\n                {!expanded && (\n                  <div className=\"absolute left-16 bg-gray-900 text-white text-sm px-2 py-1 rounded-md opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none z-50 whitespace-nowrap\">\n                    {item.label}\n                  </div>\n                )}\n              </Link>\n            ))}\n\n          {/* Sistema Section */}\n          {(systemMenuItems.some(item => canAccess(item.permission)) || user) && (\n            <div className=\"pt-4\">\n              {expanded && (\n                <p className=\"text-xs font-semibold text-muted-foreground uppercase tracking-wider mb-2\">\n                  Sistema\n                </p>\n              )}\n              <div className=\"space-y-1\">\n                {systemMenuItems\n                  .filter(item => item.path === '/support' ? !!user : canAccess(item.permission))\n                  .map((item) => (\n                    <Link\n                      key={item.path}\n                      href={item.path}\n                      className={`flex items-center ${expanded ? 'space-x-3 px-4 py-3' : 'justify-center px-2 py-3'} rounded-xl transition-smooth group relative ${\n                        isActive(item.path)\n                          ? 'gradient-secondary text-white shadow-lg'\n                          : 'text-muted-foreground sidebar-hover'\n                      }`}\n                      data-testid={`link-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n                      title={!expanded ? item.label : undefined}\n                    >\n                      <i className={`${item.icon} w-5 flex-shrink-0`}></i>\n                      {expanded && <span className=\"text-sm whitespace-nowrap\">{item.label}</span>}\n                      {!expanded && (\n                        <div className=\"absolute left-16 bg-gray-900 text-white text-sm px-2 py-1 rounded-md opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none z-50 whitespace-nowrap\">\n                          {item.label}\n                        </div>\n                      )}\n                    </Link>\n                  ))}\n              </div>\n            </div>\n          )}\n        </div>\n      </nav>\n\n      {/* User Profile & Logout */}\n      {user && (\n        <div className={`${expanded ? 'p-4' : 'p-2'} border-t border-white/20 mt-auto`}>\n          <div className=\"flex items-center justify-between space-x-3\">\n            <div className=\"flex items-center space-x-3 overflow-hidden\">\n              <Avatar>\n                <AvatarImage src={user.avatar_url || ''} alt={user.name} />\n                <AvatarFallback>\n                  {user.name?.split(' ').map(n => n[0]).join('') || '?'}\n                </AvatarFallback>\n              </Avatar>\n              {expanded && (\n                <div className=\"overflow-hidden\">\n                  <p className=\"text-sm font-semibold text-white truncate\" title={user.name}>{user.name}</p>\n                  <p className=\"text-xs text-muted-foreground truncate\" title={user.email}>{user.email}</p>\n                </div>\n              )}\n            </div>\n            {expanded && (\n              <button\n                onClick={handleLogout}\n                className=\"ml-auto p-2 rounded-full text-muted-foreground hover:bg-white/10 hover:text-white transition-colors\"\n                aria-label=\"Logout\"\n                title=\"Sair do sistema\"\n              >\n                <i className=\"fas fa-sign-out-alt text-lg\"></i>\n              </button>\n            )}\n             {!expanded && (\n              <button\n                onClick={handleLogout}\n                className=\"p-2 rounded-full text-muted-foreground hover:bg-white/10 hover:text-white transition-colors\"\n                aria-label=\"Logout\"\n                title=\"Sair do sistema\"\n              >\n                <i className=\"fas fa-sign-out-alt text-lg\"></i>\n              </button>\n            )}\n          </div>\n        </div>\n      )}\n    </aside>\n  );\n}\n","size_bytes":9889},"backend/run-seed.js":{"content":"import { seedDatabase, verificarTabelas } from './seed-demo-users.js';\n\nasync function main() {\n  try {\n    console.log('üå± Executando seed dos usu√°rios demo...');\n    \n    // Verificar se as tabelas existem\n    const tablesExist = await verificarTabelas();\n    if (!tablesExist) {\n      console.log('‚ùå Tabelas n√£o encontradas. Execute primeiro:');\n      console.log('   node setup.js');\n      process.exit(1);\n    }\n    \n    await seedDatabase();\n    console.log('üéâ Seed executado com sucesso!');\n    \n  } catch (error) {\n    console.error('‚ùå Erro ao executar seed:', error);\n    process.exit(1);\n  }\n}\n\nmain();\n","size_bytes":624},"backend/server/seed.ts":{"content":"import { storage } from './storage.js';\nimport { auth } from './auth.js';\n\nasync function seed() {\n  console.log('üå± Iniciando seed do banco de dados...');\n\n  try {\n    // Criar roles fixos do sistema (idempotente - verifica se j√° existem)\n    console.log('üìù Criando roles...');\n    \n    let adminRole = await storage.getRoleByName('admin');\n    if (!adminRole) {\n      adminRole = await storage.createRole({\n        name: 'admin',\n        displayName: 'Administrativo',\n        description: 'Acesso total ao sistema',\n        isSystemRole: true,\n        isActive: true,\n        isDeletable: false, // Cargo fixo, n√£o pode ser exclu√≠do\n      });\n      console.log('‚úÖ Role admin criado');\n    } else {\n      console.log('‚úÖ Role admin j√° existe');\n    }\n\n    let secretaryRole = await storage.getRoleByName('secretary');\n    if (!secretaryRole) {\n      secretaryRole = await storage.createRole({\n        name: 'secretary',\n        displayName: 'Secret√°rio',\n        description: 'Gest√£o de alunos e unidades',\n        isSystemRole: true,\n        isActive: true,\n        isDeletable: false, // Cargo fixo, n√£o pode ser exclu√≠do\n      });\n      console.log('‚úÖ Role secretary criado');\n    } else {\n      console.log('‚úÖ Role secretary j√° existe');\n    }\n\n    let teacherRole = await storage.getRoleByName('teacher');\n    if (!teacherRole) {\n      teacherRole = await storage.createRole({\n        name: 'teacher',\n        displayName: 'Professor',\n        description: 'Acesso a turmas e agenda',\n        isSystemRole: true,\n        isActive: true,\n        isDeletable: false, // Cargo fixo, n√£o pode ser exclu√≠do\n      });\n      console.log('‚úÖ Role teacher criado');\n    } else {\n      console.log('‚úÖ Role teacher j√° existe');\n    }\n\n    let studentRole = await storage.getRoleByName('student');\n    if (!studentRole) {\n      studentRole = await storage.createRole({\n        name: 'student',\n        displayName: 'Aluno',\n        description: 'Acesso √† √°rea do aluno',\n        isSystemRole: true,\n        isActive: true,\n        isDeletable: false, // Cargo fixo, n√£o pode ser exclu√≠do\n      });\n      console.log('‚úÖ Role student criado');\n    } else {\n      console.log('‚úÖ Role student j√° existe');\n    }\n\n    console.log('‚úÖ Roles verificados/criados com sucesso');\n\n    // Criar usu√°rio admin padr√£o (se n√£o existir)\n    console.log('üë§ Criando usu√°rio admin...');\n    \n    // Criar permiss√µes e categorias padr√£o\n    console.log('üîê Criando categorias e permiss√µes padr√£o...');\n    // Helper para obter/ criar categoria por nome\n    const allCategories = await storage.getPermissionCategories();\n    async function ensureCategory(name: string, displayName: string, description?: string) {\n      const found = allCategories.find(c => c.name === name);\n      return found || await storage.createPermissionCategory({ name, displayName, description, isSystemCategory: true, isActive: true });\n    }\n    const catModules = await ensureCategory('modules', 'M√≥dulos', 'Permiss√µes por m√≥dulo');\n    const catAdmin = await ensureCategory('admin', 'Administra√ß√£o', 'Permiss√µes administrativas');\n\n    // Helper para obter/ criar permiss√£o por nome\n    const allPerms = await storage.getPermissions();\n    async function ensurePermission(name: string, displayName: string, description: string, categoryId: string) {\n      const found = allPerms.find(p => p.name === name);\n      return found || await storage.createPermission({ name, displayName, description, categoryId, isActive: true });\n    }\n\n    const pUnitsRead = await ensurePermission('units:read', 'Ler Unidades', 'Visualizar unidades', catModules.id);\n    const pUnitsWrite = await ensurePermission('units:write', 'Gerir Unidades', 'Criar/editar/excluir unidades', catModules.id);\n    const pStaffRead = await ensurePermission('staff:read', 'Ler Colaboradores', 'Visualizar colaboradores', catModules.id);\n    const pStaffWrite = await ensurePermission('staff:write', 'Gerir Colaboradores', 'Criar/editar/excluir colaboradores', catModules.id);\n    const pStudentsRead = await ensurePermission('students:read', 'Ler Alunos', 'Visualizar alunos', catModules.id);\n    const pStudentsWrite = await ensurePermission('students:write', 'Gerir Alunos', 'Criar/editar/excluir alunos', catModules.id);\n    const pCoursesRead = await ensurePermission('courses:read', 'Ler Cursos', 'Visualizar cursos', catModules.id);\n    const pCoursesWrite = await ensurePermission('courses:write', 'Gerir Cursos', 'Criar/editar/excluir cursos', catModules.id);\n    const pBooksRead = await ensurePermission('books:read', 'Ler Livros', 'Visualizar livros', catModules.id);\n    const pBooksWrite = await ensurePermission('books:write', 'Gerir Livros', 'Criar/editar/excluir livros', catModules.id);\n    const pClassesRead = await ensurePermission('classes:read', 'Ler Turmas', 'Visualizar turmas', catModules.id);\n    const pClassesWrite = await ensurePermission('classes:write', 'Gerir Turmas', 'Criar/editar/excluir turmas', catModules.id);\n    const pLessonsRead = await ensurePermission('lessons:read', 'Ler Aulas', 'Visualizar aulas', catModules.id);\n    const pLessonsWrite = await ensurePermission('lessons:write', 'Gerir Aulas', 'Criar/editar/excluir aulas', catModules.id);\n    const pFinanceRead = await ensurePermission('finance:read', 'Ler Financeiro', 'Visualizar √°rea financeira', catModules.id);\n    const pFinanceWrite = await ensurePermission('finance:write', 'Gerir Financeiro', 'Opera√ß√µes no financeiro', catModules.id);\n    const pDashboardRead = await ensurePermission('dashboard:read', 'Ler Dashboard', 'Visualizar dashboard', catModules.id);\n    const pSettingsRead = await ensurePermission('settings:read', 'Ler Configura√ß√µes', 'Visualizar configura√ß√µes', catAdmin.id);\n    const pSupportRead = await ensurePermission('support:read', 'Ler Suporte', 'Visualizar suporte', catModules.id);\n    const pPermissionsManage = await ensurePermission('permissions:manage', 'Gerir Permiss√µes', 'Gerenciar roles e permiss√µes', catAdmin.id);\n\n    // Atribuir permiss√µes por role\n    console.log('üß© Atribuindo permiss√µes √†s roles...');\n    if (adminRole?.id) {\n      await storage.updateRolePermissions(adminRole.id, [\n        pDashboardRead.id,\n        pUnitsRead.id, pUnitsWrite.id,\n        pStaffRead.id, pStaffWrite.id,\n        pStudentsRead.id, pStudentsWrite.id,\n        pCoursesRead.id, pCoursesWrite.id,\n        pBooksRead.id, pBooksWrite.id,\n        pClassesRead.id, pClassesWrite.id,\n        pLessonsRead.id, pLessonsWrite.id,\n        pFinanceRead.id, pFinanceWrite.id,\n        pSettingsRead.id,\n        pSupportRead.id,\n        pPermissionsManage.id,\n      ]);\n    }\n    if (secretaryRole?.id) {\n      await storage.updateRolePermissions(secretaryRole.id, [\n        pDashboardRead.id,\n        pStaffRead.id, pStaffWrite.id,\n        pStudentsRead.id, pStudentsWrite.id,\n        pCoursesRead.id, pCoursesWrite.id,\n        pBooksRead.id,\n        pClassesRead.id, pClassesWrite.id,\n        pLessonsRead.id, pLessonsWrite.id,\n        pFinanceRead.id, pFinanceWrite.id,\n        pSupportRead.id,\n      ]);\n    }\n    if (teacherRole?.id) {\n      await storage.updateRolePermissions(teacherRole.id, [\n        pDashboardRead.id,\n        pClassesRead.id,\n        pLessonsRead.id,\n        pSupportRead.id,\n      ]);\n    }\n    if (studentRole?.id) {\n      await storage.updateRolePermissions(studentRole.id, [\n        pLessonsRead.id,\n        pSupportRead.id,\n      ]);\n    }\n\n    console.log('‚úÖ Permiss√µes padr√£o criadas/atribu√≠das');\n\n    const existingAdmin = await storage.getUserByEmail('admin@sistema.com');\n    \n    if (!existingAdmin) {\n      const hashedPassword = await auth.hashPassword('admin123');\n      \n      await storage.createUser({\n        email: 'admin@sistema.com',\n        password: hashedPassword,\n        firstName: 'Admin',\n        lastName: 'Sistema',\n        roleId: adminRole.id,\n        isActive: true,\n      });\n\n      console.log('‚úÖ Usu√°rio admin criado com sucesso');\n      console.log('üìß Email: admin@sistema.com');\n      console.log('üîë Senha: admin123');\n    } else {\n      console.log('‚úÖ Usu√°rio admin j√° existe');\n    }\n\n    // Criar p√°ginas do sistema\n    console.log('üìÑ Criando p√°ginas do sistema...');\n    \n    const pages = [\n      { name: 'dashboard', displayName: 'Dashboard', description: 'P√°gina inicial do sistema', route: '/dashboard' },\n      { name: 'units', displayName: 'Unidades', description: 'Gest√£o de unidades/filiais', route: '/units' },\n      { name: 'staff', displayName: 'Colaboradores', description: 'Gest√£o de colaboradores', route: '/staff' },\n      { name: 'students', displayName: 'Alunos', description: 'Gest√£o de alunos', route: '/students' },\n      { name: 'courses', displayName: 'Cursos', description: 'Gest√£o de cursos', route: '/courses' },\n      { name: 'classes', displayName: 'Turmas', description: 'Gest√£o de turmas', route: '/classes' },\n      { name: 'schedule', displayName: 'Agenda', description: 'Agenda de aulas', route: '/schedule' },\n      { name: 'financial', displayName: 'Financeiro', description: 'Gest√£o financeira', route: '/financial' },\n      { name: 'support', displayName: 'Suporte', description: 'Central de suporte', route: '/support' },\n      { name: 'settings', displayName: 'Configura√ß√µes', description: 'Configura√ß√µes do sistema', route: '/settings' },\n      { name: 'permissions', displayName: 'Permiss√µes', description: 'Gest√£o de permiss√µes', route: '/permissions' },\n    ];\n\n    for (const pageData of pages) {\n      let page = await storage.getPageByName(pageData.name);\n      if (!page) {\n        page = await storage.createPage(pageData);\n        console.log(`‚úÖ P√°gina ${pageData.name} criada`);\n      } else {\n        console.log(`‚úÖ P√°gina ${pageData.name} j√° existe`);\n      }\n    }\n\n    // Criar permiss√µes padr√£o para admin (acesso a todas as p√°ginas)\n    console.log('üîê Configurando permiss√µes padr√£o...');\n    \n    const allPages = await storage.getPages();\n    for (const page of allPages) {\n      const existingPermission = await storage.getRolePagePermission(adminRole.id, page.id);\n      if (!existingPermission) {\n        await storage.createRolePagePermission({\n          roleId: adminRole.id,\n          pageId: page.id,\n          canAccess: true,\n        });\n        console.log(`‚úÖ Permiss√£o admin para ${page.name} criada`);\n      }\n    }\n\n    console.log('\\nüéâ Seed conclu√≠do com sucesso!');\n  } catch (error) {\n    console.error('‚ùå Erro durante o seed:', error);\n    throw error;\n  }\n}\n\n// Executar seed se for chamado diretamente\nif (import.meta.url === `file://${process.argv[1]}`) {\n  seed()\n    .then(() => process.exit(0))\n    .catch((error) => {\n      console.error(error);\n      process.exit(1);\n    });\n}\n\nexport { seed };\n","size_bytes":10817},"backend/server/replitAuth.js":{"content":"import * as client from \"openid-client\";\nimport { Strategy } from \"openid-client/passport\";\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage.js\";\nif (!process.env.REPLIT_DOMAINS) {\n    throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\nconst getOidcConfig = memoize(async () => {\n    return await client.discovery(new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"), process.env.REPL_ID);\n}, { maxAge: 3600 * 1000 });\nexport function getSession() {\n    const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n    const pgStore = connectPg(session);\n    const sessionStore = new pgStore({\n        conString: process.env.DATABASE_URL,\n        createTableIfMissing: false,\n        ttl: sessionTtl,\n        tableName: \"sessions\",\n    });\n    return session({\n        secret: process.env.SESSION_SECRET,\n        store: sessionStore,\n        resave: false,\n        saveUninitialized: false,\n        cookie: {\n            httpOnly: true,\n            secure: true,\n            maxAge: sessionTtl,\n        },\n    });\n}\nfunction updateUserSession(user, tokens) {\n    user.claims = tokens.claims();\n    user.access_token = tokens.access_token;\n    user.refresh_token = tokens.refresh_token;\n    user.expires_at = user.claims?.exp;\n}\nasync function upsertUser(claims) {\n    // Auto-registro √© SEMPRE como student (seguran√ßa)\n    const studentRole = await storage.getRoleByName('student');\n    if (!studentRole) {\n        throw new Error(\"Role de estudante n√£o configurado\");\n    }\n    await storage.upsertUser({\n        id: claims[\"sub\"],\n        email: claims[\"email\"],\n        firstName: claims[\"first_name\"],\n        lastName: claims[\"last_name\"],\n        profileImageUrl: claims[\"profile_image_url\"],\n        roleId: studentRole.id,\n    });\n}\nexport async function setupAuth(app) {\n    app.set(\"trust proxy\", 1);\n    app.use(getSession());\n    app.use(passport.initialize());\n    app.use(passport.session());\n    const config = await getOidcConfig();\n    const verify = async (tokens, verified) => {\n        const user = {};\n        updateUserSession(user, tokens);\n        await upsertUser(tokens.claims());\n        verified(null, user);\n    };\n    for (const domain of process.env\n        .REPLIT_DOMAINS.split(\",\")) {\n        const strategy = new Strategy({\n            name: `replitauth:${domain}`,\n            config,\n            scope: \"openid email profile offline_access\",\n            callbackURL: `https://${domain}/api/callback`,\n        }, verify);\n        passport.use(strategy);\n    }\n    passport.serializeUser((user, cb) => cb(null, user));\n    passport.deserializeUser((user, cb) => cb(null, user));\n    app.get(\"/api/login\", (req, res, next) => {\n        passport.authenticate(`replitauth:${req.hostname}`, {\n            prompt: \"login consent\",\n            scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n        })(req, res, next);\n    });\n    app.get(\"/api/callback\", (req, res, next) => {\n        passport.authenticate(`replitauth:${req.hostname}`, {\n            successReturnToOrRedirect: \"/\",\n            failureRedirect: \"/api/login\",\n        })(req, res, next);\n    });\n    app.get(\"/api/logout\", (req, res) => {\n        req.logout(() => {\n            res.redirect(client.buildEndSessionUrl(config, {\n                client_id: process.env.REPL_ID,\n                post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n            }).href);\n        });\n    });\n}\nexport const isAuthenticated = async (req, res, next) => {\n    const user = req.user;\n    if (!req.isAuthenticated() || !user.expires_at) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n    }\n    const now = Math.floor(Date.now() / 1000);\n    if (now <= user.expires_at) {\n        return next();\n    }\n    const refreshToken = user.refresh_token;\n    if (!refreshToken) {\n        res.status(401).json({ message: \"Unauthorized\" });\n        return;\n    }\n    try {\n        const config = await getOidcConfig();\n        const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n        updateUserSession(user, tokenResponse);\n        return next();\n    }\n    catch (error) {\n        res.status(401).json({ message: \"Unauthorized\" });\n        return;\n    }\n};\n","size_bytes":4355},"frontend/postcss.config.js":{"content":"import path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\nexport default {\n  plugins: {\n    tailwindcss: {\n      config: path.join(__dirname, 'tailwind.config.ts'),\n    },\n    autoprefixer: {},\n  },\n}\n","size_bytes":271},"backend/server/permissions.js":{"content":"// Sistema de mapeamento de cargos para permiss√µes de p√°ginas\nimport * as storage from './storage.js';\n// Fun√ß√£o para verificar se um usu√°rio tem permiss√£o para acessar uma p√°gina\nexport async function hasPagePermission(userId, page) {\n    try {\n        // Buscar o usu√°rio e seu role\n        const user = await storage.getUserById(userId);\n        if (!user) {\n            return false;\n        }\n        const roles = await storage.getRoles();\n        const userRole = roles.find(r => r.id === user.roleId);\n        if (!userRole) {\n            return false;\n        }\n        // Admin sempre tem acesso global\n        if (userRole.name === 'admin') {\n            return true;\n        }\n        // Buscar permiss√µes de p√°ginas do banco de dados\n        const allowedPages = await storage.getRoleAllowedPages(userRole.id);\n        return allowedPages.some(p => p.name === page);\n    }\n    catch (error) {\n        console.error('Erro ao verificar permiss√£o de p√°gina:', error);\n        return false;\n    }\n}\n// Fun√ß√£o para obter todas as p√°ginas que um usu√°rio pode acessar\nexport async function getUserAllowedPages(userId) {\n    try {\n        // Buscar o usu√°rio e seu role\n        const user = await storage.getUserById(userId);\n        if (!user) {\n            return [];\n        }\n        const roles = await storage.getRoles();\n        const userRole = roles.find(r => r.id === user.roleId);\n        if (!userRole) {\n            return [];\n        }\n        // Admin tem acesso a todas as p√°ginas\n        if (userRole.name === 'admin') {\n            const allPages = await storage.getPages();\n            return allPages.map(p => p.name);\n        }\n        // Buscar p√°ginas permitidas do banco de dados\n        const allowedPages = await storage.getRoleAllowedPages(userRole.id);\n        return allowedPages.map(p => p.name);\n    }\n    catch (error) {\n        console.error('Erro ao buscar p√°ginas permitidas:', error);\n        return [];\n    }\n}\n// Middleware para verificar permiss√£o de p√°gina\nexport function requirePagePermission(page) {\n    return async (req, res, next) => {\n        const user = req.user;\n        if (!user) {\n            return res.status(401).json({ message: 'Usu√°rio n√£o autenticado' });\n        }\n        const hasPermission = await hasPagePermission(user.id, page);\n        if (!hasPermission) {\n            return res.status(403).json({\n                message: 'Acesso negado: voc√™ n√£o tem permiss√£o para acessar esta p√°gina'\n            });\n        }\n        next();\n    };\n}\n","size_bytes":2541},"frontend/client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"backend/server/routes.ts":{"content":"import type { Express } from \"express\";\nimport express from \"express\";\nimport { createServer, type Server } from \"http\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport bcrypt from 'bcryptjs';\nimport { storage } from \"./storage.js\";\nimport { auth } from \"./auth.js\";\nimport { setupVite, serveStatic } from \"./vite.js\";\nimport { requirePagePermission } from \"./permissions.js\";\nimport { \n  insertUnitSchema, \n  insertStaffSchema, \n  insertStudentSchema,\n  insertCourseSchema,\n  insertClassSchema,\n  insertLessonSchema,\n  insertBookSchema,\n  insertPermissionCategorySchema,\n  insertPermissionSchema,\n  insertRoleSchema,\n  insertUserSettingsSchema,\n  insertSupportTicketSchema,\n  insertSupportTicketResponseSchema,\n  insertGuardianSchema,\n  insertFinancialResponsibleSchema,\n  insertFranchiseUnitSchema,\n  staff,\n} from \"../shared/schema.js\";\nimport { z } from \"zod\";\nimport { db } from \"./db.js\";\nimport { eq } from \"drizzle-orm\";\n\nconst updateRolePermissionsSchema = z.object({\n  permissionIds: z.array(z.string())\n});\n\n// Configure multer for file uploads\nconst bookUploads = multer({\n  storage: multer.diskStorage({\n    destination: (req, file, cb) => {\n      const uploadDir = './uploads/books';\n      if (!fs.existsSync(uploadDir)) {\n        fs.mkdirSync(uploadDir, { recursive: true });\n      }\n      cb(null, uploadDir);\n    },\n    filename: (req, file, cb) => {\n      const bookId = req.params.id;\n      const ext = path.extname(file.originalname);\n      cb(null, `book_${bookId}_${Date.now()}${ext}`);\n    }\n  }),\n  fileFilter: (req, file, cb) => {\n    if (file.mimetype === 'application/pdf') {\n      cb(null, true);\n    } else {\n      cb(new Error('Only PDF files are allowed!') as any, false);\n    }\n  },\n  limits: {\n    fileSize: 50 * 1024 * 1024 // 50MB limit\n  }\n});\n\nconst franchiseUploads = multer({\n  storage: multer.diskStorage({\n    destination: (req, file, cb) => {\n      const uploadDir = './uploads/franchise-units';\n      if (!fs.existsSync(uploadDir)) {\n        fs.mkdirSync(uploadDir, { recursive: true });\n      }\n      cb(null, uploadDir);\n    },\n    filename: (req, file, cb) => {\n      const ext = path.extname(file.originalname);\n      const fieldName = file.fieldname;\n      cb(null, `${fieldName}_${Date.now()}${ext}`);\n    }\n  }),\n  fileFilter: (req, file, cb) => {\n    if (file.mimetype === 'application/pdf') {\n      cb(null, true);\n    } else {\n      cb(new Error('Only PDF files are allowed!') as any, false);\n    }\n  },\n  limits: {\n    fileSize: 50 * 1024 * 1024 // 50MB limit\n  }\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Serve uploaded files\n  app.use('/uploads', express.static('uploads'));\n\n  // ============================================================================\n  // AUTH ROUTES\n  // ============================================================================\n\n  // Login endpoint\n  app.post('/api/auth/login', async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      \n      console.log('üîë Tentativa de login:', { email, password: '***' });\n      \n      const result = await auth.authenticateUser(email, password);\n      \n      if (!result) {\n        console.log('‚ùå Credenciais inv√°lidas para:', email);\n        return res.status(401).json({ message: \"Credenciais inv√°lidas\" });\n      }\n\n      const { user, token } = result;\n      \n      // Buscar role para incluir no retorno\n      const role = await storage.getRoles();\n      const userRole = role.find(r => r.id === user.roleId);\n\n      console.log('‚úÖ Login bem-sucedido para:', email);\n      \n      res.json({ \n        user: {\n          id: user.id,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          role: userRole?.name || 'student',\n        },\n        token,\n        message: \"Login realizado com sucesso\"\n      });\n    } catch (error) {\n      console.error('Erro no login:', error);\n      res.status(500).json({ message: \"Erro ao realizar login\" });\n    }\n  });\n\n  // Register endpoint - apenas para estudantes (auto-registro)\n  app.post('/api/auth/register', async (req, res) => {\n    try {\n      const { email, password, firstName, lastName } = req.body;\n      \n      // Verificar se usu√°rio j√° existe\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Email j√° cadastrado\" });\n      }\n\n      // Auto-registro √© SEMPRE como student (seguran√ßa)\n      const studentRole = await storage.getRoleByName('student');\n      if (!studentRole) {\n        return res.status(500).json({ message: \"Role de estudante n√£o configurado\" });\n      }\n\n      // Hash da senha\n      const hashedPassword = await auth.hashPassword(password);\n\n      // Criar usu√°rio\n      const user = await storage.createUser({\n        email,\n        password: hashedPassword,\n        firstName,\n        lastName,\n        roleId: studentRole.id,\n        isActive: true,\n      });\n\n      // Gerar token\n      const token = auth.generateToken(user);\n\n      res.status(201).json({\n        user: {\n          id: user.id,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          role: 'student',\n        },\n        token,\n        message: \"Usu√°rio criado com sucesso\"\n      });\n    } catch (error) {\n      console.error('Erro no registro:', error);\n      res.status(500).json({ message: \"Erro ao criar usu√°rio\" });\n    }\n  });\n\n  // Get current user\n  app.get('/api/auth/user', auth.isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUserById(req.user.id);\n      if (!user) {\n        return res.status(404).json({ message: \"Usu√°rio n√£o encontrado\" });\n      }\n\n      const role = await storage.getRoles();\n      const userRole = role.find(r => r.id === user.roleId);\n\n      res.json({\n        id: user.id,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        role: userRole?.name || 'student',\n      });\n    } catch (error) {\n      console.error('Erro ao buscar usu√°rio:', error);\n      res.status(500).json({ message: \"Erro ao buscar usu√°rio\" });\n    }\n  });\n\n  // Get effective permissions for current user\n    app.get('/api/auth/effective-permissions', auth.isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUserById(req.user.id);\n      if (!user) {\n        return res.status(404).json({ message: \"UsuÔøΩrio nÔøΩo encontrado\" });\n      }\n\n      const roles = await storage.getRoles();\n      const userRole = roles.find(r => r.id === user.roleId);\n      \n      let permissions: any[] = [];\n      if (userRole) {\n        const rolePermissions = await storage.getRolePermissionsByName(userRole.name);\n        permissions = rolePermissions.map(rp => rp.permission);\n      }\n\n      // Apply user overrides (grants/denies)\n      const overrides = await storage.getUserPermissionOverrides(user.id);\n      const permMap = new Map<string, any>();\n      for (const p of permissions) permMap.set(p.id, p);\n      for (const ov of overrides) {\n        if (ov.isGranted) {\n          permMap.set(ov.permission.id, ov.permission);\n        } else {\n          permMap.delete(ov.permission.id);\n        }\n      }\n      \n      res.json({ permissions: Array.from(permMap.values()) });\n    } catch (error) {\n      console.error('Error getting effective permissions:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  // ============================================================================\n  // UPLOAD ROUTES\n  // ============================================================================\n\n  app.post('/api/upload/unit-document', auth.isAuthenticated, franchiseUploads.single('file'), (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: 'Nenhum arquivo enviado' });\n      }\n\n      const fileUrl = `/uploads/franchise-units/${req.file.filename}`;\n      res.json({ \n        url: fileUrl,\n        filename: req.file.filename,\n        originalName: req.file.originalname,\n        size: req.file.size\n      });\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      res.status(500).json({ message: 'Erro ao fazer upload do arquivo' });\n    }\n  });\n\n  // ============================================================================\n  // DASHBOARD ROUTES\n  // ============================================================================\n\n  app.get(\"/api/dashboard/stats\", auth.isAuthenticated, async (req, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ message: \"Erro ao buscar estat√≠sticas do painel\" });\n    }\n  });\n\n  app.get(\"/api/units\", auth.isAuthenticated, requirePagePermission('units'), async (req, res) => {\n    try {\n      const units = await storage.getUnits();\n      res.json(units);\n    } catch (error) {\n      console.error(\"Error fetching units:\", error);\n      res.status(500).json({ message: \"Erro ao buscar unidades\" });\n    }\n  });\n\n  app.get(\"/api/units/:id\", auth.isAuthenticated, requirePagePermission('units'), async (req, res) => {\n    try {\n      const unit = await storage.getUnit(req.params.id);\n      if (!unit) {\n        return res.status(404).json({ message: \"Unidade n√£o encontrada\" });\n      }\n      res.json(unit);\n    } catch (error) {\n      console.error(\"Error fetching unit:\", error);\n      res.status(500).json({ message: \"Erro ao buscar unidade\" });\n    }\n  });\n\n  app.post(\"/api/units\", auth.requirePermission('units:write'), requirePagePermission('units'), async (req, res) => {\n    try {\n      const unitData = insertUnitSchema.parse(req.body);\n      const unit = await storage.createUnit(unitData);\n      res.status(201).json(unit);\n    } catch (error: any) {\n      console.error(\"Error creating unit:\", error);\n      \n      // Tratamento espec√≠fico para erros de valida√ß√£o\n      if (error.issues) {\n        const fieldErrors = error.issues.map((issue: any) => {\n          const field = issue.path.join('.');\n          return `${field}: ${issue.message}`;\n        }).join(', ');\n        return res.status(400).json({ \n          message: `Dados inv√°lidos: ${fieldErrors}` \n        });\n      }\n      \n      res.status(400).json({ message: error.message || \"Erro ao criar unidade\" });\n    }\n  });\n\n  app.put(\"/api/units/:id\", auth.requirePermission('units:write'), async (req, res) => {\n    try {\n      const unitData = insertUnitSchema.partial().parse(req.body);\n      const unit = await storage.updateUnit(req.params.id, unitData);\n      res.json(unit);\n    } catch (error: any) {\n      console.error(\"Error updating unit:\", error);\n      \n      // Tratamento espec√≠fico para erros de valida√ß√£o\n      if (error.issues) {\n        const fieldErrors = error.issues.map((issue: any) => {\n          const field = issue.path.join('.');\n          return `${field}: ${issue.message}`;\n        }).join(', ');\n        return res.status(400).json({ \n          message: `Dados inv√°lidos: ${fieldErrors}` \n        });\n      }\n      \n      res.status(400).json({ message: error.message || \"Erro ao atualizar unidade\" });\n    }\n  });\n\n  app.delete(\"/api/units/:id\", auth.requirePermission('units:write'), async (req, res) => {\n    try {\n      await storage.deleteUnit(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting unit:\", error);\n      res.status(500).json({ message: \"Erro ao excluir unidade\" });\n    }\n  });\n\n  // ============================================================================\n  // STAFF ROUTES\n  // ============================================================================\n\n  app.get(\"/api/staff\", auth.isAuthenticated, requirePagePermission('staff'), async (req, res) => {\n    try {\n      const staff = await storage.getStaff();\n      res.json(staff);\n    } catch (error) {\n      console.error(\"Error fetching staff:\", error);\n      res.status(500).json({ message: \"Erro ao buscar colaboradores\" });\n    }\n  });\n\n  app.get(\"/api/staff/:id\", auth.isAuthenticated, requirePagePermission('staff'), async (req, res) => {\n    try {\n      const staffMember = await storage.getStaffMember(req.params.id);\n      if (!staffMember) {\n        return res.status(404).json({ message: \"Colaborador n√£o encontrado\" });\n      }\n      res.json(staffMember);\n    } catch (error) {\n      console.error(\"Error fetching staff member:\", error);\n      res.status(500).json({ message: \"Erro ao buscar colaborador\" });\n    }\n  });\n\n  app.post(\"/api/staff\", auth.requireAdmin, requirePagePermission('staff'), async (req, res) => {\n    try {\n      const { firstName, lastName, email, password, ...staffFields } = req.body;\n      \n      // Valida√ß√£o: verificar se j√° existe um colaborador com este CPF (apenas se CPF for fornecido)\n      if (staffFields.cpf && staffFields.cpf.trim() !== '') {\n        const existingStaffByCpf = await db\n          .select()\n          .from(staff)\n          .where(eq(staff.cpf, staffFields.cpf))\n          .limit(1);\n        \n        if (existingStaffByCpf.length > 0) {\n          return res.status(400).json({ \n            message: \"J√° existe um colaborador cadastrado com este CPF\" \n          });\n        }\n      }\n      \n      // Normalizar position para min√∫sculo\n      if (staffFields.position) {\n        staffFields.position = staffFields.position.toLowerCase();\n      }\n      \n      // Mapear cargo para role automaticamente\n      const getRole = (position: string): string => {\n        switch (position?.toLowerCase()) {\n          case 'ceo':\n          case 'diretor':\n            return 'admin';\n          case 'coordenador':\n          case 'administrativo':\n          case 'financeiro':\n          case 'recepcionista':\n          case 'comercial':\n          case 'marketing':\n            return 'secretary';\n          case 'instrutor':\n            return 'teacher';\n          default:\n            return 'teacher'; // padr√£o\n        }\n      };\n      \n      const role = getRole(staffFields.position);\n      \n      // Buscar role\n      const userRole = await storage.getRoleByName(role);\n      if (!userRole) {\n        return res.status(400).json({ message: \"Role inv√°lido\" });\n      }\n\n      // Verificar se j√° existe um usu√°rio com este email\n      const existingUser = await storage.getUserByEmail(email);\n      \n      let user;\n      if (existingUser) {\n        // Atualizar o usu√°rio existente (REMOVIDA valida√ß√£o de staff duplicado por email)\n        user = await storage.updateUser(existingUser.id, {\n          firstName,\n          lastName,\n          roleId: userRole.id,\n        });\n      } else {\n        // Criar novo usu√°rio\n        const hashedPassword = await auth.hashPassword(password);\n        user = await storage.createUser({\n          firstName,\n          lastName,\n          email,\n          password: hashedPassword,\n          roleId: userRole.id,\n        });\n      }\n\n      // Processar campos de data - converter strings ISO para objetos Date\n      const processedStaffFields = { ...staffFields };\n      if (processedStaffFields.birthDate && typeof processedStaffFields.birthDate === 'string') {\n        processedStaffFields.birthDate = new Date(processedStaffFields.birthDate);\n      }\n      if (processedStaffFields.hireDate && typeof processedStaffFields.hireDate === 'string') {\n        processedStaffFields.hireDate = new Date(processedStaffFields.hireDate);\n      }\n\n      // Criar o registro de staff\n      const staffMember = await storage.createStaff({\n        userId: user.id,\n        ...processedStaffFields,\n      });\n\n      res.status(201).json(staffMember);\n    } catch (error) {\n      console.error(\"Error creating staff:\", error);\n      \n      // Verificar se √© erro de valida√ß√£o do Zod\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Dados inv√°lidos\", \n          errors: error.errors \n        });\n      }\n      \n      res.status(500).json({ message: \"Erro ao criar colaborador\" });\n    }\n  });\n\n  app.put(\"/api/staff/:id\", auth.requireAdmin, async (req, res) => {\n    try {\n      const { firstName, lastName, email, userId, ...staffFields } = req.body;\n      \n      // Atualizar usu√°rio se dados fornecidos\n      if (userId && (firstName || lastName || email)) {\n        await storage.updateUser(userId, {\n          ...(firstName && { firstName }),\n          ...(lastName && { lastName }),\n          ...(email && { email }),\n        });\n      }\n      \n      // Atualizar staff\n      const staffData = insertStaffSchema.partial().parse(staffFields);\n      const staff = await storage.updateStaff(req.params.id, staffData);\n      res.json(staff);\n    } catch (error: any) {\n      console.error(\"Error updating staff member:\", error);\n      \n      // Tratamento espec√≠fico para erro de email duplicado\n      if (error.message && error.message.includes('users_email_unique')) {\n        return res.status(400).json({ \n          message: \"Este e-mail j√° est√° cadastrado no sistema. Por favor, utilize um e-mail diferente.\" \n        });\n      }\n      \n      // Outros erros de valida√ß√£o do Zod\n      if (error.issues) {\n        const fieldErrors = error.issues.map((issue: any) => {\n          const field = issue.path.join('.');\n          return `${field}: ${issue.message}`;\n        }).join(', ');\n        return res.status(400).json({ \n          message: `Dados inv√°lidos: ${fieldErrors}` \n        });\n      }\n      \n      res.status(400).json({ message: error.message || \"Erro ao atualizar colaborador\" });\n    }\n  });\n\n  app.delete(\"/api/staff/:id\", auth.requireAdmin, async (req, res) => {\n    try {\n      await storage.deleteStaff(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting staff member:\", error);\n      res.status(500).json({ message: \"Erro ao excluir colaborador\" });\n    }\n  });\n\n  // ============================================================================\n  // STUDENT ROUTES\n  // ============================================================================\n\n  app.get(\"/api/students\", auth.isAuthenticated, requirePagePermission('students'), async (req, res) => {\n    try {\n      const students = await storage.getStudents();\n      res.json(students);\n    } catch (error) {\n      console.error(\"Error fetching students:\", error);\n      res.status(500).json({ message: \"Erro ao buscar estudantes\" });\n    }\n  });\n\n  app.get(\"/api/students/:id\", auth.isAuthenticated, requirePagePermission('students'), async (req, res) => {\n    try {\n      const student = await storage.getStudent(req.params.id);\n      if (!student) {\n        return res.status(404).json({ message: \"Estudante n√£o encontrado\" });\n      }\n      res.json(student);\n    } catch (error) {\n      console.error(\"Error fetching student:\", error);\n      res.status(500).json({ message: \"Erro ao buscar estudante\" });\n    }\n  });\n\n  app.post(\"/api/students\", auth.requireAdminOrSecretary, requirePagePermission('students'), async (req, res) => {\n    try {\n      const { firstName, lastName, email, password, guardian, ...studentFields } = req.body;\n      \n      // Verificar se CPF j√° existe (se fornecido)\n      if (studentFields.cpf && studentFields.cpf.trim() !== '') {\n        const existingStudent = await storage.getStudentByCpf(studentFields.cpf);\n        if (existingStudent) {\n          return res.status(400).json({ \n            message: \"J√° existe um aluno cadastrado com este CPF\" \n          });\n        }\n      }\n      \n      // Buscar role student\n      const studentRole = await storage.getRoleByName('student');\n      if (!studentRole) {\n        return res.status(400).json({ message: \"Role de estudante n√£o encontrado\" });\n      }\n\n      // Hash da senha\n      const hashedPassword = await auth.hashPassword(password || 'senha123');\n      \n      // Criar usu√°rio primeiro\n      const user = await storage.createUser({\n        email,\n        password: hashedPassword,\n        firstName,\n        lastName,\n        roleId: studentRole.id,\n        isActive: true,\n      });\n      \n      let guardianId = null;\n      \n      // Criar guardian se fornecido\n      if (guardian) {\n        const { financialResponsible, ...guardianFields } = guardian;\n        const guardianData = insertGuardianSchema.parse(guardianFields);\n        const createdGuardian = await storage.createGuardian(guardianData);\n        guardianId = createdGuardian.id;\n        \n        // Criar respons√°vel financeiro se fornecido\n        if (financialResponsible) {\n          const financialData = insertFinancialResponsibleSchema.parse({\n            ...financialResponsible,\n            guardianId: createdGuardian.id,\n          });\n          await storage.createFinancialResponsible(financialData);\n        }\n      }\n      \n      // Criar student com userId e guardianId\n      const studentData = insertStudentSchema.parse({\n        ...studentFields,\n        userId: user.id,\n        guardianId,\n      });\n      \n      const student = await storage.createStudent(studentData);\n      res.status(201).json(student);\n    } catch (error: any) {\n      console.error(\"Error creating student:\", error);\n      \n      // Tratamento espec√≠fico para erro de email duplicado\n      if (error.message && error.message.includes('users_email_unique')) {\n        return res.status(400).json({ \n          message: \"Este e-mail j√° est√° cadastrado no sistema. Por favor, utilize um e-mail diferente.\" \n        });\n      }\n      \n      // Outros erros de valida√ß√£o do Zod\n      if (error.issues) {\n        const fieldErrors = error.issues.map((issue: any) => {\n          const field = issue.path.join('.');\n          return `${field}: ${issue.message}`;\n        }).join(', ');\n        return res.status(400).json({ \n          message: `Dados inv√°lidos: ${fieldErrors}` \n        });\n      }\n      \n      res.status(400).json({ message: error.message || \"Erro ao cadastrar estudante\" });\n    }\n  });\n\n  app.put(\"/api/students/:id\", auth.requireAdminOrSecretary, async (req, res) => {\n    try {\n      const { firstName, lastName, email, userId, guardian, ...studentFields } = req.body;\n      \n      // Verificar se CPF j√° existe (se fornecido e diferente do atual)\n      if (studentFields.cpf && studentFields.cpf.trim() !== '') {\n        const existingStudent = await storage.getStudentByCpf(studentFields.cpf);\n        if (existingStudent && existingStudent.id !== req.params.id) {\n          return res.status(400).json({ \n            message: \"J√° existe um aluno cadastrado com este CPF\" \n          });\n        }\n      }\n      \n      // Atualizar usu√°rio se dados fornecidos\n      if (userId && (firstName || lastName || email)) {\n        await storage.updateUser(userId, {\n          ...(firstName && { firstName }),\n          ...(lastName && { lastName }),\n          ...(email && { email }),\n        });\n      }\n      \n      // Tratar atualiza√ß√µes de guardian se fornecido\n      if (guardian) {\n        const { financialResponsible, ...guardianFields } = guardian;\n        \n        // Se estudante j√° tem guardian, atualizar, sen√£o criar novo\n        const currentStudent = await storage.getStudent(req.params.id);\n        if (currentStudent?.guardianId) {\n          await storage.updateGuardian(currentStudent.guardianId, guardianFields);\n          \n          // Tratar respons√°vel financeiro\n          if (financialResponsible) {\n            const guardianWithFinancial = await storage.getGuardianWithFinancial(currentStudent.guardianId);\n            if (guardianWithFinancial?.financialResponsible) {\n              await storage.updateFinancialResponsible(guardianWithFinancial.financialResponsible.id, financialResponsible);\n            } else {\n              const financialData = insertFinancialResponsibleSchema.parse({\n                ...financialResponsible,\n                guardianId: currentStudent.guardianId,\n              });\n              await storage.createFinancialResponsible(financialData);\n            }\n          }\n        } else {\n          // Criar novo guardian\n          const guardianData = insertGuardianSchema.parse(guardianFields);\n          const createdGuardian = await storage.createGuardian(guardianData);\n          studentFields.guardianId = createdGuardian.id;\n          \n          // Criar respons√°vel financeiro se fornecido\n          if (financialResponsible) {\n            const financialData = insertFinancialResponsibleSchema.parse({\n              ...financialResponsible,\n              guardianId: createdGuardian.id,\n            });\n            await storage.createFinancialResponsible(financialData);\n          }\n        }\n      }\n      \n      // Atualizar student\n      const studentData = insertStudentSchema.partial().parse(studentFields);\n      const student = await storage.updateStudent(req.params.id, studentData);\n      res.json(student);\n    } catch (error: any) {\n      console.error(\"Error updating student:\", error);\n      \n      // Tratamento espec√≠fico para erro de email duplicado\n      if (error.message && error.message.includes('users_email_unique')) {\n        return res.status(400).json({ \n          message: \"Este e-mail j√° est√° cadastrado no sistema. Por favor, utilize um e-mail diferente.\" \n        });\n      }\n      \n      // Outros erros de valida√ß√£o do Zod\n      if (error.issues) {\n        const fieldErrors = error.issues.map((issue: any) => {\n          const field = issue.path.join('.');\n          return `${field}: ${issue.message}`;\n        }).join(', ');\n        return res.status(400).json({ \n          message: `Dados inv√°lidos: ${fieldErrors}` \n        });\n      }\n      \n      res.status(400).json({ message: error.message || \"Erro ao atualizar estudante\" });\n    }\n  });\n\n  app.delete(\"/api/students/:id\", auth.requireAdminOrSecretary, async (req, res) => {\n    try {\n      await storage.deleteStudent(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting student:\", error);\n      res.status(500).json({ message: \"Erro ao excluir estudante\" });\n    }\n  });\n\n  // ============================================================================\n  // STUDENT AREA - COURSE ENROLLMENTS (Netflix-style shelves)\n  // ============================================================================\n\n  // Get current student's course enrollments\n  app.get('/api/student/courses', auth.isAuthenticated, async (req: any, res) => {\n    try {\n      const enrollments = await storage.getStudentCourseEnrollmentsForUser(req.user.id);\n      res.json(enrollments);\n    } catch (error) {\n      console.error('Error fetching student enrollments:', error);\n      res.status(500).json({ message: 'Erro ao buscar matr√≠culas do estudante' });\n    }\n  });\n\n  // Get course details with basic books for shelves\n  app.get('/api/student/courses/:id', auth.isAuthenticated, async (req: any, res) => {\n    try {\n      const course = await storage.getCourseWithBooksBasic(req.params.id);\n      if (!course) {\n        return res.status(404).json({ message: 'Curso n√£o encontrado' });\n      }\n      res.json({ course });\n    } catch (error) {\n      console.error('Error fetching course details for student:', error);\n      res.status(500).json({ message: 'Erro ao buscar detalhes do curso' });\n    }\n  });\n\n  // ============================================================================\n  // COURSE ROUTES\n  // ============================================================================\n\n  app.get(\"/api/courses\", auth.isAuthenticated, async (req, res) => {\n    try {\n      const courses = await storage.getCourses();\n      res.json(courses);\n    } catch (error) {\n      console.error(\"Error fetching courses:\", error);\n      res.status(500).json({ message: \"Failed to fetch courses\" });\n    }\n  });\n\n  app.get(\"/api/courses/:id\", auth.isAuthenticated, async (req, res) => {\n    try {\n      const course = await storage.getCourse(req.params.id);\n      if (!course) {\n        return res.status(404).json({ message: \"Curso n√£o encontrado\" });\n      }\n      res.json(course);\n    } catch (error) {\n      console.error(\"Error fetching course:\", error);\n      res.status(500).json({ message: \"Erro ao buscar curso\" });\n    }\n  });\n\n  app.post(\"/api/courses\", auth.requireAdminOrSecretary, async (req, res) => {\n    try {\n      const courseData = insertCourseSchema.parse(req.body);\n      const course = await storage.createCourse(courseData);\n      res.status(201).json(course);\n    } catch (error: any) {\n      console.error(\"Error creating course:\", error);\n      \n      // Tratamento espec√≠fico para erros de valida√ß√£o\n      if (error.issues) {\n        const fieldErrors = error.issues.map((issue: any) => {\n          const field = issue.path.join('.');\n          return `${field}: ${issue.message}`;\n        }).join(', ');\n        return res.status(400).json({ \n          message: `Dados inv√°lidos: ${fieldErrors}` \n        });\n      }\n      \n      res.status(400).json({ message: error.message || \"Erro ao criar curso\" });\n    }\n  });\n\n  app.put(\"/api/courses/:id\", auth.requireAdminOrSecretary, async (req, res) => {\n    try {\n      const courseData = insertCourseSchema.partial().parse(req.body);\n      const course = await storage.updateCourse(req.params.id, courseData);\n      res.json(course);\n    } catch (error: any) {\n      console.error(\"Error updating course:\", error);\n      \n      // Tratamento espec√≠fico para erros de valida√ß√£o\n      if (error.issues) {\n        const fieldErrors = error.issues.map((issue: any) => {\n          const field = issue.path.join('.');\n          return `${field}: ${issue.message}`;\n        }).join(', ');\n        return res.status(400).json({ \n          message: `Dados inv√°lidos: ${fieldErrors}` \n        });\n      }\n      \n      res.status(400).json({ message: error.message || \"Erro ao atualizar curso\" });\n    }\n  });\n\n  app.delete(\"/api/courses/:id\", auth.requireAdminOrSecretary, async (req, res) => {\n    try {\n      await storage.deleteCourse(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting course:\", error);\n      res.status(500).json({ message: \"Failed to delete course\" });\n    }\n  });\n\n  // ============================================================================\n  // BOOK ROUTES\n  // ============================================================================\n\n  app.get(\"/api/books\", auth.isAuthenticated, async (req, res) => {\n    try {\n      const books = await storage.getBooks();\n      res.json(books);\n    } catch (error) {\n      console.error(\"Error fetching books:\", error);\n      res.status(500).json({ message: \"Failed to fetch books\" });\n    }\n  });\n\n  app.get(\"/api/books/:id\", auth.isAuthenticated, async (req, res) => {\n    try {\n      const book = await storage.getBook(req.params.id);\n      if (!book) {\n        return res.status(404).json({ message: \"Book not found\" });\n      }\n      res.json(book);\n    } catch (error) {\n      console.error(\"Error fetching book:\", error);\n      res.status(500).json({ message: \"Failed to fetch book\" });\n    }\n  });\n\n  app.post(\"/api/books\", auth.requireAdminOrSecretary, async (req, res) => {\n    try {\n      const bookData = insertBookSchema.parse(req.body);\n      const book = await storage.createBook(bookData);\n      res.status(201).json(book);\n    } catch (error) {\n      console.error(\"Error creating book:\", error);\n      res.status(400).json({ message: \"Invalid book data\" });\n    }\n  });\n\n  app.put(\"/api/books/:id\", auth.requireAdminOrSecretary, async (req, res) => {\n    try {\n      const bookData = insertBookSchema.partial().parse(req.body);\n      const book = await storage.updateBook(req.params.id, bookData);\n      res.json(book);\n    } catch (error) {\n      console.error(\"Error updating book:\", error);\n      res.status(400).json({ message: \"Invalid book data\" });\n    }\n  });\n\n  app.delete(\"/api/books/:id\", auth.requireAdminOrSecretary, async (req, res) => {\n    try {\n      await storage.deleteBook(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting book:\", error);\n      res.status(500).json({ message: \"Failed to delete book\" });\n    }\n  });\n\n  // PDF upload route for books\n  app.post(\"/api/books/:id/upload\", auth.requireAdminOrSecretary, bookUploads.single('pdf'), async (req, res) => {\n    try {\n      const bookId = req.params.id;\n      const file = req.file;\n\n      if (!file) {\n        return res.status(400).json({ message: \"No PDF file provided\" });\n      }\n\n      // Verificar se book existe\n      const book = await storage.getBook(bookId);\n      if (!book) {\n        return res.status(404).json({ message: \"Book not found\" });\n      }\n\n      // Atualizar book com nova URL do PDF\n      const pdfUrl = `/uploads/books/${file.filename}`;\n      const updatedBook = await storage.updateBook(bookId, { pdfUrl });\n\n      res.json({\n        message: \"PDF uploaded successfully\",\n        book: updatedBook,\n        fileInfo: {\n          filename: file.filename,\n          originalName: file.originalname,\n          size: file.size,\n          url: pdfUrl\n        }\n      });\n    } catch (error: any) {\n      console.error(\"Error uploading PDF:\", error);\n      if (error.message === 'Only PDF files are allowed!') {\n        return res.status(400).json({ message: \"Only PDF files are allowed\" });\n      }\n      res.status(500).json({ message: \"Failed to upload PDF file\" });\n    }\n  });\n\n  // ============================================================================\n  // CLASS ROUTES\n  // ============================================================================\n\n  app.get(\"/api/classes\", auth.isAuthenticated, async (req, res) => {\n    try {\n      const classes = await storage.getClasses();\n      res.json(classes);\n    } catch (error) {\n      console.error(\"Error fetching classes:\", error);\n      res.status(500).json({ message: \"Failed to fetch classes\" });\n    }\n  });\n\n  app.get(\"/api/classes/:id\", auth.isAuthenticated, async (req, res) => {\n    try {\n      const classItem = await storage.getClass(req.params.id);\n      if (!classItem) {\n        return res.status(404).json({ message: \"Class not found\" });\n      }\n      res.json(classItem);\n    } catch (error) {\n      console.error(\"Error fetching class:\", error);\n      res.status(500).json({ message: \"Failed to fetch class\" });\n    }\n  });\n\n  app.post(\"/api/classes\", auth.requireAdminOrSecretary, async (req, res) => {\n    try {\n      const classData = insertClassSchema.parse(req.body);\n      const classItem = await storage.createClass(classData);\n      res.status(201).json(classItem);\n    } catch (error) {\n      console.error(\"Error creating class:\", error);\n      res.status(400).json({ message: \"Invalid class data\" });\n    }\n  });\n\n  app.put(\"/api/classes/:id\", auth.requireAdminOrSecretary, async (req, res) => {\n    try {\n      const classData = insertClassSchema.partial().parse(req.body);\n      const classItem = await storage.updateClass(req.params.id, classData);\n      res.json(classItem);\n    } catch (error) {\n      console.error(\"Error updating class:\", error);\n      res.status(400).json({ message: \"Invalid class data\" });\n    }\n  });\n\n  app.delete(\"/api/classes/:id\", auth.requireAdminOrSecretary, async (req, res) => {\n    try {\n      await storage.deleteClass(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting class:\", error);\n      res.status(500).json({ message: \"Failed to delete class\" });\n    }\n  });\n\n  // ============================================================================\n  // TEACHER SCHEDULE ROUTES\n  // ============================================================================\n\n  app.get(\"/api/teachers\", auth.requireAdminOrSecretary, async (req, res) => {\n    try {\n      const teachers = await storage.getTeachers();\n      res.json(teachers);\n    } catch (error) {\n      console.error(\"Error fetching teachers:\", error);\n      res.status(500).json({ message: \"Erro ao buscar professores\" });\n    }\n  });\n\n  app.get(\"/api/teachers/:id/schedule\", auth.requireAdminOrSecretary, async (req, res) => {\n    try {\n      const schedule = await storage.getTeacherSchedule(req.params.id);\n      res.json(schedule);\n    } catch (error) {\n      console.error(\"Error fetching teacher schedule:\", error);\n      res.status(500).json({ message: \"Erro ao buscar hor√°rios do professor\" });\n    }\n  });\n\n  // ============================================================================\n  // TEACHER INDIVIDUAL SCHEDULE ROUTES (Nova funcionalidade)\n  // ============================================================================\n\n  // Schema para valida√ß√£o de agenda de professor\n  const teacherScheduleSchema = z.object({\n    teacherId: z.string().min(1),\n    unitId: z.string().min(1),\n    courseName: z.string().min(1),\n    dayOfWeek: z.number().min(1).max(7),\n    startTime: z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/),\n    endTime: z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/),\n    room: z.string().optional(),\n    notes: z.string().optional(),\n  });\n\n  // Criar agenda para professor (apenas admin/secret√°rio)\n  app.post(\"/api/teacher-schedule\", auth.requireAdminOrSecretary, async (req: any, res) => {\n    try {\n      const scheduleData = teacherScheduleSchema.parse(req.body);\n      const schedule = await storage.createTeacherSchedule({\n        ...scheduleData,\n        createdBy: req.user.id,\n      });\n      res.status(201).json(schedule);\n    } catch (error) {\n      console.error(\"Error creating teacher schedule:\", error);\n      res.status(400).json({ message: \"Dados inv√°lidos para agenda\" });\n    }\n  });\n\n  // Buscar agenda de um professor espec√≠fico (admin/secret√°rio/pr√≥prio professor)\n  app.get(\"/api/teacher-schedule/:teacherId\", auth.isAuthenticated, async (req: any, res) => {\n    try {\n      const { teacherId } = req.params;\n      \n      // Verificar se √© admin/secret√°rio ou o pr√≥prio professor\n      const userRole = req.user.role;\n      if (userRole !== 'admin' && userRole !== 'secretary' && req.user.id !== teacherId) {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const schedule = await storage.getTeacherIndividualSchedule(teacherId);\n      res.json(schedule);\n    } catch (error) {\n      console.error(\"Error fetching teacher individual schedule:\", error);\n      res.status(500).json({ message: \"Erro ao buscar agenda do professor\" });\n    }\n  });\n\n  // Atualizar agenda de professor (apenas admin/secret√°rio)\n  app.put(\"/api/teacher-schedule/:id\", auth.requireAdminOrSecretary, async (req: any, res) => {\n    try {\n      const scheduleData = teacherScheduleSchema.partial().parse(req.body);\n      const schedule = await storage.updateTeacherSchedule(req.params.id, scheduleData);\n      res.json(schedule);\n    } catch (error) {\n      console.error(\"Error updating teacher schedule:\", error);\n      res.status(400).json({ message: \"Dados inv√°lidos para agenda\" });\n    }\n  });\n\n  // Deletar agenda de professor (apenas admin/secret√°rio)\n  app.delete(\"/api/teacher-schedule/:id\", auth.requireAdminOrSecretary, async (req, res) => {\n    try {\n      await storage.deleteTeacherSchedule(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting teacher schedule:\", error);\n      res.status(500).json({ message: \"Erro ao excluir agenda\" });\n    }\n  });\n\n  // Buscar agenda do professor logado (para √°rea do professor)\n  app.get(\"/api/my-schedule\", auth.isAuthenticated, async (req: any, res) => {\n    try {\n      // Verificar se √© professor\n      if (req.user.role !== 'teacher') {\n        return res.status(403).json({ message: \"Acesso restrito a professores\" });\n      }\n\n      const schedule = await storage.getTeacherIndividualSchedule(req.user.id);\n      res.json(schedule);\n    } catch (error) {\n      console.error(\"Error fetching my schedule:\", error);\n      res.status(500).json({ message: \"Erro ao buscar minha agenda\" });\n    }\n  });\n\n  // ============================================================================\n  // LESSON ROUTES\n  // ============================================================================\n\n  app.get(\"/api/lessons\", auth.isAuthenticated, async (req, res) => {\n    try {\n      const lessons = await storage.getLessons();\n      res.json(lessons);\n    } catch (error) {\n      console.error(\"Error fetching lessons:\", error);\n      res.status(500).json({ message: \"Failed to fetch lessons\" });\n    }\n  });\n\n  app.get(\"/api/lessons/:id\", auth.isAuthenticated, async (req, res) => {\n    try {\n      const lesson = await storage.getLesson(req.params.id);\n      if (!lesson) {\n        return res.status(404).json({ message: \"Lesson not found\" });\n      }\n      res.json(lesson);\n    } catch (error) {\n      console.error(\"Error fetching lesson:\", error);\n      res.status(500).json({ message: \"Failed to fetch lesson\" });\n    }\n  });\n\n  app.post(\"/api/lessons\", auth.requireAdminOrSecretary, async (req, res) => {\n    try {\n      const lessonData = insertLessonSchema.parse(req.body);\n      const lesson = await storage.createLesson(lessonData);\n      res.status(201).json(lesson);\n    } catch (error) {\n      console.error(\"Error creating lesson:\", error);\n      res.status(400).json({ message: \"Invalid lesson data\" });\n    }\n  });\n\n  app.put(\"/api/lessons/:id\", auth.requireAdminOrSecretary, async (req, res) => {\n    try {\n      const lessonData = insertLessonSchema.partial().parse(req.body);\n      const lesson = await storage.updateLesson(req.params.id, lessonData);\n      res.json(lesson);\n    } catch (error) {\n      console.error(\"Error updating lesson:\", error);\n      res.status(400).json({ message: \"Invalid lesson data\" });\n    }\n  });\n\n  app.delete(\"/api/lessons/:id\", auth.requireAdminOrSecretary, async (req, res) => {\n    try {\n      await storage.deleteLesson(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting lesson:\", error);\n      res.status(500).json({ message: \"Failed to delete lesson\" });\n    }\n  });\n\n  // ============================================================================\n  // PERMISSION & ROLE ROUTES\n  // ============================================================================\n\n  app.get(\"/api/permissions\", auth.isAuthenticated, async (req, res) => {\n    try {\n      const permissions = await storage.getPermissions();\n      res.json(permissions);\n    } catch (error) {\n      console.error(\"Error fetching permissions:\", error);\n      res.status(500).json({ message: \"Failed to fetch permissions\" });\n    }\n  });\n\n  app.get(\"/api/permissions/by-category\", auth.isAuthenticated, async (req, res) => {\n    try {\n      const permissions = await storage.getPermissionsByCategory();\n      res.json(permissions);\n    } catch (error) {\n      console.error(\"Error fetching permissions by category:\", error);\n      res.status(500).json({ message: \"Failed to fetch permissions\" });\n    }\n  });\n\n  app.get(\"/api/roles\", auth.isAuthenticated, async (req, res) => {\n    try {\n      const roles = await storage.getRoles();\n      res.json(roles);\n    } catch (error) {\n      console.error(\"Error fetching roles:\", error);\n      res.status(500).json({ message: \"Failed to fetch roles\" });\n    }\n  });\n\n  // Criar novo papel (role) din√¢mico\n  const upsertRoleSchema = z.object({\n    name: z.string().min(2),\n    displayName: z.string().min(2),\n    description: z.string().optional(),\n    isSystemRole: z.boolean().optional(),\n    isActive: z.boolean().optional(),\n  });\n\n  app.post(\"/api/roles\", auth.requireAdmin, async (req, res) => {\n    try {\n      const data = upsertRoleSchema.parse(req.body);\n      const role = await storage.createRole({\n        name: data.name,\n        displayName: data.displayName,\n        description: data.description,\n        isSystemRole: data.isSystemRole ?? false,\n        isActive: data.isActive ?? true,\n      });\n      res.status(201).json(role);\n    } catch (error) {\n      console.error(\"Error creating role:\", error);\n      res.status(400).json({ message: \"Invalid role data\" });\n    }\n  });\n\n  // Atualizar papel (role)\n  app.put(\"/api/roles/:id\", auth.requireAdmin, async (req, res) => {\n    try {\n      const data = upsertRoleSchema.partial().parse(req.body);\n      const role = await storage.updateRole(req.params.id, data);\n      res.json(role);\n    } catch (error) {\n      console.error(\"Error updating role:\", error);\n      res.status(400).json({ message: \"Invalid role data\" });\n    }\n  });\n\n  // Desativar papel (role) - soft delete\n  app.delete(\"/api/roles/:id\", auth.requireAdmin, async (req, res) => {\n    try {\n      await storage.deactivateRole(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting role:\", error);\n      res.status(500).json({ message: \"Failed to delete role\" });\n    }\n  });\n\n\n  // User permissions (overrides)\n  app.get(\"/api/users/:id/permissions\", auth.requirePermission('permissions:manage'), async (req, res) => {\n    try {\n      const overrides = await storage.getUserPermissionOverrides(req.params.id);\n      res.json(overrides);\n    } catch (error) {\n      console.error(\"Error fetching user permissions:\", error);\n      res.status(500).json({ message: \"Failed to fetch user permissions\" });\n    }\n  });\n\n  const updateUserPermissionsSchema = z.object({\n    overrides: z.array(z.object({\n      permissionId: z.string(),\n      isGranted: z.boolean(),\n    }))\n  });\n\n  app.put(\"/api/users/:id/permissions\", auth.requirePermission('permissions:manage'), async (req, res) => {\n    try {\n      const { overrides } = updateUserPermissionsSchema.parse(req.body);\n      await storage.updateUserPermissions(req.params.id, overrides);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error updating user permissions:\", error);\n      res.status(400).json({ message: \"Invalid input\" });\n    }\n  });\n\n  // Get permissions for a specific role\n  app.get(\"/api/roles/:id/permissions\", auth.isAuthenticated, async (req, res) => {\n    try {\n      const rolePermissions = await storage.getRolePermissions(req.params.id);\n      res.json(rolePermissions);\n    } catch (error) {\n      console.error(\"Error fetching role permissions:\", error);\n      res.status(500).json({ message: \"Failed to fetch role permissions\" });\n    }\n  });\n\n  app.put(\"/api/roles/:id/permissions\", auth.requireAdmin, async (req, res) => {\n    try {\n      const { permissionIds } = updateRolePermissionsSchema.parse(req.body);\n      await storage.updateRolePermissions(req.params.id, permissionIds);\n      res.json({ message: \"Permissions updated successfully\" });\n    } catch (error) {\n      console.error(\"Error updating role permissions:\", error);\n      res.status(400).json({ message: \"Invalid permission data\" });\n    }\n  });\n\n  // ============================================================================\n  // PAGES ROUTES\n  // ============================================================================\n\n  // Get all pages\n  app.get(\"/api/pages\", auth.isAuthenticated, async (req, res) => {\n    try {\n      const pages = await storage.getPages();\n      res.json(pages);\n    } catch (error) {\n      console.error(\"Error fetching pages:\", error);\n      res.status(500).json({ message: \"Failed to fetch pages\" });\n    }\n  });\n\n  // Create new page\n  const upsertPageSchema = z.object({\n    name: z.string().min(2),\n    displayName: z.string().min(2),\n    route: z.string().min(1),\n    isActive: z.boolean().optional(),\n  });\n\n  app.post(\"/api/pages\", auth.requireAdmin, async (req, res) => {\n    try {\n      const data = upsertPageSchema.parse(req.body);\n      const page = await storage.createPage({\n        name: data.name,\n        displayName: data.displayName,\n        route: data.route,\n        isActive: data.isActive ?? true,\n      });\n      res.status(201).json(page);\n    } catch (error) {\n      console.error(\"Error creating page:\", error);\n      res.status(400).json({ message: \"Invalid page data\" });\n    }\n  });\n\n  // Update page\n  app.put(\"/api/pages/:id\", auth.requireAdmin, async (req, res) => {\n    try {\n      const data = upsertPageSchema.partial().parse(req.body);\n      const page = await storage.updatePage(req.params.id, data);\n      res.json(page);\n    } catch (error) {\n      console.error(\"Error updating page:\", error);\n      res.status(400).json({ message: \"Invalid page data\" });\n    }\n  });\n\n  // Delete page\n  app.delete(\"/api/pages/:id\", auth.requireAdmin, async (req, res) => {\n    try {\n      await storage.deletePage(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting page:\", error);\n      res.status(500).json({ message: \"Failed to delete page\" });\n    }\n  });\n\n  // ============================================================================\n  // ROLE PAGE PERMISSIONS ROUTES\n  // ============================================================================\n\n  // Get role page permissions\n  app.get(\"/api/roles/:id/pages\", auth.isAuthenticated, async (req, res) => {\n    try {\n      const rolePagePermissions = await storage.getRolePagePermissions(req.params.id);\n      res.json(rolePagePermissions);\n    } catch (error) {\n      console.error(\"Error fetching role page permissions:\", error);\n      res.status(500).json({ message: \"Failed to fetch role page permissions\" });\n    }\n  });\n\n  // Get allowed pages for a role\n  app.get(\"/api/roles/:id/allowed-pages\", auth.isAuthenticated, async (req, res) => {\n    try {\n      const allowedPages = await storage.getRoleAllowedPages(req.params.id);\n      res.json(allowedPages);\n    } catch (error) {\n      console.error(\"Error fetching allowed pages:\", error);\n      res.status(500).json({ message: \"Failed to fetch allowed pages\" });\n    }\n  });\n\n  // Update role page permissions\n  const updateRolePagePermissionsSchema = z.object({\n    pagePermissions: z.array(z.object({\n      pageId: z.string(),\n      canAccess: z.boolean(),\n    }))\n  });\n\n  app.put(\"/api/roles/:id/pages\", auth.requireAdmin, async (req, res) => {\n    try {\n      const { pagePermissions } = updateRolePagePermissionsSchema.parse(req.body);\n      const roleId = req.params.id;\n      \n      // Update each page permission\n      for (const permission of pagePermissions) {\n        const existing = await storage.getRolePagePermission(roleId, permission.pageId);\n        \n        if (existing) {\n          await storage.updateRolePagePermission(roleId, permission.pageId, {\n            canAccess: permission.canAccess\n          });\n        } else {\n          await storage.createRolePagePermission({\n            roleId,\n            pageId: permission.pageId,\n            canAccess: permission.canAccess\n          });\n        }\n      }\n      \n      res.json({ message: \"Page permissions updated successfully\" });\n    } catch (error) {\n      console.error(\"Error updating role page permissions:\", error);\n      res.status(400).json({ message: \"Invalid page permission data\" });\n    }\n  });\n\n  // ============================================================================\n  // SUPPORT TICKET ROUTES\n  // ============================================================================\n\n  app.get(\"/api/support/tickets\", auth.isAuthenticated, async (req, res) => {\n    try {\n      const tickets = await storage.getSupportTickets();\n      res.json(tickets);\n    } catch (error) {\n      console.error(\"Error fetching support tickets:\", error);\n      res.status(500).json({ message: \"Failed to fetch support tickets\" });\n    }\n  });\n\n  app.get(\"/api/support/tickets/:id\", auth.isAuthenticated, async (req, res) => {\n    try {\n      const ticket = await storage.getSupportTicket(req.params.id);\n      if (!ticket) {\n        return res.status(404).json({ message: \"Ticket not found\" });\n      }\n      res.json(ticket);\n    } catch (error) {\n      console.error(\"Error fetching support ticket:\", error);\n      res.status(500).json({ message: \"Failed to fetch support ticket\" });\n    }\n  });\n\n  app.post(\"/api/support/tickets\", auth.isAuthenticated, async (req: any, res) => {\n    try {\n      const ticketData = insertSupportTicketSchema.parse(req.body);\n      const ticket = await storage.createSupportTicket({\n        ...ticketData,\n        userId: req.user.id,\n      });\n      res.status(201).json(ticket);\n    } catch (error) {\n      console.error(\"Error creating support ticket:\", error);\n      res.status(400).json({ message: \"Invalid ticket data\" });\n    }\n  });\n\n  app.put(\"/api/support/tickets/:id\", auth.isAuthenticated, async (req, res) => {\n    try {\n      const ticketData = insertSupportTicketSchema.partial().parse(req.body);\n      const ticket = await storage.updateSupportTicket(req.params.id, ticketData);\n      res.json(ticket);\n    } catch (error) {\n      console.error(\"Error updating support ticket:\", error);\n      res.status(400).json({ message: \"Invalid ticket data\" });\n    }\n  });\n\n  app.post(\"/api/support/tickets/:id/responses\", auth.isAuthenticated, async (req: any, res) => {\n    try {\n      const responseData = insertSupportTicketResponseSchema.parse(req.body);\n      const response = await storage.createSupportTicketResponse({\n        ...responseData,\n        ticketId: req.params.id,\n        userId: req.user.id,\n      });\n      res.status(201).json(response);\n    } catch (error) {\n      console.error(\"Error creating support ticket response:\", error);\n      res.status(400).json({ message: \"Invalid response data\" });\n    }\n  });\n\n  // ============================================================================\n  // USER SETTINGS ROUTES\n  // ============================================================================\n\n  app.get(\"/api/user/settings\", auth.isAuthenticated, async (req: any, res) => {\n    try {\n      const settings = await storage.getUserSettings(req.user.id);\n      if (!settings) {\n        // Criar settings padr√£o se n√£o existir\n        const newSettings = await storage.createUserSettings({ userId: req.user.id });\n        return res.json(newSettings);\n      }\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error fetching user settings:\", error);\n      res.status(500).json({ message: \"Failed to fetch user settings\" });\n    }\n  });\n\n  app.put(\"/api/user/settings\", auth.isAuthenticated, async (req: any, res) => {\n    try {\n      const settingsData = insertUserSettingsSchema.partial().parse(req.body);\n      const settings = await storage.updateUserSettings(req.user.id, settingsData);\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error updating user settings:\", error);\n      res.status(400).json({ message: \"Invalid settings data\" });\n    }\n  });\n\n  // ============================================================================\n  // VITE SETUP\n  // ============================================================================\n\n  const server = createServer(app);\n\n  // Setup Vite or static serving\n  if (process.env.NODE_ENV === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  return server;\n}\n\n","size_bytes":55191},"frontend/client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"backend/server.js":{"content":"\n#!/usr/bin/env node\n\n// PM2 entry point - simply runs the compiled backend\nimport('./dist/index.js');\n","size_bytes":103},"frontend/client/src/hooks/useAuth.ts":{"content":"\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useState, useEffect } from \"react\";\nimport { apiRequest } from \"@/lib/api\";\n\ninterface User {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  role: string;\n}\n\nexport function useAuth() {\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [hasToken, setHasToken] = useState(false);\n\n  useEffect(() => {\n    const token = localStorage.getItem('authToken');\n    setHasToken(!!token);\n    setIsInitialized(true);\n  }, []);\n\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"auth\", \"user\"],\n    queryFn: async () => {\n      return await apiRequest(\"/api/auth/user\", {\n        method: \"GET\",\n      });\n    },\n    retry: false,\n    enabled: hasToken && isInitialized,\n  });\n\n  const { data: effectivePerms } = useQuery<{ permissions: { name: string }[] }>({\n    queryKey: [\"auth\", \"effective-permissions\"],\n    queryFn: async () => {\n      return await apiRequest(\"/api/auth/effective-permissions\", { method: \"GET\" });\n    },\n    retry: false,\n    enabled: !!user && hasToken && isInitialized,\n  });\n\n  return {\n    user,\n    isLoading: !isInitialized || (hasToken && isLoading),\n    isAuthenticated: !!user && !!hasToken,\n    permissions: (effectivePerms?.permissions || []).map(p => p.name),\n  };\n}\n","size_bytes":1317},"frontend/client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"frontend/client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"frontend/client/src/pages/TeacherIndividualSchedule.tsx":{"content":"import React from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Layout from \"@/components/Layout\";\nimport TeacherIndividualScheduleManager from \"@/components/TeacherIndividualScheduleManager\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nexport default function TeacherIndividualSchedule() {\n  const { user } = useAuth();\n\n  // Verificar se o usu√°rio tem permiss√£o (admin ou secretary)\n  const canManageSchedules = user?.role === 'admin' || user?.role === 'secretary';\n\n  if (!canManageSchedules) {\n    return (\n      <Layout>\n        <div className=\"p-6\">\n          <Card>\n            <CardContent className=\"py-12 text-center\">\n              <i className=\"fas fa-user-slash text-muted-foreground text-6xl mb-4\"></i>\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">Acesso Negado</h3>\n              <p className=\"text-muted-foreground\">\n                Esta √°rea √© exclusiva para administradores e secret√°rios.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout>\n      <div className=\"p-6\">\n        <div className=\"mb-6\">\n          <h1 className=\"text-3xl font-bold\">Agenda Individual dos Professores</h1>\n          <p className=\"text-muted-foreground mt-2\">\n            Gerencie a agenda individual de cada professor, incluindo hor√°rios de aulas, reuni√µes e outras atividades\n          </p>\n        </div>\n        \n        <TeacherIndividualScheduleManager />\n      </div>\n    </Layout>\n  );\n}","size_bytes":1532},"frontend/client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 96.1%);\n  --foreground: hsl(0, 0%, 17.6%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(0, 0%, 17.6%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(0, 0%, 17.6%);\n  --primary: hsl(271, 100%, 59%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(21, 100%, 51%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(0, 0%, 88.2%);\n  --muted-foreground: hsl(0, 0%, 45%);\n  --accent: hsl(271, 100%, 95%);\n  --accent-foreground: hsl(0, 0%, 17.6%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(0, 0%, 88.2%);\n  --input: hsl(0, 0%, 88.2%);\n  --ring: hsl(271, 100%, 59%);\n  --chart-1: hsl(271, 100%, 59%);\n  --chart-2: hsl(21, 100%, 51%);\n  --chart-3: hsl(213, 94%, 68%);\n  --chart-4: hsl(151, 55%, 41%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(0, 0%, 96.1%);\n  --sidebar-foreground: hsl(0, 0%, 17.6%);\n  --sidebar-primary: hsl(271, 100%, 59%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(271, 100%, 95%);\n  --sidebar-accent-foreground: hsl(271, 100%, 59%);\n  --sidebar-border: hsl(0, 0%, 88.2%);\n  --sidebar-ring: hsl(271, 100%, 59%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 16px;\n  --shadow-2xs: 0 1px 2px rgba(0, 0, 0, 0.05);\n  --shadow-xs: 0 1px 3px rgba(0, 0, 0, 0.08);\n  --shadow-sm: 0 2px 4px rgba(0, 0, 0, 0.06);\n  --shadow: 0 4px 8px rgba(0, 0, 0, 0.08);\n  --shadow-md: 0 6px 12px rgba(0, 0, 0, 0.1);\n  --shadow-lg: 0 8px 16px rgba(0, 0, 0, 0.12);\n  --shadow-xl: 0 12px 24px rgba(0, 0, 0, 0.15);\n  --shadow-2xl: 0 16px 32px rgba(0, 0, 0, 0.18);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 9%);\n  --foreground: hsl(0, 0%, 98%);\n  --card: hsl(0, 0%, 12%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --popover: hsl(0, 0%, 12%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --primary: hsl(271, 100%, 70%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(21, 100%, 60%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(0, 0%, 20%);\n  --muted-foreground: hsl(0, 0%, 65%);\n  --accent: hsl(0, 0%, 15%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62%, 30%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(0, 0%, 20%);\n  --input: hsl(0, 0%, 20%);\n  --ring: hsl(271, 100%, 70%);\n  --chart-1: hsl(271, 100%, 70%);\n  --chart-2: hsl(21, 100%, 60%);\n  --chart-3: hsl(213, 94%, 68%);\n  --chart-4: hsl(151, 55%, 41%);\n  --chart-5: hsl(341, 75%, 55%);\n  --sidebar: hsl(0, 0%, 12%);\n  --sidebar-foreground: hsl(0, 0%, 98%);\n  --sidebar-primary: hsl(271, 100%, 70%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(0, 0%, 15%);\n  --sidebar-accent-foreground: hsl(0, 0%, 98%);\n  --sidebar-border: hsl(0, 0%, 20%);\n  --sidebar-ring: hsl(271, 100%, 70%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 16px;\n  --shadow-2xs: 0px 1px 2px 0px rgba(0, 0, 0, 0.3);\n  --shadow-xs: 0px 1px 3px 0px rgba(0, 0, 0, 0.4);\n  --shadow-sm: 0px 1px 3px 0px rgba(0, 0, 0, 0.4), 0px 1px 2px -1px rgba(0, 0, 0, 0.4);\n  --shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.4), 0px 1px 2px -1px rgba(0, 0, 0, 0.4);\n  --shadow-md: 0px 4px 6px -1px rgba(0, 0, 0, 0.4), 0px 2px 4px -2px rgba(0, 0, 0, 0.4);\n  --shadow-lg: 0px 10px 15px -3px rgba(0, 0, 0, 0.4), 0px 4px 6px -4px rgba(0, 0, 0, 0.4);\n  --shadow-xl: 0px 20px 25px -5px rgba(0, 0, 0, 0.4), 0px 8px 10px -6px rgba(0, 0, 0, 0.4);\n  --shadow-2xl: 0px 25px 50px -12px rgba(0, 0, 0, 0.5);\n}\n\n.glassmorphism {\n  background: rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(15px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);\n}\n\n.glassmorphism-card {\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(20px);\n  border: 1px solid rgba(255, 255, 255, 0.3);\n  box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.1);\n}\n\n.dark .glassmorphism {\n  background: rgba(15, 23, 42, 0.8);\n  backdrop-filter: blur(20px);\n  border: 1px solid rgba(148, 163, 184, 0.1);\n  box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.6);\n}\n\n.dark .glassmorphism-card {\n  background: rgba(15, 23, 42, 0.9);\n  backdrop-filter: blur(20px);\n  border: 1px solid rgba(148, 163, 184, 0.2);\n  box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.6);\n}\n\n.theme-transition {\n  transition: background-color 0.3s ease, border-color 0.3s ease, color 0.3s ease;\n}\n\n.sidebar-hover:hover {\n  background: linear-gradient(135deg, rgba(177, 48, 255, 0.15), rgba(255, 101, 6, 0.1));\n  border-radius: var(--radius);\n}\n\n.card-hover:hover {\n  transform: translateY(-4px);\n  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);\n}\n\n.transition-smooth {\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.gradient-primary {\n  background: linear-gradient(135deg, #b130ff, #d850ff);\n}\n\n.gradient-secondary {\n  background: linear-gradient(135deg, #ff6506, #ff8533);\n}\n\n.gradient-accent {\n  background: linear-gradient(135deg, #b130ff, #ff6506);\n}\n\n.text-gradient {\n  background: linear-gradient(135deg, #b130ff, #ff6506);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n}\n\n.icon-glow {\n  filter: drop-shadow(0 0 8px rgba(177, 48, 255, 0.3));\n}\n\n.neon-border {\n  border: 1px solid transparent;\n  background: linear-gradient(var(--background), var(--background)) padding-box,\n              linear-gradient(135deg, #b130ff, #ff6506) border-box;\n}\n\n.button-hover-effect {\n  position: relative;\n  overflow: hidden;\n  transition: all 0.3s ease;\n}\n\n.button-hover-effect::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: -100%;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\n  transition: left 0.5s ease;\n}\n\n.button-hover-effect:hover::before {\n  left: 100%;\n}\n\n.button-hover-effect:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);\n}\n\n.navbar-shadow {\n  box-shadow: 0 2px 8px -2px rgba(0, 0, 0, 0.08), 0 1px 2px -1px rgba(0, 0, 0, 0.04);\n}\n\n.dark .navbar-shadow {\n  box-shadow: 0 2px 8px -2px rgba(0, 0, 0, 0.3), 0 1px 2px -1px rgba(0, 0, 0, 0.2);\n}\n\n/* For√ßa z-index m√°ximo para dropdowns */\n[data-radix-popper-content-wrapper] {\n  z-index: 999999 !important;\n}\n\n[data-radix-hover-card-content] {\n  z-index: 999999 !important;\n}\n\n/* Garante que hover cards apare√ßam sobre outros elementos */\n.hover-card-content {\n  z-index: 999999 !important;\n  position: fixed !important;\n}\n\n@keyframes twinkle {\n  0%, 100% { opacity: 0.3; transform: scale(1); }\n  50% { opacity: 1; transform: scale(1.2); }\n}\n\n@keyframes float {\n  0%, 100% { transform: translateY(0px); }\n  50% { transform: translateY(-10px); }\n}\n\n@keyframes slideInUp {\n  from {\n    opacity: 0;\n    transform: translateY(30px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes fadeInScale {\n  from {\n    opacity: 0;\n    transform: scale(0.95);\n  }\n  to {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\n\n.animate-twinkle {\n  animation: twinkle 2s ease-in-out infinite;\n}\n\n.animate-float {\n  animation: float 3s ease-in-out infinite;\n}\n\n.animate-slide-in-up {\n  animation: slideInUp 0.6s ease-out;\n}\n\n.animate-fade-in-scale {\n  animation: fadeInScale 0.5s ease-out;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Utility classes for text truncation */\n.line-clamp-1 {\n  overflow: hidden;\n  display: -webkit-box;\n  -webkit-box-orient: vertical;\n  -webkit-line-clamp: 1;\n}\n\n.line-clamp-2 {\n  overflow: hidden;\n  display: -webkit-box;\n  -webkit-box-orient: vertical;\n  -webkit-line-clamp: 2;\n}\n","size_bytes":7947},"frontend/client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"frontend/client/src/pages/Units.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Layout from \"@/components/Layout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { PageLoader, FadeIn, StaggeredFadeIn } from \"@/components/PageLoader\";\nimport { UnitModal } from \"@/components/UnitModal\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableRow } from \"@/components/ui/table\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function Units() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { isAuthenticated, isLoading: authLoading, user, permissions } = useAuth();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectedUnit, setSelectedUnit] = useState<any>(null);\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n  const [unitToDelete, setUnitToDelete] = useState<any>(null);\n  \n  // Estados para filtros\n  const [searchName, setSearchName] = useState(\"\");\n  const [selectedCity, setSelectedCity] = useState(\"\");\n  const [viewMode, setViewMode] = useState<\"card\" | \"list\">(\"card\");\n\n  const { data: units, isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/units\"],\n    retry: false,\n  });\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"NÔøΩo autorizado\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  const handleNewUnit = () => {\n    setSelectedUnit(null);\n    setIsModalOpen(true);\n  };\n\n  const handleEditUnit = (unit: any) => {\n    setSelectedUnit(unit);\n    setIsModalOpen(true);\n  };\n\n  const handleDeleteClick = (unit: any) => {\n    setUnitToDelete(unit);\n    setIsDeleteDialogOpen(true);\n  };\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/units/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/units\"] });\n      toast({\n        title: \"Sucesso!\",\n        description: \"Unidade exclu√≠da com sucesso\",\n      });\n      setIsDeleteDialogOpen(false);\n      setUnitToDelete(null);\n    },\n    onError: (error: any) => {\n      console.error(\"Erro ao excluir:\", error);\n      const errorDetails = error?.response?.data?.message || error.message;\n      toast({\n        title: \"Erro\",\n        description: `Erro ao excluir unidade: ${errorDetails}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const confirmDelete = () => {\n    if (unitToDelete) {\n      deleteMutation.mutate(unitToDelete.id);\n    }\n  };\n\n  if (authLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  // Check permissions\n  const canManageUnits = permissions?.includes('units:write') || user?.role === 'admin';\n\n  // Extrair cidades √∫nicas das unidades para o filtro\n  const cityOptions = units ? [...new Set(units\n    .map((unit: any) => unit.realEstateLocation)\n    .filter(Boolean)\n    .sort()\n  )] : [];\n\n  // Filtrar unidades baseado nos filtros aplicados\n  const filteredUnits = units?.filter((unit: any) => {\n    const matchesName = !searchName || unit.name.toLowerCase().includes(searchName.toLowerCase());\n    const matchesCity = !selectedCity || selectedCity === \"all\" || unit.realEstateLocation === selectedCity;\n    return matchesName && matchesCity;\n  });\n\n  return (\n    <Layout>\n      <PageLoader>\n        <div className=\"p-6 space-y-6\">\n          <FadeIn delay={200}>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h2 className=\"text-2xl font-semibold text-foreground\">Unidades</h2>\n                <p className=\"text-sm text-muted-foreground\">Gerencie as unidades da escola</p>\n              </div>\n\n              {canManageUnits && (\n                <Button onClick={handleNewUnit} data-testid=\"button-new-unit\">\n                  <i className=\"fas fa-plus mr-2\"></i>\n                  Nova Unidade\n                </Button>\n              )}\n            </div>\n          </FadeIn>\n\n          {/* Filtros e Controles */}\n          <FadeIn delay={300}>\n            <div className=\"flex justify-between items-center\">\n              <div></div> {/* Espa√ßo vazio √† esquerda */}\n              \n              <div className=\"flex items-center gap-3\">\n                {/* Filtro por Nome */}\n                <Input\n                  placeholder=\"Buscar por nome...\"\n                  value={searchName}\n                  onChange={(e) => setSearchName(e.target.value)}\n                  className=\"w-64\"\n                  data-testid=\"input-search-units\"\n                />\n                \n                {/* Filtro por Cidade */}\n                <Select value={selectedCity} onValueChange={setSelectedCity}>\n                  <SelectTrigger className=\"w-48\" data-testid=\"select-city-filter\">\n                    <SelectValue placeholder=\"Filtrar por cidade\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">Todas as cidades</SelectItem>\n                    {cityOptions.map((city) => (\n                      <SelectItem key={city} value={city}>\n                        {city}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                \n                {/* Modo de Visualiza√ß√£o - Apenas √çcones */}\n                 <div className=\"flex gap-1 border rounded-md p-1\">\n                   <Button\n                     variant={viewMode === \"card\" ? \"default\" : \"ghost\"}\n                     size=\"sm\"\n                     onClick={() => setViewMode(\"card\")}\n                     className=\"px-3\"\n                   >\n                     <i className=\"fas fa-th\"></i>\n                   </Button>\n                   <Button\n                     variant={viewMode === \"list\" ? \"default\" : \"ghost\"}\n                     size=\"sm\"\n                     onClick={() => setViewMode(\"list\")}\n                     className=\"px-3\"\n                   >\n                     <i className=\"fas fa-list\"></i>\n                   </Button>\n                 </div>\n              </div>\n            </div>\n          </FadeIn>\n\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {Array.from({ length: 3 }).map((_, index) => (\n                <Card key={index} className=\"animate-pulse\">\n                  <CardHeader>\n                    <div className=\"h-6 bg-muted rounded w-3/4\"></div>\n                    <div className=\"h-4 bg-muted rounded w-1/2\"></div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-2\">\n                      <div className=\"h-4 bg-muted rounded\"></div>\n                      <div className=\"h-4 bg-muted rounded w-2/3\"></div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : !filteredUnits || filteredUnits.length === 0 ? (\n            <Card>\n              <CardContent className=\"py-12 text-center\">\n                <i className=\"fas fa-building text-muted-foreground text-6xl mb-4\"></i>\n                <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n                  {(searchName || (selectedCity && selectedCity !== \"all\")) ? \"Nenhuma unidade encontrada\" : \"Nenhuma unidade cadastrada\"}\n                </h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  {(searchName || (selectedCity && selectedCity !== \"all\"))\n                    ? \"Tente ajustar os filtros de busca.\" \n                    : canManageUnits\n                    ? \"Comece criando sua primeira unidade.\"\n                    : \"N√£o h√° unidades cadastradas no sistema.\"}\n                </p>\n                {canManageUnits && !searchName && !(selectedCity && selectedCity !== \"all\") && (\n                  <Button onClick={handleNewUnit} data-testid=\"button-create-first-unit\">\n                    <i className=\"fas fa-plus mr-2\"></i>\n                    Criar primeira unidade\n                  </Button>\n                )}\n              </CardContent>\n            </Card>\n          ) : (\n            <>\n              <div className=\"flex items-center justify-between\">\n                <p className=\"text-sm text-muted-foreground\">\n                  {filteredUnits.length} {filteredUnits.length === 1 ? 'unidade encontrada' : 'unidades encontradas'}\n                </p>\n              </div>\n              \n              {viewMode === \"card\" ? (\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\" data-testid=\"units-grid\">\n                  <StaggeredFadeIn stagger={150} className=\"contents\">\n                    {filteredUnits.map((unit: any) => (\n                    <Card key={unit.id} className=\"card-hover transition-smooth h-fit\" data-testid={`card-unit-${unit.id}`}>\n                      <CardHeader className=\"pb-3\">\n                        <CardTitle className=\"flex items-center space-x-2 text-base\">\n                          <i className=\"fas fa-building text-primary text-sm\"></i>\n                          <span className=\"truncate\">{unit.name}</span>\n                        </CardTitle>\n                        <CardDescription className=\"text-xs\">\n                          {unit.address && (\n                            <span className=\"flex items-start text-xs text-muted-foreground\">\n                              <i className=\"fas fa-map-marker-alt mr-2 mt-0.5 flex-shrink-0\"></i>\n                              <span className=\"line-clamp-2\">{unit.address}</span>\n                            </span>\n                          )}\n                        </CardDescription>\n                      </CardHeader>\n                      <CardContent className=\"pt-0\">\n                        <div className=\"space-y-2\">\n                          {unit.phone && (\n                            <div className=\"flex items-center text-xs text-muted-foreground\">\n                              <i className=\"fas fa-phone mr-2 w-3 flex-shrink-0\"></i>\n                              <span className=\"truncate\">{unit.phone}</span>\n                            </div>\n                          )}\n                          {unit.email && (\n                            <div className=\"flex items-center text-xs text-muted-foreground\">\n                              <i className=\"fas fa-envelope mr-2 w-3 flex-shrink-0\"></i>\n                              <span className=\"truncate\">{unit.email}</span>\n                            </div>\n                          )}\n                        </div>\n                        {canManageUnits && (\n                          <div className=\"mt-3 flex flex-col sm:flex-row gap-2\">\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\"\n                              onClick={() => handleEditUnit(unit)}\n                              data-testid={`button-edit-${unit.id}`}\n                              className=\"flex-1 text-xs h-8\"\n                            >\n                              <i className=\"fas fa-edit mr-1\"></i>\n                              Editar\n                            </Button>\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\"\n                              onClick={() => handleDeleteClick(unit)}\n                              data-testid={`button-delete-${unit.id}`}\n                              className=\"flex-1 text-xs h-8\"\n                            >\n                              <i className=\"fas fa-trash mr-1\"></i>\n                              Excluir\n                            </Button>\n                          </div>\n                        )}\n                      </CardContent>\n                    </Card>\n                  )) || []}\n                  </StaggeredFadeIn>\n                </div>\n              ) : (\n                <div className=\"border rounded-lg overflow-hidden\">\n                  <Table>\n                    <TableHead>\n                      <TableRow>\n                        <TableCell className=\"font-semibold\">Nome</TableCell>\n                        <TableCell className=\"font-semibold\">Endere√ßo</TableCell>\n                        <TableCell className=\"font-semibold\">Telefone</TableCell>\n                        <TableCell className=\"font-semibold\">Email</TableCell>\n                        {canManageUnits && <TableCell className=\"font-semibold\">A√ß√µes</TableCell>}\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      {filteredUnits.map((unit: any) => (\n                        <TableRow key={unit.id} className=\"hover:bg-muted/50\">\n                          <TableCell className=\"font-medium\">\n                            <div className=\"flex items-center space-x-2\">\n                              <i className=\"fas fa-building text-primary text-sm\"></i>\n                              <span>{unit.name}</span>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            {unit.address ? (\n                              <div className=\"flex items-center text-sm\">\n                                <i className=\"fas fa-map-marker-alt mr-2 text-muted-foreground\"></i>\n                                <span>{unit.address}</span>\n                              </div>\n                            ) : (\n                              <span className=\"text-muted-foreground\">-</span>\n                            )}\n                          </TableCell>\n                          <TableCell>\n                            {unit.phone ? (\n                              <div className=\"flex items-center text-sm\">\n                                <i className=\"fas fa-phone mr-2 text-muted-foreground\"></i>\n                                <span>{unit.phone}</span>\n                              </div>\n                            ) : (\n                              <span className=\"text-muted-foreground\">-</span>\n                            )}\n                          </TableCell>\n                          <TableCell>\n                            {unit.email ? (\n                              <div className=\"flex items-center text-sm\">\n                                <i className=\"fas fa-envelope mr-2 text-muted-foreground\"></i>\n                                <span>{unit.email}</span>\n                              </div>\n                            ) : (\n                              <span className=\"text-muted-foreground\">-</span>\n                            )}\n                          </TableCell>\n                          {canManageUnits && (\n                            <TableCell>\n                              <div className=\"flex space-x-2\">\n                                <Button \n                                  variant=\"outline\" \n                                  size=\"sm\"\n                                  onClick={() => handleEditUnit(unit)}\n                                  data-testid={`button-edit-${unit.id}`}\n                                >\n                                  <i className=\"fas fa-edit\"></i>\n                                </Button>\n                                <Button \n                                  variant=\"outline\" \n                                  size=\"sm\"\n                                  onClick={() => handleDeleteClick(unit)}\n                                  data-testid={`button-delete-${unit.id}`}\n                                >\n                                  <i className=\"fas fa-trash\"></i>\n                                </Button>\n                              </div>\n                            </TableCell>\n                          )}\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              )}\n            </>\n          )}\n        </div>\n      </PageLoader>\n      \n      <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>\n        <AlertDialogContent data-testid=\"dialog-delete-unit\">\n          <AlertDialogHeader>\n            <AlertDialogTitle>Confirmar exclus√£o</AlertDialogTitle>\n            <AlertDialogDescription>\n              Tem certeza que deseja excluir a unidade <strong>\"{unitToDelete?.name}\"</strong>?\n              Esta a√ß√£o n√£o pode ser desfeita e todos os dados relacionados ser√£o permanentemente removidos.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancelar</AlertDialogCancel>\n            <AlertDialogAction \n              onClick={confirmDelete} \n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n              data-testid=\"button-confirm-delete\"\n            >\n              {deleteMutation.isPending ? \"Excluindo...\" : \"Excluir Unidade\"}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      <UnitModal\n        open={isModalOpen}\n        onOpenChange={setIsModalOpen}\n        unit={selectedUnit}\n      />\n    </Layout>\n  );\n}\n","size_bytes":18320},"frontend/client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"deploy.config.js":{"content":"// Configura√ß√£o de deploy para o servidor\nmodule.exports = {\n  server: {\n    host: 'erp.vision.dev.br',     // Seu servidor\n    username: 'root',              // Usu√°rio SSH (ou seu usu√°rio)\n    port: 22,\n    privateKey: '~/.ssh/id_rsa'    // Caminho para sua chave SSH\n  },\n  paths: {\n    app: '/root/erp',              // Pasta onde est√° seu projeto no servidor\n    backup: '/opt/backups/erp-idiomas'\n  },\n  // Configura√ß√£o espec√≠fica para sua estrutura atual\n  structure: {\n    frontend: 'front',             // Sua pasta frontend\n    backend: 'back'                // Sua pasta backend\n  },\n  \n  // Configura√ß√µes do Docker\n  docker: {\n    composeFile: 'docker-compose.yml',\n    services: {\n      backend: 'backend',\n      frontend: 'frontend',\n      database: 'database'\n    }\n  },\n  \n  // Configura√ß√µes de backup\n  backup: {\n    enabled: true,\n    keepDays: 7, // manter backups por 7 dias\n  }\n};","size_bytes":913},"frontend/client/src/components/StudentModal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest, extractErrorMessage } from \"@/lib/queryClient\";\nimport { validateCPF, formatCPF, formatCEP, formatPhone, fetchAddressByCEP, formatDateBR, convertBRDateToISO } from \"@/lib/cpfUtils\";\n\ninterface StudentModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  student?: any;\n}\n\nexport function StudentModal({ open, onOpenChange, student }: StudentModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const isEditing = !!student;\n\n  const [formData, setFormData] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    cpf: \"\",\n    birthDate: \"\",\n    email: \"\",\n    phone: \"\",\n    whatsapp: \"\",\n    gender: \"\",\n    cep: \"\",\n    address: \"\",\n    number: \"\",\n    complement: \"\",\n    neighborhood: \"\",\n    city: \"\",\n    billingType: \"\",\n    login: \"\",\n    password: \"\",\n  });\n\n  const [guardianData, setGuardianData] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    cpf: \"\",\n    birthDate: \"\",\n    email: \"\",\n    phone: \"\",\n    whatsapp: \"\",\n    gender: \"\",\n    cep: \"\",\n    address: \"\",\n    number: \"\",\n    complement: \"\",\n    neighborhood: \"\",\n    city: \"\",\n    relationship: \"\",\n  });\n\n  const [financialData, setFinancialData] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    cpf: \"\",\n    birthDate: \"\",\n    email: \"\",\n    phone: \"\",\n    whatsapp: \"\",\n    gender: \"\",\n    cep: \"\",\n    address: \"\",\n    number: \"\",\n    complement: \"\",\n    neighborhood: \"\",\n    city: \"\",\n    relationship: \"\",\n  });\n\n  const [cpfError, setCpfError] = useState(\"\");\n  const [guardianCpfError, setGuardianCpfError] = useState(\"\");\n  const [financialCpfError, setFinancialCpfError] = useState(\"\");\n  const [cepLoading, setCepLoading] = useState(false);\n  const [guardianCepLoading, setGuardianCepLoading] = useState(false);\n  const [financialCepLoading, setFinancialCepLoading] = useState(false);\n  const [isMinor, setIsMinor] = useState(false);\n  const [hasGuardian, setHasGuardian] = useState(false);\n  const [hasFinancialResponsible, setHasFinancialResponsible] = useState(false);\n\n  useEffect(() => {\n    if (student) {\n      setFormData({\n        firstName: student.user?.firstName || \"\",\n        lastName: student.user?.lastName || \"\",\n        cpf: student.cpf || \"\",\n        birthDate: formatDateBR(student.birthDate),\n        email: student.user?.email || \"\",\n        phone: student.phone || \"\",\n        whatsapp: student.whatsapp || \"\",\n        gender: student.gender || \"\",\n        cep: student.cep || \"\",\n        address: student.address || \"\",\n        number: student.number || \"\",\n        complement: student.complement || \"\",\n        neighborhood: student.neighborhood || \"\",\n        city: student.city || \"\",\n        billingType: student.billingType || \"\",\n        login: student.login || \"\",\n        password: \"\",\n      });\n\n      if (student.guardian) {\n        setHasGuardian(true);\n        setGuardianData({\n          firstName: student.guardian.firstName || \"\",\n          lastName: student.guardian.lastName || \"\",\n          cpf: student.guardian.cpf || \"\",\n          birthDate: formatDateBR(student.guardian.birthDate),\n          email: student.guardian.email || \"\",\n          phone: student.guardian.phone || \"\",\n          whatsapp: student.guardian.whatsapp || \"\",\n          gender: student.guardian.gender || \"\",\n          cep: student.guardian.cep || \"\",\n          address: student.guardian.address || \"\",\n          number: student.guardian.number || \"\",\n          complement: student.guardian.complement || \"\",\n          neighborhood: student.guardian.neighborhood || \"\",\n          city: student.guardian.city || \"\",\n          relationship: student.guardian.relationship || \"\",\n        });\n\n        if (student.guardian.financialResponsible) {\n          setHasFinancialResponsible(true);\n          setFinancialData({\n            firstName: student.guardian.financialResponsible.firstName || \"\",\n            lastName: student.guardian.financialResponsible.lastName || \"\",\n            cpf: student.guardian.financialResponsible.cpf || \"\",\n            birthDate: formatDateBR(student.guardian.financialResponsible.birthDate),\n            email: student.guardian.financialResponsible.email || \"\",\n            phone: student.guardian.financialResponsible.phone || \"\",\n            whatsapp: student.guardian.financialResponsible.whatsapp || \"\",\n            gender: student.guardian.financialResponsible.gender || \"\",\n            cep: student.guardian.financialResponsible.cep || \"\",\n            address: student.guardian.financialResponsible.address || \"\",\n            number: student.guardian.financialResponsible.number || \"\",\n            complement: student.guardian.financialResponsible.complement || \"\",\n            neighborhood: student.guardian.financialResponsible.neighborhood || \"\",\n            city: student.guardian.financialResponsible.city || \"\",\n            relationship: student.guardian.financialResponsible.relationship || \"\",\n          });\n        }\n      }\n    } else {\n      resetAllForms();\n    }\n  }, [student]);\n\n  const resetAllForms = () => {\n    setFormData({\n      firstName: \"\",\n      lastName: \"\",\n      cpf: \"\",\n      birthDate: \"\",\n      email: \"\",\n      phone: \"\",\n      whatsapp: \"\",\n      gender: \"\",\n      cep: \"\",\n      address: \"\",\n      number: \"\",\n      complement: \"\",\n      neighborhood: \"\",\n      city: \"\",\n      billingType: \"\",\n      login: \"\",\n      password: \"\",\n    });\n    setGuardianData({\n      firstName: \"\",\n      lastName: \"\",\n      cpf: \"\",\n      birthDate: \"\",\n      email: \"\",\n      phone: \"\",\n      whatsapp: \"\",\n      gender: \"\",\n      cep: \"\",\n      address: \"\",\n      number: \"\",\n      complement: \"\",\n      neighborhood: \"\",\n      city: \"\",\n      relationship: \"\",\n    });\n    setFinancialData({\n      firstName: \"\",\n      lastName: \"\",\n      cpf: \"\",\n      birthDate: \"\",\n      email: \"\",\n      phone: \"\",\n      whatsapp: \"\",\n      gender: \"\",\n      cep: \"\",\n      address: \"\",\n      number: \"\",\n      complement: \"\",\n      neighborhood: \"\",\n      city: \"\",\n      relationship: \"\",\n    });\n    setIsMinor(false);\n    setHasGuardian(false);\n    setHasFinancialResponsible(false);\n  };\n\n  const checkIfMinor = (birthDateStr: string) => {\n    if (!birthDateStr) return false;\n    \n    const birthDate = new Date(birthDateStr);\n    const today = new Date();\n    const age = today.getFullYear() - birthDate.getFullYear();\n    const monthDiff = today.getMonth() - birthDate.getMonth();\n    const dayDiff = today.getDate() - birthDate.getDate();\n    \n    if (monthDiff < 0 || (monthDiff === 0 && dayDiff < 0)) {\n      return (age - 1) < 18;\n    }\n    \n    return age < 18;\n  };\n\n  useEffect(() => {\n    const minor = checkIfMinor(formData.birthDate);\n    setIsMinor(minor);\n    if (minor && !isEditing) {\n      setHasGuardian(true);\n    }\n  }, [formData.birthDate, isEditing]);\n\n  const handleCPFBlur = (field: \"student\" | \"guardian\" | \"financial\") => {\n    if (field === \"student\") {\n      if (formData.cpf && !validateCPF(formData.cpf)) {\n        setCpfError(\"CPF inv√°lido\");\n        toast({\n          title: \"Erro de Valida√ß√£o - CPF do Aluno\",\n          description: `CPF do aluno inv√°lido (${formData.cpf}). Verifique o n√∫mero digitado.`,\n          variant: \"destructive\",\n        });\n      } else {\n        setCpfError(\"\");\n      }\n    } else if (field === \"guardian\") {\n      if (guardianData.cpf && !validateCPF(guardianData.cpf)) {\n        setGuardianCpfError(\"CPF inv√°lido\");\n        toast({\n          title: \"Erro de Valida√ß√£o - CPF do Respons√°vel\",\n          description: `CPF do respons√°vel inv√°lido (${guardianData.cpf}). Verifique o n√∫mero digitado.`,\n          variant: \"destructive\",\n        });\n      } else {\n        setGuardianCpfError(\"\");\n      }\n    } else if (field === \"financial\") {\n      if (financialData.cpf && !validateCPF(financialData.cpf)) {\n        setFinancialCpfError(\"CPF inv√°lido\");\n        toast({\n          title: \"Erro de Valida√ß√£o - CPF do Respons√°vel Financeiro\",\n          description: `CPF do respons√°vel financeiro inv√°lido (${financialData.cpf}). Verifique o n√∫mero digitado.`,\n          variant: \"destructive\",\n        });\n      } else {\n        setFinancialCpfError(\"\");\n      }\n    }\n  };\n\n  const handleCEPBlur = async (field: \"student\" | \"guardian\" | \"financial\") => {\n    let cep = \"\";\n    let setLoading: (loading: boolean) => void;\n    let setData: (data: any) => void;\n    let currentData: any;\n\n    if (field === \"student\") {\n      cep = formData.cep;\n      setLoading = setCepLoading;\n      setData = setFormData;\n      currentData = formData;\n    } else if (field === \"guardian\") {\n      cep = guardianData.cep;\n      setLoading = setGuardianCepLoading;\n      setData = setGuardianData;\n      currentData = guardianData;\n    } else {\n      cep = financialData.cep;\n      setLoading = setFinancialCepLoading;\n      setData = setFinancialData;\n      currentData = financialData;\n    }\n\n    if (cep.replace(/\\D/g, \"\").length === 8) {\n      setLoading(true);\n      try {\n        const data = await fetchAddressByCEP(cep);\n        setData({\n          ...currentData,\n          address: data.logradouro,\n          neighborhood: data.bairro,\n          city: `${data.localidade} - ${data.uf}`,\n        });\n        toast({\n          title: \"CEP encontrado!\",\n          description: \"Endere√ßo preenchido automaticamente\",\n        });\n      } catch (error) {\n        toast({\n          title: \"CEP n√£o encontrado\",\n          description: \"Por favor, preencha o endere√ßo manualmente\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n\n  const createMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/students\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/students\"] });\n      toast({\n        title: \"Sucesso!\",\n        description: \"Aluno cadastrado com sucesso\",\n      });\n      onOpenChange(false);\n      resetAllForms();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: extractErrorMessage(error),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"PUT\", `/api/students/${student.id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/students\"] });\n      toast({\n        title: \"Sucesso!\",\n        description: \"Aluno atualizado com sucesso\",\n      });\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: extractErrorMessage(error),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log(\"üöÄ handleSubmit chamado\");\n    console.log(\"üìã Dados do formul√°rio:\", formData);\n\n    if (formData.cpf && !validateCPF(formData.cpf)) {\n      console.log(\"‚ùå CPF do aluno inv√°lido:\", formData.cpf);\n      setCpfError(\"CPF inv√°lido\");\n      toast({\n        title: \"Erro de Valida√ß√£o - CPF do Aluno\",\n        description: `CPF do aluno inv√°lido (${formData.cpf}). Verifique o n√∫mero digitado.`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (hasGuardian && guardianData.cpf && !validateCPF(guardianData.cpf)) {\n      console.log(\"‚ùå CPF do respons√°vel inv√°lido:\", guardianData.cpf);\n      setGuardianCpfError(\"CPF inv√°lido\");\n      toast({\n        title: \"Erro de Valida√ß√£o - CPF do Respons√°vel\",\n        description: `CPF do respons√°vel inv√°lido (${guardianData.cpf}). Verifique o n√∫mero digitado.`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (hasFinancialResponsible && financialData.cpf && !validateCPF(financialData.cpf)) {\n      console.log(\"‚ùå CPF do respons√°vel financeiro inv√°lido:\", financialData.cpf);\n      setFinancialCpfError(\"CPF inv√°lido\");\n      toast({\n        title: \"Erro de Valida√ß√£o - CPF do Respons√°vel Financeiro\",\n        description: `CPF do respons√°vel financeiro inv√°lido (${financialData.cpf}). Verifique o n√∫mero digitado.`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    console.log(\"‚úÖ Valida√ß√µes passaram, preparando dados para envio\");\n    const submitData: any = {\n      userId: student?.userId,\n      firstName: formData.firstName,\n      lastName: formData.lastName,\n      email: formData.email,\n      cpf: formData.cpf.replace(/\\D/g, \"\"),\n      birthDate: convertBRDateToISO(formData.birthDate),\n      gender: formData.gender || null,\n      phone: formData.phone,\n      whatsapp: formData.whatsapp,\n      cep: formData.cep.replace(/\\D/g, \"\"),\n      address: formData.address,\n      number: formData.number,\n      complement: formData.complement,\n      neighborhood: formData.neighborhood,\n      city: formData.city,\n      billingType: formData.billingType || null,\n      login: formData.login,\n      password: formData.password || null,\n    };\n\n    console.log(\"üì§ Dados preparados:\", submitData);\n\n    if (hasGuardian) {\n      submitData.guardian = {\n        firstName: guardianData.firstName,\n        lastName: guardianData.lastName,\n        cpf: guardianData.cpf.replace(/\\D/g, \"\"),\n        birthDate: convertBRDateToISO(guardianData.birthDate),\n        email: guardianData.email,\n        phone: guardianData.phone,\n        whatsapp: guardianData.whatsapp,\n        gender: guardianData.gender || null,\n        cep: guardianData.cep.replace(/\\D/g, \"\"),\n        address: guardianData.address,\n        number: guardianData.number,\n        complement: guardianData.complement,\n        neighborhood: guardianData.neighborhood,\n        city: guardianData.city,\n        relationship: guardianData.relationship,\n      };\n\n      if (hasFinancialResponsible) {\n        submitData.guardian.financialResponsible = {\n          firstName: financialData.firstName,\n          lastName: financialData.lastName,\n          cpf: financialData.cpf.replace(/\\D/g, \"\"),\n          birthDate: convertBRDateToISO(financialData.birthDate),\n          email: financialData.email,\n          phone: financialData.phone,\n          whatsapp: financialData.whatsapp,\n          gender: financialData.gender || null,\n          cep: financialData.cep.replace(/\\D/g, \"\"),\n          address: financialData.address,\n          number: financialData.number,\n          complement: financialData.complement,\n          neighborhood: financialData.neighborhood,\n          city: financialData.city,\n          relationship: financialData.relationship,\n        };\n      }\n    }\n\n    console.log(\"üéØ Chamando muta√ß√£o:\", isEditing ? \"UPDATE\" : \"CREATE\");\n    if (isEditing) {\n      console.log(\"üìù Atualizando aluno ID:\", student.id);\n      updateMutation.mutate(submitData);\n    } else {\n      console.log(\"‚ûï Criando novo aluno\");\n      createMutation.mutate(submitData);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <div className=\"flex items-start justify-between\">\n            <div className=\"flex-1\">\n              <DialogTitle data-testid=\"modal-title\">\n                {isEditing ? \"Editar Aluno\" : \"Novo Aluno\"}\n              </DialogTitle>\n              <DialogDescription>\n                {isEditing \n                  ? \"Atualize as informa√ß√µes do aluno\" \n                  : \"Preencha os dados para cadastrar um novo aluno\"}\n              </DialogDescription>\n            </div>\n            {!isEditing && (\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => {\n                  setFormData({\n                    firstName: \"Pedro\",\n                    lastName: \"Silva Costa\",\n                    cpf: \"111.222.333-44\",\n                    birthDate: \"20/03/2010\",\n                    email: \"pedro.silva@teste.com.br\",\n                    phone: \"(11) 2345-6789\",\n                    whatsapp: \"(11) 99876-5432\",\n                    gender: \"masculino\",\n                    cep: \"04538-133\",\n                    address: \"Av. Brigadeiro Faria Lima\",\n                    number: \"2000\",\n                    complement: \"Apto 101\",\n                    neighborhood: \"Itaim Bibi\",\n                    city: \"S√£o Paulo - SP\",\n                    billingType: \"mensalidade\",\n                    login: \"pedro.silva\",\n                    password: \"teste123\",\n                  });\n                  setHasGuardian(true);\n                  setGuardianData({\n                    firstName: \"Ana\",\n                    lastName: \"Silva Costa\",\n                    cpf: \"555.666.777-88\",\n                    birthDate: \"10/08/1985\",\n                    email: \"ana.silva@teste.com.br\",\n                    phone: \"(11) 2345-6789\",\n                    whatsapp: \"(11) 99876-5432\",\n                    gender: \"feminino\",\n                    cep: \"04538-133\",\n                    address: \"Av. Brigadeiro Faria Lima\",\n                    number: \"2000\",\n                    complement: \"Apto 101\",\n                    neighborhood: \"Itaim Bibi\",\n                    city: \"S√£o Paulo - SP\",\n                    relationship: \"mae\",\n                  });\n                  toast({\n                    title: \"Dados de teste carregados\",\n                    description: \"Formul√°rio preenchido com dados exemplares (aluno menor de idade)\",\n                  });\n                }}\n                className=\"ml-2\"\n              >\n                üìù Dados de Teste\n              </Button>\n            )}\n          </div>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Informa√ß√µes Pessoais do Aluno */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold border-b pb-2\">Informa√ß√µes do Aluno</h3>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"firstName\">Nome *</Label>\n                <Input\n                  id=\"firstName\"\n                  data-testid=\"input-firstName\"\n                  required\n                  value={formData.firstName}\n                  onChange={(e) => setFormData({ ...formData, firstName: e.target.value })}\n                  onKeyDown={(e) => e.stopPropagation()}\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"lastName\">Sobrenome *</Label>\n                <Input\n                  id=\"lastName\"\n                  data-testid=\"input-lastName\"\n                  required\n                  value={formData.lastName}\n                  onChange={(e) => setFormData({ ...formData, lastName: e.target.value })}\n                  onKeyDown={(e) => e.stopPropagation()}\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"cpf\">CPF *</Label>\n                <Input\n                  id=\"cpf\"\n                  data-testid=\"input-cpf\"\n                  required\n                  placeholder=\"000.000.000-00\"\n                  value={formData.cpf}\n                  onChange={(e) => {\n                    const formatted = formatCPF(e.target.value);\n                    setFormData({ ...formData, cpf: formatted });\n                    setCpfError(\"\");\n                  }}\n                  onBlur={() => handleCPFBlur(\"student\")}\n                  maxLength={14}\n                  onKeyDown={(e) => e.stopPropagation()}\n                />\n                {cpfError && <p className=\"text-sm text-red-500\">{cpfError}</p>}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"birthDate\">Data de Nascimento *</Label>\n                <Input\n                  id=\"birthDate\"\n                  data-testid=\"input-birthDate\"\n                  type=\"text\"\n                  placeholder=\"DD/MM/AAAA\"\n                  maxLength={10}\n                  required\n                  value={formData.birthDate}\n                  onChange={(e) => setFormData({ ...formData, birthDate: formatDateBR(e.target.value) })}\n                  onKeyDown={(e) => e.stopPropagation()}\n                />\n                {isMinor && !isEditing && (\n                  <p className=\"text-sm text-amber-600\">Aluno menor de idade - cadastro de respons√°vel obrigat√≥rio</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"gender\">G√™nero *</Label>\n                <Select\n                  value={formData.gender}\n                  onValueChange={(value) => setFormData({ ...formData, gender: value })}\n                >\n                  <SelectTrigger id=\"gender\" data-testid=\"select-gender\">\n                    <SelectValue placeholder=\"Selecione...\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"masculino\">Masculino</SelectItem>\n                    <SelectItem value=\"feminino\">Feminino</SelectItem>\n                    <SelectItem value=\"outro\">Outro</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">E-mail *</Label>\n                <Input\n                  id=\"email\"\n                  data-testid=\"input-email\"\n                  type=\"email\"\n                  required\n                  value={formData.email}\n                  onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                  onKeyDown={(e) => e.stopPropagation()}\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"phone\">Contato *</Label>\n                <Input\n                  id=\"phone\"\n                  data-testid=\"input-phone\"\n                  required\n                  placeholder=\"(00) 0000-0000\"\n                  value={formData.phone}\n                  onChange={(e) => setFormData({ ...formData, phone: formatPhone(e.target.value) })}\n                  maxLength={15}\n                  onKeyDown={(e) => e.stopPropagation()}\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"whatsapp\">WhatsApp *</Label>\n                <Input\n                  id=\"whatsapp\"\n                  data-testid=\"input-whatsapp\"\n                  required\n                  placeholder=\"(00) 00000-0000\"\n                  value={formData.whatsapp}\n                  onChange={(e) => setFormData({ ...formData, whatsapp: formatPhone(e.target.value) })}\n                  maxLength={15}\n                  onKeyDown={(e) => e.stopPropagation()}\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Endere√ßo do Aluno */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold border-b pb-2\">Endere√ßo</h3>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"cep\">CEP *</Label>\n                <div className=\"flex gap-2\">\n                  <Input\n                    id=\"cep\"\n                    data-testid=\"input-cep\"\n                    required\n                    placeholder=\"00000-000\"\n                    value={formData.cep}\n                    onChange={(e) => setFormData({ ...formData, cep: formatCEP(e.target.value) })}\n                    onBlur={() => handleCEPBlur(\"student\")}\n                    maxLength={9}\n                    onKeyDown={(e) => e.stopPropagation()}\n                  />\n                  {cepLoading && <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>}\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"address\">Endere√ßo *</Label>\n                <Input\n                  id=\"address\"\n                  data-testid=\"input-address\"\n                  required\n                  value={formData.address}\n                  onChange={(e) => setFormData({ ...formData, address: e.target.value })}\n                  onKeyDown={(e) => e.stopPropagation()}\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"number\">N√∫mero *</Label>\n                <Input\n                  id=\"number\"\n                  data-testid=\"input-number\"\n                  required\n                  value={formData.number}\n                  onChange={(e) => setFormData({ ...formData, number: e.target.value })}\n                  onKeyDown={(e) => e.stopPropagation()}\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"complement\">Complemento</Label>\n                <Input\n                  id=\"complement\"\n                  data-testid=\"input-complement\"\n                  value={formData.complement}\n                  onChange={(e) => setFormData({ ...formData, complement: e.target.value })}\n                  onKeyDown={(e) => e.stopPropagation()}\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"neighborhood\">Bairro *</Label>\n                <Input\n                  id=\"neighborhood\"\n                  data-testid=\"input-neighborhood\"\n                  required\n                  value={formData.neighborhood}\n                  onChange={(e) => setFormData({ ...formData, neighborhood: e.target.value })}\n                  onKeyDown={(e) => e.stopPropagation()}\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"city\">Cidade *</Label>\n                <Input\n                  id=\"city\"\n                  data-testid=\"input-city\"\n                  required\n                  value={formData.city}\n                  onChange={(e) => setFormData({ ...formData, city: e.target.value })}\n                  onKeyDown={(e) => e.stopPropagation()}\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Informa√ß√µes de Cobran√ßa e Acesso */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold border-b pb-2\">Cobran√ßa e Acesso</h3>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"billingType\">Tipo de Cobran√ßa *</Label>\n                <Select\n                  value={formData.billingType}\n                  onValueChange={(value) => setFormData({ ...formData, billingType: value })}\n                >\n                  <SelectTrigger id=\"billingType\" data-testid=\"select-billingType\">\n                    <SelectValue placeholder=\"Selecione...\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"mensalidade\">Mensalidade</SelectItem>\n                    <SelectItem value=\"trimestral\">Trimestral</SelectItem>\n                    <SelectItem value=\"semestral\">Semestral</SelectItem>\n                    <SelectItem value=\"anual\">Anual</SelectItem>\n                    <SelectItem value=\"avulso\">Avulso</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"login\">Login *</Label>\n                <Input\n                  id=\"login\"\n                  data-testid=\"input-login\"\n                  required\n                  value={formData.login}\n                  onChange={(e) => setFormData({ ...formData, login: e.target.value })}\n                  onKeyDown={(e) => e.stopPropagation()}\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Senha {!isEditing && \"*\"}</Label>\n                <Input\n                  id=\"password\"\n                  data-testid=\"input-password\"\n                  type=\"password\"\n                  required={!isEditing}\n                  placeholder={isEditing ? \"Deixe em branco para manter a senha atual\" : \"\"}\n                  value={formData.password}\n                  onChange={(e) => setFormData({ ...formData, password: e.target.value })}\n                  onKeyDown={(e) => e.stopPropagation()}\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Respons√°vel/Tutor Legal (se menor de idade ou selecionado) */}\n          {!isMinor && !isEditing && (\n            <div className=\"flex items-center space-x-2 py-2\">\n              <Checkbox \n                id=\"hasGuardian\"\n                data-testid=\"checkbox-hasGuardian\"\n                checked={hasGuardian}\n                onCheckedChange={(checked) => setHasGuardian(!!checked)}\n              />\n              <Label htmlFor=\"hasGuardian\" className=\"cursor-pointer\">\n                Adicionar Respons√°vel/Tutor Legal\n              </Label>\n            </div>\n          )}\n\n          {hasGuardian && (\n            <div className=\"space-y-4 border-l-4 border-primary pl-4\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-lg font-semibold border-b pb-2\">Respons√°vel/Tutor Legal {isMinor && \"*\"}</h3>\n                {!isMinor && !isEditing && (\n                  <Button \n                    type=\"button\" \n                    variant=\"ghost\" \n                    size=\"sm\"\n                    onClick={() => setHasGuardian(false)}\n                    data-testid=\"button-removeGuardian\"\n                  >\n                    Remover\n                  </Button>\n                )}\n              </div>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"guardian-firstName\">Nome *</Label>\n                  <Input\n                    id=\"guardian-firstName\"\n                    data-testid=\"input-guardian-firstName\"\n                    required={hasGuardian}\n                    value={guardianData.firstName}\n                    onChange={(e) => setGuardianData({ ...guardianData, firstName: e.target.value })}\n                    onKeyDown={(e) => e.stopPropagation()}\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"guardian-lastName\">Sobrenome *</Label>\n                  <Input\n                    id=\"guardian-lastName\"\n                    data-testid=\"input-guardian-lastName\"\n                    required={hasGuardian}\n                    value={guardianData.lastName}\n                    onChange={(e) => setGuardianData({ ...guardianData, lastName: e.target.value })}\n                    onKeyDown={(e) => e.stopPropagation()}\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"guardian-cpf\">CPF *</Label>\n                  <Input\n                    id=\"guardian-cpf\"\n                    data-testid=\"input-guardian-cpf\"\n                    required={hasGuardian}\n                    placeholder=\"000.000.000-00\"\n                    value={guardianData.cpf}\n                    onChange={(e) => {\n                      const formatted = formatCPF(e.target.value);\n                      setGuardianData({ ...guardianData, cpf: formatted });\n                      setGuardianCpfError(\"\");\n                    }}\n                    onBlur={() => handleCPFBlur(\"guardian\")}\n                    maxLength={14}\n                    onKeyDown={(e) => e.stopPropagation()}\n                  />\n                  {guardianCpfError && <p className=\"text-sm text-red-500\">{guardianCpfError}</p>}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"guardian-birthDate\">Data de Nascimento *</Label>\n                  <Input\n                    id=\"guardian-birthDate\"\n                    data-testid=\"input-guardian-birthDate\"\n                    type=\"text\"\n                    placeholder=\"DD/MM/AAAA\"\n                    maxLength={10}\n                    required={hasGuardian}\n                    value={guardianData.birthDate}\n                    onChange={(e) => setGuardianData({ ...guardianData, birthDate: formatDateBR(e.target.value) })}\n                    onKeyDown={(e) => e.stopPropagation()}\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"guardian-gender\">G√™nero *</Label>\n                  <Select\n                    value={guardianData.gender}\n                    onValueChange={(value) => setGuardianData({ ...guardianData, gender: value })}\n                  >\n                    <SelectTrigger id=\"guardian-gender\" data-testid=\"select-guardian-gender\">\n                      <SelectValue placeholder=\"Selecione...\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"masculino\">Masculino</SelectItem>\n                      <SelectItem value=\"feminino\">Feminino</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"guardian-relationship\">Parentesco *</Label>\n                  <Select\n                    value={guardianData.relationship}\n                    onValueChange={(value) => setGuardianData({ ...guardianData, relationship: value })}\n                  >\n                    <SelectTrigger id=\"guardian-relationship\" data-testid=\"select-guardian-relationship\">\n                      <SelectValue placeholder=\"Selecione...\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"pai\">Pai</SelectItem>\n                      <SelectItem value=\"mae\">M√£e</SelectItem>\n                      <SelectItem value=\"tutor\">Tutor Legal</SelectItem>\n                      <SelectItem value=\"outro\">Outro</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"guardian-email\">E-mail</Label>\n                  <Input\n                    id=\"guardian-email\"\n                    data-testid=\"input-guardian-email\"\n                    type=\"email\"\n                    value={guardianData.email}\n                    onChange={(e) => setGuardianData({ ...guardianData, email: e.target.value })}\n                    onKeyDown={(e) => e.stopPropagation()}\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"guardian-phone\">Telefone *</Label>\n                  <Input\n                    id=\"guardian-phone\"\n                    data-testid=\"input-guardian-phone\"\n                    required={hasGuardian}\n                    placeholder=\"(00) 0000-0000\"\n                    value={guardianData.phone}\n                    onChange={(e) => setGuardianData({ ...guardianData, phone: formatPhone(e.target.value) })}\n                    maxLength={15}\n                    onKeyDown={(e) => e.stopPropagation()}\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"guardian-whatsapp\">WhatsApp *</Label>\n                  <Input\n                    id=\"guardian-whatsapp\"\n                    data-testid=\"input-guardian-whatsapp\"\n                    required={hasGuardian}\n                    placeholder=\"(00) 00000-0000\"\n                    value={guardianData.whatsapp}\n                    onChange={(e) => setGuardianData({ ...guardianData, whatsapp: formatPhone(e.target.value) })}\n                    maxLength={15}\n                    onKeyDown={(e) => e.stopPropagation()}\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"guardian-cep\">CEP *</Label>\n                  <div className=\"flex gap-2\">\n                    <Input\n                      id=\"guardian-cep\"\n                      data-testid=\"input-guardian-cep\"\n                      required={hasGuardian}\n                      placeholder=\"00000-000\"\n                      value={guardianData.cep}\n                      onChange={(e) => setGuardianData({ ...guardianData, cep: formatCEP(e.target.value) })}\n                      onBlur={() => handleCEPBlur(\"guardian\")}\n                      maxLength={9}\n                      onKeyDown={(e) => e.stopPropagation()}\n                    />\n                    {guardianCepLoading && <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>}\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"guardian-address\">Endere√ßo *</Label>\n                  <Input\n                    id=\"guardian-address\"\n                    data-testid=\"input-guardian-address\"\n                    required={hasGuardian}\n                    value={guardianData.address}\n                    onChange={(e) => setGuardianData({ ...guardianData, address: e.target.value })}\n                    onKeyDown={(e) => e.stopPropagation()}\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"guardian-number\">N√∫mero *</Label>\n                  <Input\n                    id=\"guardian-number\"\n                    data-testid=\"input-guardian-number\"\n                    required={hasGuardian}\n                    value={guardianData.number}\n                    onChange={(e) => setGuardianData({ ...guardianData, number: e.target.value })}\n                    onKeyDown={(e) => e.stopPropagation()}\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"guardian-complement\">Complemento</Label>\n                  <Input\n                    id=\"guardian-complement\"\n                    data-testid=\"input-guardian-complement\"\n                    value={guardianData.complement}\n                    onChange={(e) => setGuardianData({ ...guardianData, complement: e.target.value })}\n                    onKeyDown={(e) => e.stopPropagation()}\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"guardian-neighborhood\">Bairro *</Label>\n                  <Input\n                    id=\"guardian-neighborhood\"\n                    data-testid=\"input-guardian-neighborhood\"\n                    required={hasGuardian}\n                    value={guardianData.neighborhood}\n                    onChange={(e) => setGuardianData({ ...guardianData, neighborhood: e.target.value })}\n                    onKeyDown={(e) => e.stopPropagation()}\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"guardian-city\">Cidade *</Label>\n                  <Input\n                    id=\"guardian-city\"\n                    data-testid=\"input-guardian-city\"\n                    required={hasGuardian}\n                    value={guardianData.city}\n                    onChange={(e) => setGuardianData({ ...guardianData, city: e.target.value })}\n                    onKeyDown={(e) => e.stopPropagation()}\n                  />\n                </div>\n              </div>\n\n              {/* Op√ß√£o para Respons√°vel Financeiro/Avalista */}\n              <div className=\"flex items-center space-x-2 py-2\">\n                <Checkbox \n                  id=\"hasFinancialResponsible\"\n                  data-testid=\"checkbox-hasFinancialResponsible\"\n                  checked={hasFinancialResponsible}\n                  onCheckedChange={(checked) => setHasFinancialResponsible(!!checked)}\n                />\n                <Label htmlFor=\"hasFinancialResponsible\" className=\"cursor-pointer\">\n                  Adicionar Respons√°vel Legal e Financeiro/Avalista\n                </Label>\n              </div>\n            </div>\n          )}\n\n          {/* Respons√°vel Legal e Financeiro/Avalista */}\n          {hasFinancialResponsible && hasGuardian && (\n            <div className=\"space-y-4 border-l-4 border-secondary pl-4\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-lg font-semibold border-b pb-2\">Respons√°vel Legal e Financeiro/Avalista</h3>\n                <Button \n                  type=\"button\" \n                  variant=\"ghost\" \n                  size=\"sm\"\n                  onClick={() => setHasFinancialResponsible(false)}\n                  data-testid=\"button-removeFinancial\"\n                >\n                  Remover\n                </Button>\n              </div>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"financial-firstName\">Nome *</Label>\n                  <Input\n                    id=\"financial-firstName\"\n                    data-testid=\"input-financial-firstName\"\n                    required={hasFinancialResponsible}\n                    value={financialData.firstName}\n                    onChange={(e) => setFinancialData({ ...financialData, firstName: e.target.value })}\n                    onKeyDown={(e) => e.stopPropagation()}\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"financial-lastName\">Sobrenome *</Label>\n                  <Input\n                    id=\"financial-lastName\"\n                    data-testid=\"input-financial-lastName\"\n                    required={hasFinancialResponsible}\n                    value={financialData.lastName}\n                    onChange={(e) => setFinancialData({ ...financialData, lastName: e.target.value })}\n                    onKeyDown={(e) => e.stopPropagation()}\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"financial-cpf\">CPF *</Label>\n                  <Input\n                    id=\"financial-cpf\"\n                    data-testid=\"input-financial-cpf\"\n                    required={hasFinancialResponsible}\n                    placeholder=\"000.000.000-00\"\n                    value={financialData.cpf}\n                    onChange={(e) => {\n                      const formatted = formatCPF(e.target.value);\n                      setFinancialData({ ...financialData, cpf: formatted });\n                      setFinancialCpfError(\"\");\n                    }}\n                    onBlur={() => handleCPFBlur(\"financial\")}\n                    maxLength={14}\n                    onKeyDown={(e) => e.stopPropagation()}\n                  />\n                  {financialCpfError && <p className=\"text-sm text-red-500\">{financialCpfError}</p>}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"financial-birthDate\">Data de Nascimento *</Label>\n                  <Input\n                    id=\"financial-birthDate\"\n                    data-testid=\"input-financial-birthDate\"\n                    type=\"text\"\n                    placeholder=\"DD/MM/AAAA\"\n                    maxLength={10}\n                    required={hasFinancialResponsible}\n                    value={financialData.birthDate}\n                    onChange={(e) => setFinancialData({ ...financialData, birthDate: formatDateBR(e.target.value) })}\n                    onKeyDown={(e) => e.stopPropagation()}\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"financial-gender\">G√™nero *</Label>\n                  <Select\n                    value={financialData.gender}\n                    onValueChange={(value) => setFinancialData({ ...financialData, gender: value })}\n                  >\n                    <SelectTrigger id=\"financial-gender\" data-testid=\"select-financial-gender\">\n                      <SelectValue placeholder=\"Selecione...\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"masculino\">Masculino</SelectItem>\n                      <SelectItem value=\"feminino\">Feminino</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"financial-relationship\">Rela√ß√£o com Respons√°vel *</Label>\n                  <Select\n                    value={financialData.relationship}\n                    onValueChange={(value) => setFinancialData({ ...financialData, relationship: value })}\n                  >\n                    <SelectTrigger id=\"financial-relationship\" data-testid=\"select-financial-relationship\">\n                      <SelectValue placeholder=\"Selecione...\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"conjuge\">C√¥njuge</SelectItem>\n                      <SelectItem value=\"familiar\">Familiar</SelectItem>\n                      <SelectItem value=\"avalista\">Avalista</SelectItem>\n                      <SelectItem value=\"outro\">Outro</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"financial-email\">E-mail</Label>\n                  <Input\n                    id=\"financial-email\"\n                    data-testid=\"input-financial-email\"\n                    type=\"email\"\n                    value={financialData.email}\n                    onChange={(e) => setFinancialData({ ...financialData, email: e.target.value })}\n                    onKeyDown={(e) => e.stopPropagation()}\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"financial-phone\">Telefone *</Label>\n                  <Input\n                    id=\"financial-phone\"\n                    data-testid=\"input-financial-phone\"\n                    required={hasFinancialResponsible}\n                    placeholder=\"(00) 0000-0000\"\n                    value={financialData.phone}\n                    onChange={(e) => setFinancialData({ ...financialData, phone: formatPhone(e.target.value) })}\n                    maxLength={15}\n                    onKeyDown={(e) => e.stopPropagation()}\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"financial-whatsapp\">WhatsApp *</Label>\n                  <Input\n                    id=\"financial-whatsapp\"\n                    data-testid=\"input-financial-whatsapp\"\n                    required={hasFinancialResponsible}\n                    placeholder=\"(00) 00000-0000\"\n                    value={financialData.whatsapp}\n                    onChange={(e) => setFinancialData({ ...financialData, whatsapp: formatPhone(e.target.value) })}\n                    maxLength={15}\n                    onKeyDown={(e) => e.stopPropagation()}\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"financial-cep\">CEP *</Label>\n                  <div className=\"flex gap-2\">\n                    <Input\n                      id=\"financial-cep\"\n                      data-testid=\"input-financial-cep\"\n                      required={hasFinancialResponsible}\n                      placeholder=\"00000-000\"\n                      value={financialData.cep}\n                      onChange={(e) => setFinancialData({ ...financialData, cep: formatCEP(e.target.value) })}\n                      onBlur={() => handleCEPBlur(\"financial\")}\n                      maxLength={9}\n                      onKeyDown={(e) => e.stopPropagation()}\n                    />\n                    {financialCepLoading && <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>}\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"financial-address\">Endere√ßo *</Label>\n                  <Input\n                    id=\"financial-address\"\n                    data-testid=\"input-financial-address\"\n                    required={hasFinancialResponsible}\n                    value={financialData.address}\n                    onChange={(e) => setFinancialData({ ...financialData, address: e.target.value })}\n                    onKeyDown={(e) => e.stopPropagation()}\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"financial-number\">N√∫mero *</Label>\n                  <Input\n                    id=\"financial-number\"\n                    data-testid=\"input-financial-number\"\n                    required={hasFinancialResponsible}\n                    value={financialData.number}\n                    onChange={(e) => setFinancialData({ ...financialData, number: e.target.value })}\n                    onKeyDown={(e) => e.stopPropagation()}\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"financial-complement\">Complemento</Label>\n                  <Input\n                    id=\"financial-complement\"\n                    data-testid=\"input-financial-complement\"\n                    value={financialData.complement}\n                    onChange={(e) => setFinancialData({ ...financialData, complement: e.target.value })}\n                    onKeyDown={(e) => e.stopPropagation()}\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"financial-neighborhood\">Bairro *</Label>\n                  <Input\n                    id=\"financial-neighborhood\"\n                    data-testid=\"input-financial-neighborhood\"\n                    required={hasFinancialResponsible}\n                    value={financialData.neighborhood}\n                    onChange={(e) => setFinancialData({ ...financialData, neighborhood: e.target.value })}\n                    onKeyDown={(e) => e.stopPropagation()}\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"financial-city\">Cidade *</Label>\n                  <Input\n                    id=\"financial-city\"\n                    data-testid=\"input-financial-city\"\n                    required={hasFinancialResponsible}\n                    value={financialData.city}\n                    onChange={(e) => setFinancialData({ ...financialData, city: e.target.value })}\n                    onKeyDown={(e) => e.stopPropagation()}\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n\n          <DialogFooter>\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => {\n                onOpenChange(false);\n                resetAllForms();\n              }}\n              data-testid=\"button-cancel\"\n            >\n              Cancelar\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={createMutation.isPending || updateMutation.isPending}\n              data-testid=\"button-submit\"\n            >\n              {(createMutation.isPending || updateMutation.isPending) && (\n                <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n              )}\n              {isEditing ? \"Atualizar\" : \"Cadastrar\"}\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":52500},"frontend/client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"fix-database.sh":{"content":"#!/bin/bash\n\n# Script para corrigir problemas de schema no banco de dados\n# Execute este script no servidor VPS para resolver todos os problemas de colunas\n\necho \"üîß INICIANDO CORRE√á√ÉO DO BANCO DE DADOS...\"\necho \"================================================\"\n\n# Definir vari√°veis\nDATABASE_URL=\"postgresql://school_admin:v9nQm7X2kL8Z4pE1aD6R0yU3tB5C_-N@127.0.0.1:5432/school_system\"\nPOSTGRES_URL=\"postgresql://school_admin:v9nQm7X2kL8Z4pE1aD6R0yU3tB5C_-N@127.0.0.1:5432/postgres\"\n\necho \"üìã PASSO 1: Fazendo backup dos dados importantes...\"\nmkdir -p backup\npsql \"${DATABASE_URL}?sslmode=disable\" -c \"COPY (SELECT email, first_name, last_name, password_hash, role_id FROM users) TO STDOUT WITH CSV HEADER;\" > backup/users_backup.csv\npsql \"${DATABASE_URL}?sslmode=disable\" -c \"COPY (SELECT name, display_name, is_deletable FROM roles) TO STDOUT WITH CSV HEADER;\" > backup/roles_backup.csv\necho \"‚úÖ Backup conclu√≠do em ./backup/\"\n\necho \"üìã PASSO 2: Parando aplica√ß√£o...\"\npm2 stop all\necho \"‚úÖ Aplica√ß√£o parada\"\n\necho \"üìã PASSO 3: Recriando banco de dados...\"\npsql \"${POSTGRES_URL}?sslmode=disable\" -c \"DROP DATABASE IF EXISTS school_system;\"\npsql \"${POSTGRES_URL}?sslmode=disable\" -c \"CREATE DATABASE school_system;\"\necho \"‚úÖ Banco recriado\"\n\necho \"üìã PASSO 4: Navegando para diret√≥rio backend...\"\ncd backend\n\necho \"üìã PASSO 5: Limpando cache do Drizzle...\"\nrm -rf .drizzle\nrm -rf node_modules/.cache\necho \"‚úÖ Cache limpo\"\n\necho \"üìã PASSO 6: Aplicando migra√ß√µes do Drizzle...\"\nnpx drizzle-kit push --force\necho \"‚úÖ Migra√ß√µes aplicadas\"\n\necho \"üìã PASSO 7: Executando seed para recriar dados b√°sicos...\"\nnpm run seed\necho \"‚úÖ Seed executado\"\n\necho \"üìã PASSO 8: Compilando TypeScript...\"\nnpm run build\necho \"‚úÖ TypeScript compilado\"\n\necho \"üìã PASSO 9: Reiniciando aplica√ß√£o...\"\npm2 start all\necho \"‚úÖ Aplica√ß√£o reiniciada\"\n\necho \"üìã PASSO 10: Verificando status...\"\nsleep 3\npm2 status\necho \"\"\n\necho \"üìã PASSO 11: Testando conex√£o com banco...\"\npsql \"${DATABASE_URL}?sslmode=disable\" -c \"SELECT COUNT(*) as total_users FROM users;\"\npsql \"${DATABASE_URL}?sslmode=disable\" -c \"SELECT name, is_deletable FROM roles ORDER BY name;\"\npsql \"${DATABASE_URL}?sslmode=disable\" -c \"\\d units\" | grep franchisee_type\necho \"\"\n\necho \"üéâ CORRE√á√ÉO CONCLU√çDA!\"\necho \"================================================\"\necho \"‚úÖ Banco de dados recriado com schema correto\"\necho \"‚úÖ Dados b√°sicos inseridos via seed\"\necho \"‚úÖ Aplica√ß√£o reiniciada\"\necho \"\"\necho \"üîë USU√ÅRIOS PADR√ÉO CRIADOS:\"\necho \"   - admin@escola.com (senha: admin123)\"\necho \"   - admin@demo.com (senha: demo123)\"\necho \"\"\necho \"üìä VERIFICAR LOGS:\"\necho \"   pm2 logs --lines 20\"\necho \"\"\necho \"üåê TESTAR LOGIN:\"\necho \"   Acesse a aplica√ß√£o e teste o login\"\necho \"\"\necho \"üìÅ BACKUP DOS DADOS ANTIGOS:\"\necho \"   Dispon√≠vel em ./backup/\"","size_bytes":2848},"frontend/client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"backend/ecosystem.config.js":{"content":"module.exports = {\n  apps: [{\n    name: 'erp-idiomas-backend',\n    script: 'dist/server.js',\n    instances: 1,\n    autorestart: true,\n    watch: false,\n    max_memory_restart: '1G',\n    env: {\n      NODE_ENV: 'production',\n      PORT: 3000\n    },\n    error_file: './logs/err.log',\n    out_file: './logs/out.log',\n    log_file: './logs/combined.log',\n    time: true\n  }]\n};","size_bytes":372},"frontend/client/src/components/UserPermissionsModal.tsx":{"content":"import { useEffect, useMemo, useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\ninterface UserPermissionsModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  userId: string | null;\n  userDisplayName?: string;\n}\n\nexport default function UserPermissionsModal({ open, onOpenChange, userId, userDisplayName }: UserPermissionsModalProps) {\n  const { toast } = useToast();\n\n  const { data: allPermissions } = useQuery<any[]>({\n    queryKey: [\"/api/permissions\"],\n    enabled: open,\n  });\n\n  const { data: overrides } = useQuery<any[]>({\n    queryKey: [\"/api/users\", userId, \"permissions\"],\n    enabled: open && !!userId,\n    queryFn: async () => await apiRequest(\"GET\", `/api/users/${userId}/permissions`),\n  });\n\n  const [search, setSearch] = useState(\"\");\n  const [granted, setGranted] = useState<Set<string>>(new Set());\n  const [denied, setDenied] = useState<Set<string>>(new Set());\n  const [tab, setTab] = useState<\"grant\" | \"deny\">(\"grant\");\n\n  useEffect(() => {\n    if (!overrides) return;\n    const g = new Set<string>();\n    const d = new Set<string>();\n    for (const ov of overrides) {\n      if (ov.isGranted) g.add(ov.permissionId);\n      else d.add(ov.permissionId);\n    }\n    setGranted(g);\n    setDenied(d);\n  }, [overrides]);\n\n  const filteredPermissions = useMemo(() => {\n    if (!allPermissions) return [] as any[];\n    if (!search.trim()) return allPermissions;\n    const s = search.toLowerCase();\n    return allPermissions.filter((p: any) =>\n      (p.displayName || p.name).toLowerCase().includes(s)\n      || (p.description || \"\").toLowerCase().includes(s)\n      || (p.name || \"\").toLowerCase().includes(s)\n    );\n  }, [allPermissions, search]);\n\n  const toggleGrant = (permissionId: string) => {\n    const g = new Set(granted);\n    const d = new Set(denied);\n    if (g.has(permissionId)) g.delete(permissionId); else g.add(permissionId);\n    // se marcar grant, remove deny\n    d.delete(permissionId);\n    setGranted(g);\n    setDenied(d);\n  };\n\n  const toggleDeny = (permissionId: string) => {\n    const g = new Set(granted);\n    const d = new Set(denied);\n    if (d.has(permissionId)) d.delete(permissionId); else d.add(permissionId);\n    // se marcar deny, remove grant\n    g.delete(permissionId);\n    setDenied(d);\n    setGranted(g);\n  };\n\n  const saveMutation = useMutation({\n    mutationFn: async () => {\n      if (!userId) return;\n      const overrides = [\n        ...Array.from(granted).map((id) => ({ permissionId: id, isGranted: true })),\n        ...Array.from(denied).map((id) => ({ permissionId: id, isGranted: false })),\n      ];\n      await apiRequest(\"PUT\", `/api/users/${userId}/permissions`, { overrides });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\", userId, \"permissions\"] });\n      toast({ title: \"Sucesso!\", description: \"Permiss√µes do usu√°rio atualizadas.\" });\n      onOpenChange(false);\n    },\n    onError: (err: any) => {\n      toast({ title: \"Erro\", description: err?.message || \"Falha ao salvar permiss√µes\", variant: \"destructive\" });\n    }\n  });\n\n  const permissionsList = (items: any[], isGrantList: boolean) => (\n    <div className=\"space-y-2 max-h-[420px] overflow-auto pr-1\">\n      {items.map((permission) => (\n        <div key={permission.id} className=\"flex items-center space-x-2\">\n          <Checkbox\n            id={permission.id}\n            checked={isGrantList ? granted.has(permission.id) : denied.has(permission.id)}\n            onCheckedChange={() => (isGrantList ? toggleGrant(permission.id) : toggleDeny(permission.id))}\n            data-testid={`checkbox-userperm-${isGrantList ? 'grant' : 'deny'}-${permission.name}`}\n          />\n          <Label htmlFor={permission.id} className=\"text-sm cursor-pointer select-none\">\n            {permission.displayName ?? permission.name}\n            {permission.description && (\n              <span className=\"text-xs text-muted-foreground ml-2\">‚Äî {permission.description}</span>\n            )}\n          </Label>\n        </div>\n      ))}\n    </div>\n  );\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-xl\">\n        <DialogHeader>\n          <DialogTitle>Permiss√µes de {userDisplayName || 'Usu√°rio'}</DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-3\">\n          <div className=\"flex items-center gap-2\">\n            <Input\n              placeholder=\"Pesquisar permiss√µes...\"\n              value={search}\n              onChange={(e) => setSearch(e.target.value)}\n            />\n          </div>\n\n          <Tabs value={tab} onValueChange={(v) => setTab(v as any)}>\n            <TabsList className=\"grid grid-cols-2 w-full\">\n              <TabsTrigger value=\"grant\">Conceder</TabsTrigger>\n              <TabsTrigger value=\"deny\">Revogar</TabsTrigger>\n            </TabsList>\n            <TabsContent value=\"grant\">\n              {permissionsList(filteredPermissions, true)}\n            </TabsContent>\n            <TabsContent value=\"deny\">\n              {permissionsList(filteredPermissions, false)}\n            </TabsContent>\n          </Tabs>\n        </div>\n\n        <DialogFooter>\n          <Button variant=\"outline\" onClick={() => onOpenChange(false)}>Cancelar</Button>\n          <Button onClick={() => saveMutation.mutate()} disabled={saveMutation.isPending}>\n            {saveMutation.isPending ? 'Salvando...' : 'Salvar'}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n","size_bytes":5996},"frontend/client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"backend/server/index.js":{"content":"import dotenv from \"dotenv\";\nimport express from \"express\";\nimport cors from \"cors\";\nimport { registerRoutes } from \"./routes.js\";\n// Load .env file, overriding empty environment variables\nconst envConfig = dotenv.config();\nif (envConfig.parsed) {\n    Object.keys(envConfig.parsed).forEach((key) => {\n        if (!process.env[key] || process.env[key]?.trim() === '') {\n            process.env[key] = envConfig.parsed[key];\n        }\n    });\n}\nconst app = express();\napp.set('trust proxy', 1);\n// CORS configuration for separated frontend/backend\nconst allowedOrigins = [\n    'https://erp.vision.dev.br',\n    'http://erp.vision.dev.br',\n    'https://erp.vision.dev.br:5051',\n    'http://erp.vision.dev.br:5051',\n    'https://erpapi.vision.dev.br',\n    'http://erpapi.vision.dev.br',\n    'https://erpapi.vision.dev.br:5052',\n    'http://erpapi.vision.dev.br:5052',\n    'http://localhost:5051',\n    'http://localhost:5052',\n    'http://127.0.0.1:5051',\n    'http://127.0.0.1:5052',\n    process.env.FRONTEND_URL,\n    process.env.REPL_SLUG ? `https://${process.env.REPL_SLUG}.${process.env.REPL_OWNER}.repl.co` : null,\n    process.env.REPLIT_DEV_DOMAIN ? `https://${process.env.REPLIT_DEV_DOMAIN}` : null\n].filter(Boolean);\nconsole.log('üîß CORS Origins permitidas:', allowedOrigins);\n// Function to check if origin is allowed\nfunction isOriginAllowed(origin) {\n    // Check exact match\n    if (allowedOrigins.includes(origin)) {\n        return true;\n    }\n    // Check if it's a Replit dev domain (with any port)\n    if (origin.includes('.replit.dev')) {\n        return true;\n    }\n    // Check localhost with any port\n    if (origin.match(/^https?:\\/\\/(localhost|127\\.0\\.0\\.1)(:\\d+)?$/)) {\n        return true;\n    }\n    return false;\n}\n// OPTIONS preflight handler ANTES do CORS (prioridade m√°xima)\napp.options('*', (req, res) => {\n    const origin = req.headers.origin || '';\n    const ok = isOriginAllowed(origin);\n    res.header('Vary', 'Origin');\n    res.header('Access-Control-Allow-Origin', ok ? origin : 'https://erp.vision.dev.br');\n    res.header('Access-Control-Allow-Credentials', 'true');\n    res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, PATCH, DELETE, OPTIONS');\n    res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With');\n    res.header('Access-Control-Max-Age', '86400');\n    return res.sendStatus(204);\n});\napp.use(cors({\n    origin: (origin, callback) => {\n        console.log('üåê Requisi√ß√£o de origin:', origin);\n        // Permitir requisi√ß√µes sem origin (mobile apps, postman, etc)\n        if (!origin) {\n            console.log('‚úÖ Origin undefined - permitindo');\n            return callback(null, true);\n        }\n        // Verificar se a origin est√° permitida\n        if (isOriginAllowed(origin)) {\n            console.log('‚úÖ Origin permitida:', origin);\n            return callback(null, true);\n        }\n        console.log('‚ùå Origin rejeitada:', origin);\n        callback(new Error(`CORS: Origin ${origin} not allowed`));\n    },\n    credentials: true,\n    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n    allowedHeaders: ['Content-Type', 'Authorization', 'Cookie', 'X-Requested-With'],\n    optionsSuccessStatus: 200\n}));\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\nfunction log(message) {\n    const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n        hour12: false,\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n        second: \"2-digit\",\n    });\n    console.log(`${formattedTime} [express] ${message}`);\n}\napp.use((req, res, next) => {\n    const start = Date.now();\n    const path = req.path;\n    let capturedJsonResponse = undefined;\n    const originalResJson = res.json;\n    res.json = function (bodyJson, ...args) {\n        capturedJsonResponse = bodyJson;\n        return originalResJson.apply(res, [bodyJson, ...args]);\n    };\n    res.on(\"finish\", () => {\n        const duration = Date.now() - start;\n        if (path.startsWith(\"/api\")) {\n            let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n            if (capturedJsonResponse) {\n                logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n            }\n            if (logLine.length > 80) {\n                logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n            }\n            log(logLine);\n        }\n    });\n    next();\n});\n(async () => {\n    const server = await registerRoutes(app);\n    app.use((err, _req, res, _next) => {\n        const status = err.status || err.statusCode || 500;\n        const message = err.message || \"Internal Server Error\";\n        res.status(status).json({ message });\n        throw err;\n    });\n    const port = parseInt(process.env.PORT || \"3000\");\n    server.listen(port, \"0.0.0.0\", () => {\n        log(`Backend API serving on port ${port}`);\n    });\n})();\n","size_bytes":4842},"frontend/client/src/lib/cpfUtils.ts":{"content":"export function validateCPF(cpf: string): boolean {\n  const cleanCPF = cpf.replace(/\\D/g, '');\n  \n  if (cleanCPF.length !== 11) return false;\n  \n  if (/^(\\d)\\1{10}$/.test(cleanCPF)) return false;\n  \n  let sum = 0;\n  let remainder;\n  \n  for (let i = 1; i <= 9; i++) {\n    sum += parseInt(cleanCPF.substring(i - 1, i)) * (11 - i);\n  }\n  \n  remainder = (sum * 10) % 11;\n  if (remainder === 10 || remainder === 11) remainder = 0;\n  if (remainder !== parseInt(cleanCPF.substring(9, 10))) return false;\n  \n  sum = 0;\n  for (let i = 1; i <= 10; i++) {\n    sum += parseInt(cleanCPF.substring(i - 1, i)) * (12 - i);\n  }\n  \n  remainder = (sum * 10) % 11;\n  if (remainder === 10 || remainder === 11) remainder = 0;\n  if (remainder !== parseInt(cleanCPF.substring(10, 11))) return false;\n  \n  return true;\n}\n\nexport function formatCPF(cpf: string): string {\n  const cleanCPF = cpf.replace(/\\D/g, '');\n  return cleanCPF.replace(/(\\d{3})(\\d{3})(\\d{3})(\\d{2})/, '$1.$2.$3-$4');\n}\n\nexport function formatCEP(cep: string): string {\n  const cleanCEP = cep.replace(/\\D/g, '');\n  return cleanCEP.replace(/(\\d{5})(\\d{3})/, '$1-$2');\n}\n\nexport function formatPhone(phone: string): string {\n  const cleanPhone = phone.replace(/\\D/g, '');\n  \n  if (cleanPhone.length === 11) {\n    return cleanPhone.replace(/(\\d{2})(\\d{5})(\\d{4})/, '($1) $2-$3');\n  } else if (cleanPhone.length === 10) {\n    return cleanPhone.replace(/(\\d{2})(\\d{4})(\\d{4})/, '($1) $2-$3');\n  }\n  \n  return phone;\n}\n\nexport async function fetchAddressByCEP(cep: string): Promise<{\n  logradouro: string;\n  bairro: string;\n  localidade: string;\n  uf: string;\n  erro?: boolean;\n}> {\n  const cleanCEP = cep.replace(/\\D/g, '');\n  \n  if (cleanCEP.length !== 8) {\n    throw new Error('CEP inv√°lido');\n  }\n  \n  const response = await fetch(`https://viacep.com.br/ws/${cleanCEP}/json/`);\n  const data = await response.json();\n  \n  if (data.erro) {\n    throw new Error('CEP n√£o encontrado');\n  }\n  \n  return data;\n}\n\nexport function formatDateToInput(date: any): string {\n  if (!date) return \"\";\n  \n  try {\n    const dateObj = new Date(date);\n    \n    if (isNaN(dateObj.getTime())) {\n      return \"\";\n    }\n    \n    // Retorna no formato YYYY-MM-DD para input type=\"date\"\n    return dateObj.toISOString().slice(0, 10);\n  } catch (error) {\n    console.error('Error formatting date to input:', error);\n    return \"\";\n  }\n}\n\nexport function formatDateToISO(dateString: string): string | null {\n  if (!dateString) return null;\n  \n  try {\n    // Se j√° est√° no formato YYYY-MM-DD (do input date), converte diretamente\n    const dateObj = new Date(dateString + 'T00:00:00.000Z');\n    \n    if (isNaN(dateObj.getTime())) {\n      return null;\n    }\n    \n    return dateObj.toISOString();\n  } catch (error) {\n    console.error('Error formatting date to ISO:', error);\n    return null;\n  }\n}\n\n// Nova fun√ß√£o para formatar data brasileira (DD/MM/YYYY)\nexport function formatDateBR(dateString: string): string {\n  if (!dateString) return \"\";\n  \n  // Remove caracteres n√£o num√©ricos\n  const numbers = dateString.replace(/\\D/g, \"\");\n  \n  // Aplica m√°scara DD/MM/YYYY\n  if (numbers.length <= 2) {\n    return numbers;\n  } else if (numbers.length <= 4) {\n    return numbers.replace(/(\\d{2})(\\d{0,2})/, \"$1/$2\");\n  } else {\n    return numbers.replace(/(\\d{2})(\\d{2})(\\d{0,4})/, \"$1/$2/$3\").slice(0, 10);\n  }\n}\n\n// Fun√ß√£o para converter data brasileira (DD/MM/YYYY) para formato ISO\nexport function convertBRDateToISO(brDate: string): string | null {\n  if (!brDate) return null;\n  \n  // Remove caracteres n√£o num√©ricos\n  const numbers = brDate.replace(/\\D/g, \"\");\n  \n  // Verifica se tem 8 d√≠gitos (DDMMYYYY)\n  if (numbers.length !== 8) return null;\n  \n  const day = numbers.slice(0, 2);\n  const month = numbers.slice(2, 4);\n  const year = numbers.slice(4, 8);\n  \n  // Valida dia, m√™s e ano\n  const dayNum = parseInt(day);\n  const monthNum = parseInt(month);\n  const yearNum = parseInt(year);\n  \n  if (dayNum < 1 || dayNum > 31) return null;\n  if (monthNum < 1 || monthNum > 12) return null;\n  if (yearNum < 1900 || yearNum > 2100) return null;\n  \n  try {\n    // Cria data no formato ISO (YYYY-MM-DD)\n    const isoDate = `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;\n    const dateObj = new Date(isoDate + 'T00:00:00.000Z');\n    \n    if (isNaN(dateObj.getTime())) {\n      return null;\n    }\n    \n    return dateObj.toISOString();\n  } catch (error) {\n    console.error('Error converting BR date to ISO:', error);\n    return null;\n  }\n}\n\n// Fun√ß√£o para exibir datas no formato brasileiro DD/MM/AAAA\nexport function displayDateBR(date: string | Date | null | undefined): string {\n  if (!date) return \"-\";\n  \n  try {\n    const dateObj = typeof date === 'string' ? new Date(date) : date;\n    \n    if (isNaN(dateObj.getTime())) {\n      return \"-\";\n    }\n    \n    return dateObj.toLocaleDateString('pt-BR');\n  } catch (error) {\n    console.error('Error displaying date in BR format:', error);\n    return \"-\";\n  }\n}\n","size_bytes":4951},"backend/server/vite.js":{"content":"import express from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { nanoid } from \"nanoid\";\nimport { fileURLToPath } from \"url\";\nconst viteLogger = createLogger();\n// __dirname compat√≠vel com ESM\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\nexport function log(message, source = \"express\") {\n    const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n        hour: \"numeric\",\n        minute: \"2-digit\",\n        second: \"2-digit\",\n        hour12: true,\n    });\n    console.log(`${formattedTime} [${source}] ${message}`);\n}\nexport async function setupVite(app, server) {\n    const frontendRoot = path.resolve(__dirname, \"..\", \"..\", \"frontend\");\n    const serverOptions = {\n        middlewareMode: true,\n        hmr: { server },\n        allowedHosts: true,\n    };\n    const vite = await createViteServer({\n        root: path.join(frontendRoot, \"client\"),\n        configFile: path.join(frontendRoot, \"vite.config.ts\"),\n        customLogger: {\n            ...viteLogger,\n            error: (msg, options) => {\n                viteLogger.error(msg, options);\n                process.exit(1);\n            },\n        },\n        server: serverOptions,\n        appType: \"custom\",\n    });\n    app.use(vite.middlewares);\n    app.use(\"*\", async (req, res, next) => {\n        const url = req.originalUrl;\n        try {\n            const clientTemplate = path.resolve(__dirname, \"..\", \"..\", \"frontend\", \"client\", \"index.html\");\n            // sempre recarrega o index.html do disco\n            let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n            template = template.replace(`src=\"/src/main.tsx\"`, `src=\"/src/main.tsx?v=${nanoid()}\"`);\n            const page = await vite.transformIndexHtml(url, template);\n            res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n        }\n        catch (e) {\n            vite.ssrFixStacktrace(e);\n            next(e);\n        }\n    });\n}\nexport function serveStatic(app) {\n    // No Docker, o frontend roda em container separado\n    // Apenas servir uma p√°gina simples indicando que o backend est√° funcionando\n    app.get('/', (req, res) => {\n        res.json({ \n            message: 'ERP Backend est√° funcionando!', \n            status: 'ok',\n            timestamp: new Date().toISOString()\n        });\n    });\n}\n","size_bytes":2431},"frontend/client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"frontend/client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"frontend/client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"backend/seed-journey-course.js":{"content":"import dotenv from \"dotenv\";\nimport pkg from \"pg\";\nconst { Pool } = pkg;\n\ndotenv.config();\n\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n});\n\n// Fun√ß√£o para criar o curso Journey\nasync function createJourneyCourse(client) {\n  // Verificar se o curso j√° existe\n  const existingCourse = await client.query(`\n    SELECT id, name FROM courses WHERE name = $1\n  `, ['Journey - English for Life']);\n  \n  if (existingCourse.rows.length > 0) {\n    console.log(\"‚ö†Ô∏è  Curso Journey j√° existe, usando o existente\");\n    return existingCourse.rows[0];\n  }\n  \n  const courseResult = await client.query(`\n    INSERT INTO courses (id, name, description, language, level, duration, price, is_active, created_at, updated_at)\n    VALUES (gen_random_uuid(), $1, $2, $3, $4, $5, $6, true, NOW(), NOW())\n    RETURNING id, name\n  `, [\n    'Journey - English for Life',\n    'Curso completo de ingl√™s baseado em v√≠deos interativos e atividades pr√°ticas',\n    'English',\n    'intermediate',\n    180, // 180 horas\n    0 // gr√°tis para demo\n  ]);\n  \n  return courseResult.rows[0];\n}\n\n// Fun√ß√£o para criar Book One\nasync function createBookOne(client, courseId) {\n  const bookResult = await client.query(`\n    INSERT INTO books (id, course_id, name, description, color, display_order, total_days, is_active, created_at, updated_at)\n    VALUES (gen_random_uuid(), $1, $2, $3, $4, $5, $6, true, NOW(), NOW())\n    RETURNING id, name\n  `, [\n    courseId,\n    'Book One',\n    '1 hora semanal - Unidades 01 a 10',\n    '#3b82f6', // azul\n    1,\n    60 // 10 units x 6 dias\n  ]);\n  \n  const book = bookResult.rows[0];\n  \n  // Criar Units do Book One (10 units + checkpoint + review)\n  const units = [];\n  for (let i = 1; i <= 10; i++) {\n    const unitResult = await client.query(`\n      INSERT INTO course_units (id, book_id, name, description, display_order, unit_type, is_active, created_at, updated_at)\n      VALUES (gen_random_uuid(), $1, $2, $3, $4, 'lesson', true, NOW(), NOW())\n      RETURNING id, name\n    `, [\n      book.id,\n      `Unit ${String(i).padStart(2, '0')}`,\n      `Unidade ${i} - 6 dias de contato com v√≠deo + atividade`,\n      i\n    ]);\n    units.push(unitResult.rows[0]);\n    \n    // Criar 6 v√≠deos para cada unit\n    await createVideosForUnit(client, unitResult.rows[0].id, i);\n  }\n  \n  // Criar checkpoint ap√≥s a Unit 05\n  await client.query(`\n    INSERT INTO course_units (id, book_id, name, description, display_order, unit_type, is_active, created_at, updated_at)\n    VALUES (gen_random_uuid(), $1, $2, $3, $4, 'checkpoint', true, NOW(), NOW())\n  `, [\n    book.id,\n    'Checkpoint',\n    'Atividade plataforma para corre√ß√£o dos teachers',\n    11\n  ]);\n  \n  // Criar Review e Final Checkpoint\n  await client.query(`\n    INSERT INTO course_units (id, book_id, name, description, display_order, unit_type, is_active, created_at, updated_at)\n    VALUES (gen_random_uuid(), $1, $2, $3, $4, 'review', true, NOW(), NOW())\n  `, [\n    book.id,\n    'Review',\n    'Aula revis√£o com teacher',\n    12\n  ]);\n  \n  await client.query(`\n    INSERT INTO course_units (id, book_id, name, description, display_order, unit_type, is_active, created_at, updated_at)\n    VALUES (gen_random_uuid(), $1, $2, $3, $4, 'checkpoint', true, NOW(), NOW())\n  `, [\n    book.id,\n    'Check Point Book One',\n    'Atividade plataforma para corre√ß√£o dos teachers',\n    13\n  ]);\n  \n  return book;\n}\n\n// Fun√ß√£o para criar Book Two\nasync function createBookTwo(client, courseId) {\n  const bookResult = await client.query(`\n    INSERT INTO books (id, course_id, name, description, color, display_order, total_days, is_active, created_at, updated_at)\n    VALUES (gen_random_uuid(), $1, $2, $3, $4, $5, $6, true, NOW(), NOW())\n    RETURNING id, name\n  `, [\n    courseId,\n    'Book Two',\n    '2 horas semanais - Unidades 11 a 20',\n    '#8b5cf6', // roxo\n    2,\n    60 // 10 units x 6 dias\n  ]);\n  \n  const book = bookResult.rows[0];\n  \n  // Criar Units do Book Two (10 units + checkpoint + review)\n  for (let i = 11; i <= 20; i++) {\n    const unitResult = await client.query(`\n      INSERT INTO course_units (id, book_id, name, description, display_order, unit_type, is_active, created_at, updated_at)\n      VALUES (gen_random_uuid(), $1, $2, $3, $4, 'lesson', true, NOW(), NOW())\n      RETURNING id, name\n    `, [\n      book.id,\n      `Unit ${String(i).padStart(2, '0')}`,\n      `Unidade ${i} - 6 dias de contato com v√≠deo + atividade + Conversation`,\n      i - 10\n    ]);\n    \n    // Criar 6 v√≠deos para cada unit\n    await createVideosForUnit(client, unitResult.rows[0].id, i);\n  }\n  \n  // Criar checkpoint ap√≥s a Unit 15\n  await client.query(`\n    INSERT INTO course_units (id, book_id, name, description, display_order, unit_type, is_active, created_at, updated_at)\n    VALUES (gen_random_uuid(), $1, $2, $3, $4, 'checkpoint', true, NOW(), NOW())\n  `, [\n    book.id,\n    'Checkpoint',\n    'Atividade plataforma para corre√ß√£o dos teachers',\n    11\n  ]);\n  \n  // Criar Review e Final Checkpoint\n  await client.query(`\n    INSERT INTO course_units (id, book_id, name, description, display_order, unit_type, is_active, created_at, updated_at)\n    VALUES (gen_random_uuid(), $1, $2, $3, $4, 'review', true, NOW(), NOW())\n  `, [\n    book.id,\n    'Review',\n    'Aula revis√£o com teacher',\n    12\n  ]);\n  \n  await client.query(`\n    INSERT INTO course_units (id, book_id, name, description, display_order, unit_type, is_active, created_at, updated_at)\n    VALUES (gen_random_uuid(), $1, $2, $3, $4, 'checkpoint', true, NOW(), NOW())\n  `, [\n    book.id,\n    'Check Point Book Two',\n    'Atividade plataforma para corre√ß√£o dos teachers',\n    13\n  ]);\n  \n  return book;\n}\n\n// Fun√ß√£o para criar Book Three\nasync function createBookThree(client, courseId) {\n  const bookResult = await client.query(`\n    INSERT INTO books (id, course_id, name, description, color, display_order, total_days, is_active, created_at, updated_at)\n    VALUES (gen_random_uuid(), $1, $2, $3, $4, $5, $6, true, NOW(), NOW())\n    RETURNING id, name\n  `, [\n    courseId,\n    'Book Three',\n    '3 horas semanais - Unidades 21 a 30',\n    '#10b981', // verde\n    3,\n    60 // 10 units x 6 dias\n  ]);\n  \n  const book = bookResult.rows[0];\n  \n  // Criar Units do Book Three (10 units + checkpoint + review)\n  for (let i = 21; i <= 30; i++) {\n    const unitResult = await client.query(`\n      INSERT INTO course_units (id, book_id, name, description, display_order, unit_type, is_active, created_at, updated_at)\n      VALUES (gen_random_uuid(), $1, $2, $3, $4, 'lesson', true, NOW(), NOW())\n      RETURNING id, name\n    `, [\n      book.id,\n      `Unit ${String(i).padStart(2, '0')}`,\n      `Unidade ${i} - 6 dias de contato com v√≠deo + atividade + Conversation + Listening`,\n      i - 20\n    ]);\n    \n    // Criar 6 v√≠deos para cada unit\n    await createVideosForUnit(client, unitResult.rows[0].id, i);\n  }\n  \n  // Criar checkpoint ap√≥s a Unit 25\n  await client.query(`\n    INSERT INTO course_units (id, book_id, name, description, display_order, unit_type, is_active, created_at, updated_at)\n    VALUES (gen_random_uuid(), $1, $2, $3, $4, 'checkpoint', true, NOW(), NOW())\n  `, [\n    book.id,\n    'Checkpoint',\n    'Atividade plataforma para corre√ß√£o dos teachers',\n    11\n  ]);\n  \n  // Criar Review e Final Checkpoint\n  await client.query(`\n    INSERT INTO course_units (id, book_id, name, description, display_order, unit_type, is_active, created_at, updated_at)\n    VALUES (gen_random_uuid(), $1, $2, $3, $4, 'review', true, NOW(), NOW())\n  `, [\n    book.id,\n    'Review',\n    'Aula revis√£o com teacher',\n    12\n  ]);\n  \n  await client.query(`\n    INSERT INTO course_units (id, book_id, name, description, display_order, unit_type, is_active, created_at, updated_at)\n    VALUES (gen_random_uuid(), $1, $2, $3, $4, 'checkpoint', true, NOW(), NOW())\n  `, [\n    book.id,\n    'Check Point Book Three',\n    'Atividade plataforma para corre√ß√£o dos teachers',\n    13\n  ]);\n  \n  return book;\n}\n\n// Fun√ß√£o para criar v√≠deos para uma unit\nasync function createVideosForUnit(client, unitId, unitNumber) {\n  const dayTitles = [\n    'Welcome & Introduction',\n    'Listening Practice',\n    'Speaking Exercise',\n    'Fill in the Blanks',\n    'Complete the Dialogue',\n    'Subtitles & Review'\n  ];\n  \n  const dayInstructions = [\n    'Boas vindas! Assista o v√≠deo e escolha a frase que foi usada por um dos palestrantes.',\n    'Escolha a frase que foi usada no v√≠deo por um dos Speakers.',\n    'D√™ uma olhada na frase do v√≠deo. Clique no √≠cone do microfone para gravar sua voz lendo esta frase em voz alta.',\n    'Ou√ßa os di√°logos e digite as palavras que faltam para preencher as lacunas.',\n    'Clique nas caixas abaixo e escolha as frases corretas para completar o di√°logo.',\n    'Assista ao v√≠deo com legendas. Lembre-se de clicar no bot√£o CC para ativ√°-las.'\n  ];\n  \n  const activityTypes = [\n    'multiple_choice',\n    'multiple_choice',\n    'speaking',\n    'fill_blank',\n    'unscramble',\n    'listening'\n  ];\n  \n  for (let day = 1; day <= 6; day++) {\n    // Criar v√≠deo\n    const videoResult = await client.query(`\n      INSERT INTO course_videos (id, unit_id, day_number, title, description, video_url, thumbnail_url, duration, has_subtitles, display_order, is_active, created_at, updated_at)\n      VALUES (gen_random_uuid(), $1, $2, $3, $4, $5, $6, $7, $8, $9, true, NOW(), NOW())\n      RETURNING id\n    `, [\n      unitId,\n      day,\n      `Day ${day}: ${dayTitles[day - 1]}`,\n      `Unit ${unitNumber} - ${dayInstructions[day - 1]}`,\n      `https://www.youtube.com/embed/dQw4w9WgXcQ`, // Video placeholder\n      `https://img.youtube.com/vi/dQw4w9WgXcQ/maxresdefault.jpg`, // Thumbnail placeholder\n      300, // 5 minutos\n      day === 6, // apenas o dia 6 tem legendas\n      day\n    ]);\n    \n    const videoId = videoResult.rows[0].id;\n    \n    // Criar atividade para o v√≠deo\n    await client.query(`\n      INSERT INTO course_activities (id, video_id, activity_type, title, description, instruction, content, correct_answer, points, display_order, is_active, created_at, updated_at)\n      VALUES (gen_random_uuid(), $1, $2, $3, $4, $5, $6, $7, $8, $9, true, NOW(), NOW())\n    `, [\n      videoId,\n      activityTypes[day - 1],\n      dayTitles[day - 1],\n      `Atividade do dia ${day}`,\n      dayInstructions[day - 1],\n      JSON.stringify({\n        question: `Complete the activity for Day ${day}`,\n        options: ['Option A', 'Option B', 'Option C', 'Option D']\n      }),\n      JSON.stringify({ correctAnswer: 'Option A' }),\n      10,\n      1\n    ]);\n  }\n}\n\nexport async function seedJourneyCourse() {\n  const client = await pool.connect();\n  try {\n    await client.query(\"BEGIN\");\n    \n    console.log(\"üéì Criando curso Journey - English for Life...\");\n    const course = await createJourneyCourse(client);\n    console.log(`‚úÖ Curso criado: ${course.name} (ID: ${course.id})`);\n    \n    console.log(\"\\nüìò Criando Book One...\");\n    const bookOne = await createBookOne(client, course.id);\n    console.log(`‚úÖ Book One criado: ${bookOne.name}`);\n    \n    console.log(\"\\nüìó Criando Book Two...\");\n    const bookTwo = await createBookTwo(client, course.id);\n    console.log(`‚úÖ Book Two criado: ${bookTwo.name}`);\n    \n    console.log(\"\\nüìô Criando Book Three...\");\n    const bookThree = await createBookThree(client, course.id);\n    console.log(`‚úÖ Book Three criado: ${bookThree.name}`);\n    \n    await client.query(\"COMMIT\");\n    console.log(\"\\nüéâ Seed do curso Journey conclu√≠do com sucesso!\");\n    \n    return { course, bookOne, bookTwo, bookThree };\n  } catch (e) {\n    await client.query(\"ROLLBACK\");\n    console.error(\"‚ùå Erro no seed:\", e.message);\n    throw e;\n  } finally {\n    client.release();\n  }\n}\n\nasync function main() {\n  console.log(\"üöÄ Iniciando seed do curso Journey...\\n\");\n  await seedJourneyCourse();\n  await pool.end();\n}\n\nif (import.meta.url === `file://${process.argv[1]}`) {\n  main().catch(async (e) => {\n    console.error(\"üí• Erro fatal:\", e.message);\n    await pool.end();\n    process.exit(1);\n  });\n}\n","size_bytes":12037},"backend/server/storage.js":{"content":"import { units, users, staff, students, guardians, financialResponsibles, courses, classes, lessons, books, permissions, permissionCategories, roles, rolePermissions, userPermissions, pages, rolePagePermissions, userSettings, supportTickets, supportTicketResponses, studentCourseEnrollments, } from \"../shared/schema.js\";\nimport { eq, and, desc, sql } from \"drizzle-orm\";\nimport { db } from \"./db.js\";\n// ============================================================================\n// USER OPERATIONS\n// ============================================================================\nexport async function createUser(data) {\n    const [user] = await db.insert(users).values(data).returning();\n    return user;\n}\nexport async function getUserByEmail(email) {\n    const [user] = await db.select().from(users).where(eq(users.email, email)).limit(1);\n    return user;\n}\nexport async function getUserById(id) {\n    const [user] = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return user;\n}\nexport async function updateUser(id, data) {\n    const [user] = await db\n        .update(users)\n        .set({ ...data, updatedAt: new Date() })\n        .where(eq(users.id, id))\n        .returning();\n    return user;\n}\nexport async function deleteUser(id) {\n    await db.delete(users).where(eq(users.id, id));\n}\nexport async function getUsers() {\n    return await db.select().from(users);\n}\nexport async function upsertUser(data) {\n    if (data.id) {\n        // Update existing user\n        const [user] = await db\n            .update(users)\n            .set({ ...data, updatedAt: new Date() })\n            .where(eq(users.id, data.id))\n            .returning();\n        return user;\n    }\n    else {\n        // Create new user\n        const [user] = await db.insert(users).values(data).returning();\n        return user;\n    }\n}\n// ============================================================================\n// ROLE OPERATIONS\n// ============================================================================\nexport async function createRole(data) {\n    const [role] = await db.insert(roles).values(data).returning();\n    return role;\n}\nexport async function getRoleByName(name) {\n    const [role] = await db.select().from(roles).where(eq(roles.name, name)).limit(1);\n    return role;\n}\nexport async function getRoles() {\n    return await db.select().from(roles).where(eq(roles.isActive, true));\n}\nexport async function getRolePermissions(roleId) {\n    return await db\n        .select({\n        id: rolePermissions.id,\n        roleId: rolePermissions.roleId,\n        permissionId: rolePermissions.permissionId,\n        createdAt: rolePermissions.createdAt,\n        permission: permissions,\n    })\n        .from(rolePermissions)\n        .innerJoin(permissions, eq(rolePermissions.permissionId, permissions.id))\n        .where(eq(rolePermissions.roleId, roleId));\n}\nexport async function getRolePermissionsByName(roleName) {\n    const role = await getRoleByName(roleName);\n    if (!role)\n        return [];\n    return await db\n        .select({\n        id: rolePermissions.id,\n        roleId: rolePermissions.roleId,\n        permissionId: rolePermissions.permissionId,\n        createdAt: rolePermissions.createdAt,\n        permission: permissions,\n    })\n        .from(rolePermissions)\n        .innerJoin(permissions, eq(rolePermissions.permissionId, permissions.id))\n        .where(eq(rolePermissions.roleId, role.id));\n}\nexport async function updateRolePermissions(roleId, permissionIds) {\n    await db.transaction(async (tx) => {\n        // Remove permiss√µes existentes\n        await tx.delete(rolePermissions).where(eq(rolePermissions.roleId, roleId));\n        // Adiciona novas permiss√µes\n        if (permissionIds.length > 0) {\n            await tx.insert(rolePermissions).values(permissionIds.map(permissionId => ({\n                roleId,\n                permissionId,\n            })));\n        }\n    });\n}\nexport async function updateRole(id, data) {\n    const [role] = await db\n        .update(roles)\n        .set({\n        ...data,\n        updatedAt: sql `NOW()`,\n    })\n        .where(eq(roles.id, id))\n        .returning();\n    return role;\n}\nexport async function deactivateRole(id) {\n    await db\n        .update(roles)\n        .set({ isActive: false, updatedAt: sql `NOW()` })\n        .where(eq(roles.id, id));\n}\n// ============================================================================\n// USER PERMISSION OVERRIDES\n// ============================================================================\nexport async function getUserPermissionOverrides(userId) {\n    return await db\n        .select({\n        id: userPermissions.id,\n        userId: userPermissions.userId,\n        permissionId: userPermissions.permissionId,\n        isGranted: userPermissions.isGranted,\n        createdAt: userPermissions.createdAt,\n        updatedAt: userPermissions.updatedAt,\n        permission: permissions,\n    })\n        .from(userPermissions)\n        .innerJoin(permissions, eq(userPermissions.permissionId, permissions.id))\n        .where(eq(userPermissions.userId, userId));\n}\nexport async function updateUserPermissions(userId, overrides) {\n    await db.transaction(async (tx) => {\n        await tx.delete(userPermissions).where(eq(userPermissions.userId, userId));\n        if (overrides.length > 0) {\n            await tx.insert(userPermissions).values(overrides.map((o) => ({ userId, permissionId: o.permissionId, isGranted: o.isGranted })));\n        }\n    });\n}\n// ============================================================================\n// PERMISSION OPERATIONS\n// ============================================================================\nexport async function getPermissions() {\n    return await db.select().from(permissions).where(eq(permissions.isActive, true));\n}\nexport async function getPermissionsByCategory() {\n    const allPermissions = await getPermissions();\n    const result = {};\n    for (const permission of allPermissions) {\n        const category = await getPermissionCategory(permission.categoryId);\n        const categoryName = category?.name || 'uncategorized';\n        if (!result[categoryName]) {\n            result[categoryName] = [];\n        }\n        result[categoryName].push(permission);\n    }\n    return result;\n}\nexport async function getPermissionCategories() {\n    return await db.select().from(permissionCategories).where(eq(permissionCategories.isActive, true));\n}\nexport async function getPermissionCategory(id) {\n    const [category] = await db.select().from(permissionCategories).where(eq(permissionCategories.id, id)).limit(1);\n    return category;\n}\nexport async function createPermissionCategory(data) {\n    const [category] = await db.insert(permissionCategories).values(data).returning();\n    return category;\n}\nexport async function createPermission(data) {\n    const [permission] = await db.insert(permissions).values(data).returning();\n    return permission;\n}\n// ============================================================================\n// UNIT OPERATIONS\n// ============================================================================\nexport async function createUnit(data) {\n    const [unit] = await db.insert(units).values(data).returning();\n    return unit;\n}\nexport async function getUnits() {\n    return await db.select().from(units).where(eq(units.isActive, true));\n}\nexport async function getUnit(id) {\n    const [unit] = await db.select().from(units).where(eq(units.id, id)).limit(1);\n    return unit;\n}\nexport async function updateUnit(id, data) {\n    const [unit] = await db\n        .update(units)\n        .set({ ...data, updatedAt: new Date() })\n        .where(eq(units.id, id))\n        .returning();\n    return unit;\n}\nexport async function deleteUnit(id) {\n    // Verificar se existem depend√™ncias antes de excluir\n    const [staffCount] = await db.select({ count: sql `count(*)` }).from(staff).where(eq(staff.unitId, id));\n    const [studentsCount] = await db.select({ count: sql `count(*)` }).from(students).where(eq(students.unitId, id));\n    const [classesCount] = await db.select({ count: sql `count(*)` }).from(classes).where(eq(classes.unitId, id));\n    const totalDependencies = Number(staffCount.count) + Number(studentsCount.count) + Number(classesCount.count);\n    if (totalDependencies > 0) {\n        const errorDetails = [];\n        if (Number(staffCount.count) > 0)\n            errorDetails.push(`${staffCount.count} funcion√°rio(s)`);\n        if (Number(studentsCount.count) > 0)\n            errorDetails.push(`${studentsCount.count} estudante(s)`);\n        if (Number(classesCount.count) > 0)\n            errorDetails.push(`${classesCount.count} turma(s)`);\n        throw new Error(`N√£o √© poss√≠vel excluir a unidade. Existem registros vinculados: ${errorDetails.join(', ')}. Remova ou transfira esses registros antes de excluir a unidade.`);\n    }\n    await db.delete(units).where(eq(units.id, id));\n}\n// ============================================================================\n// STAFF OPERATIONS\n// ============================================================================\nexport async function createStaff(data) {\n    const [staffMember] = await db.insert(staff).values(data).returning();\n    return staffMember;\n}\nexport async function getStaff() {\n    const result = await db\n        .select({\n        staff: staff,\n        user: users,\n        unit: units,\n    })\n        .from(staff)\n        .innerJoin(users, eq(staff.userId, users.id))\n        .leftJoin(units, eq(staff.unitId, units.id));\n    return result.map(r => ({ ...r.staff, user: r.user, unit: r.unit || undefined }));\n}\nexport async function getStaffMember(id) {\n    const [result] = await db\n        .select({\n        staff: staff,\n        user: users,\n        unit: units,\n    })\n        .from(staff)\n        .innerJoin(users, eq(staff.userId, users.id))\n        .leftJoin(units, eq(staff.unitId, units.id))\n        .where(eq(staff.id, id))\n        .limit(1);\n    if (!result)\n        return undefined;\n    return { ...result.staff, user: result.user, unit: result.unit || undefined };\n}\nexport async function updateStaff(id, data) {\n    const [staffMember] = await db\n        .update(staff)\n        .set({ ...data, updatedAt: new Date() })\n        .where(eq(staff.id, id))\n        .returning();\n    return staffMember;\n}\nexport async function deleteStaff(id) {\n    // Apenas deletar o registro de staff, mantendo o usu√°rio no sistema\n    // O usu√°rio pode ter outros pap√©is ou dados importantes no sistema\n    await db.delete(staff).where(eq(staff.id, id));\n}\nexport async function getStaffByUserId(userId) {\n    const [result] = await db\n        .select({\n        staff: staff,\n        user: users,\n        unit: units,\n    })\n        .from(staff)\n        .innerJoin(users, eq(staff.userId, users.id))\n        .leftJoin(units, eq(staff.unitId, units.id))\n        .where(eq(staff.userId, userId))\n        .limit(1);\n    if (!result)\n        return undefined;\n    return { ...result.staff, user: result.user, unit: result.unit || undefined };\n}\n// ============================================================================\n// GUARDIAN & FINANCIAL RESPONSIBLE OPERATIONS\n// ============================================================================\nexport async function createGuardian(data) {\n    const [guardian] = await db.insert(guardians).values(data).returning();\n    return guardian;\n}\nexport async function getGuardian(id) {\n    const [guardian] = await db.select().from(guardians).where(eq(guardians.id, id)).limit(1);\n    return guardian;\n}\nexport async function updateGuardian(id, data) {\n    const [guardian] = await db\n        .update(guardians)\n        .set({ ...data, updatedAt: new Date() })\n        .where(eq(guardians.id, id))\n        .returning();\n    return guardian;\n}\nexport async function getGuardianWithFinancial(id) {\n    const [result] = await db\n        .select({\n        guardian: guardians,\n        financialResponsible: financialResponsibles,\n    })\n        .from(guardians)\n        .leftJoin(financialResponsibles, eq(financialResponsibles.guardianId, guardians.id))\n        .where(eq(guardians.id, id))\n        .limit(1);\n    if (!result)\n        return undefined;\n    return {\n        ...result.guardian,\n        financialResponsible: result.financialResponsible || undefined,\n    };\n}\nexport async function createFinancialResponsible(data) {\n    const [responsible] = await db.insert(financialResponsibles).values(data).returning();\n    return responsible;\n}\nexport async function updateFinancialResponsible(id, data) {\n    const [responsible] = await db\n        .update(financialResponsibles)\n        .set({ ...data, updatedAt: new Date() })\n        .where(eq(financialResponsibles.id, id))\n        .returning();\n    return responsible;\n}\n// ============================================================================\n// STUDENT OPERATIONS\n// ============================================================================\nexport async function createStudent(data) {\n    const [student] = await db.insert(students).values(data).returning();\n    return student;\n}\nexport async function getStudents() {\n    const result = await db\n        .select({\n        student: students,\n        user: users,\n        unit: units,\n        guardian: guardians,\n        financialResponsible: financialResponsibles,\n    })\n        .from(students)\n        .innerJoin(users, eq(students.userId, users.id))\n        .leftJoin(units, eq(students.unitId, units.id))\n        .leftJoin(guardians, eq(students.guardianId, guardians.id))\n        .leftJoin(financialResponsibles, eq(financialResponsibles.guardianId, guardians.id))\n        .where(eq(students.isActive, true));\n    return result.map(r => ({\n        ...r.student,\n        user: r.user,\n        unit: r.unit || undefined,\n        guardian: r.guardian ? {\n            ...r.guardian,\n            financialResponsible: r.financialResponsible || undefined,\n        } : undefined,\n    }));\n}\nexport async function getStudent(id) {\n    const [result] = await db\n        .select({\n        student: students,\n        user: users,\n        unit: units,\n        guardian: guardians,\n        financialResponsible: financialResponsibles,\n    })\n        .from(students)\n        .innerJoin(users, eq(students.userId, users.id))\n        .leftJoin(units, eq(students.unitId, units.id))\n        .leftJoin(guardians, eq(students.guardianId, guardians.id))\n        .leftJoin(financialResponsibles, eq(financialResponsibles.guardianId, guardians.id))\n        .where(eq(students.id, id))\n        .limit(1);\n    if (!result)\n        return undefined;\n    return {\n        ...result.student,\n        user: result.user,\n        unit: result.unit || undefined,\n        guardian: result.guardian ? {\n            ...result.guardian,\n            financialResponsible: result.financialResponsible || undefined,\n        } : undefined,\n    };\n}\nexport async function updateStudent(id, data) {\n    const [student] = await db\n        .update(students)\n        .set({ ...data, updatedAt: new Date() })\n        .where(eq(students.id, id))\n        .returning();\n    return student;\n}\nexport async function deleteStudent(id) {\n    const student = await db.select().from(students).where(eq(students.id, id)).limit(1);\n    if (student.length > 0) {\n        await db.delete(students).where(eq(students.id, id));\n        await db.delete(users).where(eq(users.id, student[0].userId));\n    }\n}\n// Buscar estudante pelo userId (para √°rea do aluno)\nexport async function getStudentByUserId(userId) {\n    const [result] = await db\n        .select({\n        student: students,\n        user: users,\n        unit: units,\n    })\n        .from(students)\n        .innerJoin(users, eq(students.userId, users.id))\n        .leftJoin(units, eq(students.unitId, units.id))\n        .where(eq(students.userId, userId))\n        .limit(1);\n    if (!result)\n        return undefined;\n    return { ...result.student, user: result.user, unit: result.unit || undefined };\n}\n// Buscar estudante pelo CPF\nexport async function getStudentByCpf(cpf) {\n    const [result] = await db\n        .select({\n        student: students,\n        user: users,\n        unit: units,\n    })\n        .from(students)\n        .innerJoin(users, eq(students.userId, users.id))\n        .leftJoin(units, eq(students.unitId, units.id))\n        .where(and(eq(students.cpf, cpf), eq(students.isActive, true)))\n        .limit(1);\n    if (!result)\n        return undefined;\n    return { ...result.student, user: result.user, unit: result.unit || undefined };\n}\n// Buscar matr√≠culas de cursos do estudante (para estantes estilo Netflix)\nexport async function getStudentCourseEnrollmentsForUser(userId) {\n    const student = await getStudentByUserId(userId);\n    if (!student)\n        return [];\n    const rows = await db\n        .select({\n        enrollment: studentCourseEnrollments,\n        course: courses,\n    })\n        .from(studentCourseEnrollments)\n        .innerJoin(courses, eq(studentCourseEnrollments.courseId, courses.id))\n        .where(eq(studentCourseEnrollments.studentId, student.id));\n    return rows.map(r => ({\n        ...r.enrollment,\n        course: { id: r.course.id, name: r.course.name, level: r.course.level },\n    }));\n}\n// Buscar detalhes de curso com livros b√°sicos (para prateleiras)\nexport async function getCourseWithBooksBasic(courseId) {\n    const course = await getCourse(courseId);\n    if (!course)\n        return undefined;\n    const courseBooks = await db\n        .select({\n        id: books.id,\n        name: books.name,\n        description: books.description,\n        color: books.color,\n    })\n        .from(books)\n        .where(and(eq(books.courseId, courseId), eq(books.isActive, true)))\n        .orderBy(books.name);\n    return { ...course, books: courseBooks };\n}\n// ============================================================================\n// COURSE OPERATIONS\n// ============================================================================\nexport async function createCourse(data) {\n    const [course] = await db.insert(courses).values(data).returning();\n    return course;\n}\nexport async function getCourses() {\n    return await db.select().from(courses).where(eq(courses.isActive, true));\n}\nexport async function getCourse(id) {\n    const [course] = await db.select().from(courses).where(eq(courses.id, id)).limit(1);\n    return course;\n}\nexport async function updateCourse(id, data) {\n    const [course] = await db\n        .update(courses)\n        .set({ ...data, updatedAt: new Date() })\n        .where(eq(courses.id, id))\n        .returning();\n    return course;\n}\nexport async function deleteCourse(id) {\n    await db.delete(courses).where(eq(courses.id, id));\n}\n// ============================================================================\n// BOOK OPERATIONS\n// ============================================================================\nexport async function createBook(data) {\n    const [book] = await db.insert(books).values(data).returning();\n    return book;\n}\nexport async function getBooks() {\n    return await db.select().from(books).where(eq(books.isActive, true));\n}\nexport async function getBook(id) {\n    const [book] = await db.select().from(books).where(eq(books.id, id)).limit(1);\n    return book;\n}\nexport async function updateBook(id, data) {\n    const [book] = await db\n        .update(books)\n        .set({ ...data, updatedAt: new Date() })\n        .where(eq(books.id, id))\n        .returning();\n    return book;\n}\nexport async function deleteBook(id) {\n    await db.delete(books).where(eq(books.id, id));\n}\n// ============================================================================\n// CLASS OPERATIONS\n// ============================================================================\nexport async function createClass(data) {\n    const [classItem] = await db.insert(classes).values(data).returning();\n    return classItem;\n}\nexport async function getClasses() {\n    const result = await db\n        .select({\n        class: classes,\n        book: books,\n        course: courses,\n        teacher: users,\n        unit: units,\n    })\n        .from(classes)\n        .innerJoin(books, eq(classes.bookId, books.id))\n        .innerJoin(courses, eq(books.courseId, courses.id))\n        .innerJoin(users, eq(classes.teacherId, users.id))\n        .innerJoin(units, eq(classes.unitId, units.id))\n        .where(eq(classes.isActive, true));\n    return result.map(r => ({\n        ...r.class,\n        book: { ...r.book, course: r.course },\n        teacher: r.teacher,\n        unit: r.unit,\n        enrollments: [],\n    }));\n}\nexport async function getClass(id) {\n    const [result] = await db\n        .select({\n        class: classes,\n        book: books,\n        course: courses,\n        teacher: users,\n        unit: units,\n    })\n        .from(classes)\n        .innerJoin(books, eq(classes.bookId, books.id))\n        .innerJoin(courses, eq(books.courseId, courses.id))\n        .innerJoin(users, eq(classes.teacherId, users.id))\n        .innerJoin(units, eq(classes.unitId, units.id))\n        .where(eq(classes.id, id))\n        .limit(1);\n    if (!result)\n        return undefined;\n    return {\n        ...result.class,\n        book: { ...result.book, course: result.course },\n        teacher: result.teacher,\n        unit: result.unit,\n        enrollments: [],\n    };\n}\nexport async function updateClass(id, data) {\n    const [classItem] = await db\n        .update(classes)\n        .set({ ...data, updatedAt: new Date() })\n        .where(eq(classes.id, id))\n        .returning();\n    return classItem;\n}\nexport async function deleteClass(id) {\n    await db.delete(classes).where(eq(classes.id, id));\n}\nexport async function getTeachers() {\n    const result = await db\n        .select({\n        staff: staff,\n        user: users,\n    })\n        .from(staff)\n        .innerJoin(users, eq(staff.userId, users.id))\n        .innerJoin(roles, eq(users.roleId, roles.id))\n        .where(and(eq(staff.isActive, true), eq(roles.name, 'teacher')));\n    return result.map(r => ({\n        ...r.staff,\n        user: r.user,\n    }));\n}\nexport async function getTeacherSchedule(teacherId) {\n    // Buscar todas as turmas do professor\n    const teacherClasses = await db\n        .select({\n        class: classes,\n        book: books,\n        course: courses,\n        unit: units,\n    })\n        .from(classes)\n        .innerJoin(books, eq(classes.bookId, books.id))\n        .innerJoin(courses, eq(books.courseId, courses.id))\n        .innerJoin(units, eq(classes.unitId, units.id))\n        .where(and(eq(classes.teacherId, teacherId), eq(classes.isActive, true)));\n    // Gerar hor√°rios ocupados e dispon√≠veis\n    const occupiedSlots = teacherClasses.map(r => ({\n        id: r.class.id,\n        dayOfWeek: r.class.dayOfWeek,\n        startTime: r.class.startTime,\n        endTime: r.class.endTime,\n        room: r.class.room,\n        className: r.class.name,\n        courseName: r.course.name,\n        bookName: r.book.name,\n        unitName: r.unit.name,\n        currentStudents: r.class.currentStudents,\n        maxStudents: r.class.maxStudents,\n        status: 'occupied'\n    }));\n    // Gerar hor√°rios dispon√≠veis (8h √†s 22h, de segunda a s√°bado)\n    const availableSlots = [];\n    const timeSlots = [\n        '08:00', '09:00', '10:00', '11:00', '12:00', '13:00', '14:00',\n        '15:00', '16:00', '17:00', '18:00', '19:00', '20:00', '21:00'\n    ];\n    for (let day = 1; day <= 6; day++) { // Segunda a s√°bado\n        for (let i = 0; i < timeSlots.length - 1; i++) {\n            const startTime = timeSlots[i];\n            const endTime = timeSlots[i + 1];\n            // Verificar se este hor√°rio n√£o est√° ocupado\n            const isOccupied = occupiedSlots.some(slot => slot.dayOfWeek === day &&\n                slot.startTime === startTime);\n            if (!isOccupied) {\n                availableSlots.push({\n                    dayOfWeek: day,\n                    startTime,\n                    endTime,\n                    status: 'available'\n                });\n            }\n        }\n    }\n    return {\n        teacherId,\n        occupiedSlots,\n        availableSlots\n    };\n}\n// ============================================================================\n// LESSON OPERATIONS\n// ============================================================================\nexport async function createLesson(data) {\n    const [lesson] = await db.insert(lessons).values(data).returning();\n    return lesson;\n}\nexport async function getLessons() {\n    return await db.select().from(lessons).orderBy(desc(lessons.date));\n}\nexport async function getLesson(id) {\n    const [lesson] = await db.select().from(lessons).where(eq(lessons.id, id)).limit(1);\n    return lesson;\n}\nexport async function updateLesson(id, data) {\n    const [lesson] = await db\n        .update(lessons)\n        .set({ ...data, updatedAt: new Date() })\n        .where(eq(lessons.id, id))\n        .returning();\n    return lesson;\n}\nexport async function deleteLesson(id) {\n    await db.delete(lessons).where(eq(lessons.id, id));\n}\n// ============================================================================\n// DASHBOARD OPERATIONS\n// ============================================================================\nexport async function getDashboardStats() {\n    const [totalStudentsResult] = await db\n        .select({ count: sql `count(*)::int` })\n        .from(students)\n        .where(eq(students.isActive, true));\n    const [totalStaffResult] = await db\n        .select({ count: sql `count(*)::int` })\n        .from(staff)\n        .where(eq(staff.isActive, true));\n    const [totalCoursesResult] = await db\n        .select({ count: sql `count(*)::int` })\n        .from(courses)\n        .where(eq(courses.isActive, true));\n    const [totalClassesResult] = await db\n        .select({ count: sql `count(*)::int` })\n        .from(classes)\n        .where(eq(classes.isActive, true));\n    return {\n        totalStudents: totalStudentsResult?.count || 0,\n        totalStaff: totalStaffResult?.count || 0,\n        totalCourses: totalCoursesResult?.count || 0,\n        totalClasses: totalClassesResult?.count || 0,\n    };\n}\n// ============================================================================\n// SUPPORT TICKET OPERATIONS\n// ============================================================================\nexport async function createSupportTicket(data) {\n    const [ticket] = await db.insert(supportTickets).values(data).returning();\n    return ticket;\n}\nexport async function getSupportTickets() {\n    return await db.select().from(supportTickets).orderBy(desc(supportTickets.createdAt));\n}\nexport async function getSupportTicket(id) {\n    const [ticket] = await db.select().from(supportTickets).where(eq(supportTickets.id, id)).limit(1);\n    if (!ticket)\n        return undefined;\n    const responses = await db\n        .select()\n        .from(supportTicketResponses)\n        .where(eq(supportTicketResponses.ticketId, id))\n        .orderBy(supportTicketResponses.createdAt);\n    const [user] = await db.select().from(users).where(eq(users.id, ticket.userId)).limit(1);\n    let assignedUser;\n    if (ticket.assignedTo) {\n        [assignedUser] = await db.select().from(users).where(eq(users.id, ticket.assignedTo)).limit(1);\n    }\n    return {\n        ...ticket,\n        responses,\n        user,\n        assignedUser,\n    };\n}\nexport async function updateSupportTicket(id, data) {\n    const [ticket] = await db\n        .update(supportTickets)\n        .set({ ...data, updatedAt: new Date() })\n        .where(eq(supportTickets.id, id))\n        .returning();\n    return ticket;\n}\nexport async function createSupportTicketResponse(data) {\n    const [response] = await db.insert(supportTicketResponses).values(data).returning();\n    return response;\n}\n// ============================================================================\n// USER SETTINGS OPERATIONS\n// ============================================================================\nexport async function getUserSettings(userId) {\n    const [settings] = await db\n        .select()\n        .from(userSettings)\n        .where(eq(userSettings.userId, userId))\n        .limit(1);\n    return settings;\n}\nexport async function createUserSettings(data) {\n    const [settings] = await db.insert(userSettings).values(data).returning();\n    return settings;\n}\nexport async function updateUserSettings(userId, data) {\n    const [settings] = await db\n        .update(userSettings)\n        .set({ ...data, updatedAt: new Date() })\n        .where(eq(userSettings.userId, userId))\n        .returning();\n    return settings;\n}\n// ============================================================================\n// PAGES OPERATIONS\n// ============================================================================\nexport async function createPage(data) {\n    const [page] = await db.insert(pages).values(data).returning();\n    return page;\n}\nexport async function getPages() {\n    return await db.select().from(pages).orderBy(pages.displayName);\n}\nexport async function getPageByName(name) {\n    const [page] = await db\n        .select()\n        .from(pages)\n        .where(eq(pages.name, name))\n        .limit(1);\n    return page;\n}\nexport async function getPageById(id) {\n    const [page] = await db\n        .select()\n        .from(pages)\n        .where(eq(pages.id, id))\n        .limit(1);\n    return page;\n}\nexport async function updatePage(id, data) {\n    const [page] = await db\n        .update(pages)\n        .set({ ...data, updatedAt: new Date() })\n        .where(eq(pages.id, id))\n        .returning();\n    return page;\n}\nexport async function deletePage(id) {\n    await db.delete(pages).where(eq(pages.id, id));\n}\n// ============================================================================\n// ROLE PAGE PERMISSIONS OPERATIONS\n// ============================================================================\nexport async function createRolePagePermission(data) {\n    const [permission] = await db.insert(rolePagePermissions).values(data).returning();\n    return permission;\n}\nexport async function getRolePagePermissions(roleId) {\n    const query = db.select().from(rolePagePermissions);\n    if (roleId) {\n        return await query.where(eq(rolePagePermissions.roleId, roleId));\n    }\n    return await query;\n}\nexport async function getRolePagePermission(roleId, pageId) {\n    const [permission] = await db\n        .select()\n        .from(rolePagePermissions)\n        .where(and(eq(rolePagePermissions.roleId, roleId), eq(rolePagePermissions.pageId, pageId)))\n        .limit(1);\n    return permission;\n}\nexport async function updateRolePagePermission(roleId, pageId, data) {\n    const [permission] = await db\n        .update(rolePagePermissions)\n        .set({ ...data, updatedAt: new Date() })\n        .where(and(eq(rolePagePermissions.roleId, roleId), eq(rolePagePermissions.pageId, pageId)))\n        .returning();\n    return permission;\n}\nexport async function deleteRolePagePermission(roleId, pageId) {\n    await db.delete(rolePagePermissions).where(and(eq(rolePagePermissions.roleId, roleId), eq(rolePagePermissions.pageId, pageId)));\n}\nexport async function getRoleAllowedPages(roleId) {\n    return await db\n        .select({\n        id: pages.id,\n        name: pages.name,\n        displayName: pages.displayName,\n        description: pages.description,\n        route: pages.route,\n        isActive: pages.isActive,\n        createdAt: pages.createdAt,\n        updatedAt: pages.updatedAt,\n    })\n        .from(pages)\n        .innerJoin(rolePagePermissions, eq(pages.id, rolePagePermissions.pageId))\n        .where(and(eq(rolePagePermissions.roleId, roleId), eq(rolePagePermissions.canAccess, true), eq(pages.isActive, true)))\n        .orderBy(pages.displayName);\n}\n// Export all storage functions\nexport const storage = {\n    // Users\n    createUser,\n    getUserByEmail,\n    getUserById,\n    updateUser,\n    deleteUser,\n    getUsers,\n    upsertUser,\n    // Roles\n    createRole,\n    getRoleByName,\n    getRoles,\n    getRolePermissions,\n    getRolePermissionsByName,\n    updateRolePermissions,\n    updateRole,\n    deactivateRole,\n    // Permissions\n    getPermissions,\n    getPermissionsByCategory,\n    getPermissionCategories,\n    getPermissionCategory,\n    createPermissionCategory,\n    createPermission,\n    getUserPermissionOverrides,\n    updateUserPermissions,\n    // Units\n    createUnit,\n    getUnits,\n    getUnit,\n    updateUnit,\n    deleteUnit,\n    // Staff\n    createStaff,\n    getStaff,\n    getStaffMember,\n    getStaffByUserId,\n    updateStaff,\n    deleteStaff,\n    // Guardians\n    createGuardian,\n    getGuardian,\n    updateGuardian,\n    getGuardianWithFinancial,\n    createFinancialResponsible,\n    updateFinancialResponsible,\n    // Students\n    createStudent,\n    getStudents,\n    getStudent,\n    getStudentByUserId,\n    getStudentCourseEnrollmentsForUser,\n    updateStudent,\n    deleteStudent,\n    // Courses\n    getCourseWithBooksBasic,\n    createCourse,\n    getCourses,\n    getCourse,\n    updateCourse,\n    deleteCourse,\n    // Books\n    createBook,\n    getBooks,\n    getBook,\n    updateBook,\n    deleteBook,\n    // Classes\n    createClass,\n    getClasses,\n    getClass,\n    updateClass,\n    deleteClass,\n    // Lessons\n    createLesson,\n    getLessons,\n    getLesson,\n    updateLesson,\n    deleteLesson,\n    // Dashboard\n    getDashboardStats,\n    // Support\n    createSupportTicket,\n    getSupportTickets,\n    getSupportTicket,\n    updateSupportTicket,\n    createSupportTicketResponse,\n    // User Settings\n    getUserSettings,\n    createUserSettings,\n    updateUserSettings,\n    // Pages\n    createPage,\n    getPages,\n    getPageByName,\n    getPageById,\n    updatePage,\n    deletePage,\n    // Role Page Permissions\n    createRolePagePermission,\n    getRolePagePermissions,\n    getRolePagePermission,\n    updateRolePagePermission,\n    deleteRolePagePermission,\n    getRoleAllowedPages,\n    // Teacher Schedule\n    getTeacherSchedule,\n    // Staff with Teachers\n    getTeachers,\n};\n","size_bytes":33947},"frontend/client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"frontend/client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"frontend/client/src/components/Layout.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport Sidebar from \"@/components/Sidebar\";\nimport StudentLayout from \"@/components/StudentLayout\";\nimport { Button } from \"@/components/ui/button\";\nimport { useState, useEffect } from \"react\";\nimport { Menu, Settings, Bell, LogOut } from \"lucide-react\";\nimport { ThemeToggle } from \"@/components/ThemeToggle\";\nimport { \n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface LayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function Layout({ children }: LayoutProps) {\n  const { user, isLoading, isAuthenticated } = useAuth();\n  const [sidebarExpanded, setSidebarExpanded] = useState(true);\n  const [isMobile, setIsMobile] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Use StudentLayout for students\n  if (user?.role === 'student') {\n    return <StudentLayout>{children}</StudentLayout>;\n  }\n\n  const handleLogout = () => {\n    // Clear all queries and local storage (JWT logout is client-side only)\n    queryClient.clear();\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('user');\n    \n    toast({\n      title: \"Logout realizado\",\n      description: \"Voc√™ foi desconectado com sucesso.\",\n    });\n    \n    // Redirect to login page\n    window.location.href = '/';\n  };\n\n  // Detectar se √© mobile\n  useEffect(() => {\n    const checkMobile = () => {\n      setIsMobile(window.innerWidth < 768);\n      // No mobile, sidebar come√ßa contra√≠do\n      if (window.innerWidth < 768) {\n        setSidebarExpanded(false);\n      }\n    };\n\n    checkMobile();\n    window.addEventListener('resize', checkMobile);\n    return () => window.removeEventListener('resize', checkMobile);\n  }, []);\n\n  const toggleSidebar = () => {\n    setSidebarExpanded(!sidebarExpanded);\n  };\n\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <div className=\"w-12 h-12 bg-primary rounded-2xl flex items-center justify-center mx-auto mb-4\">\n            <i className=\"fas fa-graduation-cap text-primary-foreground text-xl animate-pulse\"></i>\n          </div>\n          <p className=\"text-muted-foreground\">Carregando...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null; // Will be handled by the routing\n  }\n\n\n\n\n  return (\n    <div className=\"flex h-screen bg-background theme-transition\">\n      <Sidebar expanded={sidebarExpanded} isMobile={isMobile} />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <div className=\"flex justify-between items-center p-4 bg-gray-50/50 border-b border-gray-100/80 navbar-shadow backdrop-blur-sm dark:bg-gray-900/50 dark:border-gray-800/50 theme-transition\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={toggleSidebar}\n            className=\"hover:bg-primary/10 transition-colors\"\n            data-testid=\"button-toggle-sidebar\"\n          >\n            <Menu className=\"h-5 w-5\" />\n          </Button>\n\n          {user && (\n            <div className=\"flex items-center space-x-3\">\n              <ThemeToggle />\n              <DropdownMenu>\n                <DropdownMenuTrigger className=\"flex items-center space-x-3 hover:bg-accent/50 rounded-lg p-2 transition-colors cursor-pointer focus:outline-none\" data-testid=\"dropdown-user\">\n                <div className=\"text-right\">\n                  <p className=\"text-sm font-medium text-foreground\">\n                    {user.firstName} {user.lastName}\n                  </p>\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                      {user.role === 'admin' && 'Administrador'}\n                      {user.role === 'teacher' && 'Professor'}\n                      {user.role === 'secretary' && 'Secret√°rio'}\n                      {user.role === 'student' && 'Estudante'}\n                    </p>\n                </div>\n                <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n                  <span className=\"text-primary-foreground text-sm font-medium\">\n                    {user.firstName?.[0]}{user.lastName?.[0]}\n                  </span>\n                </div>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\" className=\"w-48\" style={{ zIndex: 999999 }}>\n                <DropdownMenuItem className=\"cursor-default\" data-testid=\"menu-item-settings\">\n                  <Settings className=\"mr-2 h-4 w-4\" />\n                  <span>Configura√ß√µes</span>\n                </DropdownMenuItem>\n                <DropdownMenuItem className=\"cursor-default\" data-testid=\"menu-item-notifications\">\n                  <Bell className=\"mr-2 h-4 w-4\" />\n                  <span>Notifica√ß√µes</span>\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem\n                  className=\"cursor-pointer\"\n                  data-testid=\"menu-item-logout\"\n                  onClick={handleLogout}\n                >\n                  <LogOut className=\"mr-2 h-4 w-4\" />\n                  <span>Sair</span>\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n              </DropdownMenu>\n            </div>\n          )}\n        </div>\n        <main className=\"flex-1 overflow-auto p-6 bg-background theme-transition\">\n          {children}\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5659},"frontend/client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"frontend/client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"frontend/client/src/lib/api.ts":{"content":"\n// Detecta automaticamente o ambiente\nconst isProduction = typeof window !== 'undefined' && (\n  window.location.hostname === 'erp.vision.dev.br'\n);\n\nconst isReplit = typeof window !== 'undefined' && (\n  window.location.hostname.includes('.repl.co') ||\n  window.location.hostname.includes('replit.dev')\n);\n\n// Use porta 5052 se estiver rodando localmente na VPS, sen√£o use HTTPS sem porta\nexport const API_BASE = import.meta.env.VITE_API_URL ||\n  (isProduction ? 'https://erpapi.vision.dev.br'\n    : isReplit ? 'https://erpapi.vision.dev.br'\n      : 'http://localhost:5052');\n\n\n// Interceptador para fetch\nexport async function apiRequest(url: string, options: RequestInit = {}) {\n  const token = localStorage.getItem('authToken');\n\n  const headers: Record<string, string> = {\n    'Content-Type': 'application/json',\n    ...(options.headers as Record<string, string> || {}),\n  };\n\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n\n  const response = await fetch(`${API_BASE}${url}`, {\n    ...options,\n    credentials: 'include',\n    headers,\n  });\n\n  if (!response.ok) {\n    // If token is invalid, clear it\n    if (response.status === 401 && token) {\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('user');\n      // Redirect to login if needed\n      if (window.location.pathname !== '/') {\n        window.location.href = '/';\n      }\n    }\n\n    const error = await response.text();\n    throw new Error(`${response.status}: ${error}`);\n  }\n\n  // Para respostas 204 (No Content), n√£o tente fazer parse do JSON\n  if (response.status === 204) {\n    return null;\n  }\n\n  return response.json();\n}\n","size_bytes":1641},"frontend/client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\nimport { API_BASE } from \"@/lib/api\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\n// Fun√ß√£o utilit√°ria para extrair apenas a mensagem amig√°vel do erro\nexport function extractErrorMessage(error: any): string {\n  if (!error?.message) return \"Erro desconhecido\";\n  \n  const errorMessage = error.message;\n  \n  // Se o erro cont√©m um JSON com message, extrair apenas a message\n  try {\n    // Procurar por padr√£o: status: {\"message\":\"texto\"}\n    const jsonMatch = errorMessage.match(/\\d+:\\s*({.*})/);\n    if (jsonMatch) {\n      const jsonPart = JSON.parse(jsonMatch[1]);\n      if (jsonPart.message) {\n        return jsonPart.message;\n      }\n    }\n  } catch (e) {\n    // Se n√£o conseguir fazer parse do JSON, continuar com outras tentativas\n  }\n  \n  // Se o erro cont√©m \"message\":\" extrair o conte√∫do\n  const messageMatch = errorMessage.match(/\"message\"\\s*:\\s*\"([^\"]+)\"/);\n  if (messageMatch) {\n    return messageMatch[1];\n  }\n  \n  // Se n√£o encontrar padr√£o espec√≠fico, retornar a mensagem original\n  return errorMessage;\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: any\n): Promise<any> {\n  const token = localStorage.getItem(\"authToken\");\n\n  const options: RequestInit = {\n    method,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...(token ? { Authorization: `Bearer ${token}` } : {}),\n    },\n    credentials: \"include\",\n  };\n\n  if (data && (method === \"POST\" || method === \"PUT\" || method === \"PATCH\")) {\n    options.body = JSON.stringify(data);\n  }\n\n  const fullUrl = /^https?:\\/\\//i.test(url)\n    ? url\n    : `${API_BASE}${url.startsWith('/') ? '' : '/'}${url}`;\n\n  console.log(`üåê ${method} ${url}`, data ? { data } : '');\n\n  const response = await fetch(fullUrl, options);\n\n  if (!response.ok) {\n    if (response.status === 401) {\n      console.log(\"‚ùå Erro 401 - Token inv√°lido ou expirado\");\n      if (token) {\n        localStorage.removeItem(\"authToken\");\n        localStorage.removeItem(\"user\");\n      }\n      if (window.location.pathname !== \"/\") {\n  console.log(\"üîÑ Redirecionando para /\");\n  window.location.href = \"/\";\n      }\n    }\n\n    const errorText = await response.text();\n    console.error(`‚ùå Erro na requisi√ß√£o: ${response.status}`, errorText);\n    throw new Error(`${response.status}: ${errorText}`);\n  }\n\n  const text = await response.text();\n  console.log(`‚úÖ Resposta ${method} ${url}:`, text ? JSON.parse(text) : null);\n  return text ? JSON.parse(text) : null;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const token = typeof localStorage !== 'undefined' ? localStorage.getItem('authToken') : null;\n    const headers: Record<string, string> = {};\n    if (token) {\n      headers[\"Authorization\"] = `Bearer ${token}`;\n    }\n\n    const pathFromKey = (queryKey as any[])\n      .filter((seg) => seg !== undefined && seg !== null && seg !== \"\")\n      .map(String)\n      .join(\"/\");\n    const isAbsolute = /^https?:\\/\\//i.test(pathFromKey);\n    const url = isAbsolute\n      ? pathFromKey\n      : `${API_BASE}${pathFromKey.startsWith('/') ? '' : '/'}${pathFromKey}`;\n    const res = await fetch(url, {\n      credentials: \"include\",\n      headers,\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":3985},"frontend/client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"frontend/client/src/pages/Staff.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useQuery, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport Layout from '@/components/Layout';\nimport { StaffModal } from '@/components/StaffModal';\nimport { ConfirmationModal } from '@/components/ConfirmationModal';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/api';\n\ninterface User {\n  id: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  role: string;\n}\n\ninterface StaffMember {\n  id: string;\n  userId: string;\n  position: string;\n  department: string;\n  isActive: boolean;\n  user?: User;\n}\n\nexport default function Staff() {\n  const [modalOpen, setModalOpen] = useState(false);\n  const [selectedStaff, setSelectedStaff] = useState<StaffMember | null>(null);\n  const [searchName, setSearchName] = useState('');\n  const [selectedPosition, setSelectedPosition] = useState('all');\n  const [viewMode, setViewMode] = useState<'list' | 'cards'>('cards');\n  const [deleteConfirmOpen, setDeleteConfirmOpen] = useState(false);\n  const [staffToDelete, setStaffToDelete] = useState<{ id: string; name: string } | null>(null);\n  const [isDeleting, setIsDeleting] = useState(false);\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const canManageStaff = user?.role === 'admin' || user?.role === 'secretary';\n\n  // Op√ß√µes de cargos dispon√≠veis\n  const positionOptions = [\n    { value: 'all', label: 'Todos os Cargos' },\n    { value: 'ceo', label: 'CEO' },\n    { value: 'diretor', label: 'Diretor' },\n    { value: 'financeiro', label: 'Financeiro' },\n    { value: 'administrativo', label: 'Administrativo' },\n    { value: 'coordenador', label: 'Coordenador' },\n    { value: 'instrutor', label: 'Instrutor' },\n    { value: 'professor', label: 'Professor(a)' },\n    { value: 'recepcionista', label: 'Recepcionista' },\n    { value: 'comercial', label: 'Comercial' },\n    { value: 'marketing', label: 'Marketing' },\n  ];\n\n  useEffect(() => {\n    if (!user) return;\n    if (!canManageStaff) {\n      window.location.href = '/dashboard';\n    }\n  }, [user, canManageStaff]);\n\n  const { data: staff = [], isLoading } = useQuery({\n    queryKey: ['staff'],\n    queryFn: async () => {\n      return await apiRequest('/api/staff');\n    },\n  });\n\n  const handleDeleteStaff = async (staffId: string, staffName: string) => {\n    setStaffToDelete({ id: staffId, name: staffName });\n    setDeleteConfirmOpen(true);\n  };\n\n  const confirmDeleteStaff = async () => {\n    if (!staffToDelete) return;\n\n    setIsDeleting(true);\n    try {\n      await apiRequest(`/api/staff/${staffToDelete.id}`, {\n        method: 'DELETE',\n      });\n\n      toast({\n        title: 'Sucesso!',\n        description: 'Colaborador exclu√≠do com sucesso!',\n      });\n      queryClient.invalidateQueries({ queryKey: ['staff'] });\n      setDeleteConfirmOpen(false);\n      setStaffToDelete(null);\n    } catch (error) {\n      console.error('Erro ao excluir colaborador:', error);\n      toast({\n        title: 'Erro',\n        description: 'Erro ao excluir colaborador',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsDeleting(false);\n    }\n  };\n\n  const handleViewDetails = (member: StaffMember) => {\n    // Implementar modal de detalhes ou navega√ß√£o para p√°gina de detalhes\n    const userName = member.user?.firstName && member.user?.lastName \n      ? `${member.user.firstName} ${member.user.lastName}`\n      : 'Nome n√£o informado';\n    \n    toast({\n      title: 'Informa√ß√£o',\n      description: `Visualizando detalhes de ${userName}`,\n    });\n  };\n\n  const getRoleIcon = (role: string) => {\n    switch (role) {\n      case 'admin': return 'fas fa-crown';\n      case 'secretary': return 'fas fa-user-tie';\n      case 'teacher': return 'fas fa-chalkboard-teacher';\n      case 'student': return 'fas fa-user-graduate';\n      default: return 'fas fa-user';\n    }\n  };\n\n  const filteredStaff = staff.filter((member: StaffMember) => {\n    // Filtro por nome\n    const fullName = member.user?.firstName && member.user?.lastName \n      ? `${member.user.firstName} ${member.user.lastName}`\n      : '';\n    const nameMatch = !searchName || \n      fullName.toLowerCase().includes(searchName.toLowerCase());\n    \n    // Filtro por cargo\n    const positionMatch = selectedPosition === 'all' || \n      member.position === selectedPosition;\n    \n    return nameMatch && positionMatch;\n  });\n\n  if (!canManageStaff) {\n    return null;\n  }\n\n  return (\n    <Layout>\n      <div className=\"space-y-6\">\n        <div className=\"flex justify-between items-center\">\n          <h1 className=\"text-3xl font-bold\">Colaboradores</h1>\n          <Button onClick={() => setModalOpen(true)}>\n            <i className=\"fas fa-plus mr-2\"></i>\n            Adicionar Colaborador\n          </Button>\n        </div>\n\n        {/* Filtros e Controles */}\n        <div className=\"flex justify-between items-center\">\n          <div></div> {/* Espa√ßo vazio √† esquerda */}\n          \n          <div className=\"flex items-center gap-3\">\n            {/* Filtro por Nome */}\n            <Input\n              placeholder=\"Pesquisar por nome...\"\n              value={searchName}\n              onChange={(e) => setSearchName(e.target.value)}\n              className=\"w-64\"\n            />\n            \n            {/* Filtro por Cargo */}\n            <Select value={selectedPosition} onValueChange={setSelectedPosition}>\n              <SelectTrigger className=\"w-48\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {positionOptions.map((option) => (\n                  <SelectItem key={option.value} value={option.value}>\n                    {option.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            \n            {/* Modo de Visualiza√ß√£o - Apenas √çcones */}\n            <div className=\"flex gap-1 border rounded-md p-1\">\n              <Button\n                variant={viewMode === 'cards' ? 'default' : 'ghost'}\n                size=\"sm\"\n                onClick={() => setViewMode('cards')}\n                className=\"px-3\"\n              >\n                <i className=\"fas fa-th\"></i>\n              </Button>\n              <Button\n                variant={viewMode === 'list' ? 'default' : 'ghost'}\n                size=\"sm\"\n                onClick={() => setViewMode('list')}\n                className=\"px-3\"\n              >\n                <i className=\"fas fa-list\"></i>\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {isLoading ? (\n          <div className=\"text-center py-8\">Carregando colaboradores...</div>\n        ) : filteredStaff.length === 0 ? (\n          <div className=\"text-center py-8 text-muted-foreground\">\n            {(searchName || selectedPosition !== 'all') ? 'Nenhum colaborador encontrado com os filtros aplicados.' : 'Nenhum colaborador cadastrado.'}\n          </div>\n        ) : viewMode === 'cards' ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {filteredStaff.map((member: StaffMember) => (\n              <Card key={member.id} className=\"hover:shadow-lg transition-all duration-200 hover:scale-[1.02]\">\n                <CardHeader className=\"pb-2 pt-4\">\n                  <div className=\"flex flex-col items-center text-center space-y-2\">\n                    <div className=\"w-12 h-12 rounded-full bg-gradient-to-br from-primary/20 to-primary/10 flex items-center justify-center shadow-sm\">\n                      <i className={`${getRoleIcon(member.user?.role || '')} text-primary text-lg`}></i>\n                    </div>\n                    <div className=\"space-y-1\">\n                      <CardTitle className=\"text-lg font-semibold text-gray-900 mb-1\">\n                        {member.user?.firstName && member.user?.lastName \n                          ? `${member.user.firstName} ${member.user.lastName}`\n                          : 'Nome n√£o informado'\n                        }\n                      </CardTitle>\n                      <Badge variant=\"secondary\" className=\"text-xs font-medium\">\n                        {member.user?.role === 'admin' && 'Administrador'}\n                        {member.user?.role === 'teacher' && 'Professor'}\n                        {member.user?.role === 'secretary' && 'Secret√°rio'}\n                        {member.user?.role === 'student' && 'Aluno'}\n                      </Badge>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"pt-0 pb-3\">\n                  <div className=\"space-y-2 mb-3\">\n                    {member.user?.email && (\n                      <div className=\"flex items-center text-sm text-muted-foreground bg-gray-50 p-2 rounded-md\">\n                        <i className=\"fas fa-envelope mr-2 w-4 text-gray-400\"></i>\n                        <span className=\"truncate flex-1\">{member.user.email}</span>\n                      </div>\n                    )}\n                    {member.position && (\n                      <div className=\"flex items-center text-sm text-muted-foreground bg-gray-50 p-2 rounded-md\">\n                        <i className=\"fas fa-briefcase mr-2 w-4 text-gray-400\"></i>\n                        <span className=\"flex-1\">{member.position}</span>\n                      </div>\n                    )}\n                    {member.department && (\n                      <div className=\"flex items-center text-sm text-muted-foreground bg-gray-50 p-2 rounded-md\">\n                        <i className=\"fas fa-building mr-2 w-4 text-gray-400\"></i>\n                        <span className=\"flex-1\">{member.department}</span>\n                      </div>\n                    )}\n                    <div className=\"flex items-center justify-center\">\n                      <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${\n                        member.isActive \n                          ? 'bg-green-100 text-green-800 border border-green-200' \n                          : 'bg-red-100 text-red-800 border border-red-200'\n                      }`}>\n                        <i className={`fas fa-circle mr-1 text-xs ${member.isActive ? 'text-green-500' : 'text-red-500'}`}></i>\n                        {member.isActive ? 'Ativo' : 'Inativo'}\n                      </span>\n                    </div>\n                  </div>\n                  {canManageStaff && (\n                    <div className=\"grid grid-cols-1 gap-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => {\n                          setSelectedStaff(member);\n                          setModalOpen(true);\n                        }}\n                        className=\"w-full justify-center hover:bg-blue-50 hover:border-blue-300 hover:text-blue-700 transition-colors h-8\"\n                      >\n                        <i className=\"fas fa-edit mr-2\"></i>\n                        Editar\n                      </Button>\n                      <div className=\"grid grid-cols-2 gap-2\">\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => handleViewDetails(member)}\n                          className=\"justify-center hover:bg-green-50 hover:border-green-300 hover:text-green-700 transition-colors h-8\"\n                        >\n                          <i className=\"fas fa-eye mr-1\"></i>\n                          Detalhes\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleDeleteStaff(member.id, \n                              member.user?.firstName && member.user?.lastName \n                                ? `${member.user.firstName} ${member.user.lastName}`\n                                : 'Nome n√£o informado'\n                            )}\n                          className=\"justify-center text-red-600 hover:text-red-700 hover:bg-red-50 hover:border-red-300 transition-colors h-8\"\n                        >\n                          <i className=\"fas fa-trash mr-1\"></i>\n                          Excluir\n                        </Button>\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          // Modo Lista\n          <div className=\"bg-white rounded-lg border shadow-sm\">\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-gradient-to-r from-gray-50 to-gray-100 border-b border-gray-200\">\n                  <tr>\n                    <th className=\"px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\n                      Colaborador\n                    </th>\n                    <th className=\"px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\n                      Cargo/Profiss√£o\n                    </th>\n                    <th className=\"px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\n                      Departamento\n                    </th>\n                    <th className=\"px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\n                      Status\n                    </th>\n                    <th className=\"px-6 py-4 text-center text-xs font-semibold text-gray-600 uppercase tracking-wider\">\n                      A√ß√µes\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-100\">\n                  {filteredStaff.map((member: StaffMember) => (\n                    <tr key={member.id} className=\"hover:bg-gray-50 transition-colors duration-150\">\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <div className=\"flex items-center\">\n                          <div className=\"w-10 h-10 rounded-full bg-gradient-to-br from-primary/20 to-primary/10 flex items-center justify-center mr-4 shadow-sm\">\n                            <i className={`${getRoleIcon(member.user?.role || '')} text-primary text-sm`}></i>\n                          </div>\n                          <div>\n                            <div className=\"text-sm font-semibold text-gray-900\">\n                              {member.user?.firstName && member.user?.lastName \n                                ? `${member.user.firstName} ${member.user.lastName}`\n                                : 'Nome n√£o informado'\n                              }\n                            </div>\n                            <div className=\"text-sm text-gray-500 truncate max-w-xs\">{member.user?.email}</div>\n                          </div>\n                        </div>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <div className=\"text-sm font-medium text-gray-900\">{member.position}</div>\n                        <Badge variant=\"secondary\" className=\"text-xs mt-1 font-medium\">\n                          {member.user?.role === 'admin' && 'Administrador'}\n                          {member.user?.role === 'teacher' && 'Professor'}\n                          {member.user?.role === 'secretary' && 'Secret√°rio'}\n                          {member.user?.role === 'student' && 'Aluno'}\n                        </Badge>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 font-medium\">\n                        {member.department}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium border ${\n                          member.isActive \n                            ? 'bg-green-100 text-green-800 border-green-200' \n                            : 'bg-red-100 text-red-800 border-red-200'\n                        }`}>\n                          <i className={`fas fa-circle mr-2 text-xs ${member.isActive ? 'text-green-500' : 'text-red-500'}`}></i>\n                          {member.isActive ? 'Ativo' : 'Inativo'}\n                        </span>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-center\">\n                        {canManageStaff && (\n                          <div className=\"flex justify-center space-x-2\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => {\n                                setSelectedStaff(member);\n                                setModalOpen(true);\n                              }}\n                              className=\"hover:bg-blue-50 hover:text-blue-700 transition-colors\"\n                              title=\"Editar colaborador\"\n                            >\n                              <i className=\"fas fa-edit\"></i>\n                            </Button>\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\"\n                              onClick={() => handleViewDetails(member)}\n                              className=\"hover:bg-green-50 hover:text-green-700 transition-colors\"\n                              title=\"Ver detalhes\"\n                            >\n                              <i className=\"fas fa-eye\"></i>\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleDeleteStaff(member.id, \n                              member.user?.firstName && member.user?.lastName \n                                ? `${member.user.firstName} ${member.user.lastName}`\n                                : 'Nome n√£o informado'\n                            )}\n                              className=\"text-red-600 hover:text-red-700 hover:bg-red-50 transition-colors\"\n                              title=\"Excluir colaborador\"\n                            >\n                              <i className=\"fas fa-trash\"></i>\n                            </Button>\n                          </div>\n                        )}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        )}\n      </div>\n\n      <StaffModal\n        open={modalOpen}\n        onOpenChange={(open) => {\n          setModalOpen(open);\n          if (!open) setSelectedStaff(null);\n        }}\n        staffMember={selectedStaff}\n      />\n\n      <ConfirmationModal\n        open={deleteConfirmOpen}\n        onOpenChange={setDeleteConfirmOpen}\n        title=\"Confirmar Exclus√£o\"\n        description={`Tem certeza de que deseja excluir o colaborador \"${staffToDelete?.name}\"? Esta a√ß√£o n√£o pode ser desfeita.`}\n        confirmText=\"Excluir\"\n        cancelText=\"Cancelar\"\n        onConfirm={confirmDeleteStaff}\n        isLoading={isDeleting}\n        variant=\"destructive\"\n      />\n    </Layout>\n  );\n}\n","size_bytes":19907},"frontend/client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"scripts/deploy-full.js":{"content":"#!/usr/bin/env node\n\nconst { execSync } = require('child_process');\nconst path = require('path');\nconst fs = require('fs');\n\n// Carregar configura√ß√µes\nconst config = require('../deploy.config.js');\n\nconsole.log('üöÄ Iniciando deploy completo (Frontend + Backend)...\\n');\n\nfunction runCommand(command, description) {\n  console.log(`üìã ${description}`);\n  console.log(`üíª Executando: ${command}\\n`);\n  \n  try {\n    const output = execSync(command, { \n      stdio: 'inherit',\n      cwd: process.cwd()\n    });\n    console.log('‚úÖ Sucesso!\\n');\n    return output;\n  } catch (error) {\n    console.error(`‚ùå Erro: ${error.message}\\n`);\n    process.exit(1);\n  }\n}\n\nfunction deployFull() {\n  const { server, paths, docker } = config;\n  \n  // Comandos SSH base\n  const sshBase = `ssh -p ${server.port} ${server.username}@${server.host}`;\n  \n  console.log('üîÑ Fazendo backup do banco de dados...');\n  runCommand(\n    `${sshBase} \"cd ${paths.app} && docker-compose exec -T database pg_dump -U postgres erp_idiomas > ${paths.backup}/backup_\\$(date +%Y%m%d_%H%M%S).sql\"`,\n    'Backup do banco de dados'\n  );\n  \n  console.log('üì¶ Enviando c√≥digo completo...');\n  runCommand(\n    `rsync -avz --delete --exclude node_modules --exclude .git --exclude dist --exclude build ./ ${server.username}@${server.host}:${paths.app}/`,\n    'Sincronizando todos os arquivos'\n  );\n  \n  console.log('üõë Parando todos os containers...');\n  runCommand(\n    `${sshBase} \"cd ${paths.app} && docker-compose down\"`,\n    'Parando todos os servi√ßos'\n  );\n  \n  console.log('üî® Fazendo rebuild completo...');\n  runCommand(\n    `${sshBase} \"cd ${paths.app} && docker-compose build --no-cache\"`,\n    'Build completo dos containers'\n  );\n  \n  console.log('‚ñ∂Ô∏è Iniciando todos os containers...');\n  runCommand(\n    `${sshBase} \"cd ${paths.app} && docker-compose up -d\"`,\n    'Iniciando todos os servi√ßos'\n  );\n  \n  console.log('‚è≥ Aguardando containers iniciarem...');\n  runCommand(\n    `${sshBase} \"sleep 10\"`,\n    'Aguardando inicializa√ß√£o'\n  );\n  \n  console.log('üîç Verificando status dos containers...');\n  runCommand(\n    `${sshBase} \"cd ${paths.app} && docker-compose ps\"`,\n    'Status dos containers'\n  );\n  \n  console.log('üìã Verificando logs dos servi√ßos...');\n  runCommand(\n    `${sshBase} \"cd ${paths.app} && docker-compose logs --tail=10\"`,\n    'Logs dos servi√ßos'\n  );\n  \n  console.log('üß™ Testando conectividade...');\n  runCommand(\n    `${sshBase} \"curl -f http://localhost:8080 > /dev/null && echo 'Frontend OK' || echo 'Frontend ERRO'\"`,\n    'Teste do frontend'\n  );\n  \n  runCommand(\n    `${sshBase} \"curl -f http://localhost:3000/api/health > /dev/null && echo 'Backend OK' || echo 'Backend pode estar iniciando...'\"`,\n    'Teste do backend'\n  );\n  \n  console.log('‚úÖ Deploy completo conclu√≠do com sucesso! üéâ\\n');\n  console.log('üîó Verifique se a aplica√ß√£o est√° funcionando corretamente.');\n  console.log('üåê Frontend: http://seu-dominio.com');\n  console.log('üîß Backend: http://seu-dominio.com/api');\n}\n\n// Verificar se as configura√ß√µes est√£o corretas\nif (!config.server.host || !config.server.username) {\n  console.error('‚ùå Erro: Configure o servidor no arquivo deploy.config.js');\n  process.exit(1);\n}\n\n// Executar deploy\ndeployFull();","size_bytes":3262},"frontend/client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"frontend/client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"frontend/client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"APIS_INSTRUCOES.md":{"content":"# APIs de Valida√ß√£o - Sistema de Colaboradores\n\nEste documento cont√©m as instru√ß√µes para uso das APIs de CPF e CEP implementadas no sistema.\n\n## API de CPF - Valida√ß√£o Algor√≠tmica\n\n### Descri√ß√£o\nO sistema utiliza valida√ß√£o algor√≠tmica de CPF implementada em JavaScript, **sem necessidade de API externa**. Isso garante:\n- ‚úÖ Valida√ß√£o instant√¢nea\n- ‚úÖ Sem custos ou limites de requisi√ß√µes\n- ‚úÖ Funcionamento offline\n- ‚úÖ Sem depend√™ncias externas\n\n### Como Funciona\nA valida√ß√£o de CPF segue o algoritmo oficial da Receita Federal:\n1. Remove caracteres n√£o num√©ricos\n2. Verifica se tem exatamente 11 d√≠gitos\n3. Verifica se n√£o s√£o todos d√≠gitos iguais (ex: 111.111.111-11)\n4. Calcula e valida os dois d√≠gitos verificadores\n\n### Implementa√ß√£o\nA fun√ß√£o est√° localizada em: `frontend/client/src/lib/cpfUtils.ts`\n\n```typescript\nvalidateCPF(cpf: string): boolean\n```\n\n### Uso no Formul√°rio\n- O CPF √© formatado automaticamente enquanto o usu√°rio digita\n- A valida√ß√£o ocorre ao sair do campo (onBlur)\n- Exibe mensagem de erro se o CPF for inv√°lido\n- Aceita CPF com ou sem formata√ß√£o (000.000.000-00 ou 00000000000)\n\n---\n\n## API de CEP - ViaCEP\n\n### Descri√ß√£o\nO sistema utiliza a API p√∫blica **ViaCEP** para buscar endere√ßos automaticamente.\n\n**URL da API**: https://viacep.com.br\n\n### Caracter√≠sticas\n- ‚úÖ **Totalmente gratuita**\n- ‚úÖ Sem necessidade de cadastro ou chave de API\n- ‚úÖ Limite: ~300 requisi√ß√µes por minuto\n- ‚úÖ Resposta em JSON\n- ‚úÖ Cobertura nacional (todo o Brasil)\n\n### Endpoint\n```\nGET https://viacep.com.br/ws/{cep}/json/\n```\n\n### Exemplo de Requisi√ß√£o\n```bash\ncurl https://viacep.com.br/ws/01310100/json/\n```\n\n### Exemplo de Resposta\n```json\n{\n  \"cep\": \"01310-100\",\n  \"logradouro\": \"Avenida Paulista\",\n  \"complemento\": \"\",\n  \"bairro\": \"Bela Vista\",\n  \"localidade\": \"S√£o Paulo\",\n  \"uf\": \"SP\",\n  \"ibge\": \"3550308\",\n  \"gia\": \"1004\",\n  \"ddd\": \"11\",\n  \"siafi\": \"7107\"\n}\n```\n\n### Resposta de Erro\nQuando o CEP n√£o √© encontrado:\n```json\n{\n  \"erro\": true\n}\n```\n\n### Implementa√ß√£o no Sistema\nA fun√ß√£o est√° localizada em: `frontend/client/src/lib/cpfUtils.ts`\n\n```typescript\nfetchAddressByCEP(cep: string): Promise<{\n  logradouro: string;\n  bairro: string;\n  localidade: string;\n  uf: string;\n  erro?: boolean;\n}>\n```\n\n### Uso no Formul√°rio\n1. Usu√°rio digita o CEP (formatado automaticamente: 00000-000)\n2. Ao sair do campo (onBlur), a API √© consultada\n3. Se encontrado, os campos s√£o preenchidos automaticamente:\n   - Endere√ßo (logradouro)\n   - Bairro\n   - Cidade (localidade + UF)\n4. Se n√£o encontrado, exibe mensagem de erro\n5. Usu√°rio pode preencher manualmente se necess√°rio\n\n### Campos Preenchidos Automaticamente\n- ‚úÖ **Endere√ßo**: Nome da rua/avenida\n- ‚úÖ **Bairro**: Nome do bairro\n- ‚úÖ **Cidade**: Cidade + Estado (ex: \"S√£o Paulo - SP\")\n\n### Campos que Precisam ser Preenchidos Manualmente\n- ‚ö†Ô∏è **N√∫mero**: N√∫mero do im√≥vel\n- ‚ö†Ô∏è **Complemento**: Apartamento, bloco, etc (opcional)\n\n---\n\n## Formata√ß√£o Autom√°tica\n\nO sistema implementa formata√ß√£o autom√°tica para facilitar o preenchimento:\n\n### CPF\n- **Entrada**: `12345678900`\n- **Sa√≠da**: `123.456.789-00`\n\n### CEP\n- **Entrada**: `01310100`\n- **Sa√≠da**: `01310-100`\n\n### Telefone/WhatsApp\n- **Celular (11 d√≠gitos)**: `(11) 98765-4321`\n- **Fixo (10 d√≠gitos)**: `(11) 3456-7890`\n\n---\n\n## Limita√ß√µes e Boas Pr√°ticas\n\n### ViaCEP\n1. **Limite de requisi√ß√µes**: ~300 por minuto\n   - Para aplica√ß√µes de alto volume, considere implementar cache\n   - O sistema j√° implementa debounce para evitar requisi√ß√µes excessivas\n\n2. **CEPs especiais**:\n   - Alguns CEPs (como de grandes empresas) podem n√£o retornar logradouro\n   - Nestes casos, permita preenchimento manual\n\n3. **Timeout**:\n   - A API geralmente responde em < 1 segundo\n   - O sistema exibe um loading durante a busca\n\n### Valida√ß√£o de CPF\n1. **CPFs v√°lidos mas n√£o existentes**:\n   - A valida√ß√£o algor√≠tmica verifica apenas se o formato est√° correto\n   - N√£o verifica se o CPF existe na Receita Federal\n   - Para valida√ß√£o real, seria necess√°ria integra√ß√£o com a Receita Federal (paga)\n\n2. **Unicidade**:\n   - O sistema impede cadastro de CPF duplicado no banco de dados\n   - A valida√ß√£o de unicidade √© feita no backend\n\n---\n\n## Documenta√ß√£o Oficial\n\n- **ViaCEP**: https://viacep.com.br\n- **Algoritmo de CPF**: https://www.geradorcpf.com/algoritmo_do_cpf.htm\n\n---\n\n## Notas de Implementa√ß√£o\n\n### Seguran√ßa\n- ‚úÖ Valida√ß√£o tamb√©m √© feita no backend\n- ‚úÖ CPF √© armazenado sem formata√ß√£o no banco de dados\n- ‚úÖ Sanitiza√ß√£o de entradas para prevenir inje√ß√£o\n\n### Performance\n- ‚úÖ Valida√ß√£o de CPF √© instant√¢nea (cliente)\n- ‚úÖ API de CEP responde em < 1 segundo\n- ‚úÖ Loading visual durante busca de CEP\n\n### Acessibilidade\n- ‚úÖ Mensagens de erro claras\n- ‚úÖ Formata√ß√£o autom√°tica facilita o preenchimento\n- ‚úÖ Campos obrigat√≥rios marcados com *\n","size_bytes":4912},"frontend/client/src/components/StudentLayout.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { LogOut } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { ThemeToggle } from \"@/components/ThemeToggle\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { useQueryClient } from \"@tanstack/react-query\";\n\ninterface StudentLayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function StudentLayout({ children }: StudentLayoutProps) {\n  const { user, isLoading, isAuthenticated } = useAuth();\n  const queryClient = useQueryClient();\n  const [location] = useLocation();\n\n  const handleLogout = () => {\n    // Clear all queries and local storage (JWT logout is client-side only)\n    queryClient.clear();\n    localStorage.removeItem(\"authToken\");\n    localStorage.removeItem(\"user\");\n\n    // Redirect to login page\n    window.location.href = \"/\";\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900\">\n        <div className=\"text-center\">\n          <div className=\"w-12 h-12 bg-primary rounded-2xl flex items-center justify-center mx-auto mb-4\">\n            <i className=\"fas fa-graduation-cap text-primary-foreground text-xl animate-pulse\"></i>\n          </div>\n          <p className=\"text-muted-foreground\">Carregando...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null; // Will be handled by the routing\n  }\n\n  const studentMenuItems = [\n    {\n      path: \"/\",\n      label: \"Dashboard\",\n      icon: \"fas fa-home\",\n    },\n    {\n      path: \"/aluno/workbook\",\n      label: \"Workbook\",\n      icon: \"fas fa-book\",\n    },\n    {\n      path: \"/aluno/provas\",\n      label: \"Provas\",\n      icon: \"fas fa-clipboard-check\",\n    },\n    {\n      path: \"/aluno/cronograma\",\n      label: \"Cronograma\",\n      icon: \"fas fa-calendar-alt\",\n    },\n    {\n      path: \"/aluno/progresso\",\n      label: \"Meu Progresso\",\n      icon: \"fas fa-chart-line\",\n    },\n  ];\n\n  const isActive = (path: string) => {\n    if (path === \"/\" && (location === \"/\" || location === \"/student-area\"))\n      return true;\n    if (path !== \"/\" && location.startsWith(path)) return true;\n    return false;\n  };\n\n  // Mock progress data - replace with real data from API\n  const progressData = {\n    overall: 65,\n    course: \"Journey ‚Ä¢ Intermedi√°rio\",\n    level: \"Book 3\",\n    completedLessons: 23,\n    totalLessons: 35,\n  };\n\n  const initials = user ? `${user.firstName?.[0] || ''}${user.lastName?.[0] || ''}`.toUpperCase() : 'U';\n\n  return (\n    <div className=\"min-h-screen flex bg-gradient-to-br from-blue-50 via-white to-purple-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900\">\n      {/* Sidebar with Profile */}\n      <aside className=\"w-72 hidden md:flex md:flex-col bg-white/80 dark:bg-gray-800/80 backdrop-blur-md border-r border-gray-200/50 dark:border-gray-700/50\">\n        {/* Logo */}\n        <div className=\"h-16 px-4 flex items-center gap-3 border-b border-gray-200/50 dark:border-gray-700/50\">\n          <div className=\"w-8 h-8 bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg flex items-center justify-center\">\n            <i className=\"fas fa-graduation-cap text-white text-sm\"></i>\n          </div>\n          <span className=\"text-lg font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">OpenLife</span>\n        </div>\n\n        {/* Profile Section */}\n        <div className=\"p-4 border-b border-gray-200/50 dark:border-gray-700/50\">\n          <div className=\"flex items-center gap-3 mb-4\" data-testid=\"profile-section\">\n            <Avatar className=\"h-14 w-14 ring-2 ring-blue-500\">\n              <AvatarFallback className=\"bg-gradient-to-r from-blue-500 to-purple-500 text-white font-semibold text-lg\">\n                {initials}\n              </AvatarFallback>\n            </Avatar>\n            <div className=\"flex-1 min-w-0\">\n              <h3 className=\"font-semibold text-gray-900 dark:text-gray-100 truncate\" data-testid=\"text-student-name\">\n                {user?.firstName} {user?.lastName}\n              </h3>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400 truncate\">\n                Estudante\n              </p>\n            </div>\n          </div>\n\n          {/* Progress Card */}\n          <div className=\"bg-gradient-to-br from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20 rounded-lg p-3 space-y-3\">\n            <div>\n              <div className=\"flex items-center justify-between mb-1\">\n                <span className=\"text-xs font-medium text-gray-700 dark:text-gray-300\">\n                  Progresso Geral\n                </span>\n                <span className=\"text-xs font-bold text-blue-600 dark:text-blue-400\" data-testid=\"text-progress-percentage\">\n                  {progressData.overall}%\n                </span>\n              </div>\n              <Progress value={progressData.overall} className=\"h-2\" data-testid=\"progress-bar-overall\" />\n            </div>\n            \n            <div className=\"text-xs space-y-1\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-gray-600 dark:text-gray-400\">Curso:</span>\n                <span className=\"font-medium text-gray-900 dark:text-gray-100\" data-testid=\"text-current-course\">\n                  {progressData.course}\n                </span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-gray-600 dark:text-gray-400\">N√≠vel:</span>\n                <span className=\"font-medium text-gray-900 dark:text-gray-100\" data-testid=\"text-current-level\">\n                  {progressData.level}\n                </span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-gray-600 dark:text-gray-400\">Li√ß√µes:</span>\n                <span className=\"font-medium text-gray-900 dark:text-gray-100\" data-testid=\"text-lessons-completed\">\n                  {progressData.completedLessons}/{progressData.totalLessons}\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Navigation */}\n        <nav className=\"flex-1 p-3 space-y-1 overflow-y-auto\">\n          {studentMenuItems.map((item) => (\n            <Link\n              key={item.path}\n              href={item.path}\n              className={`flex items-center gap-3 px-3 py-2 rounded-lg transition-colors ${\n                isActive(item.path)\n                  ? 'bg-gradient-to-r from-blue-500 to-purple-500 text-white'\n                  : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100/60 dark:hover:bg-gray-700/50'\n              }`}\n              data-testid={`link-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n            >\n              <i className={`${item.icon}`}></i>\n              <span>{item.label}</span>\n            </Link>\n          ))}\n        </nav>\n\n        {/* Footer with Logout */}\n        <div className=\"p-3 border-t border-gray-200/50 dark:border-gray-700/50\">\n          <button \n            onClick={handleLogout} \n            className=\"w-full flex items-center gap-2 px-3 py-2 rounded-lg text-left text-gray-700 dark:text-gray-300 hover:bg-gray-100/60 dark:hover:bg-gray-700/50 transition-colors\"\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"h-4 w-4\" /> Sair\n          </button>\n        </div>\n      </aside>\n\n      {/* Content area */}\n      <div className=\"flex-1 flex flex-col min-w-0\">\n        {/* Mobile Header */}\n        <header className=\"md:hidden sticky top-0 z-40 bg-white/80 dark:bg-gray-800/80 backdrop-blur-md border-b border-gray-200/50 dark:border-gray-700/50\">\n          <div className=\"h-14 px-4 flex items-center justify-between\">\n            <span className=\"text-base font-semibold\">OpenLife</span>\n            <ThemeToggle />\n          </div>\n        </header>\n\n        {/* Main Content */}\n        <main className=\"flex-1 px-4 sm:px-6 lg:px-8 py-6 overflow-y-auto\">\n          {children}\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8154},"frontend/client/src/components/StatsCard.tsx":{"content":"interface StatsCardProps {\n  title: string;\n  value: string | number;\n  change?: string;\n  changeType?: 'positive' | 'negative' | 'neutral';\n  icon: string;\n  iconColor: 'blue' | 'green' | 'purple' | 'yellow' | 'red';\n  'data-testid'?: string;\n}\n\nexport default function StatsCard({ \n  title, \n  value, \n  change, \n  changeType = 'neutral', \n  icon, \n  iconColor,\n  'data-testid': testId \n}: StatsCardProps) {\n  \n  const getIconBgColor = (color: string) => {\n    switch (color) {\n      case 'blue': return 'bg-blue-100';\n      case 'green': return 'bg-green-100';\n      case 'purple': return 'bg-purple-100';\n      case 'yellow': return 'bg-yellow-100';\n      case 'red': return 'bg-red-100';\n      default: return 'bg-gray-100';\n    }\n  };\n\n  const getIconTextColor = (color: string) => {\n    switch (color) {\n      case 'blue': return 'text-blue-600';\n      case 'green': return 'text-green-600';\n      case 'purple': return 'text-purple-600';\n      case 'yellow': return 'text-yellow-600';\n      case 'red': return 'text-red-600';\n      default: return 'text-gray-600';\n    }\n  };\n\n  const getChangeColor = (type: string) => {\n    switch (type) {\n      case 'positive': return 'text-green-600';\n      case 'negative': return 'text-red-600';\n      default: return 'text-muted-foreground';\n    }\n  };\n\n  return (\n    <div \n      className=\"bg-card rounded-lg border border-border p-6 shadow-sm card-hover transition-smooth\"\n      data-testid={testId}\n    >\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <p className=\"text-sm font-medium text-muted-foreground\">{title}</p>\n          <p className=\"text-3xl font-bold text-foreground\" data-testid={`${testId}-value`}>\n            {value}\n          </p>\n          {change && (\n            <p className={`text-sm mt-1 ${getChangeColor(changeType)}`}>\n              {changeType === 'positive' && <i className=\"fas fa-arrow-up mr-1\"></i>}\n              {changeType === 'negative' && <i className=\"fas fa-arrow-down mr-1\"></i>}\n              <span data-testid={`${testId}-change`}>{change}</span>\n              {changeType !== 'neutral' && ' este m√™s'}\n            </p>\n          )}\n        </div>\n        <div className={`w-12 h-12 ${getIconBgColor(iconColor)} rounded-lg flex items-center justify-center`}>\n          <i className={`${icon} ${getIconTextColor(iconColor)} text-xl`}></i>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2414},"frontend/client/src/components/TeacherScheduleManager.tsx":{"content":"import React, { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useToast } from '@/hooks/use-toast';\nimport { Loader2, Plus } from 'lucide-react';\n\ninterface Teacher {\n  id: string;\n  name: string;\n  email: string;\n}\n\ninterface Class {\n  id: string;\n  name: string;\n  book: {\n    id: string;\n    name: string;\n    course: {\n      id: string;\n      name: string;\n    };\n  };\n  teacher: {\n    id: string;\n    name: string;\n  };\n  unit: {\n    id: string;\n    name: string;\n  };\n}\n\ninterface TimeSlot {\n  day: string;\n  time: string;\n  isOccupied: boolean;\n  classInfo?: {\n    id: string;\n    name: string;\n    room: string;\n    course: string;\n  };\n}\n\ninterface TeacherSchedule {\n  teacherId: string;\n  teacherName: string;\n  occupiedSlots: TimeSlot[];\n  availableSlots: TimeSlot[];\n}\n\ninterface LessonFormData {\n  classId: string;\n  teacherId: string;\n  title: string;\n  bookDay: number;\n  date: string;\n  startTime: string;\n  endTime: string;\n  room: string;\n  notes: string;\n}\n\nconst TeacherScheduleManager: React.FC = () => {\n  const [selectedTeacherId, setSelectedTeacherId] = useState<string>('');\n  const [selectedSlot, setSelectedSlot] = useState<TimeSlot | null>(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [lessonForm, setLessonForm] = useState<LessonFormData>({\n    classId: '',\n    teacherId: '',\n    title: '',\n    bookDay: 1,\n    date: '',\n    startTime: '',\n    endTime: '',\n    room: '',\n    notes: ''\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch teachers\n  const { data: teachers, isLoading: teachersLoading } = useQuery<Teacher[]>({\n    queryKey: ['teachers'],\n    queryFn: async () => {\n      const response = await fetch('/api/teachers');\n      if (!response.ok) throw new Error('Erro ao buscar professores');\n      return response.json();\n    }\n  });\n\n  // Fetch classes\n  const { data: classes, isLoading: classesLoading } = useQuery<Class[]>({\n    queryKey: ['classes'],\n    queryFn: async () => {\n      const response = await fetch('/api/classes');\n      if (!response.ok) throw new Error('Erro ao buscar turmas');\n      return response.json();\n    }\n  });\n\n  // Fetch teacher schedule\n  const { data: schedule, isLoading: scheduleLoading } = useQuery<TeacherSchedule>({\n    queryKey: ['teacher-schedule', selectedTeacherId],\n    queryFn: async () => {\n      const response = await fetch(`/api/teachers/${selectedTeacherId}/schedule`);\n      if (!response.ok) throw new Error('Erro ao buscar hor√°rios do professor');\n      return response.json();\n    },\n    enabled: !!selectedTeacherId\n  });\n\n  // Create lesson mutation\n  const createLessonMutation = useMutation({\n    mutationFn: async (lessonData: LessonFormData) => {\n      const response = await fetch('/api/lessons', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(lessonData)\n      });\n      if (!response.ok) throw new Error('Erro ao criar aula');\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Sucesso',\n        description: 'Aula cadastrada com sucesso!'\n      });\n      queryClient.invalidateQueries({ queryKey: ['teacher-schedule', selectedTeacherId] });\n      setIsModalOpen(false);\n      resetForm();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: 'Erro',\n        description: error.message,\n        variant: 'destructive'\n      });\n    }\n  });\n\n  const resetForm = () => {\n    setLessonForm({\n      classId: '',\n      teacherId: selectedTeacherId === 'all' ? '' : selectedTeacherId, // Pr√©-seleciona professor se espec√≠fico\n      title: '',\n      bookDay: 1,\n      date: '',\n      startTime: '',\n      endTime: '',\n      room: '',\n      notes: ''\n    });\n  };\n\n  const handleSlotClick = (slot: TimeSlot) => {\n    if (slot.isOccupied) {\n      toast({\n        title: \"Hor√°rio Ocupado\",\n        description: `Este hor√°rio j√° est√° ocupado pela turma ${slot.classInfo?.name}`,\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setSelectedSlot(slot);\n    resetForm();\n    \n    // Pr√©-preenche data e hor√°rio baseado no slot clicado\n    const today = new Date();\n    const dayIndex = ['Segunda', 'Ter√ßa', 'Quarta', 'Quinta', 'Sexta', 'S√°bado'].indexOf(slot.day);\n    const nextDate = new Date(today);\n    nextDate.setDate(today.getDate() + ((dayIndex + 1 - today.getDay() + 7) % 7));\n    \n    setLessonForm(prev => ({\n      ...prev,\n      teacherId: selectedTeacherId === 'all' ? '' : selectedTeacherId, // Pr√©-seleciona professor se espec√≠fico\n      date: nextDate.toISOString().split('T')[0],\n      startTime: slot.time,\n      endTime: getEndTime(slot.time)\n    }));\n    \n    setIsModalOpen(true);\n  };\n\n  const getEndTime = (startTime: string): string => {\n    const [hours, minutes] = startTime.split(':').map(Number);\n    const endHour = hours + 1;\n    return `${endHour.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\n  };\n\n  const handleFormSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!lessonForm.classId || !lessonForm.title || !lessonForm.teacherId) {\n      toast({\n        title: \"Campos obrigat√≥rios\",\n        description: \"Por favor, preencha todos os campos obrigat√≥rios\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    createLessonMutation.mutate({\n      classId: lessonForm.classId,\n      teacherId: lessonForm.teacherId,\n      title: lessonForm.title,\n      bookDay: lessonForm.bookDay,\n      date: lessonForm.date,\n      startTime: lessonForm.startTime,\n      endTime: lessonForm.endTime,\n      room: lessonForm.room,\n      notes: lessonForm.notes\n    });\n  };\n\n  const handleClassChange = (classId: string) => {\n    const selectedClass = classes?.find(c => c.id === classId);\n    if (selectedClass) {\n      setLessonForm(prev => ({\n        ...prev,\n        classId,\n        title: `Aula - ${selectedClass.book.course.name} - ${selectedClass.book.name}`\n      }));\n    }\n  };\n\n  const renderScheduleGrid = () => {\n    if (!schedule) return null;\n\n    const days = ['Segunda', 'Ter√ßa', 'Quarta', 'Quinta', 'Sexta', 'S√°bado'];\n    const hours = Array.from({ length: 13 }, (_, i) => `${(8 + i).toString().padStart(2, '0')}:00`);\n\n    const allSlots = [...schedule.occupiedSlots, ...schedule.availableSlots];\n\n    return (\n      <div className=\"overflow-x-auto\">\n        <div className=\"min-w-[800px] grid grid-cols-7 gap-1 mt-4\">\n          <div className=\"font-semibold text-center p-2 text-sm md:text-base\">Hor√°rio</div>\n          {days.map(day => (\n            <div key={day} className=\"font-semibold text-center p-2 text-xs md:text-sm lg:text-base\">\n              <span className=\"hidden sm:inline\">{day}</span>\n              <span className=\"sm:hidden\">{day.slice(0, 3)}</span>\n            </div>\n          ))}\n          \n          {hours.map(hour => (\n            <React.Fragment key={hour}>\n              <div className=\"text-center p-1 md:p-2 border bg-gray-50 text-xs md:text-sm\">{hour}</div>\n              {days.map(day => {\n                const slot = allSlots.find(s => s.day === day && s.time === hour);\n                return (\n                  <div\n                    key={`${day}-${hour}`}\n                    className={`p-1 md:p-2 border cursor-pointer transition-colors min-h-[40px] md:min-h-[50px] ${\n                      slot?.isOccupied\n                        ? 'bg-red-100 hover:bg-red-200'\n                        : 'bg-green-100 hover:bg-green-200'\n                    }`}\n                    onClick={() => slot && handleSlotClick(slot)}\n                  >\n                    {slot?.isOccupied ? (\n                      <div className=\"text-xs\">\n                        <div className=\"font-semibold truncate\">{slot.classInfo?.name}</div>\n                        <div className=\"truncate\">{slot.classInfo?.room}</div>\n                      </div>\n                    ) : (\n                      <div className=\"text-xs text-center\">\n                        <span className=\"hidden md:inline\">Dispon√≠vel</span>\n                        <span className=\"md:hidden\">Livre</span>\n                      </div>\n                    )}\n                  </div>\n                );\n              })}\n            </React.Fragment>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Gerenciamento de Hor√°rios</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"teacher-select\">Selecionar Professor</Label>\n              <Select value={selectedTeacherId} onValueChange={setSelectedTeacherId}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Escolha um professor\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todos os professores</SelectItem>\n                  {teachers?.map(teacher => (\n                    <SelectItem key={teacher.id} value={teacher.id}>\n                      {teacher.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {teachersLoading && (\n              <div className=\"flex items-center justify-center p-4\">\n                <Loader2 className=\"h-6 w-6 animate-spin\" />\n                <span className=\"ml-2\">Carregando professores...</span>\n              </div>\n            )}\n\n            {scheduleLoading && selectedTeacherId && selectedTeacherId !== 'all' && (\n              <div className=\"flex items-center justify-center p-4\">\n                <Loader2 className=\"h-6 w-6 animate-spin\" />\n                <span className=\"ml-2\">Carregando hor√°rios...</span>\n              </div>\n            )}\n\n            {selectedTeacherId === 'all' && (\n              <div className=\"text-center p-8 text-gray-500\">\n                <p>Selecione um professor espec√≠fico para visualizar os hor√°rios</p>\n                <p className=\"text-sm mt-2\">Ou clique em \"Cadastrar Nova Aula\" para agendar uma aula</p>\n                <Button \n                  onClick={() => {\n                    resetForm();\n                    setIsModalOpen(true);\n                  }}\n                  className=\"mt-4\"\n                >\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Cadastrar Nova Aula\n                </Button>\n              </div>\n            )}\n\n            {schedule && selectedTeacherId !== 'all' && renderScheduleGrid()}\n          </div>\n        </CardContent>\n      </Card>\n\n      <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>\n        <DialogContent className=\"max-w-md sm:max-w-lg md:max-w-xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Cadastrar Nova Aula</DialogTitle>\n          </DialogHeader>\n          <form onSubmit={handleFormSubmit} className=\"space-y-4\">\n            {/* Campo de sele√ß√£o de professor - s√≥ aparece quando \"Todos os professores\" est√° selecionado */}\n            {selectedTeacherId === 'all' && (\n              <div>\n                <Label htmlFor=\"teacher-select-modal\">Professor *</Label>\n                <Select value={lessonForm.teacherId} onValueChange={(value) => setLessonForm(prev => ({ ...prev, teacherId: value }))}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Selecione um professor\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {teachers?.map(teacher => (\n                      <SelectItem key={teacher.id} value={teacher.id}>\n                        {teacher.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            )}\n\n            <div>\n              <Label htmlFor=\"class-select\">Turma *</Label>\n              <Select value={lessonForm.classId} onValueChange={handleClassChange}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Selecione uma turma\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {classes?.map(classItem => (\n                    <SelectItem key={classItem.id} value={classItem.id}>\n                      {classItem.name} - {classItem.book.course.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"title\">T√≠tulo da Aula *</Label>\n              <Input\n                id=\"title\"\n                value={lessonForm.title}\n                onChange={(e) => setLessonForm(prev => ({ ...prev, title: e.target.value }))}\n                placeholder=\"Ex: Aula 1 - Introdu√ß√£o\"\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"bookDay\">Dia do Livro</Label>\n                <Input\n                  id=\"bookDay\"\n                  type=\"number\"\n                  min=\"1\"\n                  value={lessonForm.bookDay}\n                  onChange={(e) => setLessonForm(prev => ({ ...prev, bookDay: parseInt(e.target.value) || 1 }))}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"room\">Sala</Label>\n                <Input\n                  id=\"room\"\n                  value={lessonForm.room}\n                  onChange={(e) => setLessonForm(prev => ({ ...prev, room: e.target.value }))}\n                  placeholder=\"Ex: Sala 101\"\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-3 gap-4\">\n              <div>\n                <Label htmlFor=\"date\">Data</Label>\n                <Input\n                  id=\"date\"\n                  type=\"date\"\n                  value={lessonForm.date}\n                  onChange={(e) => setLessonForm(prev => ({ ...prev, date: e.target.value }))}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"startTime\">In√≠cio</Label>\n                <Input\n                  id=\"startTime\"\n                  type=\"time\"\n                  value={lessonForm.startTime}\n                  onChange={(e) => setLessonForm(prev => ({ ...prev, startTime: e.target.value }))}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"endTime\">Fim</Label>\n                <Input\n                  id=\"endTime\"\n                  type=\"time\"\n                  value={lessonForm.endTime}\n                  onChange={(e) => setLessonForm(prev => ({ ...prev, endTime: e.target.value }))}\n                />\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"notes\">Observa√ß√µes</Label>\n              <Textarea\n                id=\"notes\"\n                value={lessonForm.notes}\n                onChange={(e) => setLessonForm(prev => ({ ...prev, notes: e.target.value }))}\n                placeholder=\"Observa√ß√µes sobre a aula...\"\n                rows={3}\n              />\n            </div>\n\n            <div className=\"flex justify-end space-x-2\">\n              <Button type=\"button\" variant=\"outline\" onClick={() => setIsModalOpen(false)}>\n                Cancelar\n              </Button>\n              <Button type=\"submit\" disabled={createLessonMutation.isPending}>\n                {createLessonMutation.isPending ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n                    Cadastrando...\n                  </>\n                ) : (\n                  <>\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Cadastrar Aula\n                  </>\n                )}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default TeacherScheduleManager;","size_bytes":16493},"frontend/client/src/components/ThemeToggle.tsx":{"content":"\nimport { Moon, Sun } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { useTheme } from '@/contexts/ThemeContext';\n\nexport function ThemeToggle() {\n  const { theme, toggleTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      className=\"relative w-9 h-9 rounded-lg transition-all duration-300 hover:bg-accent/50\"\n      aria-label={`Alternar para tema ${theme === 'light' ? 'escuro' : 'claro'}`}\n    >\n      <Sun className={`h-4 w-4 absolute transition-all duration-500 ${\n        theme === 'dark' \n          ? 'rotate-90 scale-0 opacity-0' \n          : 'rotate-0 scale-100 opacity-100'\n      }`} />\n      <Moon className={`h-4 w-4 absolute transition-all duration-500 ${\n        theme === 'light' \n          ? '-rotate-90 scale-0 opacity-0' \n          : 'rotate-0 scale-100 opacity-100'\n      }`} />\n    </Button>\n  );\n}\n","size_bytes":915},"frontend/client/src/pages/Settings.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useTheme } from \"@/contexts/ThemeContext\";\nimport Layout from \"@/components/Layout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ThemeToggle } from \"@/components/ThemeToggle\";\nimport {\n  Settings as SettingsIcon,\n  User,\n  Bell,\n  Shield,\n  Palette,\n  Globe,\n  Database,\n  Zap,\n  Save,\n  RotateCcw,\n  Download,\n  Upload,\n  Trash2,\n  AlertTriangle\n} from \"lucide-react\";\n\nexport default function Settings() {\n  const { user } = useAuth();\n  const { theme } = useTheme();\n  const { toast } = useToast();\n  \n  // Estado para configura√ß√µes\n  const [notifications, setNotifications] = useState({\n    emailNotifications: true,\n    pushNotifications: false,\n    systemAlerts: true,\n    lessonReminders: true,\n    weeklyReports: false,\n  });\n\n  const [systemSettings, setSystemSettings] = useState({\n    language: \"pt-BR\",\n    timezone: \"America/Sao_Paulo\",\n    dateFormat: \"DD/MM/YYYY\",\n    currency: \"BRL\",\n    autoSave: true,\n    debugMode: false,\n  });\n\n  const [profileSettings, setProfileSettings] = useState({\n    firstName: user?.firstName || \"\",\n    lastName: user?.lastName || \"\",\n    email: user?.email || \"\",\n    phone: \"\",\n    department: \"\",\n  });\n\n  const [securitySettings, setSecuritySettings] = useState({\n    twoFactorEnabled: false,\n    sessionTimeout: 30,\n    loginAlerts: true,\n    passwordChangeRequired: false,\n  });\n\n  const isAdmin = user?.role === 'admin';\n\n  const handleSaveSettings = (section: string) => {\n    toast({\n      title: \"Configura√ß√µes salvas\",\n      description: `As configura√ß√µes de ${section} foram salvas com sucesso.`,\n    });\n  };\n\n  const handleResetSettings = (section: string) => {\n    toast({\n      title: \"Configura√ß√µes resetadas\",\n      description: `As configura√ß√µes de ${section} foram resetadas para o padr√£o.`,\n      variant: \"destructive\",\n    });\n  };\n\n  const handleExportData = () => {\n    toast({\n      title: \"Exporta√ß√£o iniciada\",\n      description: \"Seus dados est√£o sendo preparados para download.\",\n    });\n  };\n\n  const handleImportData = () => {\n    toast({\n      title: \"Importa√ß√£o de dados\",\n      description: \"Recurso dispon√≠vel em breve.\",\n    });\n  };\n\n  if (!user) {\n    return (\n      <Layout>\n        <div className=\"p-6\">\n          <div className=\"text-center\">\n            <h2 className=\"text-2xl font-bold text-destructive mb-4\">Acesso Negado</h2>\n            <p className=\"text-muted-foreground\">\n              Voc√™ precisa estar logado para acessar as configura√ß√µes.\n            </p>\n          </div>\n        </div>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout>\n      <div className=\"p-6 space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n              <SettingsIcon className=\"h-6 w-6 text-primary-foreground\" />\n            </div>\n            <div>\n              <h1 className=\"text-2xl font-semibold text-foreground\" data-testid=\"text-settings-title\">\n                Configura√ß√µes\n              </h1>\n              <p className=\"text-sm text-muted-foreground\">\n                Gerencie suas prefer√™ncias e configura√ß√µes do sistema\n              </p>\n            </div>\n          </div>\n          <Badge variant=\"secondary\">\n            {user.role === 'admin' && 'Administrador'}\n            {user.role === 'teacher' && 'Professor'}\n            {user.role === 'secretary' && 'Secret√°rio'}\n            {user.role === 'student' && 'Estudante'}\n          </Badge>\n        </div>\n\n        <Tabs defaultValue=\"appearance\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-2 md:grid-cols-4 lg:grid-cols-6\">\n            <TabsTrigger value=\"appearance\" className=\"flex items-center space-x-1\">\n              <Palette className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Apar√™ncia</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"account\" className=\"flex items-center space-x-1\">\n              <User className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Conta</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"notifications\" className=\"flex items-center space-x-1\">\n              <Bell className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Notifica√ß√µes</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"security\" className=\"flex items-center space-x-1\">\n              <Shield className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Seguran√ßa</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"system\" className=\"flex items-center space-x-1\">\n              <Globe className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Sistema</span>\n            </TabsTrigger>\n            {isAdmin && (\n              <TabsTrigger value=\"advanced\" className=\"flex items-center space-x-1\">\n                <Database className=\"h-4 w-4\" />\n                <span className=\"hidden sm:inline\">Avan√ßado</span>\n              </TabsTrigger>\n            )}\n          </TabsList>\n\n          {/* Apar√™ncia */}\n          <TabsContent value=\"appearance\" className=\"space-y-6\">\n            <Card data-testid=\"card-appearance-settings\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Palette className=\"h-5 w-5\" />\n                  <span>Configura√ß√µes de Apar√™ncia</span>\n                </CardTitle>\n                <CardDescription>\n                  Personalize a apar√™ncia da interface do sistema\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label className=\"text-base\">Tema</Label>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Escolha entre tema claro ou escuro\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-sm text-muted-foreground\">\n                      {theme === 'light' ? 'Claro' : 'Escuro'}\n                    </span>\n                    <ThemeToggle />\n                  </div>\n                </div>\n\n                <Separator />\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"fontsize\">Tamanho da Fonte</Label>\n                    <Select defaultValue=\"medium\">\n                      <SelectTrigger id=\"fontsize\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"small\">Pequena</SelectItem>\n                        <SelectItem value=\"medium\">M√©dia</SelectItem>\n                        <SelectItem value=\"large\">Grande</SelectItem>\n                        <SelectItem value=\"xlarge\">Extra Grande</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"density\">Densidade da Interface</Label>\n                    <Select defaultValue=\"comfortable\">\n                      <SelectTrigger id=\"density\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"compact\">Compacta</SelectItem>\n                        <SelectItem value=\"comfortable\">Confort√°vel</SelectItem>\n                        <SelectItem value=\"spacious\">Espa√ßosa</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label className=\"text-base\">Anima√ß√µes</Label>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Habilitar anima√ß√µes e transi√ß√µes\n                    </div>\n                  </div>\n                  <Switch defaultChecked />\n                </div>\n\n                <div className=\"flex space-x-2 pt-4\">\n                  <Button onClick={() => handleSaveSettings('apar√™ncia')} data-testid=\"button-save-appearance\">\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    Salvar\n                  </Button>\n                  <Button variant=\"outline\" onClick={() => handleResetSettings('apar√™ncia')}>\n                    <RotateCcw className=\"h-4 w-4 mr-2\" />\n                    Resetar\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Conta */}\n          <TabsContent value=\"account\" className=\"space-y-6\">\n            <Card data-testid=\"card-account-settings\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <User className=\"h-5 w-5\" />\n                  <span>Informa√ß√µes da Conta</span>\n                </CardTitle>\n                <CardDescription>\n                  Gerencie suas informa√ß√µes pessoais e de perfil\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"firstName\">Nome</Label>\n                    <Input\n                      id=\"firstName\"\n                      value={profileSettings.firstName}\n                      onChange={(e) => setProfileSettings(prev => ({ ...prev, firstName: e.target.value }))}\n                      data-testid=\"input-first-name\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"lastName\">Sobrenome</Label>\n                    <Input\n                      id=\"lastName\"\n                      value={profileSettings.lastName}\n                      onChange={(e) => setProfileSettings(prev => ({ ...prev, lastName: e.target.value }))}\n                      data-testid=\"input-last-name\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={profileSettings.email}\n                    onChange={(e) => setProfileSettings(prev => ({ ...prev, email: e.target.value }))}\n                    data-testid=\"input-email\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"phone\">Telefone</Label>\n                    <Input\n                      id=\"phone\"\n                      type=\"tel\"\n                      value={profileSettings.phone}\n                      onChange={(e) => setProfileSettings(prev => ({ ...prev, phone: e.target.value }))}\n                      data-testid=\"input-phone\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"department\">Departamento</Label>\n                    <Input\n                      id=\"department\"\n                      value={profileSettings.department}\n                      onChange={(e) => setProfileSettings(prev => ({ ...prev, department: e.target.value }))}\n                      data-testid=\"input-department\"\n                    />\n                  </div>\n                </div>\n\n                <Separator />\n\n                <div className=\"bg-muted p-4 rounded-lg\">\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"w-6 h-6 bg-primary rounded-full flex items-center justify-center flex-shrink-0 mt-0.5\">\n                      <User className=\"h-3 w-3 text-primary-foreground\" />\n                    </div>\n                    <div className=\"space-y-1\">\n                      <h3 className=\"font-medium text-sm\">Fun√ß√£o Atual</h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Voc√™ est√° logado como <strong>{user.role}</strong>. \n                        {user.role !== 'admin' && \n                          ' Para alterar permiss√µes, entre em contato com o administrador.'\n                        }\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex space-x-2 pt-4\">\n                  <Button onClick={() => handleSaveSettings('conta')} data-testid=\"button-save-account\">\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    Salvar Altera√ß√µes\n                  </Button>\n                  <Button variant=\"outline\" onClick={() => handleResetSettings('conta')}>\n                    <RotateCcw className=\"h-4 w-4 mr-2\" />\n                    Resetar\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Notifica√ß√µes */}\n          <TabsContent value=\"notifications\" className=\"space-y-6\">\n            <Card data-testid=\"card-notification-settings\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Bell className=\"h-5 w-5\" />\n                  <span>Configura√ß√µes de Notifica√ß√£o</span>\n                </CardTitle>\n                <CardDescription>\n                  Controle como e quando voc√™ recebe notifica√ß√µes\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label className=\"text-base\">Notifica√ß√µes por Email</Label>\n                      <div className=\"text-sm text-muted-foreground\">\n                        Receba notifica√ß√µes importantes por email\n                      </div>\n                    </div>\n                    <Switch\n                      checked={notifications.emailNotifications}\n                      onCheckedChange={(checked) => \n                        setNotifications(prev => ({ ...prev, emailNotifications: checked }))\n                      }\n                      data-testid=\"switch-email-notifications\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label className=\"text-base\">Notifica√ß√µes Push</Label>\n                      <div className=\"text-sm text-muted-foreground\">\n                        Receba notifica√ß√µes push no navegador\n                      </div>\n                    </div>\n                    <Switch\n                      checked={notifications.pushNotifications}\n                      onCheckedChange={(checked) => \n                        setNotifications(prev => ({ ...prev, pushNotifications: checked }))\n                      }\n                      data-testid=\"switch-push-notifications\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label className=\"text-base\">Alertas do Sistema</Label>\n                      <div className=\"text-sm text-muted-foreground\">\n                        Alertas sobre atualiza√ß√µes e manuten√ß√£o\n                      </div>\n                    </div>\n                    <Switch\n                      checked={notifications.systemAlerts}\n                      onCheckedChange={(checked) => \n                        setNotifications(prev => ({ ...prev, systemAlerts: checked }))\n                      }\n                      data-testid=\"switch-system-alerts\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label className=\"text-base\">Lembretes de Aula</Label>\n                      <div className=\"text-sm text-muted-foreground\">\n                        Receba lembretes sobre aulas agendadas\n                      </div>\n                    </div>\n                    <Switch\n                      checked={notifications.lessonReminders}\n                      onCheckedChange={(checked) => \n                        setNotifications(prev => ({ ...prev, lessonReminders: checked }))\n                      }\n                      data-testid=\"switch-lesson-reminders\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label className=\"text-base\">Relat√≥rios Semanais</Label>\n                      <div className=\"text-sm text-muted-foreground\">\n                        Receba resumos semanais de atividades\n                      </div>\n                    </div>\n                    <Switch\n                      checked={notifications.weeklyReports}\n                      onCheckedChange={(checked) => \n                        setNotifications(prev => ({ ...prev, weeklyReports: checked }))\n                      }\n                      data-testid=\"switch-weekly-reports\"\n                    />\n                  </div>\n                </div>\n\n                <Separator />\n\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-base font-medium\">Hor√°rios de Notifica√ß√£o</h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"quietHoursStart\">In√≠cio do Sil√™ncio</Label>\n                      <Input\n                        id=\"quietHoursStart\"\n                        type=\"time\"\n                        defaultValue=\"22:00\"\n                        data-testid=\"input-quiet-hours-start\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"quietHoursEnd\">Fim do Sil√™ncio</Label>\n                      <Input\n                        id=\"quietHoursEnd\"\n                        type=\"time\"\n                        defaultValue=\"07:00\"\n                        data-testid=\"input-quiet-hours-end\"\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex space-x-2 pt-4\">\n                  <Button onClick={() => handleSaveSettings('notifica√ß√µes')} data-testid=\"button-save-notifications\">\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    Salvar\n                  </Button>\n                  <Button variant=\"outline\" onClick={() => handleResetSettings('notifica√ß√µes')}>\n                    <RotateCcw className=\"h-4 w-4 mr-2\" />\n                    Resetar\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Seguran√ßa */}\n          <TabsContent value=\"security\" className=\"space-y-6\">\n            <Card data-testid=\"card-security-settings\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Shield className=\"h-5 w-5\" />\n                  <span>Configura√ß√µes de Seguran√ßa</span>\n                </CardTitle>\n                <CardDescription>\n                  Gerencie a seguran√ßa da sua conta e dados\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label className=\"text-base\">Autentica√ß√£o de Dois Fatores</Label>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Adicione uma camada extra de seguran√ßa √† sua conta\n                    </div>\n                  </div>\n                  <Switch\n                    checked={securitySettings.twoFactorEnabled}\n                    onCheckedChange={(checked) => \n                      setSecuritySettings(prev => ({ ...prev, twoFactorEnabled: checked }))\n                    }\n                    data-testid=\"switch-two-factor\"\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label className=\"text-base\">Alertas de Login</Label>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Receba alertas sobre novos logins na sua conta\n                    </div>\n                  </div>\n                  <Switch\n                    checked={securitySettings.loginAlerts}\n                    onCheckedChange={(checked) => \n                      setSecuritySettings(prev => ({ ...prev, loginAlerts: checked }))\n                    }\n                    data-testid=\"switch-login-alerts\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"sessionTimeout\">Tempo Limite da Sess√£o (minutos)</Label>\n                  <Select\n                    value={securitySettings.sessionTimeout.toString()}\n                    onValueChange={(value) => \n                      setSecuritySettings(prev => ({ ...prev, sessionTimeout: parseInt(value) }))\n                    }\n                  >\n                    <SelectTrigger id=\"sessionTimeout\" data-testid=\"select-session-timeout\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"15\">15 minutos</SelectItem>\n                      <SelectItem value=\"30\">30 minutos</SelectItem>\n                      <SelectItem value=\"60\">1 hora</SelectItem>\n                      <SelectItem value=\"120\">2 horas</SelectItem>\n                      <SelectItem value=\"480\">8 horas</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <Separator />\n\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-base font-medium\">Gerenciamento de Senha</h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <Button variant=\"outline\" className=\"h-auto p-4\" data-testid=\"button-change-password\">\n                      <div className=\"text-left\">\n                        <div className=\"font-medium\">Alterar Senha</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Atualize sua senha de acesso\n                        </div>\n                      </div>\n                    </Button>\n                    <Button variant=\"outline\" className=\"h-auto p-4\" data-testid=\"button-download-data\">\n                      <div className=\"text-left\">\n                        <div className=\"font-medium\">Baixar Dados</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Exporte seus dados pessoais\n                        </div>\n                      </div>\n                    </Button>\n                  </div>\n                </div>\n\n                <div className=\"flex space-x-2 pt-4\">\n                  <Button onClick={() => handleSaveSettings('seguran√ßa')} data-testid=\"button-save-security\">\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    Salvar\n                  </Button>\n                  <Button variant=\"outline\" onClick={() => handleResetSettings('seguran√ßa')}>\n                    <RotateCcw className=\"h-4 w-4 mr-2\" />\n                    Resetar\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Sistema */}\n          <TabsContent value=\"system\" className=\"space-y-6\">\n            <Card data-testid=\"card-system-settings\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Globe className=\"h-5 w-5\" />\n                  <span>Configura√ß√µes do Sistema</span>\n                </CardTitle>\n                <CardDescription>\n                  Configure prefer√™ncias gerais do sistema\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"language\">Idioma</Label>\n                    <Select\n                      value={systemSettings.language}\n                      onValueChange={(value) => \n                        setSystemSettings(prev => ({ ...prev, language: value }))\n                      }\n                    >\n                      <SelectTrigger id=\"language\" data-testid=\"select-language\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"pt-BR\">Portugu√™s (Brasil)</SelectItem>\n                        <SelectItem value=\"en-US\">English (US)</SelectItem>\n                        <SelectItem value=\"es-ES\">Espa√±ol (Espa√±a)</SelectItem>\n                        <SelectItem value=\"fr-FR\">Fran√ßais (France)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"timezone\">Fuso Hor√°rio</Label>\n                    <Select\n                      value={systemSettings.timezone}\n                      onValueChange={(value) => \n                        setSystemSettings(prev => ({ ...prev, timezone: value }))\n                      }\n                    >\n                      <SelectTrigger id=\"timezone\" data-testid=\"select-timezone\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"America/Sao_Paulo\">S√£o Paulo (GMT-3)</SelectItem>\n                        <SelectItem value=\"America/New_York\">New York (GMT-5)</SelectItem>\n                        <SelectItem value=\"Europe/London\">London (GMT+0)</SelectItem>\n                        <SelectItem value=\"Asia/Tokyo\">Tokyo (GMT+9)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"dateFormat\">Formato de Data</Label>\n                    <Select\n                      value={systemSettings.dateFormat}\n                      onValueChange={(value) => \n                        setSystemSettings(prev => ({ ...prev, dateFormat: value }))\n                      }\n                    >\n                      <SelectTrigger id=\"dateFormat\" data-testid=\"select-date-format\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"DD/MM/YYYY\">DD/MM/YYYY</SelectItem>\n                        <SelectItem value=\"MM/DD/YYYY\">MM/DD/YYYY</SelectItem>\n                        <SelectItem value=\"YYYY-MM-DD\">YYYY-MM-DD</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"currency\">Moeda</Label>\n                    <Select\n                      value={systemSettings.currency}\n                      onValueChange={(value) => \n                        setSystemSettings(prev => ({ ...prev, currency: value }))\n                      }\n                    >\n                      <SelectTrigger id=\"currency\" data-testid=\"select-currency\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"BRL\">Real (R$)</SelectItem>\n                        <SelectItem value=\"USD\">D√≥lar ($)</SelectItem>\n                        <SelectItem value=\"EUR\">Euro (‚Ç¨)</SelectItem>\n                        <SelectItem value=\"GBP\">Libra (¬£)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label className=\"text-base\">Salvamento Autom√°tico</Label>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Salve automaticamente as altera√ß√µes\n                    </div>\n                  </div>\n                  <Switch\n                    checked={systemSettings.autoSave}\n                    onCheckedChange={(checked) => \n                      setSystemSettings(prev => ({ ...prev, autoSave: checked }))\n                    }\n                    data-testid=\"switch-auto-save\"\n                  />\n                </div>\n\n                {isAdmin && (\n                  <>\n                    <Separator />\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-0.5\">\n                        <Label className=\"text-base\">Modo Debug</Label>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Habilitar logs detalhados para depura√ß√£o\n                        </div>\n                      </div>\n                      <Switch\n                        checked={systemSettings.debugMode}\n                        onCheckedChange={(checked) => \n                          setSystemSettings(prev => ({ ...prev, debugMode: checked }))\n                        }\n                        data-testid=\"switch-debug-mode\"\n                      />\n                    </div>\n                  </>\n                )}\n\n                <div className=\"flex space-x-2 pt-4\">\n                  <Button onClick={() => handleSaveSettings('sistema')} data-testid=\"button-save-system\">\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    Salvar\n                  </Button>\n                  <Button variant=\"outline\" onClick={() => handleResetSettings('sistema')}>\n                    <RotateCcw className=\"h-4 w-4 mr-2\" />\n                    Resetar\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Avan√ßado (apenas admins) */}\n          {isAdmin && (\n            <TabsContent value=\"advanced\" className=\"space-y-6\">\n              <Card data-testid=\"card-advanced-settings\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Database className=\"h-5 w-5\" />\n                    <span>Configura√ß√µes Avan√ßadas</span>\n                  </CardTitle>\n                  <CardDescription>\n                    Configura√ß√µes avan√ßadas do sistema (apenas administradores)\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <AlertTriangle className=\"h-5 w-5 text-yellow-600 dark:text-yellow-400\" />\n                      <span className=\"font-medium text-yellow-800 dark:text-yellow-200\">\n                        Aten√ß√£o\n                      </span>\n                    </div>\n                    <p className=\"text-yellow-700 dark:text-yellow-300 mt-2\">\n                      As configura√ß√µes avan√ßadas podem afetar o funcionamento do sistema. \n                      Proceda com cuidado e fa√ßa backup antes de fazer altera√ß√µes importantes.\n                    </p>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <Button variant=\"outline\" className=\"h-auto p-4\" onClick={handleExportData} data-testid=\"button-export-data\">\n                      <Download className=\"h-5 w-5 mr-3\" />\n                      <div className=\"text-left\">\n                        <div className=\"font-medium\">Exportar Dados</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Exportar todos os dados do sistema\n                        </div>\n                      </div>\n                    </Button>\n\n                    <Button variant=\"outline\" className=\"h-auto p-4\" onClick={handleImportData} data-testid=\"button-import-data\">\n                      <Upload className=\"h-5 w-5 mr-3\" />\n                      <div className=\"text-left\">\n                        <div className=\"font-medium\">Importar Dados</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Importar dados de backup\n                        </div>\n                      </div>\n                    </Button>\n\n                    <Button variant=\"outline\" className=\"h-auto p-4\" data-testid=\"button-clear-cache\">\n                      <Zap className=\"h-5 w-5 mr-3\" />\n                      <div className=\"text-left\">\n                        <div className=\"font-medium\">Limpar Cache</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Limpar cache do sistema\n                        </div>\n                      </div>\n                    </Button>\n\n                    <Button variant=\"destructive\" className=\"h-auto p-4\" data-testid=\"button-factory-reset\">\n                      <Trash2 className=\"h-5 w-5 mr-3\" />\n                      <div className=\"text-left\">\n                        <div className=\"font-medium\">Reset de F√°brica</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Restaurar configura√ß√µes padr√£o\n                        </div>\n                      </div>\n                    </Button>\n                  </div>\n\n                  <Separator />\n\n                  <div className=\"space-y-4\">\n                    <h3 className=\"text-base font-medium\">Informa√ß√µes do Sistema</h3>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div className=\"space-y-1\">\n                        <Label className=\"text-sm text-muted-foreground\">Vers√£o</Label>\n                        <p className=\"text-sm font-mono\">v1.0.0</p>\n                      </div>\n                      <div className=\"space-y-1\">\n                        <Label className=\"text-sm text-muted-foreground\">Banco de Dados</Label>\n                        <p className=\"text-sm font-mono\">PostgreSQL 14</p>\n                      </div>\n                      <div className=\"space-y-1\">\n                        <Label className=\"text-sm text-muted-foreground\">√öltima Atualiza√ß√£o</Label>\n                        <p className=\"text-sm\">{new Date().toLocaleDateString('pt-BR')}</p>\n                      </div>\n                      <div className=\"space-y-1\">\n                        <Label className=\"text-sm text-muted-foreground\">Uptime</Label>\n                        <p className=\"text-sm\">7 dias, 14h 32m</p>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          )}\n        </Tabs>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":36880},"frontend/client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"frontend/client/src/components/StudentCourseShelf.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/api\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface Props {\n  courseId: string;\n  title: string;\n  currentBookId?: string | null;\n  disabled?: boolean;\n}\n\nexport default function StudentCourseShelf({ courseId, title, currentBookId, disabled }: Props) {\n  const { data, isLoading } = useQuery<any>({\n    queryKey: [\"student-course-details\", courseId],\n    queryFn: async () => apiRequest(`/api/student/courses/${courseId}`),\n  });\n\n  return (\n    <section className=\"space-y-2\">\n      <div className=\"flex items-end justify-between\">\n        <h3 className=\"text-xl font-semibold text-foreground\">{title}</h3>\n        {disabled && (\n          <Badge className=\"bg-gray-200 text-gray-700 dark:bg-gray-700 dark:text-gray-300\">Bloqueado</Badge>\n        )}\n      </div>\n      <div className=\"relative\">\n        <div className=\"flex gap-4 overflow-x-auto pb-2 snap-x snap-mandatory\">\n          {isLoading && (\n            <div className=\"text-muted-foreground\">Carregando‚Ä¶</div>\n          )}\n          {!isLoading && data?.course?.books?.map((book: any) => {\n            const isCurrent = currentBookId && book.id === currentBookId;\n            const isDisabled = disabled || (!isCurrent);\n            return (\n              <div key={book.id} className={`min-w-[220px] snap-start select-none ${isDisabled ? 'opacity-60 grayscale' : ''}`}>\n                <div className={`rounded-xl shadow-md overflow-hidden border ${isCurrent ? 'border-blue-500' : 'border-transparent'}`} style={{ background: book.color || '#1f2937' }}>\n                  <div className=\"h-28 bg-gradient-to-br from-black/20 to-black/0\" />\n                </div>\n                <div className=\"mt-2 flex items-center justify-between\">\n                  <div>\n                    <div className=\"font-semibold\">{book.name}</div>\n                    <div className=\"text-xs text-muted-foreground\">{book.description || ' '}</div>\n                  </div>\n                  <Button size=\"sm\" disabled={isDisabled} className=\"bg-gradient-to-r from-blue-600 to-purple-600\">\n                    {isCurrent ? (\n                      <>\n                        <i className=\"fas fa-play mr-2\"></i>\n                        Continuar\n                      </>\n                    ) : (\n                      <>\n                        <i className=\"fas fa-lock mr-2\"></i>\n                        Bloqueado\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </section>\n  );\n}\n\n","size_bytes":2707},"frontend/client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"frontend/client/src/pages/Courses.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Plus, BookOpen, Upload, Edit, Trash2, Eye, Palette } from \"lucide-react\";\nimport Layout from \"@/components/Layout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient, extractErrorMessage } from \"@/lib/queryClient\";\nimport { API_BASE } from \"@/lib/api\";\nimport type { Course, Book, CourseWithDetails, BookWithDetails } from \"@shared/schema\";\n\nimport { z } from \"zod\";\n\nexport default function Courses() {\n  const { toast } = useToast();\n  const [selectedCourse, setSelectedCourse] = useState<Course | null>(null);\n  const [isCreateCourseOpen, setIsCreateCourseOpen] = useState(false);\n  const [isCreateBookOpen, setIsCreateBookOpen] = useState(false);\n  const [editingCourse, setEditingCourse] = useState<Course | null>(null);\n  const [editingBook, setEditingBook] = useState<Book | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [uploadingPdf, setUploadingPdf] = useState<string | null>(null);\n\n  // Extended schemas for form validation\n  const courseFormSchema = z.object({\n    name: z.string().min(1, \"Nome √© obrigat√≥rio\"),\n    description: z.string().optional(),\n    language: z.string().min(1, \"Idioma √© obrigat√≥rio\"),\n    level: z.string().min(1, \"N√≠vel √© obrigat√≥rio\"),\n    duration: z.coerce.number().positive(\"Dura√ß√£o deve ser maior que 0\").optional(),\n    price: z.coerce.number().positive(\"Pre√ßo deve ser maior que 0\").optional(),\n    isActive: z.boolean().default(true)\n  });\n\n  const bookFormSchema = z.object({\n    name: z.string().min(1, \"Nome √© obrigat√≥rio\"),\n    description: z.string().optional(),\n    courseId: z.string().min(1, \"Curso √© obrigat√≥rio\"),\n    displayOrder: z.number().min(1, \"Ordem deve ser pelo menos 1\"),\n    isActive: z.boolean().default(true),\n    totalDays: z.coerce.number().min(1, \"Total de dias deve ser pelo menos 1\"),\n    color: z.string().regex(/^#[0-9A-F]{6}$/i, \"Cor deve estar em formato hexadecimal v√°lido\")\n  });\n\n  // Course form\n  const courseForm = useForm<z.infer<typeof courseFormSchema>>({\n    resolver: zodResolver(courseFormSchema),\n    mode: \"onChange\",\n    reValidateMode: \"onChange\",\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      language: \"\",\n      level: \"\",\n      duration: undefined,\n      price: undefined,\n      isActive: true\n    }\n  });\n\n  // Book form\n  const bookForm = useForm<z.infer<typeof bookFormSchema>>({\n    resolver: zodResolver(bookFormSchema),\n    mode: \"onChange\",\n    reValidateMode: \"onChange\",\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      color: \"#3b82f6\",\n      totalDays: 30,\n      courseId: \"\",\n      displayOrder: 1,\n      isActive: true\n    }\n  });\n\n  // Fetch courses\n  const { data: courses = [], isLoading: coursesLoading } = useQuery<Course[]>({\n    queryKey: [\"/api/courses\"],\n    retry: false,\n  });\n\n  // Fetch books\n  const { data: books = [], isLoading: booksLoading } = useQuery<Book[]>({\n    queryKey: [\"/api/books\"],\n    retry: false,\n  });\n\n  // Create course mutation\n  const createCourseMutation = useMutation({\n    mutationFn: (data: z.infer<typeof courseFormSchema>) => apiRequest(\"POST\", \"/api/courses\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/courses\"] });\n      toast({ title: \"Curso criado com sucesso!\" });\n      setIsCreateCourseOpen(false);\n      courseForm.reset();\n    },\n    onError: (error: any) => {\n      toast({ title: \"Erro ao criar curso\", description: extractErrorMessage(error), variant: \"destructive\" });\n    }\n  });\n\n  // Update course mutation\n  const updateCourseMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string, data: z.infer<typeof courseFormSchema> }) => apiRequest(\"PUT\", `/api/courses/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/courses\"] });\n      toast({ title: \"Curso atualizado com sucesso!\" });\n      setEditingCourse(null);\n      courseForm.reset();\n    },\n    onError: (error: any) => {\n      toast({ title: \"Erro ao atualizar curso\", description: extractErrorMessage(error), variant: \"destructive\" });\n    }\n  });\n\n  // Delete course mutation\n  const deleteCourseMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/courses/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/courses\"] });\n      toast({ title: \"Curso exclu√≠do com sucesso!\" });\n    },\n    onError: () => {\n      toast({ title: \"Erro ao excluir curso\", variant: \"destructive\" });\n    }\n  });\n\n  // Create book mutation\n  const createBookMutation = useMutation({\n    mutationFn: (data: z.infer<typeof bookFormSchema>) => apiRequest(\"POST\", \"/api/books\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/books\"] });\n      toast({ title: \"Livro criado com sucesso!\" });\n      setIsCreateBookOpen(false);\n      bookForm.reset();\n    },\n    onError: (error: any) => {\n      toast({ title: \"Erro ao criar livro\", description: extractErrorMessage(error), variant: \"destructive\" });\n    }\n  });\n\n  // Update book mutation\n  const updateBookMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string, data: Partial<z.infer<typeof bookFormSchema>> }) => apiRequest(\"PUT\", `/api/books/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/books\"] });\n      toast({ title: \"Livro atualizado com sucesso!\" });\n      setEditingBook(null);\n      bookForm.reset();\n    },\n    onError: (error: any) => {\n      toast({ title: \"Erro ao atualizar livro\", description: extractErrorMessage(error), variant: \"destructive\" });\n    }\n  });\n\n  // PDF upload mutation\n  const uploadPdfMutation = useMutation({\n    mutationFn: async ({ bookId, file }: { bookId: string, file: File }) => {\n      const formData = new FormData();\n      formData.append('pdf', file);\n      const token = localStorage.getItem('authToken');\n      const res = await fetch(`${API_BASE}/api/books/${bookId}/upload`, {\n        method: 'POST',\n        headers: {\n          ...(token ? { 'Authorization': `Bearer ${token}` } : {}),\n        },\n        body: formData,\n        credentials: 'include',\n      });\n      if (!res.ok) {\n        const text = await res.text();\n        throw new Error(text || 'Upload failed');\n      }\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/books\"] });\n      toast({ title: \"PDF enviado com sucesso!\" });\n      setUploadingPdf(null);\n    },\n    onError: (error: any) => {\n      toast({ title: \"Erro ao enviar PDF\", description: extractErrorMessage(error), variant: \"destructive\" });\n      setUploadingPdf(null);\n    }\n  });\n\n  // Delete book mutation\n  const deleteBookMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/books/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/books\"] });\n      toast({ title: \"Livro exclu√≠do com sucesso!\" });\n    },\n    onError: () => {\n      toast({ title: \"Erro ao excluir livro\", variant: \"destructive\" });\n    }\n  });\n\n  const handleCreateCourse = (data: z.infer<typeof courseFormSchema>) => {\n    createCourseMutation.mutate(data);\n  };\n\n  const handleUpdateCourse = (data: z.infer<typeof courseFormSchema>) => {\n    if (!editingCourse) return;\n    updateCourseMutation.mutate({ id: editingCourse.id, data });\n  };\n\n  const handleEditCourse = (course: Course) => {\n    setEditingCourse(course);\n    courseForm.reset({\n      name: course.name,\n      description: course.description || \"\",\n      language: course.language,\n      level: course.level,\n      duration: course.duration || undefined,\n      price: course.price || undefined,\n      isActive: course.isActive\n    });\n  };\n\n  const handleCreateBook = (data: z.infer<typeof bookFormSchema>) => {\n    if (!selectedCourse) {\n      toast({ title: \"Erro\", description: \"Selecione um curso primeiro\", variant: \"destructive\" });\n      return;\n    }\n    const bookData = { ...data, courseId: selectedCourse.id };\n    createBookMutation.mutate(bookData);\n  };\n\n  const handleUpdateBook = (data: z.infer<typeof bookFormSchema>) => {\n    if (!editingBook) return;\n    updateBookMutation.mutate({ id: editingBook.id, data });\n  };\n\n  const handleEditBook = (book: Book) => {\n    setEditingBook(book);\n    bookForm.reset({\n      name: book.name,\n      description: book.description || \"\",\n      color: book.color,\n      totalDays: book.totalDays ?? 30,\n      courseId: book.courseId,\n      displayOrder: book.displayOrder ?? 1,\n      isActive: book.isActive\n    });\n  };\n\n  const handlePdfUpload = (bookId: string, file: File) => {\n    setUploadingPdf(bookId);\n    uploadPdfMutation.mutate({ bookId, file });\n  };\n\n  const openPdfFileDialog = (bookId: string) => {\n    if (fileInputRef.current) {\n      fileInputRef.current.onchange = (e) => {\n        const file = (e.target as HTMLInputElement).files?.[0];\n        if (file && file.type === 'application/pdf') {\n          handlePdfUpload(bookId, file);\n        } else {\n          toast({ title: \"Erro\", description: \"Por favor, selecione um arquivo PDF\", variant: \"destructive\" });\n        }\n      };\n      fileInputRef.current.click();\n    }\n  };\n\n  const predefinedColors = [\n    '#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6',\n    '#06b6d4', '#84cc16', '#f97316', '#ec4899', '#6366f1'\n  ];\n\n  const getBooksByCourseid = (courseId: string) => {\n    if (!Array.isArray(books)) return [];\n    return books.filter(book => book.courseId === courseId);\n  };\n\n  return (\n    <Layout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gradient\">Gerenciar Cursos</h1>\n            <p className=\"text-muted-foreground\">Administre cursos, livros e conte√∫do educacional</p>\n          </div>\n          <Button\n            onClick={() => setIsCreateCourseOpen(true)}\n            className=\"gap-2\"\n            data-testid=\"button-create-course\"\n          >\n            <Plus className=\"w-4 h-4\" />\n            Novo Curso\n          </Button>\n        </div>\n\n        <Tabs defaultValue=\"courses\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"courses\">Cursos</TabsTrigger>\n            <TabsTrigger value=\"books\">Livros</TabsTrigger>\n          </TabsList>\n\n          {/* Courses Tab */}\n          <TabsContent value=\"courses\" className=\"space-y-4\">\n            {coursesLoading ? (\n              <div className=\"text-center py-8\">\n                <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto\"></div>\n                <p className=\"mt-4 text-muted-foreground\">Carregando cursos...</p>\n              </div>\n            ) : (\n              <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n                {Array.isArray(courses) && courses.map((course) => (\n                  <Card key={course.id} className=\"glassmorphism-card hover:shadow-lg transition-shadow\" data-testid={`card-course-${course.id}`}>\n                    <CardHeader>\n                      <div className=\"flex items-center justify-between\">\n                        <CardTitle className=\"text-lg\">{course.name}</CardTitle>\n                        <div className=\"flex gap-2\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleEditCourse(course)}\n                            data-testid={`button-edit-course-${course.id}`}\n                          >\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => deleteCourseMutation.mutate(course.id)}\n                            data-testid={`button-delete-course-${course.id}`}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <Badge variant=\"secondary\">{course.language}</Badge>\n                        <Badge variant=\"outline\">{course.level}</Badge>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-sm text-muted-foreground mb-4\">{course.description}</p>\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span>Dura√ß√£o: {course.duration}h</span>\n                        <span className=\"font-semibold\">R$ {course.price}</span>\n                      </div>\n                      <div className=\"mt-4\">\n                        <p className=\"text-sm mb-2\">Livros: {getBooksByCourseid(course.id).length}</p>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => { setSelectedCourse(course); document.querySelector('[data-state=\"inactive\"][data-value=\"books\"]')?.dispatchEvent(new MouseEvent('click', { bubbles:true })); }}\n                          className=\"w-full\"\n                          data-testid={`button-view-books-${course.id}`}\n                        >\n                          <BookOpen className=\"w-4 h-4 mr-2\" />\n                          Ver Livros\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </TabsContent>\n\n          {/* Books Tab */}\n          <TabsContent value=\"books\" className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <p className=\"text-sm text-muted-foreground\">\n                {selectedCourse ? `Livros do curso: ${selectedCourse.name}` : \"Selecione um curso para gerenciar livros\"}\n              </p>\n              {selectedCourse && (\n                <Button\n                  onClick={() => setIsCreateBookOpen(true)}\n                  size=\"sm\"\n                  className=\"gap-2\"\n                  data-testid=\"button-create-book\"\n                >\n                  <Plus className=\"w-4 h-4\" />\n                  Novo Livro\n                </Button>\n              )}\n            </div>\n\n            {selectedCourse ? (\n              booksLoading ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto\"></div>\n                </div>\n              ) : (\n                <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n                  {getBooksByCourseid(selectedCourse.id).map((book) => (\n                    <Card key={book.id} className=\"glassmorphism-card\" data-testid={`card-book-${book.id}`}>\n                      <CardHeader>\n                        <div className=\"flex items-center gap-3\">\n                          <div\n                            className=\"w-6 h-6 rounded-md border-2 border-white shadow-sm ring-1 ring-black/10\"\n                            style={{ backgroundColor: book.color }}\n                            title={`Cor: ${book.color}`}\n                          ></div>\n                          <CardTitle className=\"text-base\">{book.name}</CardTitle>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleEditBook(book)}\n                            data-testid={`button-edit-book-${book.id}`}\n                          >\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => deleteBookMutation.mutate(book.id)}\n                            data-testid={`button-delete-book-${book.id}`}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </CardHeader>\n                      <CardContent>\n                        <p className=\"text-sm text-muted-foreground mb-3\">{book.description}</p>\n                        <div className=\"space-y-3 text-sm\">\n                          <div className=\"flex justify-between\">\n                            <span>Total de dias:</span>\n                            <span className=\"font-medium\">{book.totalDays ?? 30}</span>\n                          </div>\n\n                          {/* PDF Section */}\n                          <div className=\"space-y-2\">\n                            {book.pdfUrl ? (\n                              <div className=\"flex items-center justify-between\">\n                                <div className=\"flex items-center gap-2\">\n                                  <Eye className=\"w-4 h-4 text-primary\" />\n                                  <span className=\"text-sm\">PDF dispon√≠vel</span>\n                                </div>\n                                <div className=\"flex gap-1\">\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"ghost\"\n                                    onClick={() => window.open(book.pdfUrl!, '_blank')}\n                                    className=\"h-7 px-2\"\n                                  >\n                                    <Eye className=\"w-3 h-3\" />\n                                  </Button>\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"ghost\"\n                                    onClick={() => openPdfFileDialog(book.id)}\n                                    disabled={uploadingPdf === book.id}\n                                    className=\"h-7 px-2\"\n                                  >\n                                    <Upload className=\"w-3 h-3\" />\n                                  </Button>\n                                </div>\n                              </div>\n                            ) : (\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => openPdfFileDialog(book.id)}\n                                disabled={uploadingPdf === book.id}\n                                className=\"w-full h-8\"\n                              >\n                                <Upload className=\"w-3 h-3 mr-1\" />\n                                {uploadingPdf === book.id ? 'Enviando...' : 'Upload PDF'}\n                              </Button>\n                            )}\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              )\n            ) : (\n              <div className=\"text-center py-12\">\n                <BookOpen className=\"w-16 h-16 mx-auto text-muted-foreground mb-4\" />\n                <p className=\"text-muted-foreground\">Selecione um curso na aba \"Cursos\" para gerenciar seus livros</p>\n              </div>\n            )}\n          </TabsContent>\n        </Tabs>\n\n        {/* Create Course Dialog */}\n        <Dialog open={isCreateCourseOpen} onOpenChange={setIsCreateCourseOpen}>\n          <DialogContent data-testid=\"dialog-create-course\">\n            <DialogHeader>\n              <DialogTitle>Criar Novo Curso</DialogTitle>\n            </DialogHeader>\n            <Form {...courseForm}>\n              <form onSubmit={courseForm.handleSubmit(handleCreateCourse)} className=\"space-y-4\">\n                <FormField\n                  control={courseForm.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nome do Curso</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Ex: Ingl√™s B√°sico\"\n                          data-testid=\"input-course-name\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={courseForm.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Descri√ß√£o</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Descri√ß√£o do curso\"\n                          data-testid=\"input-course-description\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={courseForm.control}\n                    name=\"language\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Idioma</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-course-language\">\n                              <SelectValue placeholder=\"Selecione\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"English\">Ingl√™s</SelectItem>\n                            <SelectItem value=\"Spanish\">Espanhol</SelectItem>\n                            <SelectItem value=\"French\">Franc√™s</SelectItem>\n                            <SelectItem value=\"German\">Alem√£o</SelectItem>\n                            <SelectItem value=\"Italian\">Italiano</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={courseForm.control}\n                    name=\"level\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>N√≠vel</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-course-level\">\n                              <SelectValue placeholder=\"Selecione\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"B√°sico\">B√°sico</SelectItem>\n                            <SelectItem value=\"Intermedi√°rio\">Intermedi√°rio</SelectItem>\n                            <SelectItem value=\"Avan√ßado\">Avan√ßado</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={courseForm.control}\n                    name=\"duration\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Dura√ß√£o (horas)</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            placeholder=\"120\"\n                            data-testid=\"input-course-duration\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={courseForm.control}\n                    name=\"price\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Pre√ßo (R$)</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            placeholder=\"299\"\n                            data-testid=\"input-course-price\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"flex gap-2 justify-end pt-4\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setIsCreateCourseOpen(false)}\n                  >\n                    Cancelar\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={createCourseMutation.isPending || !courseForm.formState.isValid}\n                    data-testid=\"button-save-course\"\n                  >\n                    {createCourseMutation.isPending ? 'Criando...' : 'Criar Curso'}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Create Book Dialog */}\n        <Dialog open={isCreateBookOpen} onOpenChange={setIsCreateBookOpen}>\n          <DialogContent data-testid=\"dialog-create-book\" className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingBook ? 'Editar Livro' : `Novo Livro - ${selectedCourse?.name}`}\n              </DialogTitle>\n            </DialogHeader>\n            <Form {...bookForm}>\n              <form onSubmit={bookForm.handleSubmit(editingBook ? handleUpdateBook : handleCreateBook)} className=\"space-y-4\">\n                <FormField\n                  control={bookForm.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nome do Livro</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Ex: English Basic - Book 1\"\n                          data-testid=\"input-book-name\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={bookForm.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Descri√ß√£o</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Descri√ß√£o do livro\"\n                          data-testid=\"input-book-description\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={bookForm.control}\n                    name=\"color\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Cor do Livro</FormLabel>\n                        <FormControl>\n                          <div className=\"space-y-3\">\n                            {/* Color Preview */}\n                            <div className=\"flex items-center gap-3\">\n                              <div\n                                className=\"w-8 h-8 rounded-md border-2 border-muted shadow-sm\"\n                                style={{ backgroundColor: field.value }}\n                              ></div>\n                              <span className=\"text-sm text-muted-foreground\">Preview</span>\n                            </div>\n\n                            {/* Predefined Color Swatches */}\n                            <div className=\"grid grid-cols-5 gap-2\">\n                              {predefinedColors.map((color) => (\n                                <button\n                                  key={color}\n                                  type=\"button\"\n                                  className={`w-8 h-8 rounded-md border-2 transition-all hover:scale-110 ${field.value === color ? 'border-primary' : 'border-muted'\n                                    }`}\n                                  style={{ backgroundColor: color }}\n                                  onClick={() => field.onChange(color)}\n                                  aria-label={`Select color ${color}`}\n                                />\n                              ))}\n                            </div>\n\n                            {/* Color Input and Hex Input */}\n                            <div className=\"flex gap-2\">\n                              <input\n                                type=\"color\"\n                                value={field.value}\n                                onChange={(e) => field.onChange(e.target.value)}\n                                className=\"w-12 h-10 rounded border cursor-pointer\"\n                                data-testid=\"input-book-color\"\n                              />\n                              <Input\n                                value={field.value}\n                                onChange={(e) => field.onChange(e.target.value)}\n                                placeholder=\"#3b82f6\"\n                                data-testid=\"input-book-color-hex\"\n                                className=\"flex-1\"\n                              />\n                            </div>\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={bookForm.control}\n                    name=\"totalDays\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Total de Dias</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            min=\"1\"\n                            placeholder=\"30\"\n                            data-testid=\"input-book-total-days\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                {/* PDF Upload Section */}\n                {editingBook && (\n                  <div className=\"space-y-3 p-4 bg-muted/50 rounded-lg\">\n                    <div className=\"flex items-center gap-2\">\n                      <Upload className=\"w-4 h-4\" />\n                      <span className=\"font-medium\">PDF do Livro</span>\n                    </div>\n\n                    {editingBook.pdfUrl ? (\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <Eye className=\"w-4 h-4 text-primary\" />\n                          <span className=\"text-sm\">PDF dispon√≠vel</span>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Button\n                            type=\"button\"\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => window.open(editingBook.pdfUrl!, '_blank')}\n                          >\n                            <Eye className=\"w-4 h-4 mr-1\" />\n                            Ver PDF\n                          </Button>\n                          <Button\n                            type=\"button\"\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => openPdfFileDialog(editingBook.id)}\n                            disabled={uploadingPdf === editingBook.id}\n                          >\n                            <Upload className=\"w-4 h-4 mr-1\" />\n                            {uploadingPdf === editingBook.id ? 'Enviando...' : 'Substituir'}\n                          </Button>\n                        </div>\n                      </div>\n                    ) : (\n                      <Button\n                        type=\"button\"\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => openPdfFileDialog(editingBook.id)}\n                        disabled={uploadingPdf === editingBook.id}\n                        className=\"w-full\"\n                      >\n                        <Upload className=\"w-4 h-4 mr-2\" />\n                        {uploadingPdf === editingBook.id ? 'Enviando...' : 'Fazer Upload do PDF'}\n                      </Button>\n                    )}\n                  </div>\n                )}\n\n                <div className=\"flex gap-2 justify-end pt-4\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => {\n                      setIsCreateBookOpen(false);\n                      setEditingBook(null);\n                      bookForm.reset();\n                    }}\n                  >\n                    Cancelar\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={createBookMutation.isPending || updateBookMutation.isPending || !bookForm.formState.isValid}\n                    data-testid=\"button-save-book\"\n                  >\n                    {editingBook\n                      ? (updateBookMutation.isPending ? 'Atualizando...' : 'Atualizar Livro')\n                      : (createBookMutation.isPending ? 'Criando...' : 'Criar Livro')\n                    }\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Edit Course Dialog */}\n        <Dialog open={!!editingCourse} onOpenChange={(open) => {\n          if (!open) {\n            setEditingCourse(null);\n            courseForm.reset();\n          }\n        }}>\n          <DialogContent data-testid=\"dialog-edit-course\">\n            <DialogHeader>\n              <DialogTitle>Editar Curso</DialogTitle>\n            </DialogHeader>\n\n            <Form {...courseForm}>\n              <form onSubmit={courseForm.handleSubmit(handleUpdateCourse)} className=\"space-y-4\">\n                <FormField\n                  control={courseForm.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nome do Curso</FormLabel>\n                      <FormControl>\n                        <Input data-testid=\"input-edit-course-name\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={courseForm.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Descri√ß√£o</FormLabel>\n                      <FormControl>\n                        <Textarea data-testid=\"input-edit-course-description\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={courseForm.control}\n                    name=\"language\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Idioma</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-edit-course-language\">\n                              <SelectValue placeholder=\"Selecione\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"English\">Ingl√™s</SelectItem>\n                            <SelectItem value=\"Spanish\">Espanhol</SelectItem>\n                            <SelectItem value=\"French\">Franc√™s</SelectItem>\n                            <SelectItem value=\"German\">Alem√£o</SelectItem>\n                            <SelectItem value=\"Italian\">Italiano</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={courseForm.control}\n                    name=\"level\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>N√≠vel</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-edit-course-level\">\n                              <SelectValue placeholder=\"Selecione\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"B√°sico\">B√°sico</SelectItem>\n                            <SelectItem value=\"Intermedi√°rio\">Intermedi√°rio</SelectItem>\n                            <SelectItem value=\"Avan√ßado\">Avan√ßado</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={courseForm.control}\n                    name=\"duration\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Dura√ß√£o (horas)</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" data-testid=\"input-edit-course-duration\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={courseForm.control}\n                    name=\"price\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Pre√ßo (R$)</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" data-testid=\"input-edit-course-price\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"flex gap-2 justify-end\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => { setEditingCourse(null); courseForm.reset(); }}>\n                    Cancelar\n                  </Button>\n                  <Button type=\"submit\" disabled={updateCourseMutation.isPending} data-testid=\"button-update-course\">\n                    {updateCourseMutation.isPending ? 'Atualizando...' : 'Atualizar'}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n\n        {/* Edit Book Dialog */}\n        <Dialog open={!!editingBook} onOpenChange={(open) => {\n          if (!open) {\n            setEditingBook(null);\n            bookForm.reset();\n          }\n        }}>\n          <DialogContent data-testid=\"dialog-edit-book\">\n            <DialogHeader>\n              <DialogTitle>Editar Livro</DialogTitle>\n            </DialogHeader>\n\n            <Form {...bookForm}>\n              <form onSubmit={bookForm.handleSubmit(handleUpdateBook)} className=\"space-y-4\">\n                <FormField\n                  control={bookForm.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nome do Livro</FormLabel>\n                      <FormControl>\n                        <Input data-testid=\"input-edit-book-name\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={bookForm.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Descri√ß√£o</FormLabel>\n                      <FormControl>\n                        <Textarea data-testid=\"input-edit-book-description\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={bookForm.control}\n                    name=\"color\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Cor do Livro</FormLabel>\n                        <FormControl>\n                          <div className=\"flex gap-2 items-center\">\n                            <Input type=\"color\" className=\"w-12 h-10 p-1\" value={field.value} onChange={(e) => field.onChange(e.target.value)} data-testid=\"input-edit-book-color\" />\n                            <Input value={field.value} onChange={(e) => field.onChange(e.target.value)} placeholder=\"#3b82f6\" data-testid=\"input-edit-book-color-hex\" />\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={bookForm.control}\n                    name=\"totalDays\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Total de Dias</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" min=\"1\" data-testid=\"input-edit-book-total-days\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"flex gap-2 justify-end\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => { setEditingBook(null); bookForm.reset(); }}>\n                    Cancelar\n                  </Button>\n                  <Button type=\"submit\" disabled={updateBookMutation.isPending} data-testid=\"button-update-book\">\n                    {updateBookMutation.isPending ? 'Atualizando...' : 'Atualizar'}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n\n        {/* Hidden file input for PDF uploads */}\n        <input\n          ref={fileInputRef}\n          type=\"file\"\n          accept=\"application/pdf\"\n          style={{ display: 'none' }}\n        />\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":45316},"frontend/client/src/components/StaffModal.tsx":{"content":"import { useState, useEffect, useMemo } from \"react\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest, extractErrorMessage } from \"@/lib/queryClient\";\nimport { ConfirmationModal } from \"@/components/ConfirmationModal\";\nimport { validateCPF, formatCPF, formatCEP, formatPhone, fetchAddressByCEP, formatDateBR, convertBRDateToISO } from \"@/lib/cpfUtils\";\n\ninterface StaffModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  staffMember?: any;\n}\n\nexport function StaffModal({ open, onOpenChange, staffMember }: StaffModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const isEditing = !!staffMember;\n\n  const [formData, setFormData] = useState({\n    // User info\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    // Staff info\n    cpf: \"\",\n    birthDate: \"\",\n    gender: \"\",\n    phone: \"\",\n    whatsapp: \"\",\n    cep: \"\",\n    address: \"\",\n    number: \"\",\n    complement: \"\",\n    neighborhood: \"\",\n    city: \"\",\n    position: \"\",\n    department: \"\",\n    salary: \"\",\n    hireDate: \"\",\n    unitId: \"\",\n    unitIds: [] as string[], // Multiple units selection\n    login: \"\",\n    password: \"\",\n    // Guardian info (for minors)\n    guardianName: \"\",\n    guardianCpf: \"\",\n    guardianPhone: \"\",\n    guardianEmail: \"\",\n    guardianRelationship: \"\",\n  });\n\n  const [cpfError, setCpfError] = useState(\"\");\n  const [cepLoading, setCepLoading] = useState(false);\n  const [saveConfirmOpen, setSaveConfirmOpen] = useState(false);\n  const [pendingFormData, setPendingFormData] = useState<any>(null);\n\n  // Menor de idade (corrigido, bordas)\n  const isMinor = useMemo(() => {\n    if (!formData.birthDate) return false;\n    try {\n      const [d, m, y] = formData.birthDate.split(\"/\").map(Number);\n      if (!d || !m || !y) return false;\n      const nasc = new Date(y, m - 1, d);\n      const hoje = new Date();\n      let idade = hoje.getFullYear() - nasc.getFullYear();\n      const mdiff = hoje.getMonth() - nasc.getMonth();\n      if (mdiff < 0 || (mdiff === 0 && hoje.getDate() < nasc.getDate())) idade--;\n      return idade < 18;\n    } catch {\n      return false;\n    }\n  }, [formData.birthDate]);\n\n  const { data: units } = useQuery<any[]>({\n    queryKey: [\"/api/units\"],\n    queryFn: () => apiRequest(\"GET\", \"/api/units\"),\n  });\n\n  useEffect(() => {\n    if (staffMember) {\n      // birthDate ‚Üí DD/MM/YYYY\n      let formattedBirthDate = \"\";\n      if (staffMember.birthDate) {\n        try {\n          const date = new Date(staffMember.birthDate);\n          const day = date.getDate().toString().padStart(2, \"0\");\n          const month = (date.getMonth() + 1).toString().padStart(2, \"0\");\n          const year = date.getFullYear();\n          formattedBirthDate = `${day}/${month}/${year}`;\n        } catch (error) {\n          console.error(\"Error formatting birth date:\", error);\n        }\n      }\n\n      // hireDate ‚Üí DD/MM/YYYY\n      let formattedHireDate = \"\";\n      if (staffMember.hireDate) {\n        try {\n          const date = new Date(staffMember.hireDate);\n          const day = date.getDate().toString().padStart(2, \"0\");\n          const month = (date.getMonth() + 1).toString().padStart(2, \"0\");\n          const year = date.getFullYear();\n          formattedHireDate = `${day}/${month}/${year}`;\n        } catch (error) {\n          console.error(\"Error formatting hire date:\", error);\n        }\n      }\n\n      setFormData({\n        firstName: staffMember.user?.firstName || \"\",\n        lastName: staffMember.user?.lastName || \"\",\n        email: staffMember.user?.email || \"\",\n        cpf: staffMember.cpf || \"\",\n        birthDate: formattedBirthDate,\n        gender: staffMember.gender || \"\",\n        phone: staffMember.phone || \"\",\n        whatsapp: staffMember.whatsapp || \"\",\n        cep: staffMember.cep || \"\",\n        address: staffMember.address || \"\",\n        number: staffMember.number || \"\",\n        complement: staffMember.complement || \"\",\n        neighborhood: staffMember.neighborhood || \"\",\n        city: staffMember.city || \"\",\n        position: staffMember.position || \"\",\n        department: staffMember.department || \"\",\n        salary: staffMember.salary != null ? String(staffMember.salary) : \"\",\n        hireDate: formattedHireDate,\n        unitId: staffMember.unitId || \"\",\n        unitIds: staffMember.unitIds || [],\n        login: staffMember.login || \"\",\n        password: \"\",\n        guardianName: staffMember.guardianName || \"\",\n        guardianCpf: staffMember.guardianCpf || \"\",\n        guardianPhone: staffMember.guardianPhone || \"\",\n        guardianEmail: staffMember.guardianEmail || \"\",\n        guardianRelationship: staffMember.guardianRelationship || \"\",\n      });\n    } else {\n      setFormData({\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\",\n        cpf: \"\",\n        birthDate: \"\",\n        gender: \"\",\n        phone: \"\",\n        whatsapp: \"\",\n        cep: \"\",\n        address: \"\",\n        number: \"\",\n        complement: \"\",\n        neighborhood: \"\",\n        city: \"\",\n        position: \"\",\n        department: \"\",\n        salary: \"\",\n        hireDate: \"\",\n        unitId: \"\",\n        unitIds: [],\n        login: \"\",\n        password: \"\",\n        guardianName: \"\",\n        guardianCpf: \"\",\n        guardianPhone: \"\",\n        guardianEmail: \"\",\n        guardianRelationship: \"\",\n      });\n    }\n  }, [staffMember]);\n\n  const handleCPFBlur = () => {\n    if (formData.cpf && !validateCPF(formData.cpf)) {\n      setCpfError(\"CPF inv√°lido\");\n    } else {\n      setCpfError(\"\");\n    }\n  };\n\n  const handleCEPBlur = async () => {\n    if (formData.cep.replace(/\\D/g, \"\").length === 8) {\n      setCepLoading(true);\n      try {\n        const data = await fetchAddressByCEP(formData.cep);\n        setFormData((prev) => ({\n          ...prev,\n          address: data.logradouro || prev.address,\n          neighborhood: data.bairro || prev.neighborhood,\n          city: `${data.localidade} - ${data.uf}`,\n        }));\n        toast({\n          title: \"CEP encontrado!\",\n          description: \"Endere√ßo preenchido automaticamente\",\n        });\n      } catch (error) {\n        toast({\n          title: \"CEP n√£o encontrado\",\n          description: \"Por favor, preencha o endere√ßo manualmente\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setCepLoading(false);\n      }\n    }\n  };\n\n  const createMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/staff\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"staff\"] });\n      toast({\n        title: \"Sucesso!\",\n        description: \"Colaborador cadastrado com sucesso\",\n      });\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: extractErrorMessage(error) || \"Erro ao cadastrar colaborador\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"PUT\", `/api/staff/${staffMember.id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"staff\"] });\n      toast({\n        title: \"Sucesso!\",\n        description: \"Colaborador atualizado com sucesso\",\n      });\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: extractErrorMessage(error) || \"Erro ao atualizar colaborador\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const validateForm = () => {\n    if (formData.cpf && !validateCPF(formData.cpf)) {\n      setCpfError(\"CPF inv√°lido\");\n      return false;\n    }\n    return true;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!validateForm()) return;\n\n    const salarioNumero =\n      formData.salary && formData.salary.trim() !== \"\"\n        ? parseFloat(formData.salary.replace(/\\./g, \"\").replace(\",\", \".\"))\n        : null;\n\n    // Payload\n    const submitData: any = {\n      firstName: formData.firstName,\n      lastName: formData.lastName,\n      cpf: formData.cpf,\n      birthDate: convertBRDateToISO(formData.birthDate),\n      gender: formData.gender,\n      phone: formData.phone,\n      whatsapp: formData.whatsapp,\n      cep: formData.cep,\n      address: formData.address,\n      number: formData.number,\n      complement: formData.complement,\n      neighborhood: formData.neighborhood,\n      city: formData.city,\n      position: formData.position,\n      department: formData.department,\n      salary: salarioNumero,\n      hireDate: convertBRDateToISO(formData.hireDate),\n      unitId: formData.unitId,\n      unitIds: formData.unitIds,\n      login: formData.login,\n    };\n\n    if (isMinor) {\n      submitData.guardianName = formData.guardianName;\n      submitData.guardianCpf = formData.guardianCpf;\n      submitData.guardianPhone = formData.guardianPhone;\n      submitData.guardianEmail = formData.guardianEmail;\n      submitData.guardianRelationship = formData.guardianRelationship;\n    }\n\n    if (staffMember) {\n      if (formData.email && formData.email.trim() !== \"\" && formData.email !== staffMember.user?.email) {\n        submitData.email = formData.email;\n      }\n      if (formData.password && formData.password.trim() !== \"\") {\n        submitData.password = formData.password;\n      }\n    } else {\n      if (!formData.email || formData.email.trim() === \"\") {\n        toast({\n          title: \"Erro\",\n          description: \"Email √© obrigat√≥rio para criar um novo funcion√°rio\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      submitData.email = formData.email;\n\n      if (!formData.password || formData.password.trim() === \"\") {\n        toast({\n          title: \"Erro\",\n          description: \"Senha √© obrigat√≥ria para criar um novo funcion√°rio\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      submitData.password = formData.password;\n    }\n\n    setPendingFormData(submitData);\n    setSaveConfirmOpen(true);\n  };\n\n  const confirmSave = () => {\n    if (!pendingFormData) return;\n    if (staffMember) {\n      // PUT envia s√≥ o payload\n      updateMutation.mutate(pendingFormData);\n    } else {\n      createMutation.mutate(pendingFormData);\n    }\n    setSaveConfirmOpen(false);\n    setPendingFormData(null);\n  };\n\n  const positionLabels: Record<string, string> = {\n    ceo: \"CEO\",\n    diretor: \"Diretor\",\n    financeiro: \"Financeiro\",\n    administrativo: \"Administrativo\",\n    coordenador: \"Coordenador\",\n    instrutor: \"Instrutor\",\n    professor: \"Professor(a)\",\n    recepcionista: \"Recepcionista\",\n    comercial: \"Comercial\",\n    marketing: \"Marketing\",\n  };\n\n  return (\n    <>\n      <Dialog open={open} onOpenChange={onOpenChange}>\n        <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <div className=\"flex items-start justify-between\">\n              <div className=\"flex-1\">\n                <DialogTitle data-testid=\"modal-title\">\n                  {isEditing ? \"Editar Colaborador\" : \"Novo Colaborador\"}\n                </DialogTitle>\n                <DialogDescription>\n                  {isEditing ? \"Atualize as informa√ß√µes do colaborador\" : \"Preencha os dados para cadastrar um novo colaborador\"}\n                </DialogDescription>\n              </div>\n              {!isEditing && (\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => {\n                    setFormData({\n                      firstName: \"Maria\",\n                      lastName: \"Oliveira Santos\",\n                      email: \"maria.oliveira@teste.com.br\",\n                      cpf: \"987.654.321-00\",\n                      birthDate: \"15/05/1990\",\n                      gender: \"feminino\",\n                      phone: \"(11) 3456-7890\",\n                      whatsapp: \"(11) 98765-4321\",\n                      cep: \"01310-100\",\n                      address: \"Av. Paulista\",\n                      number: \"1000\",\n                      complement: \"Sala 501\",\n                      neighborhood: \"Bela Vista\",\n                      city: \"S√£o Paulo - SP\",\n                      position: \"instrutor\",\n                      department: \"Ensino\",\n                      salary: \"3500,00\",\n                      hireDate: \"01/03/2024\",\n                      unitId: units?.[0]?.id || \"\",\n                      unitIds: [],\n                      login: \"maria.oliveira\",\n                      password: \"teste123\",\n                      guardianName: \"\",\n                      guardianCpf: \"\",\n                      guardianPhone: \"\",\n                      guardianEmail: \"\",\n                      guardianRelationship: \"\",\n                    });\n                    toast({\n                      title: \"Dados de teste carregados\",\n                      description: \"Formul√°rio preenchido com dados exemplares\",\n                    });\n                  }}\n                  className=\"ml-2\"\n                >\n                  üìù Dados de Teste\n                </Button>\n              )}\n            </div>\n          </DialogHeader>\n\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* Informa√ß√µes Pessoais */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">Informa√ß√µes Pessoais</h3>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"firstName\">Nome *</Label>\n                  <Input\n                    id=\"firstName\"\n                    data-testid=\"input-firstName\"\n                    required\n                    value={formData.firstName}\n                    onChange={(e) => setFormData({ ...formData, firstName: e.target.value })}\n                    onKeyDown={(e) => e.stopPropagation()}\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"lastName\">Sobrenome *</Label>\n                  <Input\n                    id=\"lastName\"\n                    data-testid=\"input-lastName\"\n                    required\n                    value={formData.lastName}\n                    onChange={(e) => setFormData({ ...formData, lastName: e.target.value })}\n                    onKeyDown={(e) => e.stopPropagation()}\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"cpf\">CPF *</Label>\n                  <Input\n                    id=\"cpf\"\n                    data-testid=\"input-cpf\"\n                    required\n                    placeholder=\"000.000.000-00\"\n                    value={formData.cpf}\n                    onChange={(e) => {\n                      const formatted = formatCPF(e.target.value);\n                      setFormData({ ...formData, cpf: formatted });\n                      setCpfError(\"\");\n                    }}\n                    onBlur={handleCPFBlur}\n                    maxLength={14}\n                    onKeyDown={(e) => e.stopPropagation()}\n                  />\n                  {cpfError && <p className=\"text-sm text-red-500\">{cpfError}</p>}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"birthDate\">Data de Nascimento *</Label>\n                  <Input\n                    id=\"birthDate\"\n                    data-testid=\"input-birthDate\"\n                    type=\"text\"\n                    required\n                    placeholder=\"DD/MM/AAAA\"\n                    value={formData.birthDate}\n                    onChange={(e) => {\n                      const formatted = formatDateBR(e.target.value);\n                      setFormData({ ...formData, birthDate: formatted });\n                    }}\n                    maxLength={10}\n                    onKeyDown={(e) => e.stopPropagation()}\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"gender\">G√™nero *</Label>\n                  <Select\n                    value={formData.gender}\n                    onValueChange={(value) => setFormData({ ...formData, gender: value })}\n                  >\n                    <SelectTrigger id=\"gender\" data-testid=\"select-gender\">\n                      <SelectValue placeholder=\"Selecione...\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"masculino\">Masculino</SelectItem>\n                      <SelectItem value=\"feminino\">Feminino</SelectItem>\n                      <SelectItem value=\"outro\">Outro</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">E-mail *</Label>\n                  <Input\n                    id=\"email\"\n                    data-testid=\"input-email\"\n                    type=\"email\"\n                    required\n                    value={formData.email}\n                    onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                    onKeyDown={(e) => e.stopPropagation()}\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* Contatos */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">Contatos</h3>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"phone\">Telefone *</Label>\n                  <Input\n                    id=\"phone\"\n                    data-testid=\"input-phone\"\n                    required\n                    placeholder=\"(00) 0000-0000\"\n                    value={formData.phone}\n                    onChange={(e) => setFormData({ ...formData, phone: formatPhone(e.target.value) })}\n                    maxLength={15}\n                    onKeyDown={(e) => e.stopPropagation()}\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"whatsapp\">WhatsApp *</Label>\n                  <Input\n                    id=\"whatsapp\"\n                    data-testid=\"input-whatsapp\"\n                    required\n                    placeholder=\"(00) 00000-0000\"\n                    value={formData.whatsapp}\n                    onChange={(e) => setFormData({ ...formData, whatsapp: formatPhone(e.target.value) })}\n                    maxLength={15}\n                    onKeyDown={(e) => e.stopPropagation()}\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* Endere√ßo */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">Endere√ßo</h3>\n\n              {/* Linha 1: CEP e Cidade */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"cep\">CEP *</Label>\n                  <div className=\"flex gap-2\">\n                    <Input\n                      id=\"cep\"\n                      data-testid=\"input-cep\"\n                      required\n                      placeholder=\"00000-000\"\n                      value={formData.cep}\n                      onChange={(e) => setFormData({ ...formData, cep: formatCEP(e.target.value) })}\n                      onBlur={handleCEPBlur}\n                      maxLength={9}\n                      onKeyDown={(e) => e.stopPropagation()}\n                      disabled={cepLoading}\n                    />\n                    {cepLoading && <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>}\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"city\">Cidade *</Label>\n                  <Input\n                    id=\"city\"\n                    data-testid=\"input-city\"\n                    required\n                    value={formData.city}\n                    onChange={(e) => setFormData({ ...formData, city: e.target.value })}\n                    onKeyDown={(e) => e.stopPropagation()}\n                    disabled={cepLoading}\n                  />\n                </div>\n              </div>\n\n              {/* Linha 2: Bairro, Endere√ßo, N√∫mero */}\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"neighborhood\">Bairro *</Label>\n                  <Input\n                    id=\"neighborhood\"\n                    data-testid=\"input-neighborhood\"\n                    required\n                    value={formData.neighborhood}\n                    onChange={(e) => setFormData({ ...formData, neighborhood: e.target.value })}\n                    onKeyDown={(e) => e.stopPropagation()}\n                    disabled={cepLoading}\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"address\">Endere√ßo *</Label>\n                  <Input\n                    id=\"address\"\n                    data-testid=\"input-address\"\n                    required\n                    value={formData.address}\n                    onChange={(e) => setFormData({ ...formData, address: e.target.value })}\n                    onKeyDown={(e) => e.stopPropagation()}\n                    disabled={cepLoading}\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"number\">N√∫mero *</Label>\n                  <Input\n                    id=\"number\"\n                    data-testid=\"input-number\"\n                    required\n                    value={formData.number}\n                    onChange={(e) => setFormData({ ...formData, number: e.target.value })}\n                    onKeyDown={(e) => e.stopPropagation()}\n                    disabled={cepLoading}\n                  />\n                </div>\n              </div>\n\n              {/* Linha 3: Complemento */}\n              <div className=\"grid grid-cols-1 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"complement\">Complemento</Label>\n                  <Input\n                    id=\"complement\"\n                    data-testid=\"input-complement\"\n                    value={formData.complement}\n                    onChange={(e) => setFormData({ ...formData, complement: e.target.value })}\n                    onKeyDown={(e) => e.stopPropagation()}\n                    disabled={cepLoading}\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* Informa√ß√µes Profissionais */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">Informa√ß√µes Profissionais</h3>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"position\">Cargo *</Label>\n                  <Select\n                    value={formData.position}\n                    onValueChange={(value) => setFormData({ ...formData, position: value })}\n                  >\n                    <SelectTrigger id=\"position\" data-testid=\"select-position\">\n                      <SelectValue placeholder=\"Selecione o cargo...\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {Object.entries(positionLabels).map(([value, label]) => (\n                        <SelectItem key={value} value={value}>\n                          {label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"department\">Departamento</Label>\n                  <Input\n                    id=\"department\"\n                    data-testid=\"input-department\"\n                    value={formData.department}\n                    onChange={(e) => setFormData({ ...formData, department: e.target.value })}\n                    onKeyDown={(e) => e.stopPropagation()}\n                    placeholder=\"Ex: Ensino, Administrativo, Marketing...\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"salary\">Sal√°rio (R$)</Label>\n                  <Input\n                    id=\"salary\"\n                    data-testid=\"input-salary\"\n                    type=\"text\"\n                    inputMode=\"decimal\"\n                    value={formData.salary}\n                    onChange={(e) => setFormData({ ...formData, salary: e.target.value })}\n                    onKeyDown={(e) => e.stopPropagation()}\n                    placeholder=\"0,00\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"hireDate\">Data de Contrata√ß√£o</Label>\n                  <Input\n                    id=\"hireDate\"\n                    data-testid=\"input-hire-date\"\n                    value={formData.hireDate}\n                    onChange={(e) => {\n                      const formatado = formatDateBR(e.target.value);\n                      setFormData({ ...formData, hireDate: formatado });\n                    }}\n                    onKeyDown={(e) => e.stopPropagation()}\n                    placeholder=\"DD/MM/AAAA\"\n                    maxLength={10}\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"unitId\">Unidade Principal</Label>\n                  <Select\n                    value={formData.unitId}\n                    onValueChange={(value) => setFormData({ ...formData, unitId: value })}\n                  >\n                    <SelectTrigger id=\"unitId\" data-testid=\"select-unit\">\n                      <SelectValue placeholder=\"Selecione a unidade principal...\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {units?.map((unit) => (\n                        <SelectItem key={unit.id} value={unit.id}>\n                          {unit.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label>Unidades Adicionais</Label>\n                  <div className=\"border rounded-md p-3 max-h-40 overflow-y-auto\">\n                    <div className=\"space-y-2\">\n                      {units?.map((unit) => (\n                        <div key={unit.id} className=\"flex items-center space-x-2\">\n                          <input\n                            type=\"checkbox\"\n                            id={`unit-${unit.id}`}\n                            checked={formData.unitIds.includes(unit.id)}\n                            onChange={(e) => {\n                              const isChecked = e.target.checked;\n                              const newUnitIds = isChecked\n                                ? [...formData.unitIds, unit.id]\n                                : formData.unitIds.filter((id) => id !== unit.id);\n                              setFormData({ ...formData, unitIds: newUnitIds });\n                            }}\n                            className=\"rounded border-gray-300 text-primary focus:ring-primary\"\n                          />\n                          <Label htmlFor={`unit-${unit.id}`} className=\"cursor-pointer text-sm\">\n                            {unit.name}\n                          </Label>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">Selecione as unidades adicionais onde o colaborador pode atuar</p>\n                </div>\n              </div>\n            </div>\n\n            {/* Respons√°vel Tutor (para menores de idade) */}\n            {isMinor && (\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold text-amber-600\">\n                  Respons√°vel Tutor\n                  <span className=\"text-sm font-normal text-amber-600 ml-2\">(Obrigat√≥rio para menores de 18 anos)</span>\n                </h3>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"guardianName\">Nome Completo *</Label>\n                    <Input\n                      id=\"guardianName\"\n                      data-testid=\"input-guardian-name\"\n                      required={isMinor}\n                      value={formData.guardianName}\n                      onChange={(e) => setFormData({ ...formData, guardianName: e.target.value })}\n                      onKeyDown={(e) => e.stopPropagation()}\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"guardianCpf\">CPF *</Label>\n                    <Input\n                      id=\"guardianCpf\"\n                      data-testid=\"input-guardian-cpf\"\n                      required={isMinor}\n                      value={formData.guardianCpf}\n                      onChange={(e) => {\n                        const formatted = formatCPF(e.target.value);\n                        setFormData({ ...formData, guardianCpf: formatted });\n                      }}\n                      maxLength={14}\n                      onKeyDown={(e) => e.stopPropagation()}\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"guardianPhone\">Telefone *</Label>\n                    <Input\n                      id=\"guardianPhone\"\n                      data-testid=\"input-guardian-phone\"\n                      required={isMinor}\n                      value={formData.guardianPhone}\n                      onChange={(e) => {\n                        const formatted = formatPhone(e.target.value);\n                        setFormData({ ...formData, guardianPhone: formatted });\n                      }}\n                      maxLength={15}\n                      onKeyDown={(e) => e.stopPropagation()}\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"guardianEmail\">E-mail *</Label>\n                    <Input\n                      id=\"guardianEmail\"\n                      data-testid=\"input-guardian-email\"\n                      type=\"email\"\n                      required={isMinor}\n                      value={formData.guardianEmail}\n                      onChange={(e) => setFormData({ ...formData, guardianEmail: e.target.value })}\n                      onKeyDown={(e) => e.stopPropagation()}\n                    />\n                  </div>\n\n                  <div className=\"space-y-2 md:col-span-2\">\n                    <Label htmlFor=\"guardianRelationship\">Parentesco/Rela√ß√£o *</Label>\n                    <Select\n                      value={formData.guardianRelationship}\n                      onValueChange={(value) => setFormData({ ...formData, guardianRelationship: value })}\n                    >\n                      <SelectTrigger id=\"guardianRelationship\" data-testid=\"select-guardian-relationship\">\n                        <SelectValue placeholder=\"Selecione o parentesco...\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"pai\">Pai</SelectItem>\n                        <SelectItem value=\"mae\">M√£e</SelectItem>\n                        <SelectItem value=\"responsavel_legal\">Respons√°vel Legal</SelectItem>\n                        <SelectItem value=\"tutor\">Tutor</SelectItem>\n                        <SelectItem value=\"avo\">Av√¥/Av√≥</SelectItem>\n                        <SelectItem value=\"tio\">Tio/Tia</SelectItem>\n                        <SelectItem value=\"outro\">Outro</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Credenciais de Acesso */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">Credenciais de Acesso</h3>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"login\">Login *</Label>\n                  <Input\n                    id=\"login\"\n                    data-testid=\"input-login\"\n                    required\n                    value={formData.login}\n                    onChange={(e) => setFormData({ ...formData, login: e.target.value })}\n                    onKeyDown={(e) => e.stopPropagation()}\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password\">Senha {!isEditing && \"*\"}</Label>\n                  <Input\n                    id=\"password\"\n                    data-testid=\"input-password\"\n                    type=\"password\"\n                    required={!isEditing}\n                    placeholder={isEditing ? \"Deixe em branco para manter a senha atual\" : \"\"}\n                    value={formData.password}\n                    onChange={(e) => setFormData({ ...formData, password: e.target.value })}\n                    onKeyDown={(e) => e.stopPropagation()}\n                  />\n                </div>\n              </div>\n            </div>\n\n            <DialogFooter>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => onOpenChange(false)}\n                data-testid=\"button-cancel\"\n              >\n                Cancelar\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createMutation.isPending || updateMutation.isPending}\n                data-testid=\"button-submit\"\n              >\n                {(createMutation.isPending || updateMutation.isPending) && (\n                  <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                )}\n                {isEditing ? \"Atualizar\" : \"Cadastrar\"}\n              </Button>\n            </DialogFooter>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      <ConfirmationModal\n        open={saveConfirmOpen}\n        onOpenChange={setSaveConfirmOpen}\n        title={isEditing ? \"Confirmar Atualiza√ß√£o\" : \"Confirmar Cadastro\"}\n        description={\n          isEditing\n            ? `Tem certeza de que deseja atualizar as informa√ß√µes do colaborador \"${formData.firstName} ${formData.lastName}\"?`\n            : `Tem certeza de que deseja cadastrar o novo colaborador \"${formData.firstName} ${formData.lastName}\"?`\n        }\n        confirmText={isEditing ? \"Atualizar\" : \"Cadastrar\"}\n        cancelText=\"Cancelar\"\n        onConfirm={confirmSave}\n        isLoading={createMutation.isPending || updateMutation.isPending}\n      />\n    </>\n  );\n}","size_bytes":35613},"frontend/client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"frontend/client/src/components/PageLoader.tsx":{"content":"\nimport { useState, useEffect } from 'react';\n\ninterface PageLoaderProps {\n  children: React.ReactNode;\n  delay?: number;\n}\n\nexport function PageLoader({ children, delay = 30 }: PageLoaderProps) {\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setIsVisible(true);\n    }, delay);\n\n    return () => clearTimeout(timer);\n  }, [delay]);\n\n  return (\n    <div \n      className={`transition-all duration-300 ease-out ${\n        isVisible \n          ? 'opacity-100 translate-y-0' \n          : 'opacity-0 translate-y-8'\n      }`}\n    >\n      {children}\n    </div>\n  );\n}\n\ninterface FadeInProps {\n  children: React.ReactNode;\n  delay?: number;\n  direction?: 'up' | 'down' | 'left' | 'right';\n  className?: string;\n}\n\nexport function FadeIn({ \n  children, \n  delay = 0, \n  direction = 'up',\n  className = '' \n}: FadeInProps) {\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setIsVisible(true);\n    }, delay);\n\n    return () => clearTimeout(timer);\n  }, [delay]);\n\n  const getTransform = () => {\n    if (isVisible) return 'translate-x-0 translate-y-0';\n    \n    switch (direction) {\n      case 'up': return 'translate-y-8';\n      case 'down': return '-translate-y-8';\n      case 'left': return 'translate-x-8';\n      case 'right': return '-translate-x-8';\n      default: return 'translate-y-8';\n    }\n  };\n\n  return (\n    <div \n      className={`transition-all duration-300 ease-out ${\n        isVisible \n          ? 'opacity-100' \n          : 'opacity-0'\n      } ${getTransform()} ${className}`}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport function StaggeredFadeIn({ \n  children, \n  stagger = 100,\n  className = ''\n}: {\n  children: React.ReactNode[];\n  stagger?: number;\n  className?: string;\n}) {\n  return (\n    <div className={className}>\n      {children.map((child, index) => (\n        <FadeIn key={index} delay={index * stagger}>\n          {child}\n        </FadeIn>\n      ))}\n    </div>\n  );\n}\n","size_bytes":2032},"frontend/backend/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport { relations } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  boolean,\n  pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema, createSelectSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// ============================================================================\n// ENUMS\n// ============================================================================\n\n// User roles - 4 roles fixos do sistema\nexport const userRoleEnum = pgEnum('user_role', [\n  'admin',     // Administrativo - acesso total\n  'secretary', // Secret√°rio - acesso quase total\n  'teacher',   // Professor - acesso limitado focado em ensino\n  'student'    // Aluno - apenas √°rea do aluno\n]);\n\n// Gender enum - unificado para staff e students\nexport const genderEnum = pgEnum('gender', ['masculino', 'feminino', 'outro']);\n\n// Billing type enum\nexport const billingTypeEnum = pgEnum('billing_type', [\n  'mensalidade',\n  'trimestral',\n  'semestral',\n  'anual',\n  'avulso'\n]);\n\n// Support ticket enums\nexport const ticketPriorityEnum = pgEnum('ticket_priority', ['low', 'medium', 'high', 'urgent']);\nexport const ticketStatusEnum = pgEnum('ticket_status', ['open', 'in_progress', 'resolved', 'closed']);\n\n\n\n// ============================================================================\n// CORE TABLES\n// ============================================================================\n\n// Session storage table (mandatory for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// Users table - base para todos os usu√°rios do sistema\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").notNull().unique(),\n  password: varchar(\"password\"), // hashed password\n  firstName: varchar(\"first_name\").notNull(),\n  lastName: varchar(\"last_name\").notNull(),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  roleId: varchar(\"role_id\").references(() => roles.id).notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Roles table - 4 roles fixos do sistema\nexport const roles = pgTable(\"roles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  // Permite pap√©is din√¢micos: trocar enum por varchar\n  name: varchar(\"name\").notNull().unique(),\n  displayName: varchar(\"display_name\").notNull(),\n  description: text(\"description\"),\n  isSystemRole: boolean(\"is_system_role\").default(true).notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  isDeletable: boolean(\"is_deletable\").default(true).notNull(), // Controla se o cargo pode ser exclu√≠do\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Permission categories table\nexport const permissionCategories = pgTable(\"permission_categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull().unique(),\n  displayName: varchar(\"display_name\").notNull(),\n  description: text(\"description\"),\n  isSystemCategory: boolean(\"is_system_category\").default(false).notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Permissions table\nexport const permissions = pgTable(\"permissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull().unique(),\n  displayName: varchar(\"display_name\").notNull(),\n  description: text(\"description\"),\n  categoryId: varchar(\"category_id\").references(() => permissionCategories.id, { onDelete: 'cascade' }).notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Role permissions relationship\nexport const rolePermissions = pgTable(\"role_permissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  roleId: varchar(\"role_id\").references(() => roles.id, { onDelete: 'cascade' }).notNull(),\n  permissionId: varchar(\"permission_id\").references(() => permissions.id, { onDelete: 'cascade' }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n}, (table) => [\n  index(\"UQ_role_permission\").on(table.roleId, table.permissionId),\n]);\n\n// Tabela de p√°ginas do sistema para controle de acesso\nexport const pages = pgTable(\"pages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull().unique(), // ex: 'units', 'staff', 'students'\n  displayName: varchar(\"display_name\").notNull(), // ex: 'Unidades', 'Colaboradores', 'Alunos'\n  description: text(\"description\"),\n  route: varchar(\"route\").notNull(), // ex: '/units', '/staff', '/students'\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Tabela de permiss√µes de p√°ginas por cargo\nexport const rolePagePermissions = pgTable(\"role_page_permissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  roleId: varchar(\"role_id\").references(() => roles.id, { onDelete: 'cascade' }).notNull(),\n  pageId: varchar(\"page_id\").references(() => pages.id, { onDelete: 'cascade' }).notNull(),\n  canAccess: boolean(\"can_access\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n}, (table) => [\n  index(\"UQ_role_page_permission\").on(table.roleId, table.pageId),\n]);\n\n// User permissions table - override de permiss√µes por usu√°rio\nexport const userPermissions = pgTable(\"user_permissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  permissionId: varchar(\"permission_id\").references(() => permissions.id, { onDelete: 'cascade' }).notNull(),\n  isGranted: boolean(\"is_granted\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n}, (table) => [\n  index(\"UQ_user_permission\").on(table.userId, table.permissionId),\n]);\n\n// ============================================================================\n// ORGANIZATIONAL TABLES\n// ============================================================================\n\n// Units table - unidades/filiais\nexport const units = pgTable(\"units\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  address: text(\"address\"),\n  phone: varchar(\"phone\"),\n  email: varchar(\"email\"),\n  managerId: varchar(\"manager_id\").references(() => users.id),\n  \n  // Dados do Franqueado\n  franchiseeName: varchar(\"franchisee_name\"),\n  franchiseeCpf: varchar(\"franchisee_cpf\"),\n  franchiseeCpfDoc: varchar(\"franchisee_cpf_doc\"),\n  franchiseeRg: varchar(\"franchisee_rg\"),\n  franchiseeRgDoc: varchar(\"franchisee_rg_doc\"),\n  franchiseeResidenceAddress: text(\"franchisee_residence_address\"),\n  franchiseeResidenceDoc: varchar(\"franchisee_residence_doc\"),\n  franchiseeMaritalStatus: varchar(\"franchisee_marital_status\"),\n  franchiseeMaritalStatusDoc: varchar(\"franchisee_marital_status_doc\"),\n  franchiseeCurriculumDoc: varchar(\"franchisee_curriculum_doc\"),\n  franchiseeAssetsDoc: varchar(\"franchisee_assets_doc\"),\n  franchiseeIncomeDoc: varchar(\"franchisee_income_doc\"),\n  \n  // Dados PJ\n  franchiseeSocialContractDoc: varchar(\"franchisee_social_contract_doc\"),\n  franchiseeCnpj: varchar(\"franchisee_cnpj\"),\n  franchiseeCnpjDoc: varchar(\"franchisee_cnpj_doc\"),\n  franchiseeStateRegistration: varchar(\"franchisee_state_registration\"),\n  franchiseeStateRegistrationDoc: varchar(\"franchisee_state_registration_doc\"),\n  franchiseePartnersDocsDoc: varchar(\"franchisee_partners_docs_doc\"),\n  franchiseeCertificatesDoc: varchar(\"franchisee_certificates_doc\"),\n  \n  // Dados Financeiros\n  financialCapitalDoc: varchar(\"financial_capital_doc\"),\n  financialCashFlowDoc: varchar(\"financial_cash_flow_doc\"),\n  financialTaxReturnsDoc: varchar(\"financial_tax_returns_doc\"),\n  financialBankReferences: text(\"financial_bank_references\"),\n  financialBankReferencesDoc: varchar(\"financial_bank_references_doc\"),\n  \n  // Dados Imobili√°rios\n  realEstateLocation: text(\"real_estate_location\"),\n  realEstatePropertyDoc: varchar(\"real_estate_property_doc\"),\n  realEstateLeaseDoc: varchar(\"real_estate_lease_doc\"),\n  realEstateFloorPlanDoc: varchar(\"real_estate_floor_plan_doc\"),\n  \n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Staff table - funcion√°rios\nexport const staff = pgTable(\"staff\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  unitId: varchar(\"unit_id\").references(() => units.id),\n  \n  // Informa√ß√µes pessoais\n  cpf: varchar(\"cpf\", { length: 14 }),\n  birthDate: timestamp(\"birth_date\"),\n  gender: genderEnum(\"gender\"),\n  \n  // Contatos\n  phone: varchar(\"phone\"),\n  whatsapp: varchar(\"whatsapp\"),\n  \n  // Endere√ßo\n  cep: varchar(\"cep\", { length: 9 }),\n  address: text(\"address\"),\n  number: varchar(\"number\"),\n  complement: varchar(\"complement\"),\n  neighborhood: varchar(\"neighborhood\"),\n  city: varchar(\"city\"),\n  state: varchar(\"state\"),\n  \n  // Informa√ß√µes profissionais - position agora √© varchar livre\n  position: varchar(\"position\"), // ex: \"Professor de Ingl√™s\", \"Coordenador\", etc\n  department: varchar(\"department\"),\n  salary: integer(\"salary\"),\n  hireDate: timestamp(\"hire_date\"),\n  \n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Guardians table - respons√°veis legais\nexport const guardians = pgTable(\"guardians\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  \n  // Informa√ß√µes pessoais\n  firstName: varchar(\"first_name\").notNull(),\n  lastName: varchar(\"last_name\").notNull(),\n  cpf: varchar(\"cpf\", { length: 14 }),\n  birthDate: timestamp(\"birth_date\"),\n  gender: genderEnum(\"gender\"),\n  \n  // Contatos\n  email: varchar(\"email\"),\n  phone: varchar(\"phone\"),\n  whatsapp: varchar(\"whatsapp\"),\n  \n  // Endere√ßo\n  cep: varchar(\"cep\", { length: 9 }),\n  address: text(\"address\"),\n  number: varchar(\"number\"),\n  complement: varchar(\"complement\"),\n  neighborhood: varchar(\"neighborhood\"),\n  city: varchar(\"city\"),\n  state: varchar(\"state\"),\n  \n  // Rela√ß√£o com o aluno\n  relationship: varchar(\"relationship\"),\n  \n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Financial Responsibles table\nexport const financialResponsibles = pgTable(\"financial_responsibles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  guardianId: varchar(\"guardian_id\").references(() => guardians.id, { onDelete: 'cascade' }).notNull(),\n  \n  // Informa√ß√µes pessoais\n  firstName: varchar(\"first_name\").notNull(),\n  lastName: varchar(\"last_name\").notNull(),\n  cpf: varchar(\"cpf\", { length: 14 }),\n  birthDate: timestamp(\"birth_date\"),\n  gender: genderEnum(\"gender\"),\n  \n  // Contatos\n  email: varchar(\"email\"),\n  phone: varchar(\"phone\"),\n  whatsapp: varchar(\"whatsapp\"),\n  \n  // Endere√ßo\n  cep: varchar(\"cep\", { length: 9 }),\n  address: text(\"address\"),\n  number: varchar(\"number\"),\n  complement: varchar(\"complement\"),\n  neighborhood: varchar(\"neighborhood\"),\n  city: varchar(\"city\"),\n  state: varchar(\"state\"),\n  \n  // Rela√ß√£o com o respons√°vel legal\n  relationship: varchar(\"relationship\"),\n  \n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Students table\nexport const students = pgTable(\"students\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  studentId: varchar(\"student_id\").unique(),\n  unitId: varchar(\"unit_id\").references(() => units.id),\n  \n  // Informa√ß√µes pessoais\n  cpf: varchar(\"cpf\", { length: 14 }),\n  birthDate: timestamp(\"birth_date\"),\n  gender: genderEnum(\"gender\"),\n  \n  // Contatos\n  phone: varchar(\"phone\"),\n  whatsapp: varchar(\"whatsapp\"),\n  \n  // Endere√ßo\n  cep: varchar(\"cep\", { length: 9 }),\n  address: text(\"address\"),\n  number: varchar(\"number\"),\n  complement: varchar(\"complement\"),\n  neighborhood: varchar(\"neighborhood\"),\n  city: varchar(\"city\"),\n  state: varchar(\"state\"),\n  \n  // Informa√ß√µes de cobran√ßa\n  billingType: billingTypeEnum(\"billing_type\"),\n  \n  // Respons√°vel (se menor de idade)\n  guardianId: varchar(\"guardian_id\").references(() => guardians.id),\n  \n  enrollmentDate: timestamp(\"enrollment_date\"),\n  status: varchar(\"status\").default('active').notNull(),\n  emergencyContact: text(\"emergency_contact\"),\n  notes: text(\"notes\"),\n  \n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// ============================================================================\n// ACADEMIC TABLES\n// ============================================================================\n\n// Courses table\nexport const courses = pgTable(\"courses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  language: varchar(\"language\").notNull(),\n  level: varchar(\"level\").notNull(),\n  duration: integer(\"duration\"),\n  price: integer(\"price\"),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Books table - livros dentro de cada curso\nexport const books = pgTable(\"books\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  courseId: varchar(\"course_id\").references(() => courses.id, { onDelete: 'cascade' }).notNull(),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  pdfUrl: varchar(\"pdf_url\"),\n  color: varchar(\"color\").notNull().default('#3b82f6'),\n  displayOrder: integer(\"display_order\").default(1).notNull(),\n  totalDays: integer(\"total_days\").default(30).notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Classes table (turmas)\nexport const classes = pgTable(\"classes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  bookId: varchar(\"book_id\").references(() => books.id, { onDelete: 'cascade' }).notNull(),\n  teacherId: varchar(\"teacher_id\").references(() => users.id).notNull(),\n  unitId: varchar(\"unit_id\").references(() => units.id).notNull(),\n  name: varchar(\"name\").notNull(),\n  schedule: text(\"schedule\"),\n  dayOfWeek: integer(\"day_of_week\"),\n  startTime: varchar(\"start_time\"),\n  endTime: varchar(\"end_time\"),\n  room: varchar(\"room\"),\n  maxStudents: integer(\"max_students\").default(15).notNull(),\n  currentStudents: integer(\"current_students\").default(0).notNull(),\n  startDate: timestamp(\"start_date\"),\n  endDate: timestamp(\"end_date\"),\n  currentDay: integer(\"current_day\").default(1).notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Class enrollments\nexport const classEnrollments = pgTable(\"class_enrollments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  classId: varchar(\"class_id\").references(() => classes.id, { onDelete: 'cascade' }).notNull(),\n  studentId: varchar(\"student_id\").references(() => students.id, { onDelete: 'cascade' }).notNull(),\n  enrollmentDate: timestamp(\"enrollment_date\").defaultNow().notNull(),\n  status: varchar(\"status\").default('active').notNull(),\n  finalGrade: varchar(\"final_grade\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Lessons table\nexport const lessons = pgTable(\"lessons\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  classId: varchar(\"class_id\").references(() => classes.id, { onDelete: 'cascade' }).notNull(),\n  title: varchar(\"title\").notNull(),\n  bookDay: integer(\"book_day\").notNull(),\n  date: timestamp(\"date\").notNull(),\n  startTime: varchar(\"start_time\").notNull(),\n  endTime: varchar(\"end_time\").notNull(),\n  room: varchar(\"room\"),\n  status: varchar(\"status\").default('scheduled').notNull(),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Teacher Schedule table - Agenda individual de professores\nexport const teacherSchedule = pgTable(\"teacher_schedule\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  teacherId: varchar(\"teacher_id\").references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  unitId: varchar(\"unit_id\").references(() => units.id).notNull(),\n  courseName: varchar(\"course_name\").notNull(), // Nome do curso inserido manualmente\n  dayOfWeek: integer(\"day_of_week\").notNull(), // 1=Segunda, 2=Ter√ßa, etc.\n  startTime: varchar(\"start_time\").notNull(),\n  endTime: varchar(\"end_time\").notNull(),\n  room: varchar(\"room\"),\n  notes: text(\"notes\"),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n  createdBy: varchar(\"created_by\").references(() => users.id).notNull(), // Admin/Secret√°rio que criou\n});\n\n// Course Units table\nexport const courseUnits = pgTable(\"course_units\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  bookId: varchar(\"book_id\").references(() => books.id, { onDelete: 'cascade' }).notNull(),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  displayOrder: integer(\"display_order\").notNull(),\n  unitType: varchar(\"unit_type\").default('lesson').notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Course Videos table\nexport const courseVideos = pgTable(\"course_videos\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  unitId: varchar(\"unit_id\").references(() => courseUnits.id, { onDelete: 'cascade' }).notNull(),\n  dayNumber: integer(\"day_number\").notNull(),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  videoUrl: varchar(\"video_url\").notNull(),\n  thumbnailUrl: varchar(\"thumbnail_url\"),\n  duration: integer(\"duration\"),\n  hasSubtitles: boolean(\"has_subtitles\").default(false).notNull(),\n  subtitlesUrl: varchar(\"subtitles_url\"),\n  displayOrder: integer(\"display_order\").notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Course Activities table\nexport const courseActivities = pgTable(\"course_activities\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  videoId: varchar(\"video_id\").references(() => courseVideos.id, { onDelete: 'cascade' }).notNull(),\n  activityType: varchar(\"activity_type\").notNull(),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  instruction: text(\"instruction\"),\n  content: text(\"content\").notNull(),\n  correctAnswer: text(\"correct_answer\"),\n  points: integer(\"points\").default(10).notNull(),\n  displayOrder: integer(\"display_order\").notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Course Workbooks table\nexport const courseWorkbooks = pgTable(\"course_workbooks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  bookId: varchar(\"book_id\").references(() => books.id, { onDelete: 'cascade' }).notNull(),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  pdfUrl: varchar(\"pdf_url\"),\n  content: text(\"content\"),\n  displayOrder: integer(\"display_order\").notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Course Exams table\nexport const courseExams = pgTable(\"course_exams\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  bookId: varchar(\"book_id\").references(() => books.id, { onDelete: 'cascade' }).notNull(),\n  unitId: varchar(\"unit_id\").references(() => courseUnits.id),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  examType: varchar(\"exam_type\").notNull(),\n  content: text(\"content\").notNull(),\n  totalPoints: integer(\"total_points\").default(100).notNull(),\n  passingScore: integer(\"passing_score\").default(70).notNull(),\n  timeLimit: integer(\"time_limit\"),\n  displayOrder: integer(\"display_order\").notNull(),\n  requiresTeacherReview: boolean(\"requires_teacher_review\").default(false).notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Student Progress table\nexport const studentProgress = pgTable(\"student_progress\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").references(() => students.id, { onDelete: 'cascade' }).notNull(),\n  videoId: varchar(\"video_id\").references(() => courseVideos.id),\n  activityId: varchar(\"activity_id\").references(() => courseActivities.id),\n  examId: varchar(\"exam_id\").references(() => courseExams.id),\n  isCompleted: boolean(\"is_completed\").default(false).notNull(),\n  completedAt: timestamp(\"completed_at\"),\n  score: integer(\"score\"),\n  attempts: integer(\"attempts\").default(0).notNull(),\n  studentAnswer: text(\"student_answer\"),\n  teacherFeedback: text(\"teacher_feedback\"),\n  watchedDuration: integer(\"watched_duration\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Student Course Enrollments\nexport const studentCourseEnrollments = pgTable(\"student_course_enrollments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").references(() => students.id, { onDelete: 'cascade' }).notNull(),\n  courseId: varchar(\"course_id\").references(() => courses.id, { onDelete: 'cascade' }).notNull(),\n  enrollmentDate: timestamp(\"enrollment_date\").defaultNow().notNull(),\n  currentBookId: varchar(\"current_book_id\").references(() => books.id),\n  currentUnitId: varchar(\"current_unit_id\").references(() => courseUnits.id),\n  status: varchar(\"status\").default('active').notNull(),\n  overallProgress: integer(\"overall_progress\").default(0).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// ============================================================================\n// SUPPORT & SETTINGS TABLES\n// ============================================================================\n\n// User Settings table\nexport const userSettings = pgTable(\"user_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }).notNull().unique(),\n  theme: varchar(\"theme\").default('light').notNull(),\n  language: varchar(\"language\").default('pt-BR').notNull(),\n  timezone: varchar(\"timezone\").default('America/Sao_Paulo').notNull(),\n  dateFormat: varchar(\"date_format\").default('DD/MM/YYYY').notNull(),\n  currency: varchar(\"currency\").default('BRL').notNull(),\n  emailNotifications: boolean(\"email_notifications\").default(true).notNull(),\n  pushNotifications: boolean(\"push_notifications\").default(false).notNull(),\n  systemAlerts: boolean(\"system_alerts\").default(true).notNull(),\n  lessonReminders: boolean(\"lesson_reminders\").default(true).notNull(),\n  weeklyReports: boolean(\"weekly_reports\").default(false).notNull(),\n  autoSave: boolean(\"auto_save\").default(true).notNull(),\n  twoFactorEnabled: boolean(\"two_factor_enabled\").default(false).notNull(),\n  sessionTimeout: integer(\"session_timeout\").default(30).notNull(),\n  loginAlerts: boolean(\"login_alerts\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Support Tickets table\nexport const supportTickets = pgTable(\"support_tickets\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  category: varchar(\"category\").notNull(),\n  priority: ticketPriorityEnum(\"priority\").default('medium').notNull(),\n  status: ticketStatusEnum(\"status\").default('open').notNull(),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  assignedTo: varchar(\"assigned_to\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Support ticket responses table\nexport const supportTicketResponses = pgTable(\"support_ticket_responses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  ticketId: varchar(\"ticket_id\").references(() => supportTickets.id, { onDelete: 'cascade' }).notNull(),\n  message: text(\"message\").notNull(),\n  isFromSupport: boolean(\"is_from_support\").default(false).notNull(),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Franchise Units Registration table - simplificado\nexport const franchiseUnits = pgTable(\"franchise_units\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  entityType: varchar(\"entity_type\").notNull(),\n  \n  // Dados b√°sicos\n  fullName: text(\"full_name\"),\n  cpf: varchar(\"cpf\"),\n  cnpj: varchar(\"cnpj\"),\n  \n  // Documentos (JSON com URLs)\n  documents: text(\"documents\"), // JSON com todos os documentos\n  \n  // Status\n  status: varchar(\"status\").default('pending').notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// ============================================================================\n// RELATIONS\n// ============================================================================\n\nexport const usersRelations = relations(users, ({ one, many }) => ({\n  role: one(roles, {\n    fields: [users.roleId],\n    references: [roles.id],\n  }),\n  staff: one(staff, {\n    fields: [users.id],\n    references: [staff.userId],\n  }),\n  student: one(students, {\n    fields: [users.id],\n    references: [students.userId],\n  }),\n  userPermissions: many(userPermissions),\n  userSettings: one(userSettings, {\n    fields: [users.id],\n    references: [userSettings.userId],\n  }),\n}));\n\nexport const rolesRelations = relations(roles, ({ many }) => ({\n  users: many(users),\n  rolePermissions: many(rolePermissions),\n}));\n\nexport const permissionCategoriesRelations = relations(permissionCategories, ({ many }) => ({\n  permissions: many(permissions),\n}));\n\nexport const permissionsRelations = relations(permissions, ({ one, many }) => ({\n  category: one(permissionCategories, {\n    fields: [permissions.categoryId],\n    references: [permissionCategories.id],\n  }),\n  rolePermissions: many(rolePermissions),\n  userPermissions: many(userPermissions),\n}));\n\nexport const rolePermissionsRelations = relations(rolePermissions, ({ one }) => ({\n  role: one(roles, {\n    fields: [rolePermissions.roleId],\n    references: [roles.id],\n  }),\n  permission: one(permissions, {\n    fields: [rolePermissions.permissionId],\n    references: [permissions.id],\n  }),\n}));\n\nexport const userPermissionsRelations = relations(userPermissions, ({ one }) => ({\n  user: one(users, {\n    fields: [userPermissions.userId],\n    references: [users.id],\n  }),\n  permission: one(permissions, {\n    fields: [userPermissions.permissionId],\n    references: [permissions.id],\n  }),\n}));\n\nexport const staffRelations = relations(staff, ({ one }) => ({\n  user: one(users, {\n    fields: [staff.userId],\n    references: [users.id],\n  }),\n  unit: one(units, {\n    fields: [staff.unitId],\n    references: [units.id],\n  }),\n}));\n\nexport const studentsRelations = relations(students, ({ one, many }) => ({\n  user: one(users, {\n    fields: [students.userId],\n    references: [users.id],\n  }),\n  unit: one(units, {\n    fields: [students.unitId],\n    references: [units.id],\n  }),\n  guardian: one(guardians, {\n    fields: [students.guardianId],\n    references: [guardians.id],\n  }),\n  classEnrollments: many(classEnrollments),\n  courseEnrollments: many(studentCourseEnrollments),\n  progress: many(studentProgress),\n}));\n\nexport const guardiansRelations = relations(guardians, ({ one, many }) => ({\n  students: many(students),\n  financialResponsible: one(financialResponsibles, {\n    fields: [guardians.id],\n    references: [financialResponsibles.guardianId],\n  }),\n}));\n\nexport const financialResponsiblesRelations = relations(financialResponsibles, ({ one }) => ({\n  guardian: one(guardians, {\n    fields: [financialResponsibles.guardianId],\n    references: [guardians.id],\n  }),\n}));\n\nexport const coursesRelations = relations(courses, ({ many }) => ({\n  books: many(books),\n  studentEnrollments: many(studentCourseEnrollments),\n}));\n\nexport const booksRelations = relations(books, ({ one, many }) => ({\n  course: one(courses, {\n    fields: [books.courseId],\n    references: [courses.id],\n  }),\n  classes: many(classes),\n  units: many(courseUnits),\n  workbooks: many(courseWorkbooks),\n  exams: many(courseExams),\n}));\n\nexport const classesRelations = relations(classes, ({ one, many }) => ({\n  book: one(books, {\n    fields: [classes.bookId],\n    references: [books.id],\n  }),\n  teacher: one(users, {\n    fields: [classes.teacherId],\n    references: [users.id],\n  }),\n  unit: one(units, {\n    fields: [classes.unitId],\n    references: [units.id],\n  }),\n  enrollments: many(classEnrollments),\n  lessons: many(lessons),\n}));\n\nexport const classEnrollmentsRelations = relations(classEnrollments, ({ one }) => ({\n  class: one(classes, {\n    fields: [classEnrollments.classId],\n    references: [classes.id],\n  }),\n  student: one(students, {\n    fields: [classEnrollments.studentId],\n    references: [students.id],\n  }),\n}));\n\nexport const lessonsRelations = relations(lessons, ({ one }) => ({\n  class: one(classes, {\n    fields: [lessons.classId],\n    references: [classes.id],\n  }),\n}));\n\nexport const teacherScheduleRelations = relations(teacherSchedule, ({ one }) => ({\n  teacher: one(users, {\n    fields: [teacherSchedule.teacherId],\n    references: [users.id],\n  }),\n  unit: one(units, {\n    fields: [teacherSchedule.unitId],\n    references: [units.id],\n  }),\n  createdByUser: one(users, {\n    fields: [teacherSchedule.createdBy],\n    references: [users.id],\n  }),\n}));\n\nexport const courseUnitsRelations = relations(courseUnits, ({ one, many }) => ({\n  book: one(books, {\n    fields: [courseUnits.bookId],\n    references: [books.id],\n  }),\n  videos: many(courseVideos),\n  exams: many(courseExams),\n}));\n\nexport const courseVideosRelations = relations(courseVideos, ({ one, many }) => ({\n  unit: one(courseUnits, {\n    fields: [courseVideos.unitId],\n    references: [courseUnits.id],\n  }),\n  activities: many(courseActivities),\n  progress: many(studentProgress),\n}));\n\nexport const courseActivitiesRelations = relations(courseActivities, ({ one, many }) => ({\n  video: one(courseVideos, {\n    fields: [courseActivities.videoId],\n    references: [courseVideos.id],\n  }),\n  progress: many(studentProgress),\n}));\n\nexport const studentProgressRelations = relations(studentProgress, ({ one }) => ({\n  student: one(students, {\n    fields: [studentProgress.studentId],\n    references: [students.id],\n  }),\n  video: one(courseVideos, {\n    fields: [studentProgress.videoId],\n    references: [courseVideos.id],\n  }),\n  activity: one(courseActivities, {\n    fields: [studentProgress.activityId],\n    references: [courseActivities.id],\n  }),\n  exam: one(courseExams, {\n    fields: [studentProgress.examId],\n    references: [courseExams.id],\n  }),\n}));\n\nexport const studentCourseEnrollmentsRelations = relations(studentCourseEnrollments, ({ one }) => ({\n  student: one(students, {\n    fields: [studentCourseEnrollments.studentId],\n    references: [students.id],\n  }),\n  course: one(courses, {\n    fields: [studentCourseEnrollments.courseId],\n    references: [courses.id],\n  }),\n  currentBook: one(books, {\n    fields: [studentCourseEnrollments.currentBookId],\n    references: [books.id],\n  }),\n  currentUnit: one(courseUnits, {\n    fields: [studentCourseEnrollments.currentUnitId],\n    references: [courseUnits.id],\n  }),\n}));\n\n// ============================================================================\n// SCHEMAS\n// ============================================================================\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertRoleSchema = createInsertSchema(roles).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPermissionCategorySchema = createInsertSchema(permissionCategories).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPermissionSchema = createInsertSchema(permissions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertRolePermissionSchema = createInsertSchema(rolePermissions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserPermissionSchema = createInsertSchema(userPermissions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPageSchema = createInsertSchema(pages).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertRolePagePermissionSchema = createInsertSchema(rolePagePermissions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUnitSchema = createInsertSchema(units).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertStaffSchema = createInsertSchema(staff).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertGuardianSchema = createInsertSchema(guardians).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  // Permite que birthDate seja uma string ISO que ser√° convertida para Date\n  birthDate: z.string().datetime().optional().transform((val) => val ? new Date(val) : undefined),\n});\n\nexport const insertFinancialResponsibleSchema = createInsertSchema(financialResponsibles).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  // Permite que birthDate seja uma string ISO que ser√° convertida para Date\n  birthDate: z.string().datetime().optional().transform((val) => val ? new Date(val) : undefined),\n});\n\nexport const insertStudentSchema = createInsertSchema(students).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  // Permite que birthDate seja uma string ISO que ser√° convertida para Date\n  birthDate: z.string().datetime().optional().transform((val) => val ? new Date(val) : undefined),\n});\n\nexport const insertCourseSchema = createInsertSchema(courses).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertBookSchema = createInsertSchema(books).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertClassSchema = createInsertSchema(classes).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertClassEnrollmentSchema = createInsertSchema(classEnrollments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertLessonSchema = createInsertSchema(lessons).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCourseUnitSchema = createInsertSchema(courseUnits).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCourseVideoSchema = createInsertSchema(courseVideos).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCourseActivitySchema = createInsertSchema(courseActivities).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCourseWorkbookSchema = createInsertSchema(courseWorkbooks).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCourseExamSchema = createInsertSchema(courseExams).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertStudentProgressSchema = createInsertSchema(studentProgress).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertStudentCourseEnrollmentSchema = createInsertSchema(studentCourseEnrollments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTeacherScheduleSchema = createInsertSchema(teacherSchedule).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUserSettingsSchema = createInsertSchema(userSettings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSupportTicketSchema = createInsertSchema(supportTickets).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSupportTicketResponseSchema = createInsertSchema(supportTicketResponses).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertFranchiseUnitSchema = createInsertSchema(franchiseUnits).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// ============================================================================\n// TYPES\n// ============================================================================\n\n// Insert types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type InsertRole = z.infer<typeof insertRoleSchema>;\nexport type InsertPermissionCategory = z.infer<typeof insertPermissionCategorySchema>;\nexport type InsertPermission = z.infer<typeof insertPermissionSchema>;\nexport type InsertRolePermission = z.infer<typeof insertRolePermissionSchema>;\nexport type InsertUserPermission = z.infer<typeof insertUserPermissionSchema>;\nexport type InsertPage = z.infer<typeof insertPageSchema>;\nexport type InsertRolePagePermission = z.infer<typeof insertRolePagePermissionSchema>;\nexport type InsertUnit = z.infer<typeof insertUnitSchema>;\nexport type InsertStaff = z.infer<typeof insertStaffSchema>;\nexport type InsertGuardian = z.infer<typeof insertGuardianSchema>;\nexport type InsertFinancialResponsible = z.infer<typeof insertFinancialResponsibleSchema>;\nexport type InsertStudent = z.infer<typeof insertStudentSchema>;\nexport type InsertCourse = z.infer<typeof insertCourseSchema>;\nexport type InsertBook = z.infer<typeof insertBookSchema>;\nexport type InsertClass = z.infer<typeof insertClassSchema>;\nexport type InsertClassEnrollment = z.infer<typeof insertClassEnrollmentSchema>;\nexport type InsertLesson = z.infer<typeof insertLessonSchema>;\nexport type InsertCourseUnit = z.infer<typeof insertCourseUnitSchema>;\nexport type InsertCourseVideo = z.infer<typeof insertCourseVideoSchema>;\nexport type InsertCourseActivity = z.infer<typeof insertCourseActivitySchema>;\nexport type InsertCourseWorkbook = z.infer<typeof insertCourseWorkbookSchema>;\nexport type InsertCourseExam = z.infer<typeof insertCourseExamSchema>;\nexport type InsertStudentProgress = z.infer<typeof insertStudentProgressSchema>;\nexport type InsertStudentCourseEnrollment = z.infer<typeof insertStudentCourseEnrollmentSchema>;\nexport type InsertTeacherSchedule = z.infer<typeof insertTeacherScheduleSchema>;\nexport type InsertUserSettings = z.infer<typeof insertUserSettingsSchema>;\nexport type InsertSupportTicket = z.infer<typeof insertSupportTicketSchema>;\nexport type InsertSupportTicketResponse = z.infer<typeof insertSupportTicketResponseSchema>;\nexport type InsertFranchiseUnit = z.infer<typeof insertFranchiseUnitSchema>;\n\n// Select types\nexport type User = typeof users.$inferSelect;\nexport type Role = typeof roles.$inferSelect;\nexport type PermissionCategory = typeof permissionCategories.$inferSelect;\nexport type Permission = typeof permissions.$inferSelect;\nexport type RolePermission = typeof rolePermissions.$inferSelect;\nexport type UserPermission = typeof userPermissions.$inferSelect;\nexport type Page = typeof pages.$inferSelect;\nexport type RolePagePermission = typeof rolePagePermissions.$inferSelect;\nexport type Unit = typeof units.$inferSelect;\nexport type Staff = typeof staff.$inferSelect;\nexport type Guardian = typeof guardians.$inferSelect;\nexport type FinancialResponsible = typeof financialResponsibles.$inferSelect;\nexport type Student = typeof students.$inferSelect;\nexport type Course = typeof courses.$inferSelect;\nexport type Book = typeof books.$inferSelect;\nexport type Class = typeof classes.$inferSelect;\nexport type ClassEnrollment = typeof classEnrollments.$inferSelect;\nexport type Lesson = typeof lessons.$inferSelect;\nexport type CourseUnit = typeof courseUnits.$inferSelect;\nexport type CourseVideo = typeof courseVideos.$inferSelect;\nexport type CourseActivity = typeof courseActivities.$inferSelect;\nexport type CourseWorkbook = typeof courseWorkbooks.$inferSelect;\nexport type CourseExam = typeof courseExams.$inferSelect;\nexport type StudentProgress = typeof studentProgress.$inferSelect;\nexport type StudentCourseEnrollment = typeof studentCourseEnrollments.$inferSelect;\nexport type UserSettings = typeof userSettings.$inferSelect;\nexport type SupportTicket = typeof supportTickets.$inferSelect;\nexport type SupportTicketResponse = typeof supportTicketResponses.$inferSelect;\nexport type FranchiseUnit = typeof franchiseUnits.$inferSelect;\nexport type TeacherSchedule = typeof teacherSchedule.$inferSelect;\n\n// Extended types\nexport type UpsertUser = InsertUser & { id?: string };\n\nexport type StaffWithUser = Staff & {\n  user: User;\n  unit?: Unit;\n};\n\nexport type StudentWithUser = Student & {\n  user: User;\n  unit?: Unit;\n  guardian?: GuardianWithFinancial;\n};\n\nexport type ClassWithDetails = Class & {\n  book: Book & { course: Course };\n  teacher: User;\n  unit: Unit;\n  enrollments: (ClassEnrollment & { student: StudentWithUser })[];\n};\n\nexport type RoleWithPermissions = Role & {\n  rolePermissions: (RolePermission & { permission: Permission })[];\n};\n\nexport type UserWithPermissions = User & {\n  role: RoleWithPermissions;\n  userPermissions: (UserPermission & { permission: Permission })[];\n};\n\nexport type GuardianWithFinancial = Guardian & {\n  financialResponsible?: FinancialResponsible;\n};\n\nexport type PermissionsByCategory = Record<string, Permission[]>;\n\nexport type CourseWithDetails = Course & {\n  books: (Book & { classes: Class[] })[];\n};\n\nexport type CourseUnitWithVideos = CourseUnit & {\n  videos: (CourseVideo & {\n    activities: CourseActivity[];\n  })[];\n};\n\nexport type BookWithUnits = Book & {\n  course: Course;\n  units: CourseUnitWithVideos[];\n  workbooks: CourseWorkbook[];\n  exams: CourseExam[];\n};\n\nexport type StudentCourseEnrollmentWithDetails = StudentCourseEnrollment & {\n  course: Course & {\n    books: BookWithUnits[];\n  };\n  currentBook?: Book;\n  currentUnit?: CourseUnit;\n};\n\nexport type VideoWithProgress = CourseVideo & {\n  activities: CourseActivity[];\n  progress?: StudentProgress;\n};\n\nexport type SupportTicketWithResponses = SupportTicket & {\n  responses: SupportTicketResponse[];\n  user: User;\n  assignedUser?: User;\n};\n","size_bytes":44487},"frontend/client/src/components/StudentProfileModal.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { displayDateBR, formatCPF, formatPhone } from \"@/lib/cpfUtils\";\n\ninterface StudentProfileModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  student: any;\n}\n\nexport function StudentProfileModal({ open, onOpenChange, student }: StudentProfileModalProps) {\n  if (!student) return null;\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'bg-green-100 text-green-700';\n      case 'inactive': return 'bg-gray-100 text-gray-700';\n      case 'graduated': return 'bg-blue-100 text-blue-700';\n      default: return 'bg-gray-100 text-gray-700';\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'active': return 'Ativo';\n      case 'inactive': return 'Inativo';\n      case 'graduated': return 'Formado';\n      default: return status;\n    }\n  };\n\n  const getGenderText = (gender: string) => {\n    switch (gender) {\n      case 'masculino': return 'Masculino';\n      case 'feminino': return 'Feminino';\n      default: return gender;\n    }\n  };\n\n  const getRelationshipText = (relationship: string) => {\n    switch (relationship) {\n      case 'pai': return 'Pai';\n      case 'mae': return 'M√£e';\n      case 'tutor': return 'Tutor Legal';\n      default: return relationship;\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-3\">\n            <Avatar className=\"w-12 h-12\">\n              <AvatarImage src={student.user?.profileImageUrl} />\n              <AvatarFallback>\n                <i className=\"fas fa-user-graduate text-lg\"></i>\n              </AvatarFallback>\n            </Avatar>\n            <div>\n              <div className=\"text-xl font-semibold\">\n                {student.user?.firstName} {student.user?.lastName}\n              </div>\n              <div className=\"flex items-center space-x-2 mt-1\">\n                <Badge className={getStatusColor(student.status)}>\n                  {getStatusText(student.status)}\n                </Badge>\n                {student.studentId && (\n                  <span className=\"text-sm text-muted-foreground\">\n                    ID: {student.studentId}\n                  </span>\n                )}\n              </div>\n            </div>\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Informa√ß√µes Pessoais */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <i className=\"fas fa-user text-primary\"></i>\n                <span>Informa√ß√µes Pessoais</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Nome Completo</label>\n                  <p className=\"text-sm\">{student.user?.firstName} {student.user?.lastName}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Email</label>\n                  <p className=\"text-sm\">{student.user?.email || \"-\"}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">CPF</label>\n                  <p className=\"text-sm\">{student.cpf ? formatCPF(student.cpf) : \"-\"}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Data de Nascimento</label>\n                  <p className=\"text-sm\">{student.birthDate ? displayDateBR(student.birthDate) : \"-\"}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">G√™nero</label>\n                  <p className=\"text-sm\">{student.gender ? getGenderText(student.gender) : \"-\"}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Telefone</label>\n                  <p className=\"text-sm\">{student.phone ? formatPhone(student.phone) : \"-\"}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">WhatsApp</label>\n                  <p className=\"text-sm\">{student.whatsapp ? formatPhone(student.whatsapp) : \"-\"}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Data de Matr√≠cula</label>\n                  <p className=\"text-sm\">{student.enrollmentDate ? displayDateBR(student.enrollmentDate) : \"-\"}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Endere√ßo */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <i className=\"fas fa-map-marker-alt text-primary\"></i>\n                <span>Endere√ßo</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">CEP</label>\n                  <p className=\"text-sm\">{student.cep || \"-\"}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Endere√ßo</label>\n                  <p className=\"text-sm\">{student.address || \"-\"}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">N√∫mero</label>\n                  <p className=\"text-sm\">{student.number || \"-\"}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Complemento</label>\n                  <p className=\"text-sm\">{student.complement || \"-\"}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Bairro</label>\n                  <p className=\"text-sm\">{student.neighborhood || \"-\"}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Cidade</label>\n                  <p className=\"text-sm\">{student.city || \"-\"}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Estado</label>\n                  <p className=\"text-sm\">{student.state || \"-\"}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Respons√°vel/Guardian */}\n          {student.guardian && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-user-friends text-primary\"></i>\n                  <span>Respons√°vel</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">Nome Completo</label>\n                    <p className=\"text-sm\">{student.guardian.firstName} {student.guardian.lastName}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">Parentesco</label>\n                    <p className=\"text-sm\">{getRelationshipText(student.guardian.relationship)}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">CPF</label>\n                    <p className=\"text-sm\">{student.guardian.cpf ? formatCPF(student.guardian.cpf) : \"-\"}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">Data de Nascimento</label>\n                    <p className=\"text-sm\">{student.guardian.birthDate ? displayDateBR(student.guardian.birthDate) : \"-\"}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">G√™nero</label>\n                    <p className=\"text-sm\">{student.guardian.gender ? getGenderText(student.guardian.gender) : \"-\"}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">Telefone</label>\n                    <p className=\"text-sm\">{student.guardian.phone ? formatPhone(student.guardian.phone) : \"-\"}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">Email</label>\n                    <p className=\"text-sm\">{student.guardian.email || \"-\"}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">WhatsApp</label>\n                    <p className=\"text-sm\">{student.guardian.whatsapp ? formatPhone(student.guardian.whatsapp) : \"-\"}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Respons√°vel Financeiro */}\n          {student.guardian?.financialResponsible && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-credit-card text-primary\"></i>\n                  <span>Respons√°vel Financeiro</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">Nome Completo</label>\n                    <p className=\"text-sm\">{student.guardian.financialResponsible.firstName} {student.guardian.financialResponsible.lastName}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">CPF</label>\n                    <p className=\"text-sm\">{student.guardian.financialResponsible.cpf ? formatCPF(student.guardian.financialResponsible.cpf) : \"-\"}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">Data de Nascimento</label>\n                    <p className=\"text-sm\">{student.guardian.financialResponsible.birthDate ? displayDateBR(student.guardian.financialResponsible.birthDate) : \"-\"}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">G√™nero</label>\n                    <p className=\"text-sm\">{student.guardian.financialResponsible.gender ? getGenderText(student.guardian.financialResponsible.gender) : \"-\"}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">Telefone</label>\n                    <p className=\"text-sm\">{student.guardian.financialResponsible.phone ? formatPhone(student.guardian.financialResponsible.phone) : \"-\"}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">Email</label>\n                    <p className=\"text-sm\">{student.guardian.financialResponsible.email || \"-\"}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">WhatsApp</label>\n                    <p className=\"text-sm\">{student.guardian.financialResponsible.whatsapp ? formatPhone(student.guardian.financialResponsible.whatsapp) : \"-\"}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">Parentesco</label>\n                    <p className=\"text-sm\">{getRelationshipText(student.guardian.financialResponsible.relationship)}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Cursos e Matr√≠culas */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <i className=\"fas fa-book text-primary\"></i>\n                <span>Cursos e Matr√≠culas</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {student.enrollments && student.enrollments.length > 0 ? (\n                <div className=\"space-y-3\">\n                  {student.enrollments.map((enrollment: any, index: number) => (\n                    <div key={index} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                      <div>\n                        <p className=\"font-medium\">{enrollment.course?.name || \"Curso n√£o especificado\"}</p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          N√≠vel: {enrollment.course?.level || \"-\"}\n                        </p>\n                      </div>\n                      <Badge variant=\"outline\">\n                        {enrollment.status === 'active' ? 'Ativo' : enrollment.status}\n                      </Badge>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <p className=\"text-sm text-muted-foreground text-center py-4\">\n                  Nenhum curso matriculado\n                </p>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":14287},"backend/shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport { relations } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  boolean,\n  pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema, createSelectSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// ============================================================================\n// ENUMS\n// ============================================================================\n\n// User roles - 4 roles fixos do sistema\nexport const userRoleEnum = pgEnum('user_role', [\n  'admin',     // Administrativo - acesso total\n  'secretary', // Secret√°rio - acesso quase total\n  'teacher',   // Professor - acesso limitado focado em ensino\n  'student'    // Aluno - apenas √°rea do aluno\n]);\n\n// Gender enum - unificado para staff e students\nexport const genderEnum = pgEnum('gender', ['masculino', 'feminino', 'outro']);\n\n// Billing type enum\nexport const billingTypeEnum = pgEnum('billing_type', [\n  'mensalidade',\n  'trimestral',\n  'semestral',\n  'anual',\n  'avulso'\n]);\n\n// Support ticket enums\nexport const ticketPriorityEnum = pgEnum('ticket_priority', ['low', 'medium', 'high', 'urgent']);\nexport const ticketStatusEnum = pgEnum('ticket_status', ['open', 'in_progress', 'resolved', 'closed']);\n\n\n\n// ============================================================================\n// CORE TABLES\n// ============================================================================\n\n// Session storage table (mandatory for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// Users table - base para todos os usu√°rios do sistema\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").notNull().unique(),\n  password: varchar(\"password\"), // hashed password\n  firstName: varchar(\"first_name\").notNull(),\n  lastName: varchar(\"last_name\").notNull(),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  roleId: varchar(\"role_id\").references(() => roles.id).notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Roles table - 4 roles fixos do sistema\nexport const roles = pgTable(\"roles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  // Permite pap√©is din√¢micos: trocar enum por varchar\n  name: varchar(\"name\").notNull().unique(),\n  displayName: varchar(\"display_name\").notNull(),\n  description: text(\"description\"),\n  isSystemRole: boolean(\"is_system_role\").default(true).notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  isDeletable: boolean(\"is_deletable\").default(true).notNull(), // Controla se o cargo pode ser exclu√≠do\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Permission categories table\nexport const permissionCategories = pgTable(\"permission_categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull().unique(),\n  displayName: varchar(\"display_name\").notNull(),\n  description: text(\"description\"),\n  isSystemCategory: boolean(\"is_system_category\").default(false).notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Permissions table\nexport const permissions = pgTable(\"permissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull().unique(),\n  displayName: varchar(\"display_name\").notNull(),\n  description: text(\"description\"),\n  categoryId: varchar(\"category_id\").references(() => permissionCategories.id, { onDelete: 'cascade' }).notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Role permissions relationship\nexport const rolePermissions = pgTable(\"role_permissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  roleId: varchar(\"role_id\").references(() => roles.id, { onDelete: 'cascade' }).notNull(),\n  permissionId: varchar(\"permission_id\").references(() => permissions.id, { onDelete: 'cascade' }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n}, (table) => [\n  index(\"UQ_role_permission\").on(table.roleId, table.permissionId),\n]);\n\n// Tabela de p√°ginas do sistema para controle de acesso\nexport const pages = pgTable(\"pages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull().unique(), // ex: 'units', 'staff', 'students'\n  displayName: varchar(\"display_name\").notNull(), // ex: 'Unidades', 'Colaboradores', 'Alunos'\n  description: text(\"description\"),\n  route: varchar(\"route\").notNull(), // ex: '/units', '/staff', '/students'\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Tabela de permiss√µes de p√°ginas por cargo\nexport const rolePagePermissions = pgTable(\"role_page_permissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  roleId: varchar(\"role_id\").references(() => roles.id, { onDelete: 'cascade' }).notNull(),\n  pageId: varchar(\"page_id\").references(() => pages.id, { onDelete: 'cascade' }).notNull(),\n  canAccess: boolean(\"can_access\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n}, (table) => [\n  index(\"UQ_role_page_permission\").on(table.roleId, table.pageId),\n]);\n\n// User permissions table - override de permiss√µes por usu√°rio\nexport const userPermissions = pgTable(\"user_permissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  permissionId: varchar(\"permission_id\").references(() => permissions.id, { onDelete: 'cascade' }).notNull(),\n  isGranted: boolean(\"is_granted\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n}, (table) => [\n  index(\"UQ_user_permission\").on(table.userId, table.permissionId),\n]);\n\n// ============================================================================\n// ORGANIZATIONAL TABLES\n// ============================================================================\n\n// Units table - unidades/filiais\nexport const units = pgTable(\"units\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  address: text(\"address\"),\n  phone: varchar(\"phone\"),\n  email: varchar(\"email\"),\n  managerId: varchar(\"manager_id\").references(() => users.id),\n  \n  // Dados do Franqueado\n  franchiseeName: varchar(\"franchisee_name\"),\n  franchiseeCpf: varchar(\"franchisee_cpf\"),\n  franchiseeCpfDoc: varchar(\"franchisee_cpf_doc\"),\n  franchiseeRg: varchar(\"franchisee_rg\"),\n  franchiseeRgDoc: varchar(\"franchisee_rg_doc\"),\n  franchiseeResidenceAddress: text(\"franchisee_residence_address\"),\n  franchiseeResidenceDoc: varchar(\"franchisee_residence_doc\"),\n  franchiseeMaritalStatus: varchar(\"franchisee_marital_status\"),\n  franchiseeMaritalStatusDoc: varchar(\"franchisee_marital_status_doc\"),\n  franchiseeCurriculumDoc: varchar(\"franchisee_curriculum_doc\"),\n  franchiseeAssetsDoc: varchar(\"franchisee_assets_doc\"),\n  franchiseeIncomeDoc: varchar(\"franchisee_income_doc\"),\n  \n  // Dados PJ\n  franchiseeSocialContractDoc: varchar(\"franchisee_social_contract_doc\"),\n  franchiseeCnpj: varchar(\"franchisee_cnpj\"),\n  franchiseeCnpjDoc: varchar(\"franchisee_cnpj_doc\"),\n  franchiseeStateRegistration: varchar(\"franchisee_state_registration\"),\n  franchiseeStateRegistrationDoc: varchar(\"franchisee_state_registration_doc\"),\n  franchiseePartnersDocsDoc: varchar(\"franchisee_partners_docs_doc\"),\n  franchiseeCertificatesDoc: varchar(\"franchisee_certificates_doc\"),\n  \n  // Dados Financeiros\n  financialCapitalDoc: varchar(\"financial_capital_doc\"),\n  financialCashFlowDoc: varchar(\"financial_cash_flow_doc\"),\n  financialTaxReturnsDoc: varchar(\"financial_tax_returns_doc\"),\n  financialBankReferences: text(\"financial_bank_references\"),\n  financialBankReferencesDoc: varchar(\"financial_bank_references_doc\"),\n  \n  // Dados Imobili√°rios\n  realEstateLocation: text(\"real_estate_location\"),\n  realEstatePropertyDoc: varchar(\"real_estate_property_doc\"),\n  realEstateLeaseDoc: varchar(\"real_estate_lease_doc\"),\n  realEstateFloorPlanDoc: varchar(\"real_estate_floor_plan_doc\"),\n  \n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Staff table - funcion√°rios\nexport const staff = pgTable(\"staff\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  unitId: varchar(\"unit_id\").references(() => units.id),\n  \n  // Informa√ß√µes pessoais\n  cpf: varchar(\"cpf\", { length: 14 }),\n  birthDate: timestamp(\"birth_date\"),\n  gender: genderEnum(\"gender\"),\n  \n  // Contatos\n  phone: varchar(\"phone\"),\n  whatsapp: varchar(\"whatsapp\"),\n  \n  // Endere√ßo\n  cep: varchar(\"cep\", { length: 9 }),\n  address: text(\"address\"),\n  number: varchar(\"number\"),\n  complement: varchar(\"complement\"),\n  neighborhood: varchar(\"neighborhood\"),\n  city: varchar(\"city\"),\n  state: varchar(\"state\"),\n  \n  // Informa√ß√µes profissionais - position agora √© varchar livre\n  position: varchar(\"position\"), // ex: \"Professor de Ingl√™s\", \"Coordenador\", etc\n  department: varchar(\"department\"),\n  salary: integer(\"salary\"),\n  hireDate: timestamp(\"hire_date\"),\n  \n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Guardians table - respons√°veis legais\nexport const guardians = pgTable(\"guardians\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  \n  // Informa√ß√µes pessoais\n  firstName: varchar(\"first_name\").notNull(),\n  lastName: varchar(\"last_name\").notNull(),\n  cpf: varchar(\"cpf\", { length: 14 }),\n  birthDate: timestamp(\"birth_date\"),\n  gender: genderEnum(\"gender\"),\n  \n  // Contatos\n  email: varchar(\"email\"),\n  phone: varchar(\"phone\"),\n  whatsapp: varchar(\"whatsapp\"),\n  \n  // Endere√ßo\n  cep: varchar(\"cep\", { length: 9 }),\n  address: text(\"address\"),\n  number: varchar(\"number\"),\n  complement: varchar(\"complement\"),\n  neighborhood: varchar(\"neighborhood\"),\n  city: varchar(\"city\"),\n  state: varchar(\"state\"),\n  \n  // Rela√ß√£o com o aluno\n  relationship: varchar(\"relationship\"),\n  \n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Financial Responsibles table\nexport const financialResponsibles = pgTable(\"financial_responsibles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  guardianId: varchar(\"guardian_id\").references(() => guardians.id, { onDelete: 'cascade' }).notNull(),\n  \n  // Informa√ß√µes pessoais\n  firstName: varchar(\"first_name\").notNull(),\n  lastName: varchar(\"last_name\").notNull(),\n  cpf: varchar(\"cpf\", { length: 14 }),\n  birthDate: timestamp(\"birth_date\"),\n  gender: genderEnum(\"gender\"),\n  \n  // Contatos\n  email: varchar(\"email\"),\n  phone: varchar(\"phone\"),\n  whatsapp: varchar(\"whatsapp\"),\n  \n  // Endere√ßo\n  cep: varchar(\"cep\", { length: 9 }),\n  address: text(\"address\"),\n  number: varchar(\"number\"),\n  complement: varchar(\"complement\"),\n  neighborhood: varchar(\"neighborhood\"),\n  city: varchar(\"city\"),\n  state: varchar(\"state\"),\n  \n  // Rela√ß√£o com o respons√°vel legal\n  relationship: varchar(\"relationship\"),\n  \n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Students table\nexport const students = pgTable(\"students\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  studentId: varchar(\"student_id\").unique(),\n  unitId: varchar(\"unit_id\").references(() => units.id),\n  \n  // Informa√ß√µes pessoais\n  cpf: varchar(\"cpf\", { length: 14 }),\n  birthDate: timestamp(\"birth_date\"),\n  gender: genderEnum(\"gender\"),\n  \n  // Contatos\n  phone: varchar(\"phone\"),\n  whatsapp: varchar(\"whatsapp\"),\n  \n  // Endere√ßo\n  cep: varchar(\"cep\", { length: 9 }),\n  address: text(\"address\"),\n  number: varchar(\"number\"),\n  complement: varchar(\"complement\"),\n  neighborhood: varchar(\"neighborhood\"),\n  city: varchar(\"city\"),\n  state: varchar(\"state\"),\n  \n  // Informa√ß√µes de cobran√ßa\n  billingType: billingTypeEnum(\"billing_type\"),\n  \n  // Respons√°vel (se menor de idade)\n  guardianId: varchar(\"guardian_id\").references(() => guardians.id),\n  \n  enrollmentDate: timestamp(\"enrollment_date\"),\n  status: varchar(\"status\").default('active').notNull(),\n  emergencyContact: text(\"emergency_contact\"),\n  notes: text(\"notes\"),\n  \n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// ============================================================================\n// ACADEMIC TABLES\n// ============================================================================\n\n// Courses table\nexport const courses = pgTable(\"courses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  language: varchar(\"language\").notNull(),\n  level: varchar(\"level\").notNull(),\n  duration: integer(\"duration\"),\n  price: integer(\"price\"),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Books table - livros dentro de cada curso\nexport const books = pgTable(\"books\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  courseId: varchar(\"course_id\").references(() => courses.id, { onDelete: 'cascade' }).notNull(),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  pdfUrl: varchar(\"pdf_url\"),\n  color: varchar(\"color\").notNull().default('#3b82f6'),\n  displayOrder: integer(\"display_order\").default(1).notNull(),\n  totalDays: integer(\"total_days\").default(30).notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Classes table (turmas)\nexport const classes = pgTable(\"classes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  bookId: varchar(\"book_id\").references(() => books.id, { onDelete: 'cascade' }).notNull(),\n  teacherId: varchar(\"teacher_id\").references(() => users.id).notNull(),\n  unitId: varchar(\"unit_id\").references(() => units.id).notNull(),\n  name: varchar(\"name\").notNull(),\n  schedule: text(\"schedule\"),\n  dayOfWeek: integer(\"day_of_week\"),\n  startTime: varchar(\"start_time\"),\n  endTime: varchar(\"end_time\"),\n  room: varchar(\"room\"),\n  maxStudents: integer(\"max_students\").default(15).notNull(),\n  currentStudents: integer(\"current_students\").default(0).notNull(),\n  startDate: timestamp(\"start_date\"),\n  endDate: timestamp(\"end_date\"),\n  currentDay: integer(\"current_day\").default(1).notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Class enrollments\nexport const classEnrollments = pgTable(\"class_enrollments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  classId: varchar(\"class_id\").references(() => classes.id, { onDelete: 'cascade' }).notNull(),\n  studentId: varchar(\"student_id\").references(() => students.id, { onDelete: 'cascade' }).notNull(),\n  enrollmentDate: timestamp(\"enrollment_date\").defaultNow().notNull(),\n  status: varchar(\"status\").default('active').notNull(),\n  finalGrade: varchar(\"final_grade\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Lessons table\nexport const lessons = pgTable(\"lessons\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  classId: varchar(\"class_id\").references(() => classes.id, { onDelete: 'cascade' }).notNull(),\n  title: varchar(\"title\").notNull(),\n  bookDay: integer(\"book_day\").notNull(),\n  date: timestamp(\"date\").notNull(),\n  startTime: varchar(\"start_time\").notNull(),\n  endTime: varchar(\"end_time\").notNull(),\n  room: varchar(\"room\"),\n  status: varchar(\"status\").default('scheduled').notNull(),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Teacher Schedule table - Agenda individual de professores\nexport const teacherSchedule = pgTable(\"teacher_schedule\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  teacherId: varchar(\"teacher_id\").references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  unitId: varchar(\"unit_id\").references(() => units.id).notNull(),\n  courseName: varchar(\"course_name\").notNull(), // Nome do curso inserido manualmente\n  dayOfWeek: integer(\"day_of_week\").notNull(), // 1=Segunda, 2=Ter√ßa, etc.\n  startTime: varchar(\"start_time\").notNull(),\n  endTime: varchar(\"end_time\").notNull(),\n  room: varchar(\"room\"),\n  notes: text(\"notes\"),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n  createdBy: varchar(\"created_by\").references(() => users.id).notNull(), // Admin/Secret√°rio que criou\n});\n\n// Course Units table\nexport const courseUnits = pgTable(\"course_units\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  bookId: varchar(\"book_id\").references(() => books.id, { onDelete: 'cascade' }).notNull(),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  displayOrder: integer(\"display_order\").notNull(),\n  unitType: varchar(\"unit_type\").default('lesson').notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Course Videos table\nexport const courseVideos = pgTable(\"course_videos\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  unitId: varchar(\"unit_id\").references(() => courseUnits.id, { onDelete: 'cascade' }).notNull(),\n  dayNumber: integer(\"day_number\").notNull(),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  videoUrl: varchar(\"video_url\").notNull(),\n  thumbnailUrl: varchar(\"thumbnail_url\"),\n  duration: integer(\"duration\"),\n  hasSubtitles: boolean(\"has_subtitles\").default(false).notNull(),\n  subtitlesUrl: varchar(\"subtitles_url\"),\n  displayOrder: integer(\"display_order\").notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Course Activities table\nexport const courseActivities = pgTable(\"course_activities\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  videoId: varchar(\"video_id\").references(() => courseVideos.id, { onDelete: 'cascade' }).notNull(),\n  activityType: varchar(\"activity_type\").notNull(),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  instruction: text(\"instruction\"),\n  content: text(\"content\").notNull(),\n  correctAnswer: text(\"correct_answer\"),\n  points: integer(\"points\").default(10).notNull(),\n  displayOrder: integer(\"display_order\").notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Course Workbooks table\nexport const courseWorkbooks = pgTable(\"course_workbooks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  bookId: varchar(\"book_id\").references(() => books.id, { onDelete: 'cascade' }).notNull(),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  pdfUrl: varchar(\"pdf_url\"),\n  content: text(\"content\"),\n  displayOrder: integer(\"display_order\").notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Course Exams table\nexport const courseExams = pgTable(\"course_exams\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  bookId: varchar(\"book_id\").references(() => books.id, { onDelete: 'cascade' }).notNull(),\n  unitId: varchar(\"unit_id\").references(() => courseUnits.id),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  examType: varchar(\"exam_type\").notNull(),\n  content: text(\"content\").notNull(),\n  totalPoints: integer(\"total_points\").default(100).notNull(),\n  passingScore: integer(\"passing_score\").default(70).notNull(),\n  timeLimit: integer(\"time_limit\"),\n  displayOrder: integer(\"display_order\").notNull(),\n  requiresTeacherReview: boolean(\"requires_teacher_review\").default(false).notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Student Progress table\nexport const studentProgress = pgTable(\"student_progress\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").references(() => students.id, { onDelete: 'cascade' }).notNull(),\n  videoId: varchar(\"video_id\").references(() => courseVideos.id),\n  activityId: varchar(\"activity_id\").references(() => courseActivities.id),\n  examId: varchar(\"exam_id\").references(() => courseExams.id),\n  isCompleted: boolean(\"is_completed\").default(false).notNull(),\n  completedAt: timestamp(\"completed_at\"),\n  score: integer(\"score\"),\n  attempts: integer(\"attempts\").default(0).notNull(),\n  studentAnswer: text(\"student_answer\"),\n  teacherFeedback: text(\"teacher_feedback\"),\n  watchedDuration: integer(\"watched_duration\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Student Course Enrollments\nexport const studentCourseEnrollments = pgTable(\"student_course_enrollments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").references(() => students.id, { onDelete: 'cascade' }).notNull(),\n  courseId: varchar(\"course_id\").references(() => courses.id, { onDelete: 'cascade' }).notNull(),\n  enrollmentDate: timestamp(\"enrollment_date\").defaultNow().notNull(),\n  currentBookId: varchar(\"current_book_id\").references(() => books.id),\n  currentUnitId: varchar(\"current_unit_id\").references(() => courseUnits.id),\n  status: varchar(\"status\").default('active').notNull(),\n  overallProgress: integer(\"overall_progress\").default(0).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// ============================================================================\n// SUPPORT & SETTINGS TABLES\n// ============================================================================\n\n// User Settings table\nexport const userSettings = pgTable(\"user_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }).notNull().unique(),\n  theme: varchar(\"theme\").default('light').notNull(),\n  language: varchar(\"language\").default('pt-BR').notNull(),\n  timezone: varchar(\"timezone\").default('America/Sao_Paulo').notNull(),\n  dateFormat: varchar(\"date_format\").default('DD/MM/YYYY').notNull(),\n  currency: varchar(\"currency\").default('BRL').notNull(),\n  emailNotifications: boolean(\"email_notifications\").default(true).notNull(),\n  pushNotifications: boolean(\"push_notifications\").default(false).notNull(),\n  systemAlerts: boolean(\"system_alerts\").default(true).notNull(),\n  lessonReminders: boolean(\"lesson_reminders\").default(true).notNull(),\n  weeklyReports: boolean(\"weekly_reports\").default(false).notNull(),\n  autoSave: boolean(\"auto_save\").default(true).notNull(),\n  twoFactorEnabled: boolean(\"two_factor_enabled\").default(false).notNull(),\n  sessionTimeout: integer(\"session_timeout\").default(30).notNull(),\n  loginAlerts: boolean(\"login_alerts\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Support Tickets table\nexport const supportTickets = pgTable(\"support_tickets\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  category: varchar(\"category\").notNull(),\n  priority: ticketPriorityEnum(\"priority\").default('medium').notNull(),\n  status: ticketStatusEnum(\"status\").default('open').notNull(),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  assignedTo: varchar(\"assigned_to\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Support ticket responses table\nexport const supportTicketResponses = pgTable(\"support_ticket_responses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  ticketId: varchar(\"ticket_id\").references(() => supportTickets.id, { onDelete: 'cascade' }).notNull(),\n  message: text(\"message\").notNull(),\n  isFromSupport: boolean(\"is_from_support\").default(false).notNull(),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Franchise Units Registration table - simplificado\nexport const franchiseUnits = pgTable(\"franchise_units\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  entityType: varchar(\"entity_type\").notNull(),\n  \n  // Dados b√°sicos\n  fullName: text(\"full_name\"),\n  cpf: varchar(\"cpf\"),\n  cnpj: varchar(\"cnpj\"),\n  \n  // Documentos (JSON com URLs)\n  documents: text(\"documents\"), // JSON com todos os documentos\n  \n  // Status\n  status: varchar(\"status\").default('pending').notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// ============================================================================\n// RELATIONS\n// ============================================================================\n\nexport const usersRelations = relations(users, ({ one, many }) => ({\n  role: one(roles, {\n    fields: [users.roleId],\n    references: [roles.id],\n  }),\n  staff: one(staff, {\n    fields: [users.id],\n    references: [staff.userId],\n  }),\n  student: one(students, {\n    fields: [users.id],\n    references: [students.userId],\n  }),\n  userPermissions: many(userPermissions),\n  userSettings: one(userSettings, {\n    fields: [users.id],\n    references: [userSettings.userId],\n  }),\n}));\n\nexport const rolesRelations = relations(roles, ({ many }) => ({\n  users: many(users),\n  rolePermissions: many(rolePermissions),\n}));\n\nexport const permissionCategoriesRelations = relations(permissionCategories, ({ many }) => ({\n  permissions: many(permissions),\n}));\n\nexport const permissionsRelations = relations(permissions, ({ one, many }) => ({\n  category: one(permissionCategories, {\n    fields: [permissions.categoryId],\n    references: [permissionCategories.id],\n  }),\n  rolePermissions: many(rolePermissions),\n  userPermissions: many(userPermissions),\n}));\n\nexport const rolePermissionsRelations = relations(rolePermissions, ({ one }) => ({\n  role: one(roles, {\n    fields: [rolePermissions.roleId],\n    references: [roles.id],\n  }),\n  permission: one(permissions, {\n    fields: [rolePermissions.permissionId],\n    references: [permissions.id],\n  }),\n}));\n\nexport const userPermissionsRelations = relations(userPermissions, ({ one }) => ({\n  user: one(users, {\n    fields: [userPermissions.userId],\n    references: [users.id],\n  }),\n  permission: one(permissions, {\n    fields: [userPermissions.permissionId],\n    references: [permissions.id],\n  }),\n}));\n\nexport const staffRelations = relations(staff, ({ one }) => ({\n  user: one(users, {\n    fields: [staff.userId],\n    references: [users.id],\n  }),\n  unit: one(units, {\n    fields: [staff.unitId],\n    references: [units.id],\n  }),\n}));\n\nexport const studentsRelations = relations(students, ({ one, many }) => ({\n  user: one(users, {\n    fields: [students.userId],\n    references: [users.id],\n  }),\n  unit: one(units, {\n    fields: [students.unitId],\n    references: [units.id],\n  }),\n  guardian: one(guardians, {\n    fields: [students.guardianId],\n    references: [guardians.id],\n  }),\n  classEnrollments: many(classEnrollments),\n  courseEnrollments: many(studentCourseEnrollments),\n  progress: many(studentProgress),\n}));\n\nexport const guardiansRelations = relations(guardians, ({ one, many }) => ({\n  students: many(students),\n  financialResponsible: one(financialResponsibles, {\n    fields: [guardians.id],\n    references: [financialResponsibles.guardianId],\n  }),\n}));\n\nexport const financialResponsiblesRelations = relations(financialResponsibles, ({ one }) => ({\n  guardian: one(guardians, {\n    fields: [financialResponsibles.guardianId],\n    references: [guardians.id],\n  }),\n}));\n\nexport const coursesRelations = relations(courses, ({ many }) => ({\n  books: many(books),\n  studentEnrollments: many(studentCourseEnrollments),\n}));\n\nexport const booksRelations = relations(books, ({ one, many }) => ({\n  course: one(courses, {\n    fields: [books.courseId],\n    references: [courses.id],\n  }),\n  classes: many(classes),\n  units: many(courseUnits),\n  workbooks: many(courseWorkbooks),\n  exams: many(courseExams),\n}));\n\nexport const classesRelations = relations(classes, ({ one, many }) => ({\n  book: one(books, {\n    fields: [classes.bookId],\n    references: [books.id],\n  }),\n  teacher: one(users, {\n    fields: [classes.teacherId],\n    references: [users.id],\n  }),\n  unit: one(units, {\n    fields: [classes.unitId],\n    references: [units.id],\n  }),\n  enrollments: many(classEnrollments),\n  lessons: many(lessons),\n}));\n\nexport const classEnrollmentsRelations = relations(classEnrollments, ({ one }) => ({\n  class: one(classes, {\n    fields: [classEnrollments.classId],\n    references: [classes.id],\n  }),\n  student: one(students, {\n    fields: [classEnrollments.studentId],\n    references: [students.id],\n  }),\n}));\n\nexport const lessonsRelations = relations(lessons, ({ one }) => ({\n  class: one(classes, {\n    fields: [lessons.classId],\n    references: [classes.id],\n  }),\n}));\n\nexport const teacherScheduleRelations = relations(teacherSchedule, ({ one }) => ({\n  teacher: one(users, {\n    fields: [teacherSchedule.teacherId],\n    references: [users.id],\n  }),\n  unit: one(units, {\n    fields: [teacherSchedule.unitId],\n    references: [units.id],\n  }),\n  createdByUser: one(users, {\n    fields: [teacherSchedule.createdBy],\n    references: [users.id],\n  }),\n}));\n\nexport const courseUnitsRelations = relations(courseUnits, ({ one, many }) => ({\n  book: one(books, {\n    fields: [courseUnits.bookId],\n    references: [books.id],\n  }),\n  videos: many(courseVideos),\n  exams: many(courseExams),\n}));\n\nexport const courseVideosRelations = relations(courseVideos, ({ one, many }) => ({\n  unit: one(courseUnits, {\n    fields: [courseVideos.unitId],\n    references: [courseUnits.id],\n  }),\n  activities: many(courseActivities),\n  progress: many(studentProgress),\n}));\n\nexport const courseActivitiesRelations = relations(courseActivities, ({ one, many }) => ({\n  video: one(courseVideos, {\n    fields: [courseActivities.videoId],\n    references: [courseVideos.id],\n  }),\n  progress: many(studentProgress),\n}));\n\nexport const studentProgressRelations = relations(studentProgress, ({ one }) => ({\n  student: one(students, {\n    fields: [studentProgress.studentId],\n    references: [students.id],\n  }),\n  video: one(courseVideos, {\n    fields: [studentProgress.videoId],\n    references: [courseVideos.id],\n  }),\n  activity: one(courseActivities, {\n    fields: [studentProgress.activityId],\n    references: [courseActivities.id],\n  }),\n  exam: one(courseExams, {\n    fields: [studentProgress.examId],\n    references: [courseExams.id],\n  }),\n}));\n\nexport const studentCourseEnrollmentsRelations = relations(studentCourseEnrollments, ({ one }) => ({\n  student: one(students, {\n    fields: [studentCourseEnrollments.studentId],\n    references: [students.id],\n  }),\n  course: one(courses, {\n    fields: [studentCourseEnrollments.courseId],\n    references: [courses.id],\n  }),\n  currentBook: one(books, {\n    fields: [studentCourseEnrollments.currentBookId],\n    references: [books.id],\n  }),\n  currentUnit: one(courseUnits, {\n    fields: [studentCourseEnrollments.currentUnitId],\n    references: [courseUnits.id],\n  }),\n}));\n\n// ============================================================================\n// SCHEMAS\n// ============================================================================\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertRoleSchema = createInsertSchema(roles).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPermissionCategorySchema = createInsertSchema(permissionCategories).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPermissionSchema = createInsertSchema(permissions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertRolePermissionSchema = createInsertSchema(rolePermissions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserPermissionSchema = createInsertSchema(userPermissions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPageSchema = createInsertSchema(pages).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertRolePagePermissionSchema = createInsertSchema(rolePagePermissions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUnitSchema = createInsertSchema(units).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertStaffSchema = createInsertSchema(staff).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertGuardianSchema = createInsertSchema(guardians).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  // Permite que birthDate seja uma string ISO que ser√° convertida para Date\n  birthDate: z.string().datetime().optional().transform((val) => val ? new Date(val) : undefined),\n});\n\nexport const insertFinancialResponsibleSchema = createInsertSchema(financialResponsibles).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  // Permite que birthDate seja uma string ISO que ser√° convertida para Date\n  birthDate: z.string().datetime().optional().transform((val) => val ? new Date(val) : undefined),\n});\n\nexport const insertStudentSchema = createInsertSchema(students).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  // Permite que birthDate seja uma string ISO que ser√° convertida para Date\n  birthDate: z.string().datetime().optional().transform((val) => val ? new Date(val) : undefined),\n});\n\nexport const insertCourseSchema = createInsertSchema(courses).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertBookSchema = createInsertSchema(books).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertClassSchema = createInsertSchema(classes).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertClassEnrollmentSchema = createInsertSchema(classEnrollments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertLessonSchema = createInsertSchema(lessons).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCourseUnitSchema = createInsertSchema(courseUnits).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCourseVideoSchema = createInsertSchema(courseVideos).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCourseActivitySchema = createInsertSchema(courseActivities).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCourseWorkbookSchema = createInsertSchema(courseWorkbooks).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCourseExamSchema = createInsertSchema(courseExams).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertStudentProgressSchema = createInsertSchema(studentProgress).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertStudentCourseEnrollmentSchema = createInsertSchema(studentCourseEnrollments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTeacherScheduleSchema = createInsertSchema(teacherSchedule).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUserSettingsSchema = createInsertSchema(userSettings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSupportTicketSchema = createInsertSchema(supportTickets).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSupportTicketResponseSchema = createInsertSchema(supportTicketResponses).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertFranchiseUnitSchema = createInsertSchema(franchiseUnits).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// ============================================================================\n// TYPES\n// ============================================================================\n\n// Insert types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type InsertRole = z.infer<typeof insertRoleSchema>;\nexport type InsertPermissionCategory = z.infer<typeof insertPermissionCategorySchema>;\nexport type InsertPermission = z.infer<typeof insertPermissionSchema>;\nexport type InsertRolePermission = z.infer<typeof insertRolePermissionSchema>;\nexport type InsertUserPermission = z.infer<typeof insertUserPermissionSchema>;\nexport type InsertPage = z.infer<typeof insertPageSchema>;\nexport type InsertRolePagePermission = z.infer<typeof insertRolePagePermissionSchema>;\nexport type InsertUnit = z.infer<typeof insertUnitSchema>;\nexport type InsertStaff = z.infer<typeof insertStaffSchema>;\nexport type InsertGuardian = z.infer<typeof insertGuardianSchema>;\nexport type InsertFinancialResponsible = z.infer<typeof insertFinancialResponsibleSchema>;\nexport type InsertStudent = z.infer<typeof insertStudentSchema>;\nexport type InsertCourse = z.infer<typeof insertCourseSchema>;\nexport type InsertBook = z.infer<typeof insertBookSchema>;\nexport type InsertClass = z.infer<typeof insertClassSchema>;\nexport type InsertClassEnrollment = z.infer<typeof insertClassEnrollmentSchema>;\nexport type InsertLesson = z.infer<typeof insertLessonSchema>;\nexport type InsertCourseUnit = z.infer<typeof insertCourseUnitSchema>;\nexport type InsertCourseVideo = z.infer<typeof insertCourseVideoSchema>;\nexport type InsertCourseActivity = z.infer<typeof insertCourseActivitySchema>;\nexport type InsertCourseWorkbook = z.infer<typeof insertCourseWorkbookSchema>;\nexport type InsertCourseExam = z.infer<typeof insertCourseExamSchema>;\nexport type InsertStudentProgress = z.infer<typeof insertStudentProgressSchema>;\nexport type InsertStudentCourseEnrollment = z.infer<typeof insertStudentCourseEnrollmentSchema>;\nexport type InsertTeacherSchedule = z.infer<typeof insertTeacherScheduleSchema>;\nexport type InsertUserSettings = z.infer<typeof insertUserSettingsSchema>;\nexport type InsertSupportTicket = z.infer<typeof insertSupportTicketSchema>;\nexport type InsertSupportTicketResponse = z.infer<typeof insertSupportTicketResponseSchema>;\nexport type InsertFranchiseUnit = z.infer<typeof insertFranchiseUnitSchema>;\n\n// Select types\nexport type User = typeof users.$inferSelect;\nexport type Role = typeof roles.$inferSelect;\nexport type PermissionCategory = typeof permissionCategories.$inferSelect;\nexport type Permission = typeof permissions.$inferSelect;\nexport type RolePermission = typeof rolePermissions.$inferSelect;\nexport type UserPermission = typeof userPermissions.$inferSelect;\nexport type Page = typeof pages.$inferSelect;\nexport type RolePagePermission = typeof rolePagePermissions.$inferSelect;\nexport type Unit = typeof units.$inferSelect;\nexport type Staff = typeof staff.$inferSelect;\nexport type Guardian = typeof guardians.$inferSelect;\nexport type FinancialResponsible = typeof financialResponsibles.$inferSelect;\nexport type Student = typeof students.$inferSelect;\nexport type Course = typeof courses.$inferSelect;\nexport type Book = typeof books.$inferSelect;\nexport type Class = typeof classes.$inferSelect;\nexport type ClassEnrollment = typeof classEnrollments.$inferSelect;\nexport type Lesson = typeof lessons.$inferSelect;\nexport type CourseUnit = typeof courseUnits.$inferSelect;\nexport type CourseVideo = typeof courseVideos.$inferSelect;\nexport type CourseActivity = typeof courseActivities.$inferSelect;\nexport type CourseWorkbook = typeof courseWorkbooks.$inferSelect;\nexport type CourseExam = typeof courseExams.$inferSelect;\nexport type StudentProgress = typeof studentProgress.$inferSelect;\nexport type StudentCourseEnrollment = typeof studentCourseEnrollments.$inferSelect;\nexport type UserSettings = typeof userSettings.$inferSelect;\nexport type SupportTicket = typeof supportTickets.$inferSelect;\nexport type SupportTicketResponse = typeof supportTicketResponses.$inferSelect;\nexport type FranchiseUnit = typeof franchiseUnits.$inferSelect;\nexport type TeacherSchedule = typeof teacherSchedule.$inferSelect;\n\n// Extended types\nexport type UpsertUser = InsertUser & { id?: string };\n\nexport type StaffWithUser = Staff & {\n  user: User;\n  unit?: Unit;\n};\n\nexport type StudentWithUser = Student & {\n  user: User;\n  unit?: Unit;\n  guardian?: GuardianWithFinancial;\n};\n\nexport type ClassWithDetails = Class & {\n  book: Book & { course: Course };\n  teacher: User;\n  unit: Unit;\n  enrollments: (ClassEnrollment & { student: StudentWithUser })[];\n};\n\nexport type RoleWithPermissions = Role & {\n  rolePermissions: (RolePermission & { permission: Permission })[];\n};\n\nexport type UserWithPermissions = User & {\n  role: RoleWithPermissions;\n  userPermissions: (UserPermission & { permission: Permission })[];\n};\n\nexport type GuardianWithFinancial = Guardian & {\n  financialResponsible?: FinancialResponsible;\n};\n\nexport type PermissionsByCategory = Record<string, Permission[]>;\n\nexport type CourseWithDetails = Course & {\n  books: (Book & { classes: Class[] })[];\n};\n\nexport type CourseUnitWithVideos = CourseUnit & {\n  videos: (CourseVideo & {\n    activities: CourseActivity[];\n  })[];\n};\n\nexport type BookWithUnits = Book & {\n  course: Course;\n  units: CourseUnitWithVideos[];\n  workbooks: CourseWorkbook[];\n  exams: CourseExam[];\n};\n\nexport type StudentCourseEnrollmentWithDetails = StudentCourseEnrollment & {\n  course: Course & {\n    books: BookWithUnits[];\n  };\n  currentBook?: Book;\n  currentUnit?: CourseUnit;\n};\n\nexport type VideoWithProgress = CourseVideo & {\n  activities: CourseActivity[];\n  progress?: StudentProgress;\n};\n\nexport type SupportTicketWithResponses = SupportTicket & {\n  responses: SupportTicketResponse[];\n  user: User;\n  assignedUser?: User;\n};\n","size_bytes":44487},"frontend/vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"), // Usar schema local no frontend\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist\"),\n    emptyOutDir: true,\n    minify: false, // Desabilitar minifica√ß√£o temporariamente para debug\n    rollupOptions: {\n      external: [],\n      output: {\n        manualChunks: {\n          vendor: ['react', 'react-dom'],\n          zod: ['zod'],\n        }\n      }\n    }\n  },\n  server: {\n    host: \"0.0.0.0\",\n    port: 5051,\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n    proxy: {\n      '/api': {\n        target: 'http://localhost:5052',\n        changeOrigin: true,\n        secure: false,\n      }\n    }\n  },\n});\n","size_bytes":1079},"frontend/client/src/pages/Schedule.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { displayDateBR } from \"@/lib/cpfUtils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Layout from \"@/components/Layout\";\nimport LessonModal from \"@/components/LessonModal\";\nimport ClassModal from \"@/components/ClassModal\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { format, startOfWeek, addDays } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\n\ninterface ClassDetailModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  classData: any;\n}\n\nfunction ClassDetailModal({ isOpen, onClose, classData }: ClassDetailModalProps) {\n  if (!classData) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <div\n              className=\"w-4 h-4 rounded-full\"\n              style={{ backgroundColor: classData.bookColor }}\n            />\n            <span>{classData.title}</span>\n          </DialogTitle>\n        </DialogHeader>\n        <div className=\"space-y-6\">\n          {/* Informa√ß√µes da Turma */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label className=\"text-sm font-medium text-muted-foreground\">Professor</Label>\n              <p className=\"text-sm font-semibold\">{classData.teacher}</p>\n            </div>\n            <div>\n              <Label className=\"text-sm font-medium text-muted-foreground\">Hor√°rio</Label>\n              <p className=\"text-sm\">{classData.startTime} - {classData.endTime}</p>\n            </div>\n            <div>\n              <Label className=\"text-sm font-medium text-muted-foreground\">Sala</Label>\n              <p className=\"text-sm\">{classData.room}</p>\n            </div>\n            <div>\n              <Label className=\"text-sm font-medium text-muted-foreground\">Livro</Label>\n              <p className=\"text-sm\">{classData.book}</p>\n            </div>\n            <div>\n              <Label className=\"text-sm font-medium text-muted-foreground\">Progresso</Label>\n              <p className=\"text-sm\">Dia {classData.currentDay}/{classData.totalDays}</p>\n            </div>\n            <div>\n              <Label className=\"text-sm font-medium text-muted-foreground\">Alunos</Label>\n              <p className=\"text-sm\">{classData.studentsCount}/{classData.maxStudents}</p>\n            </div>\n          </div>\n\n          {/* Lista de Alunos */}\n          <div>\n            <Label className=\"text-sm font-medium text-muted-foreground mb-3 block\">Alunos Matriculados</Label>\n            <div className=\"grid grid-cols-2 gap-2 max-h-40 overflow-y-auto\">\n              {classData.students?.map((student: any, index: number) => (\n                <div key={index} className=\"flex items-center space-x-2 p-2 bg-muted rounded-lg\">\n                  <div className=\"w-6 h-6 bg-primary rounded-full flex items-center justify-center\">\n                    <span className=\"text-xs text-white font-medium\">\n                      {student.name.split(' ').map((n: string) => n[0]).join('').substring(0, 2)}\n                    </span>\n                  </div>\n                  <span className=\"text-sm\">{student.name}</span>\n                </div>\n              )) || [\n                  { name: 'Ana Silva' },\n                  { name: 'Jo√£o Santos' },\n                  { name: 'Maria Costa' },\n                  { name: 'Pedro Lima' },\n                  { name: 'Carla Oliveira' },\n                ].map((student, index) => (\n                  <div key={index} className=\"flex items-center space-x-2 p-2 bg-muted rounded-lg\">\n                    <div className=\"w-6 h-6 bg-primary rounded-full flex items-center justify-center\">\n                      <span className=\"text-xs text-white font-medium\">\n                        {student.name.split(' ').map((n: string) => n[0]).join('').substring(0, 2)}\n                      </span>\n                    </div>\n                    <span className=\"text-sm\">{student.name}</span>\n                  </div>\n                ))}\n            </div>\n          </div>\n\n          {/* A√ß√µes */}\n          <div className=\"flex justify-end space-x-2 pt-4 border-t\">\n            <Button variant=\"outline\" onClick={onClose}>\n              Fechar\n            </Button>\n            <Button>\n              Editar Turma\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nexport default function Schedule() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading: authLoading, user } = useAuth();\n  const [isLessonModalOpen, setIsLessonModalOpen] = useState(false);\n  const [editingLesson, setEditingLesson] = useState<any>(null);\n  const [isClassModalOpen, setIsClassModalOpen] = useState(false);\n  const [editingClass, setEditingClass] = useState<any>(null);\n  const [selectedTeacherFilter, setSelectedTeacherFilter] = useState<string>(\"all\");\n  const [selectedUnitFilter, setSelectedUnitFilter] = useState<string>(\"all\");\n  const [currentWeekStart, setCurrentWeekStart] = useState<Date>(startOfWeek(new Date(), { locale: ptBR }));\n  const [selectedClassDetail, setSelectedClassDetail] = useState<any>(null);\n  const [showClassDetail, setShowClassDetail] = useState(false);\n\n  // Fetch lessons based on user role\n  // const { data: lessons, isLoading } = useQuery<any[]>({\n  //   queryKey: user?.role === 'teacher'\n  //     ? [\"/api/lessons/teacher\", user.id]\n  //     : [\"/api/lessons\"],\n  //   retry: false,\n  //   enabled: isAuthenticated,\n  // });\n\n  // Fetch teachers for filter (only for admin/secretary)\n  // const { data: teachers = [] } = useQuery<any[]>({\n  //   queryKey: [\"/api/staff\"],\n  //   enabled: isAuthenticated && (user?.role === 'admin' || user?.role === 'secretary'),\n  //   retry: false,\n  // });\n\n  // Fetch units for filter\n  // const { data: units = [] } = useQuery<any[]>({\n  //   queryKey: [\"/api/units\"],\n  //   enabled: isAuthenticated && (user?.role === 'admin' || user?.role === 'secretary'),\n  //   retry: false,\n  // });\n\n  // Fetch admin schedule data (for administrative view)\n  // const { data: adminSchedule = [] } = useQuery<any[]>({\n  //   queryKey: [\"/api/schedule/admin\"],\n  //   enabled: isAuthenticated && (user?.role === 'admin' || user?.role === 'secretary'),\n  //   retry: false,\n  // });\n\n  // Fetch teacher schedule data\n  // const { data: teacherSchedule = [] } = useQuery<any[]>({\n  //   queryKey: [\"/api/schedule/teacher\", user?.id],\n  //   enabled: isAuthenticated && user?.role === 'teacher',\n  //   retry: false,\n  // });\n\n  const { data: todaysLessons } = useQuery<any[]>({\n    queryKey: [\"/api/lessons/today\"],\n    retry: false,\n    enabled: isAuthenticated,\n  });\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"NÔøΩo autorizado\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  if (authLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  const canManageSchedule = user?.role === 'admin' || user?.role === 'teacher' || user?.role === 'secretary';\n  const isAdminView = user?.role === 'admin' || user?.role === 'secretary';\n\n  const handleNewLesson = () => {\n    setEditingLesson(null);\n    setIsLessonModalOpen(true);\n  };\n\n  const handleEditLesson = (lesson: any) => {\n    setEditingLesson(lesson);\n    setIsLessonModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setIsLessonModalOpen(false);\n    setEditingLesson(null);\n  };\n\n  const handleNewClass = () => {\n    setEditingClass(null);\n    setIsClassModalOpen(true);\n  };\n\n  // const handleEditClass = (classItem: any) => {\n  //   setEditingClass(classItem);\n  //   setIsClassModalOpen(true);\n  // };\n\n  const handleCloseClassModal = () => {\n    setIsClassModalOpen(false);\n    setEditingClass(null);\n  };\n\n  const handleClassClick = (classItem: any) => {\n    setSelectedClassDetail(classItem);\n    setShowClassDetail(true);\n  };\n\n  const navigateWeek = (direction: 'prev' | 'next') => {\n    setCurrentWeekStart(prev => addDays(prev, direction === 'next' ? 7 : -7));\n  };\n\n  // Generate dynamic colors for courses\n  const generateCourseColors = (classes: any[]) => {\n    const uniqueCourses = [...new Set(classes.map(cls => cls.title))];\n    const colors = [\n      '#3b82f6', // Blue\n      '#10b981', // Green  \n      '#f59e0b', // Orange\n      '#8b5cf6', // Purple\n      '#ef4444', // Red\n      '#06b6d4', // Cyan\n      '#84cc16', // Lime\n      '#f97316', // Orange\n      '#ec4899', // Pink\n      '#6366f1', // Indigo\n      '#14b8a6', // Teal\n      '#eab308', // Yellow\n    ];\n\n    const courseColors: { [key: string]: string } = {};\n    uniqueCourses.forEach((course, index) => {\n      courseColors[course] = colors[index % colors.length];\n    });\n\n    return courseColors;\n  };\n\n  // Mock data will be defined within each render function to avoid scope issues\n\n  const renderAdminCalendarView = () => {\n    const weekDays = Array.from({ length: 7 }, (_, i) => addDays(currentWeekStart, i));\n    const timeSlots = Array.from({ length: 14 }, (_, i) => `${8 + i}:00`); // 8:00 to 21:00\n\n    // Dados de agenda administrativa (turmas regulares)\n    const mockAdminSchedule = [\n      {\n        id: '1',\n        title: 'Ingl√™s A1 - Manh√£',\n        teacher: 'Prof. Jo√£o Silva',\n        teacherId: 'user-1',\n        book: 'English Basic - Book 1',\n        dayOfWeek: 1, // Segunda\n        startTime: '09:00',\n        endTime: '11:00',\n        room: 'Sala 101',\n        currentDay: 5,\n        totalDays: 30,\n        studentsCount: 12,\n        maxStudents: 15,\n        unitId: '1'\n      },\n      {\n        id: '2',\n        title: 'Ingl√™s A2 - Tarde',\n        teacher: 'Prof. Jo√£o Silva',\n        teacherId: 'user-1',\n        book: 'English Basic - Book 2',\n        dayOfWeek: 1, // Segunda\n        startTime: '14:00',\n        endTime: '16:00',\n        room: 'Sala 102',\n        currentDay: 8,\n        totalDays: 35,\n        studentsCount: 10,\n        maxStudents: 15,\n        unitId: '1'\n      },\n      {\n        id: '3',\n        title: 'Ingl√™s B1 - Noite',\n        teacher: 'Prof. Maria Santos',\n        teacherId: 'user-2',\n        book: 'English Intermediate - Book 1',\n        dayOfWeek: 1, // Segunda\n        startTime: '19:00',\n        endTime: '21:00',\n        room: 'Sala 103',\n        currentDay: 3,\n        totalDays: 40,\n        studentsCount: 8,\n        maxStudents: 12,\n        unitId: '1'\n      },\n      {\n        id: '4',\n        title: 'Espanhol A1',\n        teacher: 'Prof. Maria Santos',\n        teacherId: 'user-2',\n        book: 'Espa√±ol B√°sico - Libro 1',\n        dayOfWeek: 2, // Ter√ßa\n        startTime: '18:00',\n        endTime: '20:00',\n        room: 'Sala 201',\n        currentDay: 4,\n        totalDays: 25,\n        studentsCount: 9,\n        maxStudents: 12,\n        unitId: '1'\n      },\n      {\n        id: '5',\n        title: 'Ingl√™s B2 - Manh√£',\n        teacher: 'Prof. Ana Costa',\n        teacherId: 'user-7',\n        book: 'English Intermediate - Book 2',\n        dayOfWeek: 2, // Ter√ßa\n        startTime: '10:00',\n        endTime: '12:00',\n        room: 'Sala 104',\n        currentDay: 12,\n        totalDays: 42,\n        studentsCount: 13,\n        maxStudents: 15,\n        unitId: '1'\n      },\n      {\n        id: '6',\n        title: 'Ingl√™s A3 - Tarde',\n        teacher: 'Prof. Ana Costa',\n        teacherId: 'user-7',\n        book: 'English Basic - Book 3',\n        dayOfWeek: 3, // Quarta\n        startTime: '15:00',\n        endTime: '17:00',\n        room: 'Sala 105',\n        currentDay: 18,\n        totalDays: 40,\n        studentsCount: 11,\n        maxStudents: 15,\n        unitId: '1'\n      },\n      {\n        id: '7',\n        title: 'Ingl√™s Avan√ßado',\n        teacher: 'Prof. Felipe Rodrigues',\n        teacherId: 'user-8',\n        book: 'English Advanced - Book 1',\n        dayOfWeek: 4, // Quinta\n        startTime: '19:00',\n        endTime: '21:00',\n        room: 'Sala 301',\n        currentDay: 22,\n        totalDays: 45,\n        studentsCount: 7,\n        maxStudents: 10,\n        unitId: '2'\n      },\n      {\n        id: '8',\n        title: 'Espanhol A2',\n        teacher: 'Prof. Patricia Lima',\n        teacherId: 'user-9',\n        book: 'Espa√±ol B√°sico - Libro 2',\n        dayOfWeek: 5, // Sexta\n        startTime: '16:00',\n        endTime: '18:00',\n        room: 'Sala 202',\n        currentDay: 15,\n        totalDays: 28,\n        studentsCount: 10,\n        maxStudents: 12,\n        unitId: '1'\n      },\n      // Aulas sobrepostas no mesmo hor√°rio para demonstrar\n      {\n        id: '9',\n        title: 'Ingl√™s A1 - Tarde',\n        teacher: 'Prof. Patricia Lima',\n        teacherId: 'user-9',\n        book: 'English Basic - Book 1',\n        dayOfWeek: 2, // Ter√ßa\n        startTime: '14:00',\n        endTime: '16:00',\n        room: 'Sala 203',\n        currentDay: 7,\n        totalDays: 30,\n        studentsCount: 14,\n        maxStudents: 15,\n        unitId: '1'\n      }\n    ];\n\n    // Filter classes by selected teacher and unit\n    const filteredClasses = mockAdminSchedule.filter(classItem => {\n      if (selectedTeacherFilter !== 'all' && classItem.teacherId !== selectedTeacherFilter) return false;\n      if (selectedUnitFilter !== 'all' && classItem.unitId !== selectedUnitFilter) return false;\n      return true;\n    });\n\n    // Generate colors for admin schedule\n    const adminCourseColors = generateCourseColors(mockAdminSchedule);\n\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center gap-3\">\n            <div className=\"flex items-center gap-2\">\n              <Button variant=\"outline\" size=\"sm\" onClick={() => navigateWeek('prev')}>\n                ‚Üê Anterior\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" onClick={() => navigateWeek('next')}>\n                Pr√≥xima ‚Üí\n              </Button>\n            </div>\n            <h3 className=\"text-lg font-semibold text-center sm:text-left\">\n              {format(currentWeekStart, \"dd MMM\", { locale: ptBR })} - {format(addDays(currentWeekStart, 6), \"dd MMM yyyy\", { locale: ptBR })}\n            </h3>\n          </div>\n\n          <div className=\"flex flex-col sm:flex-row gap-3\">\n            <Select value={selectedUnitFilter} onValueChange={setSelectedUnitFilter}>\n              <SelectTrigger className=\"w-full sm:w-48\">\n                <SelectValue placeholder=\"Filtrar por unidade\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Todas as unidades</SelectItem>\n                <SelectItem value=\"1\">Unidade Centro</SelectItem>\n                <SelectItem value=\"2\">Unidade Vila Nova</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={selectedTeacherFilter} onValueChange={setSelectedTeacherFilter}>\n              <SelectTrigger className=\"w-full sm:w-48\">\n                <SelectValue placeholder=\"Filtrar por professor\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Todos os professores</SelectItem>\n                <SelectItem value=\"user-1\">Jo√£o Silva</SelectItem>\n                <SelectItem value=\"user-2\">Maria Santos</SelectItem>\n                <SelectItem value=\"user-7\">Ana Costa</SelectItem>\n                <SelectItem value=\"user-8\">Felipe Rodrigues</SelectItem>\n                <SelectItem value=\"user-9\">Patricia Lima</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        <div className=\"overflow-x-auto bg-card rounded-lg border shadow-sm\">\n          <div className=\"grid grid-cols-8 gap-0 min-w-[1200px]\">\n            {/* Header row */}\n            <div className=\"p-2 font-medium text-center bg-muted border-b border-r border-border text-xs sm:text-sm\">Hor√°rio</div>\n            {weekDays.map((day) => (\n              <div key={day.toISOString()} className=\"p-2 font-medium text-center bg-muted border-b border-r border-border text-xs sm:text-sm\">\n                <div className=\"font-semibold\">{format(day, \"EEE\", { locale: ptBR })}</div>\n                <div className=\"text-xs text-muted-foreground mt-1\">\n                  {format(day, \"dd/MM\", { locale: ptBR })}\n                </div>\n              </div>\n            ))}\n\n            {/* Time slots */}\n            {timeSlots.map((timeSlot) => {\n              const [hour] = timeSlot.split(':');\n              return (\n                <>\n                  {/* Time label */}\n                  <div key={`time-${timeSlot}`} className=\"p-2 text-xs font-medium text-center bg-muted border-b border-r border-border text-muted-foreground min-w-[80px]\">\n                    {timeSlot}\n                  </div>\n\n                  {/* Day cells */}\n                  {weekDays.map((day) => {\n                    const dayClasses = filteredClasses.filter(classItem => {\n                      if (classItem.dayOfWeek !== day.getDay()) return false;\n                      const classHour = parseInt(classItem.startTime.split(':')[0]);\n                      return classHour === parseInt(hour);\n                    });\n\n                    return (\n                      <div key={`${day.toISOString()}-${timeSlot}`} className=\"min-h-[60px] sm:min-h-[80px] p-1 border-b border-r border-border relative min-w-[140px]\">\n                        <div className=\"space-y-1\">\n                          {dayClasses.map((classItem) => (\n                            <div\n                              key={classItem.id}\n                              className=\"p-2 rounded-lg text-xs cursor-pointer transition-all hover:shadow-md border border-opacity-30 h-full flex items-center justify-center\"\n                              style={{\n                                backgroundColor: adminCourseColors[classItem.title] + '20',\n                                borderColor: adminCourseColors[classItem.title],\n                                color: 'var(--foreground)'\n                              }}\n                              onClick={() => handleClassClick({\n                                ...classItem,\n                                bookColor: adminCourseColors[classItem.title]\n                              })}\n                              data-testid={`admin-class-${classItem.id}`}\n                            >\n                              <div className=\"font-semibold text-center leading-tight text-xs\">{classItem.title}</div>\n                            </div>\n                          ))}\n                        </div>\n\n                        {/* Add class button for empty slots or when admin */}\n                        {dayClasses.length === 0 && isAdminView && (\n                          <div\n                            className=\"absolute inset-0 flex items-center justify-center opacity-0 hover:opacity-100 transition-opacity cursor-pointer bg-muted bg-opacity-50\"\n                            onClick={() => handleNewClass()}\n                          >\n                            <Button size=\"sm\" variant=\"outline\" className=\"text-xs\">\n                              + Adicionar\n                            </Button>\n                          </div>\n                        )}\n                      </div>\n                    );\n                  })}\n                </>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Legend */}\n        <div className=\"bg-muted p-4 rounded-lg\">\n          <h4 className=\"font-medium mb-3\">Legenda dos Cursos</h4>\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-3\">\n            {Object.entries(adminCourseColors).map(([courseName, color]) => (\n              <div key={courseName} className=\"flex items-center space-x-2\">\n                <div className=\"w-4 h-4 rounded-full flex-shrink-0\" style={{ backgroundColor: color }}></div>\n                <span className=\"text-sm truncate\">{courseName}</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderTeacherCalendarView = () => {\n    const weekDays = Array.from({ length: 7 }, (_, i) => addDays(currentWeekStart, i));\n    const timeSlots = Array.from({ length: 14 }, (_, i) => `${8 + i}:00`);\n\n    // Dados espec√≠ficos do professor\n    const mockTeacherSchedule = [\n      {\n        id: '1',\n        title: 'Ingl√™s A1 - Manh√£',\n        book: 'English Basic - Book 1',\n        dayOfWeek: 1, // Segunda\n        startTime: '09:00',\n        endTime: '11:00',\n        room: 'Sala 101',\n        currentDay: 5,\n        totalDays: 30,\n        studentsCount: 12,\n        maxStudents: 15\n      },\n      {\n        id: '2',\n        title: 'Ingl√™s A2 - Tarde',\n        book: 'English Basic - Book 2',\n        dayOfWeek: 1, // Segunda\n        startTime: '14:00',\n        endTime: '16:00',\n        room: 'Sala 102',\n        currentDay: 8,\n        totalDays: 35,\n        studentsCount: 10,\n        maxStudents: 15\n      },\n      {\n        id: '3',\n        title: 'Ingl√™s A1 - Manh√£',\n        book: 'English Basic - Book 1',\n        dayOfWeek: 3, // Quarta\n        startTime: '09:00',\n        endTime: '11:00',\n        room: 'Sala 101',\n        currentDay: 6,\n        totalDays: 30,\n        studentsCount: 12,\n        maxStudents: 15\n      },\n      {\n        id: '4',\n        title: 'Ingl√™s A2 - Tarde',\n        book: 'English Basic - Book 2',\n        dayOfWeek: 3, // Quarta\n        startTime: '14:00',\n        endTime: '16:00',\n        room: 'Sala 102',\n        currentDay: 9,\n        totalDays: 35,\n        studentsCount: 10,\n        maxStudents: 15\n      }\n    ];\n\n    // Generate colors for teacher schedule\n    const teacherCourseColors = generateCourseColors(mockTeacherSchedule);\n\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center gap-3\">\n            <div className=\"flex items-center gap-2\">\n              <Button variant=\"outline\" size=\"sm\" onClick={() => navigateWeek('prev')}>\n                ‚Üê Anterior\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" onClick={() => navigateWeek('next')}>\n                Pr√≥xima ‚Üí\n              </Button>\n            </div>\n            <h3 className=\"text-lg font-semibold text-center sm:text-left\">\n              {format(currentWeekStart, \"dd MMM\", { locale: ptBR })} - {format(addDays(currentWeekStart, 6), \"dd MMM yyyy\", { locale: ptBR })}\n            </h3>\n          </div>\n        </div>\n\n        <div className=\"overflow-x-auto bg-card rounded-lg border shadow-sm\">\n          <div className=\"grid grid-cols-8 gap-0 min-w-[1200px]\">\n            {/* Header */}\n            <div className=\"p-2 font-medium text-center bg-muted border-b border-r border-border text-xs sm:text-sm\">Hor√°rio</div>\n            {weekDays.map((day) => (\n              <div key={day.toISOString()} className=\"p-2 font-medium text-center bg-muted border-b border-r border-border text-xs sm:text-sm\">\n                <div className=\"font-semibold\">{format(day, \"EEE\", { locale: ptBR })}</div>\n                <div className=\"text-xs text-muted-foreground mt-1\">\n                  {format(day, \"dd/MM\", { locale: ptBR })}\n                </div>\n              </div>\n            ))}\n\n            {/* Time slots */}\n            {timeSlots.map((timeSlot) => {\n              const [hour] = timeSlot.split(':');\n              return (\n                <>\n                  <div key={`time-${timeSlot}`} className=\"p-2 text-xs font-medium text-center bg-muted border-b border-r border-border text-muted-foreground min-w-[80px]\">\n                    {timeSlot}\n                  </div>\n\n                  {weekDays.map((day) => {\n                    const dayClasses = mockTeacherSchedule.filter(classItem => {\n                      if (classItem.dayOfWeek !== day.getDay()) return false;\n                      const classHour = parseInt(classItem.startTime.split(':')[0]);\n                      return classHour === parseInt(hour);\n                    });\n\n                    return (\n                      <div key={`${day.toISOString()}-${timeSlot}`} className=\"min-h-[60px] sm:min-h-[80px] p-1 border-b border-r border-border relative min-w-[140px]\">\n                        {dayClasses.map((classItem) => (\n                          <div\n                            key={classItem.id}\n                            className=\"p-2 rounded-lg text-xs cursor-pointer transition-all hover:shadow-md border border-opacity-30 h-full flex items-center justify-center\"\n                            style={{\n                              backgroundColor: teacherCourseColors[classItem.title] + '20',\n                              borderColor: teacherCourseColors[classItem.title],\n                              color: 'var(--foreground)'\n                            }}\n                            onClick={() => handleClassClick({\n                              ...classItem,\n                              bookColor: teacherCourseColors[classItem.title],\n                              teacher: 'Prof. Ivan Silva'\n                            })}\n                            data-testid={`teacher-class-${classItem.id}`}\n                          >\n                            <div className=\"font-semibold text-center leading-tight text-xs\">{classItem.title}</div>\n                          </div>\n                        ))}\n                      </div>\n                    );\n                  })}\n                </>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Legenda de cores dos cursos */}\n        <div className=\"bg-muted p-4 rounded-lg\">\n          <h4 className=\"font-medium mb-3\">Legenda dos Cursos</h4>\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-3\">\n            {Object.entries(teacherCourseColors).map(([courseName, color]) => (\n              <div key={courseName} className=\"flex items-center space-x-2\">\n                <div className=\"w-4 h-4 rounded-full flex-shrink-0\" style={{ backgroundColor: color }}></div>\n                <span className=\"text-sm truncate\">{courseName}</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <Layout>\n      <div className=\"p-6 space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-semibold text-foreground\">Agenda</h2>\n            <p className=\"text-sm text-muted-foreground\">\n              {user?.role === 'teacher'\n                ? \"Gerencie sua agenda de aulas\"\n                : \"Visualize e gerencie a agenda da escola\"}\n            </p>\n          </div>\n\n          {canManageSchedule && (\n            <div className=\"flex items-center space-x-2\">\n              <Button onClick={handleNewLesson} data-testid=\"button-new-lesson\">\n                <i className=\"fas fa-plus mr-2\"></i>\n                Nova Aula\n              </Button>\n              {isAdminView && (\n                <Button onClick={handleNewClass} data-testid=\"button-new-class\">\n                  <i className=\"fas fa-users mr-2\"></i>\n                  Nova Turma\n                </Button>\n              )}\n            </div>\n          )}\n        </div>\n\n        <Tabs defaultValue={isAdminView ? \"admin\" : \"teacher\"} className=\"space-y-6\">\n          <TabsList>\n            <TabsTrigger value=\"today\">Hoje</TabsTrigger>\n            {isAdminView && <TabsTrigger value=\"admin\">Agenda Administrativa</TabsTrigger>}\n            {user?.role === 'teacher' && <TabsTrigger value=\"teacher\">Minhas Aulas</TabsTrigger>}\n          </TabsList>\n\n          <TabsContent value=\"today\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-calendar-day text-primary\"></i>\n                  <span>Aulas de Hoje</span>\n                  <Badge variant=\"secondary\">\n                    {format(new Date(), \"EEEE, dd 'de' MMMM 'de' yyyy\", { locale: ptBR })}\n                  </Badge>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {!todaysLessons || todaysLessons.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <i className=\"fas fa-calendar-times text-muted-foreground text-4xl mb-4\"></i>\n                    <h3 className=\"text-lg font-semibold text-foreground mb-2\">Nenhuma aula agendada</h3>\n                    <p className=\"text-muted-foreground mb-4\">\n                      N√£o h√° aulas programadas para hoje.\n                    </p>\n                    {canManageSchedule && (\n                      <Button onClick={handleNewLesson} data-testid=\"button-schedule-first-lesson\">\n                        <i className=\"fas fa-plus mr-2\"></i>\n                        Agendar primeira aula\n                      </Button>\n                    )}\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\" data-testid=\"todays-lessons\">\n                    {todaysLessons.map((lesson: any) => (\n                      <div key={lesson.id} className=\"flex items-center space-x-4 p-4 rounded-lg bg-muted/50 border border-border/50 card-hover transition-smooth\">\n                        <div className=\"w-12 h-12 bg-primary rounded-lg flex items-center justify-center flex-shrink-0\">\n                          <i className=\"fas fa-clock text-primary-foreground\"></i>\n                        </div>\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium text-foreground\">{lesson.title}</h4>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {lesson.startTime} - {lesson.endTime}\n                            {lesson.room && ` ‚Ä¢ Sala ${lesson.room}`}\n                          </p>\n                          {lesson.notes && (\n                            <p className=\"text-xs text-muted-foreground mt-1\">{lesson.notes}</p>\n                          )}\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          {canManageSchedule && (\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleEditLesson(lesson)}\n                              data-testid={`button-edit-lesson-${lesson.id}`}\n                            >\n                              <i className=\"fas fa-edit mr-2\"></i>\n                              Editar\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {isAdminView && (\n            <TabsContent value=\"admin\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <i className=\"fas fa-users-cog text-primary\"></i>\n                    <span>Agenda Administrativa</span>\n                    <Badge variant=\"secondary\">\n                      Todas as turmas e professores\n                    </Badge>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {renderAdminCalendarView()}\n                </CardContent>\n              </Card>\n            </TabsContent>\n          )}\n\n          {user?.role === 'teacher' && (\n            <TabsContent value=\"teacher\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <i className=\"fas fa-chalkboard-teacher text-primary\"></i>\n                    <span>Minhas Aulas</span>\n                    <Badge variant=\"secondary\">\n                      Prof. Ivan Silva\n                    </Badge>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {renderTeacherCalendarView()}\n                </CardContent>\n              </Card>\n            </TabsContent>\n          )}\n        </Tabs>\n      </div>\n\n      {/* Lesson Modal */}\n      <LessonModal\n        isOpen={isLessonModalOpen}\n        onClose={handleCloseModal}\n        lessonToEdit={editingLesson}\n      />\n\n      {/* Class Modal */}\n      <ClassModal\n        isOpen={isClassModalOpen}\n        onClose={handleCloseClassModal}\n        classToEdit={editingClass}\n      />\n\n      {/* Class Detail Modal */}\n      <ClassDetailModal\n        isOpen={showClassDetail}\n        onClose={() => setShowClassDetail(false)}\n        classData={selectedClassDetail}\n      />\n    </Layout>\n  );\n}\n","size_bytes":33994}},"version":2}